#
# Copyright (c) 2023-present, Trail of Bits, Inc.
# All rights reserved.
#
# This source code is licensed in accordance with the terms specified in
# the LICENSE file found in the root directory of this source tree.
#

# Auto-generated file; do not modify!

from abc import ABC
from enum import IntEnum
from typing import Generator, Iterable, Mapping, Optional, overload, Sequence, Tuple
import pathlib
import multiplier
import multiplier.ir
import multiplier.ast
import multiplier.ir.abi
import multiplier.ir.llvm
import multiplier.ir.core
import multiplier.ir.meta
import multiplier.frontend
import multiplier.ir.memref
import multiplier.ir.builtin
import multiplier.ir.lowlevel
import multiplier.ir.highlevel
import multiplier.ir.unsupported

class DeclKind(IntEnum):
  ACCESS_SPEC = 0
  BINDING = 1
  BLOCK = 2
  BUILTIN_TEMPLATE = 3
  CXX_CONSTRUCTOR = 4
  CXX_CONVERSION = 5
  CXX_DEDUCTION_GUIDE = 6
  CXX_DESTRUCTOR = 7
  CXX_METHOD = 8
  CXX_RECORD = 9
  CAPTURED = 10
  CLASS_SCOPE_FUNCTION_SPECIALIZATION = 11
  CLASS_TEMPLATE = 12
  CLASS_TEMPLATE_PARTIAL_SPECIALIZATION = 13
  CLASS_TEMPLATE_SPECIALIZATION = 14
  CONCEPT = 15
  CONSTRUCTOR_USING_SHADOW = 16
  DECOMPOSITION = 17
  EMPTY = 18
  ENUM_CONSTANT = 19
  ENUM = 20
  EXPORT = 21
  EXTERN_C_CONTEXT = 22
  FIELD = 23
  FILE_SCOPE_ASM = 24
  FRIEND = 25
  FRIEND_TEMPLATE = 26
  FUNCTION = 27
  FUNCTION_TEMPLATE = 28
  HLSL_BUFFER = 29
  IMPLICIT_CONCEPT_SPECIALIZATION = 30
  IMPLICIT_PARAM = 31
  IMPORT = 32
  INDIRECT_FIELD = 33
  LABEL = 34
  LIFETIME_EXTENDED_TEMPORARY = 35
  LINKAGE_SPEC = 36
  MS_GUID = 37
  MS_PROPERTY = 38
  NAMESPACE_ALIAS = 39
  NAMESPACE = 40
  NON_TYPE_TEMPLATE_PARM = 41
  OMP_ALLOCATE = 42
  OMP_CAPTURED_EXPR = 43
  OMP_DECLARE_MAPPER = 44
  OMP_DECLARE_REDUCTION = 45
  OMP_REQUIRES = 46
  OMP_THREAD_PRIVATE = 47
  OBJ_C_AT_DEFS_FIELD = 48
  OBJ_C_CATEGORY = 49
  OBJ_C_CATEGORY_IMPL = 50
  OBJ_C_COMPATIBLE_ALIAS = 51
  OBJ_C_IMPLEMENTATION = 52
  OBJ_C_INTERFACE = 53
  OBJ_C_IVAR = 54
  OBJ_C_METHOD = 55
  OBJ_C_PROPERTY = 56
  OBJ_C_PROPERTY_IMPL = 57
  OBJ_C_PROTOCOL = 58
  OBJ_C_TYPE_PARAM = 59
  PARM_VAR = 60
  PRAGMA_COMMENT = 61
  PRAGMA_DETECT_MISMATCH = 62
  RECORD = 63
  REQUIRES_EXPR_BODY = 64
  STATIC_ASSERT = 65
  TEMPLATE_PARAM_OBJECT = 66
  TEMPLATE_TEMPLATE_PARM = 67
  TEMPLATE_TYPE_PARM = 68
  TOP_LEVEL_STMT = 69
  TRANSLATION_UNIT = 70
  TYPE_ALIAS = 71
  TYPE_ALIAS_TEMPLATE = 72
  TYPEDEF = 73
  UNNAMED_GLOBAL_CONSTANT = 74
  UNRESOLVED_USING_IF_EXISTS = 75
  UNRESOLVED_USING_TYPENAME = 76
  UNRESOLVED_USING_VALUE = 77
  USING = 78
  USING_DIRECTIVE = 79
  USING_ENUM = 80
  USING_PACK = 81
  USING_SHADOW = 82
  VAR = 83
  VAR_TEMPLATE = 84
  VAR_TEMPLATE_PARTIAL_SPECIALIZATION = 85
  VAR_TEMPLATE_SPECIALIZATION = 86

class AttrKind(IntEnum):
  A_ARCH64_SVE_PCS = 0
  A_ARCH64_VECTOR_PCS = 1
  AMDGPU_FLAT_WORK_GROUP_SIZE = 2
  AMDGPU_KERNEL_CALL = 3
  AMDGPU_NUM_SGPR = 4
  AMDGPU_NUM_VGPR = 5
  AMDGPU_WAVES_PER_EU = 6
  ARM_INTERRUPT = 7
  AVR_INTERRUPT = 8
  AVR_SIGNAL = 9
  ABI_TAG = 10
  ACQUIRE_CAPABILITY = 11
  ACQUIRE_HANDLE = 12
  ACQUIRED_AFTER = 13
  ACQUIRED_BEFORE = 14
  ADDRESS_SPACE = 15
  ALIAS = 16
  ALIGN_MAC68K = 17
  ALIGN_NATURAL = 18
  ALIGN_VALUE = 19
  ALIGNED = 20
  ALLOC_ALIGN = 21
  ALLOC_SIZE = 22
  ALWAYS_DESTROY = 23
  ALWAYS_INLINE = 24
  ANALYZER_NO_RETURN = 25
  ANNOTATE = 26
  ANNOTATE_TYPE = 27
  ANY_X86_INTERRUPT = 28
  ANY_X86_NO_CALLER_SAVED_REGISTERS = 29
  ANY_X86_NO_CF_CHECK = 30
  ARC_WEAKREF_UNAVAILABLE = 31
  ARGUMENT_WITH_TYPE_TAG = 32
  ARM_BUILTIN_ALIAS = 33
  ARM_MVE_STRICT_POLYMORPHISM = 34
  ARM_STREAMING = 35
  ARTIFICIAL = 36
  ASM_LABEL = 37
  ASSERT_CAPABILITY = 38
  ASSERT_EXCLUSIVE_LOCK = 39
  ASSERT_SHARED_LOCK = 40
  ASSUME_ALIGNED = 41
  ASSUMPTION = 42
  AVAILABILITY = 43
  AVAILABLE_ONLY_IN_DEFAULT_EVAL_METHOD = 44
  BPF_PRESERVE_ACCESS_INDEX = 45
  BTF_DECL_TAG = 46
  BTF_TYPE_TAG = 47
  BLOCKS = 48
  BUILTIN_ALIAS = 49
  BUILTIN = 50
  C11_NO_RETURN = 51
  C_DECL = 52
  CF_AUDITED_TRANSFER = 53
  CF_CONSUMED = 54
  CF_GUARD = 55
  CFI_CANONICAL_JUMP_TABLE = 56
  CF_RETURNS_NOT_RETAINED = 57
  CF_RETURNS_RETAINED = 58
  CF_UNKNOWN_TRANSFER = 59
  CPU_DISPATCH = 60
  CPU_SPECIFIC = 61
  CUDA_CONSTANT = 62
  CUDA_DEVICE = 63
  CUDA_DEVICE_BUILTIN_SURFACE_TYPE = 64
  CUDA_DEVICE_BUILTIN_TEXTURE_TYPE = 65
  CUDA_GLOBAL = 66
  CUDA_HOST = 67
  CUDA_INVALID_TARGET = 68
  CUDA_LAUNCH_BOUNDS = 69
  CUDA_SHARED = 70
  CXX11_NO_RETURN = 71
  CALLABLE_WHEN = 72
  CALLBACK = 73
  CALLED_ONCE = 74
  CAPABILITY = 75
  CAPTURED_RECORD = 76
  CARRIES_DEPENDENCY = 77
  CLEANUP = 78
  CMSE_NS_CALL = 79
  CMSE_NS_ENTRY = 80
  CODE_SEG = 81
  COLD = 82
  COMMON = 83
  CONST = 84
  CONST_INIT = 85
  CONSTRUCTOR = 86
  CONSUMABLE = 87
  CONSUMABLE_AUTO_CAST = 88
  CONSUMABLE_SET_ON_READ = 89
  CONVERGENT = 90
  DLL_EXPORT = 91
  DLL_EXPORT_STATIC_LOCAL = 92
  DLL_IMPORT = 93
  DLL_IMPORT_STATIC_LOCAL = 94
  DEPRECATED = 95
  DESTRUCTOR = 96
  DIAGNOSE_AS_BUILTIN = 97
  DIAGNOSE_IF = 98
  DISABLE_SANITIZER_INSTRUMENTATION = 99
  DISABLE_TAIL_CALLS = 100
  EMPTY_BASES = 101
  ENABLE_IF = 102
  ENFORCE_TCB = 103
  ENFORCE_TCB_LEAF = 104
  ENUM_EXTENSIBILITY = 105
  ERROR = 106
  EXCLUDE_FROM_EXPLICIT_INSTANTIATION = 107
  EXCLUSIVE_TRYLOCK_FUNCTION = 108
  EXTERNAL_SOURCE_SYMBOL = 109
  FALL_THROUGH = 110
  FAST_CALL = 111
  FINAL = 112
  FLAG_ENUM = 113
  FLATTEN = 114
  FORMAT_ARG = 115
  FORMAT = 116
  FUNCTION_RETURN_THUNKS = 117
  GNU_INLINE = 118
  GUARDED_BY = 119
  GUARDED_VAR = 120
  HIP_MANAGED = 121
  HLSL_GROUP_SHARED_ADDRESS_SPACE = 122
  HLSL_NUM_THREADS = 123
  HLSL_RESOURCE = 124
  HLSL_RESOURCE_BINDING = 125
  HLSLSV__DISPATCH_THREAD_ID = 126
  HLSLSV__GROUP_INDEX = 127
  HLSL_SHADER = 128
  HOT = 129
  IB_ACTION = 130
  IB_OUTLET = 131
  IB_OUTLET_COLLECTION = 132
  I_FUNC = 133
  INIT_PRIORITY = 134
  INIT_SEG = 135
  INTEL_OCL_BICC = 136
  INTERNAL_LINKAGE = 137
  LTO_VISIBILITY_PUBLIC = 138
  LAYOUT_VERSION = 139
  LEAF = 140
  LIFETIME_BOUND = 141
  LIKELY = 142
  LOADER_UNINITIALIZED = 143
  LOCK_RETURNED = 144
  LOCKS_EXCLUDED = 145
  LOOP_HINT = 146
  M68K_INTERRUPT = 147
  MIG_SERVER_ROUTINE_ = 148
  MSABI = 149
  MS_ALLOCATOR = 150
  MS_INHERITANCE = 151
  MS_NO_V_TABLE = 152
  MSP430_INTERRUPT = 153
  MS_STRUCT = 154
  MS_VTOR_DISP = 155
  MAX_FIELD_ALIGNMENT = 156
  MAY_ALIAS = 157
  MAYBE_UNDEF = 158
  MICRO_MIPS = 159
  MIN_SIZE = 160
  MIN_VECTOR_WIDTH = 161
  MIPS16 = 162
  MIPS_INTERRUPT = 163
  MIPS_LONG_CALL = 164
  MIPS_SHORT_CALL = 165
  MODE = 166
  MUST_TAIL = 167
  NS_CONSUMED = 168
  NS_CONSUMES_SELF = 169
  NS_ERROR_DOMAIN = 170
  NS_RETURNS_AUTORELEASED = 171
  NS_RETURNS_NOT_RETAINED = 172
  NS_RETURNS_RETAINED = 173
  NVPTX_KERNEL = 174
  NAKED = 175
  NO_ALIAS = 176
  NO_BUILTIN = 177
  NO_COMMON = 178
  NO_DEBUG = 179
  NO_DEREF = 180
  NO_DESTROY = 181
  NO_DUPLICATE = 182
  NO_ESCAPE = 183
  NO_INLINE = 184
  NO_INSTRUMENT_FUNCTION = 185
  NO_MERGE = 186
  NO_MICRO_MIPS = 187
  NO_MIPS16 = 188
  NO_PROFILE_FUNCTION = 189
  NO_RANDOMIZE_LAYOUT = 190
  NO_RETURN = 191
  NO_SANITIZE = 192
  NO_SPECULATIVE_LOAD_HARDENING = 193
  NO_SPLIT_STACK = 194
  NO_STACK_PROTECTOR = 195
  NO_THREAD_SAFETY_ANALYSIS = 196
  NO_THROW = 197
  NO_UNIQUE_ADDRESS = 198
  NO_UWTABLE = 199
  NON_NULL = 200
  NOT_TAIL_CALLED = 201
  OMP_ALLOCATE_DECL = 202
  OMP_CAPTURE_KIND = 203
  OMP_CAPTURE_NO_INIT = 204
  OMP_DECLARE_SIMD_DECL = 205
  OMP_DECLARE_TARGET_DECL = 206
  OMP_DECLARE_VARIANT = 207
  OMP_REFERENCED_VAR = 208
  OMP_THREAD_PRIVATE_DECL = 209
  OS_CONSUMED = 210
  OS_CONSUMES_THIS = 211
  OS_RETURNS_NOT_RETAINED = 212
  OS_RETURNS_RETAINED = 213
  OS_RETURNS_RETAINED_ON_NON_ZERO = 214
  OS_RETURNS_RETAINED_ON_ZERO = 215
  OBJ_C_BOXABLE = 216
  OBJ_C_BRIDGE = 217
  OBJ_C_BRIDGE_MUTABLE = 218
  OBJ_C_BRIDGE_RELATED = 219
  OBJ_C_CLASS_STUB = 220
  OBJ_C_DESIGNATED_INITIALIZER = 221
  OBJ_C_DIRECT = 222
  OBJ_C_DIRECT_MEMBERS = 223
  OBJ_C_EXCEPTION = 224
  OBJ_C_EXPLICIT_PROTOCOL_IMPL = 225
  OBJ_C_EXTERNALLY_RETAINED = 226
  OBJ_CGC = 227
  OBJ_C_INDEPENDENT_CLASS = 228
  OBJ_C_INERT_UNSAFE_UNRETAINED = 229
  OBJ_C_KIND_OF = 230
  OBJ_C_METHOD_FAMILY = 231
  OBJ_CNS_OBJECT = 232
  OBJ_C_NON_LAZY_CLASS = 233
  OBJ_C_NON_RUNTIME_PROTOCOL = 234
  OBJ_C_OWNERSHIP = 235
  OBJ_C_PRECISE_LIFETIME = 236
  OBJ_C_REQUIRES_PROPERTY_DEFS = 237
  OBJ_C_REQUIRES_SUPER = 238
  OBJ_C_RETURNS_INNER_POINTER = 239
  OBJ_C_ROOT_CLASS = 240
  OBJ_C_RUNTIME_NAME = 241
  OBJ_C_RUNTIME_VISIBLE = 242
  OBJ_C_SUBCLASSING_RESTRICTED = 243
  OPEN_CL_ACCESS = 244
  OPEN_CL_CONSTANT_ADDRESS_SPACE = 245
  OPEN_CL_GENERIC_ADDRESS_SPACE = 246
  OPEN_CL_GLOBAL_ADDRESS_SPACE = 247
  OPEN_CL_GLOBAL_DEVICE_ADDRESS_SPACE = 248
  OPEN_CL_GLOBAL_HOST_ADDRESS_SPACE = 249
  OPEN_CL_INTEL_REQD_SUB_GROUP_SIZE = 250
  OPEN_CL_KERNEL = 251
  OPEN_CL_LOCAL_ADDRESS_SPACE = 252
  OPEN_CL_PRIVATE_ADDRESS_SPACE = 253
  OPEN_CL_UNROLL_HINT = 254
  OPTIMIZE_NONE = 255
  OVERLOADABLE = 256
  OVERRIDE = 257
  OWNER = 258
  OWNERSHIP = 259
  PACKED = 260
  PARAM_TYPESTATE = 261
  PASCAL = 262
  PASS_OBJECT_SIZE = 263
  PATCHABLE_FUNCTION_ENTRY = 264
  PCS = 265
  POINTER = 266
  PRAGMA_CLANG_BSS_SECTION = 267
  PRAGMA_CLANG_DATA_SECTION = 268
  PRAGMA_CLANG_RELRO_SECTION = 269
  PRAGMA_CLANG_RODATA_SECTION = 270
  PRAGMA_CLANG_TEXT_SECTION = 271
  PREFERRED_NAME = 272
  PRESERVE_ALL = 273
  PRESERVE_MOST = 274
  PT_GUARDED_BY = 275
  PT_GUARDED_VAR = 276
  PTR32 = 277
  PTR64 = 278
  PURE = 279
  RISCV_INTERRUPT = 280
  RANDOMIZE_LAYOUT = 281
  READ_ONLY_PLACEMENT = 282
  REG_CALL = 283
  REINITIALIZES = 284
  RELEASE_CAPABILITY = 285
  RELEASE_HANDLE = 286
  RENDER_SCRIPT_KERNEL = 287
  REQD_WORK_GROUP_SIZE = 288
  REQUIRES_CAPABILITY = 289
  RESTRICT = 290
  RETAIN = 291
  RETURN_TYPESTATE = 292
  RETURNS_NON_NULL = 293
  RETURNS_TWICE = 294
  S_PTR = 295
  SYCL_KERNEL = 296
  SYCL_SPECIAL_CLASS = 297
  SCOPED_LOCKABLE = 298
  SECTION = 299
  SELECT_ANY = 300
  SENTINEL = 301
  SET_TYPESTATE = 302
  SHARED_TRYLOCK_FUNCTION = 303
  SPECULATIVE_LOAD_HARDENING = 304
  STANDALONE_DEBUG = 305
  STD_CALL = 306
  STRICT_FP = 307
  STRICT_GUARD_STACK_CHECK = 308
  SUPPRESS = 309
  SWIFT_ASYNC = 310
  SWIFT_ASYNC_CALL = 311
  SWIFT_ASYNC_CONTEXT = 312
  SWIFT_ASYNC_ERROR = 313
  SWIFT_ASYNC_NAME = 314
  SWIFT_ATTR = 315
  SWIFT_BRIDGE = 316
  SWIFT_BRIDGED_TYPEDEF = 317
  SWIFT_CALL = 318
  SWIFT_CONTEXT = 319
  SWIFT_ERROR = 320
  SWIFT_ERROR_RESULT = 321
  SWIFT_INDIRECT_RESULT = 322
  SWIFT_NAME = 323
  SWIFT_NEW_TYPE = 324
  SWIFT_OBJ_C_MEMBERS = 325
  SWIFT_PRIVATE = 326
  SYS_VABI = 327
  TLS_MODEL = 328
  TARGET = 329
  TARGET_CLONES = 330
  TARGET_VERSION = 331
  TEST_TYPESTATE = 332
  THIS_CALL = 333
  THREAD = 334
  TRANSPARENT_UNION = 335
  TRIVIAL_ABI = 336
  TRY_ACQUIRE_CAPABILITY = 337
  TYPE_NON_NULL = 338
  TYPE_NULL_UNSPECIFIED = 339
  TYPE_NULLABLE = 340
  TYPE_NULLABLE_RESULT = 341
  TYPE_TAG_FOR_DATATYPE = 342
  TYPE_VISIBILITY = 343
  U_PTR = 344
  UNAVAILABLE = 345
  UNINITIALIZED = 346
  UNLIKELY = 347
  UNSAFE_BUFFER_USAGE = 348
  UNUSED = 349
  USE_HANDLE = 350
  USED = 351
  USING_IF_EXISTS = 352
  UUID = 353
  VEC_RETURN = 354
  VEC_TYPE_HINT = 355
  VECTOR_CALL = 356
  VISIBILITY = 357
  WARN_UNUSED = 358
  WARN_UNUSED_RESULT = 359
  WEAK = 360
  WEAK_IMPORT = 361
  WEAK_REF = 362
  WEB_ASSEMBLY_EXPORT_NAME = 363
  WEB_ASSEMBLY_FUNCREF = 364
  WEB_ASSEMBLY_IMPORT_MODULE = 365
  WEB_ASSEMBLY_IMPORT_NAME = 366
  WORK_GROUP_SIZE_HINT = 367
  X86_FORCE_ALIGN_ARG_POINTER = 368
  X_RAY_INSTRUMENT = 369
  X_RAY_LOG_ARGS = 370
  ZERO_CALL_USED_REGS = 371

class AArch64SVEPcsAttrSpelling(IntEnum):
  GNU_AARCH64_SVE_PCS = 0
  CXX11_CLANG_AARCH64_SVE_PCS = 1
  C2X_CLANG_AARCH64_SVE_PCS = 2
  SPELLING_NOT_CALCULATED = 3

class AArch64VectorPcsAttrSpelling(IntEnum):
  GNU_AARCH64_VECTOR_PCS = 0
  CXX11_CLANG_AARCH64_VECTOR_PCS = 1
  C2X_CLANG_AARCH64_VECTOR_PCS = 2
  SPELLING_NOT_CALCULATED = 3

class AMDGPUFlatWorkGroupSizeAttrSpelling(IntEnum):
  GNU_AMDGPU_FLAT_WORK_GROUP_SIZE = 0
  CXX11_CLANG_AMDGPU_FLAT_WORK_GROUP_SIZE = 1
  SPELLING_NOT_CALCULATED = 2

class AMDGPUKernelCallAttrSpelling(IntEnum):
  GNU_AMDGPU_KERNEL = 0
  CXX11_CLANG_AMDGPU_KERNEL = 1
  C2X_CLANG_AMDGPU_KERNEL = 2
  SPELLING_NOT_CALCULATED = 3

class AMDGPUNumSGPRAttrSpelling(IntEnum):
  GNU_AMDGPU_NUM_SGPR = 0
  CXX11_CLANG_AMDGPU_NUM_SGPR = 1
  SPELLING_NOT_CALCULATED = 2

class AMDGPUNumVGPRAttrSpelling(IntEnum):
  GNU_AMDGPU_NUM_VGPR = 0
  CXX11_CLANG_AMDGPU_NUM_VGPR = 1
  SPELLING_NOT_CALCULATED = 2

class AMDGPUWavesPerEUAttrSpelling(IntEnum):
  GNU_AMDGPU_WAVES_PER_EU = 0
  CXX11_CLANG_AMDGPU_WAVES_PER_EU = 1
  SPELLING_NOT_CALCULATED = 2

class ARMInterruptAttrInterruptType(IntEnum):
  IRQ = 0
  FIQ = 1
  SWI = 2
  ABORT = 3
  UNDEF = 4
  GENERIC = 5

class ARMInterruptAttrSpelling(IntEnum):
  GNU_INTERRUPT = 0
  CXX11_GNU_INTERRUPT = 1
  C2X_GNU_INTERRUPT = 2
  SPELLING_NOT_CALCULATED = 3

class AVRInterruptAttrSpelling(IntEnum):
  GNU_INTERRUPT = 0
  CXX11_GNU_INTERRUPT = 1
  C2X_GNU_INTERRUPT = 2
  SPELLING_NOT_CALCULATED = 3

class AVRSignalAttrSpelling(IntEnum):
  GNU_SIGNAL = 0
  CXX11_GNU_SIGNAL = 1
  C2X_GNU_SIGNAL = 2
  SPELLING_NOT_CALCULATED = 3

class AbiTagAttrSpelling(IntEnum):
  GNU_ABI_TAG = 0
  CXX11_GNU_ABI_TAG = 1
  SPELLING_NOT_CALCULATED = 2

class AcquireCapabilityAttrSpelling(IntEnum):
  GNU_ACQUIRE_CAPABILITY = 0
  CXX11_CLANG_ACQUIRE_CAPABILITY = 1
  GNU_ACQUIRE_SHARED_CAPABILITY = 2
  CXX11_CLANG_ACQUIRE_SHARED_CAPABILITY = 3
  GNU_EXCLUSIVE_LOCK_FUNCTION = 4
  GNU_SHARED_LOCK_FUNCTION = 5
  SPELLING_NOT_CALCULATED = 6

class AcquireHandleAttrSpelling(IntEnum):
  GNU_ACQUIRE_HANDLE = 0
  CXX11_CLANG_ACQUIRE_HANDLE = 1
  C2X_CLANG_ACQUIRE_HANDLE = 2
  SPELLING_NOT_CALCULATED = 3

class AddressSpaceAttrSpelling(IntEnum):
  GNU_ADDRESS_SPACE = 0
  CXX11_CLANG_ADDRESS_SPACE = 1
  C2X_CLANG_ADDRESS_SPACE = 2
  SPELLING_NOT_CALCULATED = 3

class AliasAttrSpelling(IntEnum):
  GNU_ALIAS = 0
  CXX11_GNU_ALIAS = 1
  C2X_GNU_ALIAS = 2
  SPELLING_NOT_CALCULATED = 3

class AlignedAttrSpelling(IntEnum):
  GNU_ALIGNED = 0
  CXX11_GNU_ALIGNED = 1
  C2X_GNU_ALIGNED = 2
  DECLSPEC_ALIGN = 3
  KEYWORD_ALIGNAS = 4
  KEYWORD__ALIGNAS = 5
  SPELLING_NOT_CALCULATED = 6

class AllocAlignAttrSpelling(IntEnum):
  GNU_ALLOC_ALIGN = 0
  CXX11_GNU_ALLOC_ALIGN = 1
  C2X_GNU_ALLOC_ALIGN = 2
  SPELLING_NOT_CALCULATED = 3

class AllocSizeAttrSpelling(IntEnum):
  GNU_ALLOC_SIZE = 0
  CXX11_GNU_ALLOC_SIZE = 1
  C2X_GNU_ALLOC_SIZE = 2
  SPELLING_NOT_CALCULATED = 3

class AlwaysDestroyAttrSpelling(IntEnum):
  GNU_ALWAYS_DESTROY = 0
  CXX11_CLANG_ALWAYS_DESTROY = 1
  SPELLING_NOT_CALCULATED = 2

class AlwaysInlineAttrSpelling(IntEnum):
  GNU_ALWAYS_INLINE = 0
  CXX11_GNU_ALWAYS_INLINE = 1
  C2X_GNU_ALWAYS_INLINE = 2
  CXX11_CLANG_ALWAYS_INLINE = 3
  C2X_CLANG_ALWAYS_INLINE = 4
  KEYWORD_FORCEINLINE = 5
  SPELLING_NOT_CALCULATED = 6

class AnnotateAttrSpelling(IntEnum):
  GNU_ANNOTATE = 0
  CXX11_CLANG_ANNOTATE = 1
  C2X_CLANG_ANNOTATE = 2
  SPELLING_NOT_CALCULATED = 3

class AnnotateTypeAttrSpelling(IntEnum):
  CXX11_CLANG_ANNOTATE_TYPE = 0
  C2X_CLANG_ANNOTATE_TYPE = 1
  SPELLING_NOT_CALCULATED = 2

class AnyX86InterruptAttrSpelling(IntEnum):
  GNU_INTERRUPT = 0
  CXX11_GNU_INTERRUPT = 1
  C2X_GNU_INTERRUPT = 2
  SPELLING_NOT_CALCULATED = 3

class AnyX86NoCallerSavedRegistersAttrSpelling(IntEnum):
  GNU_NO_CALLER_SAVED_REGISTERS = 0
  CXX11_GNU_NO_CALLER_SAVED_REGISTERS = 1
  C2X_GNU_NO_CALLER_SAVED_REGISTERS = 2
  SPELLING_NOT_CALCULATED = 3

class AnyX86NoCfCheckAttrSpelling(IntEnum):
  GNU_NOCF_CHECK = 0
  CXX11_GNU_NOCF_CHECK = 1
  C2X_GNU_NOCF_CHECK = 2
  SPELLING_NOT_CALCULATED = 3

class ArcWeakrefUnavailableAttrSpelling(IntEnum):
  GNU_OBJC_ARC_WEAK_REFERENCE_UNAVAILABLE = 0
  CXX11_CLANG_OBJC_ARC_WEAK_REFERENCE_UNAVAILABLE = 1
  C2X_CLANG_OBJC_ARC_WEAK_REFERENCE_UNAVAILABLE = 2
  SPELLING_NOT_CALCULATED = 3

class ArgumentWithTypeTagAttrSpelling(IntEnum):
  GNU_ARGUMENT_WITH_TYPE_TAG = 0
  CXX11_CLANG_ARGUMENT_WITH_TYPE_TAG = 1
  C2X_CLANG_ARGUMENT_WITH_TYPE_TAG = 2
  GNU_POINTER_WITH_TYPE_TAG = 3
  CXX11_CLANG_POINTER_WITH_TYPE_TAG = 4
  C2X_CLANG_POINTER_WITH_TYPE_TAG = 5
  SPELLING_NOT_CALCULATED = 6

class ArmBuiltinAliasAttrSpelling(IntEnum):
  GNU_CLANG_ARM_BUILTIN_ALIAS = 0
  CXX11_CLANG_CLANG_ARM_BUILTIN_ALIAS = 1
  C2X_CLANG_CLANG_ARM_BUILTIN_ALIAS = 2
  SPELLING_NOT_CALCULATED = 3

class ArmMveStrictPolymorphismAttrSpelling(IntEnum):
  GNU_CLANG_ARM_MVE_STRICT_POLYMORPHISM = 0
  CXX11_CLANG_CLANG_ARM_MVE_STRICT_POLYMORPHISM = 1
  C2X_CLANG_CLANG_ARM_MVE_STRICT_POLYMORPHISM = 2
  SPELLING_NOT_CALCULATED = 3

class ArrayTypeArraySizeModifier(IntEnum):
  NORMAL = 0
  STATIC = 1
  STAR = 2

class ArtificialAttrSpelling(IntEnum):
  GNU_ARTIFICIAL = 0
  CXX11_GNU_ARTIFICIAL = 1
  C2X_GNU_ARTIFICIAL = 2
  SPELLING_NOT_CALCULATED = 3

class AsmLabelAttrSpelling(IntEnum):
  KEYWORD_ASSEMBLY = 0
  SPELLING_NOT_CALCULATED = 1

class AssertCapabilityAttrSpelling(IntEnum):
  GNU_ASSERT_CAPABILITY = 0
  CXX11_CLANG_ASSERT_CAPABILITY = 1
  GNU_ASSERT_SHARED_CAPABILITY = 2
  CXX11_CLANG_ASSERT_SHARED_CAPABILITY = 3
  SPELLING_NOT_CALCULATED = 4

class AssumeAlignedAttrSpelling(IntEnum):
  GNU_ASSUME_ALIGNED = 0
  CXX11_GNU_ASSUME_ALIGNED = 1
  C2X_GNU_ASSUME_ALIGNED = 2
  SPELLING_NOT_CALCULATED = 3

class AssumptionAttrSpelling(IntEnum):
  GNU_ASSUME = 0
  CXX11_CLANG_ASSUME = 1
  C2X_CLANG_ASSUME = 2
  SPELLING_NOT_CALCULATED = 3

class AtomicExprAtomicOp(IntEnum):
  C11_ATOMIC_INITIALIZER = 0
  C11_ATOMIC_LOAD = 1
  C11_ATOMIC_STORE = 2
  C11_ATOMIC_EXCHANGE = 3
  C11_ATOMIC_COMPARE_EXCHANGE_STRONG = 4
  C11_ATOMIC_COMPARE_EXCHANGE_WEAK = 5
  C11_ATOMIC_FETCH_ADD = 6
  C11_ATOMIC_FETCH_SUB = 7
  C11_ATOMIC_FETCH_AND = 8
  C11_ATOMIC_FETCH_OR = 9
  C11_ATOMIC_FETCH_XOR = 10
  C11_ATOMIC_FETCH_NAND = 11
  C11_ATOMIC_FETCH_MAX = 12
  C11_ATOMIC_FETCH_MIN = 13
  ATOMIC_LOAD = 14
  ATOMIC_LOAD_N = 15
  ATOMIC_STORE = 16
  ATOMIC_STORE_N = 17
  ATOMIC_EXCHANGE = 18
  ATOMIC_EXCHANGE_N = 19
  ATOMIC_COMPARE_EXCHANGE = 20
  ATOMIC_COMPARE_EXCHANGE_N = 21
  ATOMIC_FETCH_ADD = 22
  ATOMIC_FETCH_SUB = 23
  ATOMIC_FETCH_AND = 24
  ATOMIC_FETCH_OR = 25
  ATOMIC_FETCH_XOR = 26
  ATOMIC_FETCH_NAND = 27
  ATOMIC_ADD_FETCH = 28
  ATOMIC_SUB_FETCH = 29
  ATOMIC_AND_FETCH = 30
  ATOMIC_OR_FETCH = 31
  ATOMIC_XOR_FETCH = 32
  ATOMIC_MAX_FETCH = 33
  ATOMIC_MIN_FETCH = 34
  ATOMIC_NAND_FETCH = 35
  OPENCL_ATOMIC_INITIALIZER = 36
  OPENCL_ATOMIC_LOAD = 37
  OPENCL_ATOMIC_STORE = 38
  OPENCL_ATOMIC_EXCHANGE = 39
  OPENCL_ATOMIC_COMPARE_EXCHANGE_STRONG = 40
  OPENCL_ATOMIC_COMPARE_EXCHANGE_WEAK = 41
  OPENCL_ATOMIC_FETCH_ADD = 42
  OPENCL_ATOMIC_FETCH_SUB = 43
  OPENCL_ATOMIC_FETCH_AND = 44
  OPENCL_ATOMIC_FETCH_OR = 45
  OPENCL_ATOMIC_FETCH_XOR = 46
  OPENCL_ATOMIC_FETCH_MIN = 47
  OPENCL_ATOMIC_FETCH_MAX = 48
  ATOMIC_FETCH_MIN = 49
  ATOMIC_FETCH_MAX = 50
  HIP_ATOMIC_LOAD = 51
  HIP_ATOMIC_STORE = 52
  HIP_ATOMIC_COMPARE_EXCHANGE_WEAK = 53
  HIP_ATOMIC_COMPARE_EXCHANGE_STRONG = 54
  HIP_ATOMIC_EXCHANGE = 55
  HIP_ATOMIC_FETCH_ADD = 56
  HIP_ATOMIC_FETCH_SUB = 57
  HIP_ATOMIC_FETCH_AND = 58
  HIP_ATOMIC_FETCH_OR = 59
  HIP_ATOMIC_FETCH_XOR = 60
  HIP_ATOMIC_FETCH_MIN = 61
  HIP_ATOMIC_FETCH_MAX = 62

class AvailabilityAttrSpelling(IntEnum):
  GNU_AVAILABILITY = 0
  CXX11_CLANG_AVAILABILITY = 1
  C2X_CLANG_AVAILABILITY = 2
  SPELLING_NOT_CALCULATED = 3

class AvailableOnlyInDefaultEvalMethodAttrSpelling(IntEnum):
  GNU_AVAILABLE_ONLY_IN_DEFAULT_EVAL_METHOD = 0
  CXX11_CLANG_AVAILABLE_ONLY_IN_DEFAULT_EVAL_METHOD = 1
  C2X_CLANG_AVAILABLE_ONLY_IN_DEFAULT_EVAL_METHOD = 2
  SPELLING_NOT_CALCULATED = 3

class BPFPreserveAccessIndexAttrSpelling(IntEnum):
  GNU_PRESERVE_ACCESS_INDEX = 0
  CXX11_CLANG_PRESERVE_ACCESS_INDEX = 1
  C2X_CLANG_PRESERVE_ACCESS_INDEX = 2
  SPELLING_NOT_CALCULATED = 3

class BTFDeclTagAttrSpelling(IntEnum):
  GNU_BTF_DECLARATION_TAG = 0
  CXX11_CLANG_BTF_DECLARATION_TAG = 1
  C2X_CLANG_BTF_DECLARATION_TAG = 2
  SPELLING_NOT_CALCULATED = 3

class BTFTypeTagAttrSpelling(IntEnum):
  GNU_BTF_TYPE_TAG = 0
  CXX11_CLANG_BTF_TYPE_TAG = 1
  C2X_CLANG_BTF_TYPE_TAG = 2
  SPELLING_NOT_CALCULATED = 3

class BlocksAttrBlockType(IntEnum):
  BY_REFERENCE = 0

class BlocksAttrSpelling(IntEnum):
  GNU_BLOCKS = 0
  CXX11_CLANG_BLOCKS = 1
  C2X_CLANG_BLOCKS = 2
  SPELLING_NOT_CALCULATED = 3

class BuiltinAliasAttrSpelling(IntEnum):
  CXX11_CLANG_BUILTIN_ALIAS = 0
  C2X_CLANG_BUILTIN_ALIAS = 1
  GNU_CLANG_BUILTIN_ALIAS = 2
  SPELLING_NOT_CALCULATED = 3

class BuiltinTypeKind(IntEnum):
  OCL_IMAGE_1D_RO = 0
  OCL_IMAGE_1D_ARRAY_RO = 1
  OCL_IMAGE_1D_BUFFER_RO = 2
  OCL_IMAGE_2D_RO = 3
  OCL_IMAGE_2D_ARRAY_RO = 4
  OCL_IMAGE_2D_DEPTH_RO = 5
  OCL_IMAGE_2D_ARRAY_DEPTH_RO = 6
  OCL_IMAGE_2D_MSAARO = 7
  OCL_IMAGE_2D_ARRAY_MSAARO = 8
  OCL_IMAGE_2D_MSAA_DEPTH_RO = 9
  OCL_IMAGE_2D_ARRAY_MSAA_DEPTH_RO = 10
  OCL_IMAGE_3D_RO = 11
  OCL_IMAGE_1D_WO = 12
  OCL_IMAGE_1D_ARRAY_WO = 13
  OCL_IMAGE_1D_BUFFER_WO = 14
  OCL_IMAGE_2D_WO = 15
  OCL_IMAGE_2D_ARRAY_WO = 16
  OCL_IMAGE_2D_DEPTH_WO = 17
  OCL_IMAGE_2D_ARRAY_DEPTH_WO = 18
  OCL_IMAGE_2D_MSAAWO = 19
  OCL_IMAGE_2D_ARRAY_MSAAWO = 20
  OCL_IMAGE_2D_MSAA_DEPTH_WO = 21
  OCL_IMAGE_2D_ARRAY_MSAA_DEPTH_WO = 22
  OCL_IMAGE_3D_WO = 23
  OCL_IMAGE_1D_RW = 24
  OCL_IMAGE_1D_ARRAY_RW = 25
  OCL_IMAGE_1D_BUFFER_RW = 26
  OCL_IMAGE_2D_RW = 27
  OCL_IMAGE_2D_ARRAY_RW = 28
  OCL_IMAGE_2D_DEPTH_RW = 29
  OCL_IMAGE_2D_ARRAY_DEPTH_RW = 30
  OCL_IMAGE_2D_MSAARW = 31
  OCL_IMAGE_2D_ARRAY_MSAARW = 32
  OCL_IMAGE_2D_MSAA_DEPTH_RW = 33
  OCL_IMAGE_2D_ARRAY_MSAA_DEPTH_RW = 34
  OCL_IMAGE_3D_RW = 35
  OCL_INTEL_SUBGROUP_AVC_MCE_PAYLOAD = 36
  OCL_INTEL_SUBGROUP_AVC_IME_PAYLOAD = 37
  OCL_INTEL_SUBGROUP_AVC_REF_PAYLOAD = 38
  OCL_INTEL_SUBGROUP_AVC_SIC_PAYLOAD = 39
  OCL_INTEL_SUBGROUP_AVC_MCE_RESULT = 40
  OCL_INTEL_SUBGROUP_AVC_IME_RESULT = 41
  OCL_INTEL_SUBGROUP_AVC_REF_RESULT = 42
  OCL_INTEL_SUBGROUP_AVC_SIC_RESULT = 43
  OCL_INTEL_SUBGROUP_AVC_IME_RESULT_SINGLE_REFERENCE_STREAMOUT = 44
  OCL_INTEL_SUBGROUP_AVC_IME_RESULT_DUAL_REFERENCE_STREAMOUT = 45
  OCL_INTEL_SUBGROUP_AVC_IME_SINGLE_REFERENCE_STREAMIN = 46
  OCL_INTEL_SUBGROUP_AVC_IME_DUAL_REFERENCE_STREAMIN = 47
  SVE_INT8 = 48
  SVE_INT16 = 49
  SVE_INT32 = 50
  SVE_INT64 = 51
  SVE_UINT8 = 52
  SVE_UINT16 = 53
  SVE_UINT32 = 54
  SVE_UINT64 = 55
  SVE_FLOAT16 = 56
  SVE_FLOAT32 = 57
  SVE_FLOAT64 = 58
  SVE_B_FLOAT16 = 59
  SVE_INT8X2 = 60
  SVE_INT16X2 = 61
  SVE_INT32X2 = 62
  SVE_INT64X2 = 63
  SVE_UINT8X2 = 64
  SVE_UINT16X2 = 65
  SVE_UINT32X2 = 66
  SVE_UINT64X2 = 67
  SVE_FLOAT16X2 = 68
  SVE_FLOAT32X2 = 69
  SVE_FLOAT64X2 = 70
  SVE_B_FLOAT16X2 = 71
  SVE_INT8X3 = 72
  SVE_INT16X3 = 73
  SVE_INT32X3 = 74
  SVE_INT64X3 = 75
  SVE_UINT8X3 = 76
  SVE_UINT16X3 = 77
  SVE_UINT32X3 = 78
  SVE_UINT64X3 = 79
  SVE_FLOAT16X3 = 80
  SVE_FLOAT32X3 = 81
  SVE_FLOAT64X3 = 82
  SVE_B_FLOAT16X3 = 83
  SVE_INT8X4 = 84
  SVE_INT16X4 = 85
  SVE_INT32X4 = 86
  SVE_INT64X4 = 87
  SVE_UINT8X4 = 88
  SVE_UINT16X4 = 89
  SVE_UINT32X4 = 90
  SVE_UINT64X4 = 91
  SVE_FLOAT16X4 = 92
  SVE_FLOAT32X4 = 93
  SVE_FLOAT64X4 = 94
  SVE_B_FLOAT16X4 = 95
  SVE_BOOLEAN = 96
  SVE_BOOLX2 = 97
  SVE_BOOLX4 = 98
  SVE_COUNT = 99
  VECTOR_QUAD = 100
  VECTOR_PAIR = 101
  RVV_INT8MF8 = 102
  RVV_INT8MF4 = 103
  RVV_INT8MF2 = 104
  RVV_INT8M1 = 105
  RVV_INT8M2 = 106
  RVV_INT8M4 = 107
  RVV_INT8M8 = 108
  RVV_UINT8MF8 = 109
  RVV_UINT8MF4 = 110
  RVV_UINT8MF2 = 111
  RVV_UINT8M1 = 112
  RVV_UINT8M2 = 113
  RVV_UINT8M4 = 114
  RVV_UINT8M8 = 115
  RVV_INT16MF4 = 116
  RVV_INT16MF2 = 117
  RVV_INT16M1 = 118
  RVV_INT16M2 = 119
  RVV_INT16M4 = 120
  RVV_INT16M8 = 121
  RVV_UINT16MF4 = 122
  RVV_UINT16MF2 = 123
  RVV_UINT16M1 = 124
  RVV_UINT16M2 = 125
  RVV_UINT16M4 = 126
  RVV_UINT16M8 = 127
  RVV_INT32MF2 = 128
  RVV_INT32M1 = 129
  RVV_INT32M2 = 130
  RVV_INT32M4 = 131
  RVV_INT32M8 = 132
  RVV_UINT32MF2 = 133
  RVV_UINT32M1 = 134
  RVV_UINT32M2 = 135
  RVV_UINT32M4 = 136
  RVV_UINT32M8 = 137
  RVV_INT64M1 = 138
  RVV_INT64M2 = 139
  RVV_INT64M4 = 140
  RVV_INT64M8 = 141
  RVV_UINT64M1 = 142
  RVV_UINT64M2 = 143
  RVV_UINT64M4 = 144
  RVV_UINT64M8 = 145
  RVV_FLOAT16MF4 = 146
  RVV_FLOAT16MF2 = 147
  RVV_FLOAT16M1 = 148
  RVV_FLOAT16M2 = 149
  RVV_FLOAT16M4 = 150
  RVV_FLOAT16M8 = 151
  RVV_FLOAT32MF2 = 152
  RVV_FLOAT32M1 = 153
  RVV_FLOAT32M2 = 154
  RVV_FLOAT32M4 = 155
  RVV_FLOAT32M8 = 156
  RVV_FLOAT64M1 = 157
  RVV_FLOAT64M2 = 158
  RVV_FLOAT64M4 = 159
  RVV_FLOAT64M8 = 160
  RVV_BOOL1 = 161
  RVV_BOOL2 = 162
  RVV_BOOL4 = 163
  RVV_BOOL8 = 164
  RVV_BOOL16 = 165
  RVV_BOOL32 = 166
  RVV_BOOL64 = 167
  RVV_INT8MF8X2 = 168
  RVV_INT8MF8X3 = 169
  RVV_INT8MF8X4 = 170
  RVV_INT8MF8X5 = 171
  RVV_INT8MF8X6 = 172
  RVV_INT8MF8X7 = 173
  RVV_INT8MF8X8 = 174
  RVV_INT8MF4X2 = 175
  RVV_INT8MF4X3 = 176
  RVV_INT8MF4X4 = 177
  RVV_INT8MF4X5 = 178
  RVV_INT8MF4X6 = 179
  RVV_INT8MF4X7 = 180
  RVV_INT8MF4X8 = 181
  RVV_INT8MF2X2 = 182
  RVV_INT8MF2X3 = 183
  RVV_INT8MF2X4 = 184
  RVV_INT8MF2X5 = 185
  RVV_INT8MF2X6 = 186
  RVV_INT8MF2X7 = 187
  RVV_INT8MF2X8 = 188
  RVV_INT8M1X2 = 189
  RVV_INT8M1X3 = 190
  RVV_INT8M1X4 = 191
  RVV_INT8M1X5 = 192
  RVV_INT8M1X6 = 193
  RVV_INT8M1X7 = 194
  RVV_INT8M1X8 = 195
  RVV_INT8M2X2 = 196
  RVV_INT8M2X3 = 197
  RVV_INT8M2X4 = 198
  RVV_INT8M4X2 = 199
  RVV_UINT8MF8X2 = 200
  RVV_UINT8MF8X3 = 201
  RVV_UINT8MF8X4 = 202
  RVV_UINT8MF8X5 = 203
  RVV_UINT8MF8X6 = 204
  RVV_UINT8MF8X7 = 205
  RVV_UINT8MF8X8 = 206
  RVV_UINT8MF4X2 = 207
  RVV_UINT8MF4X3 = 208
  RVV_UINT8MF4X4 = 209
  RVV_UINT8MF4X5 = 210
  RVV_UINT8MF4X6 = 211
  RVV_UINT8MF4X7 = 212
  RVV_UINT8MF4X8 = 213
  RVV_UINT8MF2X2 = 214
  RVV_UINT8MF2X3 = 215
  RVV_UINT8MF2X4 = 216
  RVV_UINT8MF2X5 = 217
  RVV_UINT8MF2X6 = 218
  RVV_UINT8MF2X7 = 219
  RVV_UINT8MF2X8 = 220
  RVV_UINT8M1X2 = 221
  RVV_UINT8M1X3 = 222
  RVV_UINT8M1X4 = 223
  RVV_UINT8M1X5 = 224
  RVV_UINT8M1X6 = 225
  RVV_UINT8M1X7 = 226
  RVV_UINT8M1X8 = 227
  RVV_UINT8M2X2 = 228
  RVV_UINT8M2X3 = 229
  RVV_UINT8M2X4 = 230
  RVV_UINT8M4X2 = 231
  RVV_INT16MF4X2 = 232
  RVV_INT16MF4X3 = 233
  RVV_INT16MF4X4 = 234
  RVV_INT16MF4X5 = 235
  RVV_INT16MF4X6 = 236
  RVV_INT16MF4X7 = 237
  RVV_INT16MF4X8 = 238
  RVV_INT16MF2X2 = 239
  RVV_INT16MF2X3 = 240
  RVV_INT16MF2X4 = 241
  RVV_INT16MF2X5 = 242
  RVV_INT16MF2X6 = 243
  RVV_INT16MF2X7 = 244
  RVV_INT16MF2X8 = 245
  RVV_INT16M1X2 = 246
  RVV_INT16M1X3 = 247
  RVV_INT16M1X4 = 248
  RVV_INT16M1X5 = 249
  RVV_INT16M1X6 = 250
  RVV_INT16M1X7 = 251
  RVV_INT16M1X8 = 252
  RVV_INT16M2X2 = 253
  RVV_INT16M2X3 = 254
  RVV_INT16M2X4 = 255
  RVV_INT16M4X2 = 256
  RVV_UINT16MF4X2 = 257
  RVV_UINT16MF4X3 = 258
  RVV_UINT16MF4X4 = 259
  RVV_UINT16MF4X5 = 260
  RVV_UINT16MF4X6 = 261
  RVV_UINT16MF4X7 = 262
  RVV_UINT16MF4X8 = 263
  RVV_UINT16MF2X2 = 264
  RVV_UINT16MF2X3 = 265
  RVV_UINT16MF2X4 = 266
  RVV_UINT16MF2X5 = 267
  RVV_UINT16MF2X6 = 268
  RVV_UINT16MF2X7 = 269
  RVV_UINT16MF2X8 = 270
  RVV_UINT16M1X2 = 271
  RVV_UINT16M1X3 = 272
  RVV_UINT16M1X4 = 273
  RVV_UINT16M1X5 = 274
  RVV_UINT16M1X6 = 275
  RVV_UINT16M1X7 = 276
  RVV_UINT16M1X8 = 277
  RVV_UINT16M2X2 = 278
  RVV_UINT16M2X3 = 279
  RVV_UINT16M2X4 = 280
  RVV_UINT16M4X2 = 281
  RVV_INT32MF2X2 = 282
  RVV_INT32MF2X3 = 283
  RVV_INT32MF2X4 = 284
  RVV_INT32MF2X5 = 285
  RVV_INT32MF2X6 = 286
  RVV_INT32MF2X7 = 287
  RVV_INT32MF2X8 = 288
  RVV_INT32M1X2 = 289
  RVV_INT32M1X3 = 290
  RVV_INT32M1X4 = 291
  RVV_INT32M1X5 = 292
  RVV_INT32M1X6 = 293
  RVV_INT32M1X7 = 294
  RVV_INT32M1X8 = 295
  RVV_INT32M2X2 = 296
  RVV_INT32M2X3 = 297
  RVV_INT32M2X4 = 298
  RVV_INT32M4X2 = 299
  RVV_UINT32MF2X2 = 300
  RVV_UINT32MF2X3 = 301
  RVV_UINT32MF2X4 = 302
  RVV_UINT32MF2X5 = 303
  RVV_UINT32MF2X6 = 304
  RVV_UINT32MF2X7 = 305
  RVV_UINT32MF2X8 = 306
  RVV_UINT32M1X2 = 307
  RVV_UINT32M1X3 = 308
  RVV_UINT32M1X4 = 309
  RVV_UINT32M1X5 = 310
  RVV_UINT32M1X6 = 311
  RVV_UINT32M1X7 = 312
  RVV_UINT32M1X8 = 313
  RVV_UINT32M2X2 = 314
  RVV_UINT32M2X3 = 315
  RVV_UINT32M2X4 = 316
  RVV_UINT32M4X2 = 317
  RVV_INT64M1X2 = 318
  RVV_INT64M1X3 = 319
  RVV_INT64M1X4 = 320
  RVV_INT64M1X5 = 321
  RVV_INT64M1X6 = 322
  RVV_INT64M1X7 = 323
  RVV_INT64M1X8 = 324
  RVV_INT64M2X2 = 325
  RVV_INT64M2X3 = 326
  RVV_INT64M2X4 = 327
  RVV_INT64M4X2 = 328
  RVV_UINT64M1X2 = 329
  RVV_UINT64M1X3 = 330
  RVV_UINT64M1X4 = 331
  RVV_UINT64M1X5 = 332
  RVV_UINT64M1X6 = 333
  RVV_UINT64M1X7 = 334
  RVV_UINT64M1X8 = 335
  RVV_UINT64M2X2 = 336
  RVV_UINT64M2X3 = 337
  RVV_UINT64M2X4 = 338
  RVV_UINT64M4X2 = 339
  RVV_FLOAT16MF4X2 = 340
  RVV_FLOAT16MF4X3 = 341
  RVV_FLOAT16MF4X4 = 342
  RVV_FLOAT16MF4X5 = 343
  RVV_FLOAT16MF4X6 = 344
  RVV_FLOAT16MF4X7 = 345
  RVV_FLOAT16MF4X8 = 346
  RVV_FLOAT16MF2X2 = 347
  RVV_FLOAT16MF2X3 = 348
  RVV_FLOAT16MF2X4 = 349
  RVV_FLOAT16MF2X5 = 350
  RVV_FLOAT16MF2X6 = 351
  RVV_FLOAT16MF2X7 = 352
  RVV_FLOAT16MF2X8 = 353
  RVV_FLOAT16M1X2 = 354
  RVV_FLOAT16M1X3 = 355
  RVV_FLOAT16M1X4 = 356
  RVV_FLOAT16M1X5 = 357
  RVV_FLOAT16M1X6 = 358
  RVV_FLOAT16M1X7 = 359
  RVV_FLOAT16M1X8 = 360
  RVV_FLOAT16M2X2 = 361
  RVV_FLOAT16M2X3 = 362
  RVV_FLOAT16M2X4 = 363
  RVV_FLOAT16M4X2 = 364
  RVV_FLOAT32MF2X2 = 365
  RVV_FLOAT32MF2X3 = 366
  RVV_FLOAT32MF2X4 = 367
  RVV_FLOAT32MF2X5 = 368
  RVV_FLOAT32MF2X6 = 369
  RVV_FLOAT32MF2X7 = 370
  RVV_FLOAT32MF2X8 = 371
  RVV_FLOAT32M1X2 = 372
  RVV_FLOAT32M1X3 = 373
  RVV_FLOAT32M1X4 = 374
  RVV_FLOAT32M1X5 = 375
  RVV_FLOAT32M1X6 = 376
  RVV_FLOAT32M1X7 = 377
  RVV_FLOAT32M1X8 = 378
  RVV_FLOAT32M2X2 = 379
  RVV_FLOAT32M2X3 = 380
  RVV_FLOAT32M2X4 = 381
  RVV_FLOAT32M4X2 = 382
  RVV_FLOAT64M1X2 = 383
  RVV_FLOAT64M1X3 = 384
  RVV_FLOAT64M1X4 = 385
  RVV_FLOAT64M1X5 = 386
  RVV_FLOAT64M1X6 = 387
  RVV_FLOAT64M1X7 = 388
  RVV_FLOAT64M1X8 = 389
  RVV_FLOAT64M2X2 = 390
  RVV_FLOAT64M2X3 = 391
  RVV_FLOAT64M2X4 = 392
  RVV_FLOAT64M4X2 = 393
  WASM_EXTERN_REFERENCE = 394
  VOID = 395
  BOOLEAN = 396
  CHARACTER_U = 397
  U_CHAR = 398
  W_CHAR_U = 399
  CHAR8 = 400
  CHAR16 = 401
  CHAR32 = 402
  U_SHORT = 403
  U_INT = 404
  U_LONG = 405
  U_LONG_LONG = 406
  U_INT128 = 407
  CHARACTER_S = 408
  S_CHAR = 409
  W_CHAR_S = 410
  SHORT = 411
  INT = 412
  LONG = 413
  LONG_LONG = 414
  INT128 = 415
  SHORT_ACCUM = 416
  ACCUM = 417
  LONG_ACCUM = 418
  U_SHORT_ACCUM = 419
  U_ACCUM = 420
  U_LONG_ACCUM = 421
  SHORT_FRACT = 422
  FRACT = 423
  LONG_FRACT = 424
  U_SHORT_FRACT = 425
  U_FRACT = 426
  U_LONG_FRACT = 427
  SAT_SHORT_ACCUM = 428
  SAT_ACCUM = 429
  SAT_LONG_ACCUM = 430
  SAT_U_SHORT_ACCUM = 431
  SAT_U_ACCUM = 432
  SAT_U_LONG_ACCUM = 433
  SAT_SHORT_FRACT = 434
  SAT_FRACT = 435
  SAT_LONG_FRACT = 436
  SAT_U_SHORT_FRACT = 437
  SAT_U_FRACT = 438
  SAT_U_LONG_FRACT = 439
  HALF = 440
  FLOAT = 441
  DOUBLE = 442
  LONG_DOUBLE = 443
  FLOAT16 = 444
  B_FLOAT16 = 445
  FLOAT128 = 446
  IBM128 = 447
  NULL_POINTER = 448
  OBJ_C_ID = 449
  OBJ_C_CLASS = 450
  OBJ_C_SEL = 451
  OCL_SAMPLER = 452
  OCL_EVENT = 453
  OCL_CLK_EVENT = 454
  OCL_QUEUE = 455
  OCL_RESERVE_ID = 456
  DEPENDENT = 457
  OVERLOAD = 458
  BOUND_MEMBER = 459
  PSEUDO_OBJECT = 460
  UNKNOWN_ANY = 461
  BUILTIN_FN = 462
  ARC_UNBRIDGED_CAST = 463
  INCOMPLETE_MATRIX_INDEX = 464
  OMP_ARRAY_SECTION = 465
  OMP_ARRAY_SHAPING = 466
  OMP_ITERATOR = 467
  UNRESOLVED = 468

class CDeclAttrSpelling(IntEnum):
  GNU_CDECL = 0
  CXX11_GNU_CDECL = 1
  C2X_GNU_CDECL = 2
  KEYWORD_CDECL = 3
  SPELLING_NOT_CALCULATED = 4

class CFAuditedTransferAttrSpelling(IntEnum):
  GNU_CF_AUDITED_TRANSFER = 0
  CXX11_CLANG_CF_AUDITED_TRANSFER = 1
  C2X_CLANG_CF_AUDITED_TRANSFER = 2
  SPELLING_NOT_CALCULATED = 3

class CFConsumedAttrSpelling(IntEnum):
  GNU_CF_CONSUMED = 0
  CXX11_CLANG_CF_CONSUMED = 1
  C2X_CLANG_CF_CONSUMED = 2
  SPELLING_NOT_CALCULATED = 3

class CFGuardAttrGuardArg(IntEnum):
  NOCF = 0

class CFGuardAttrSpelling(IntEnum):
  DECLSPEC_GUARD = 0
  GNU_GUARD = 1
  CXX11_CLANG_GUARD = 2
  C2X_CLANG_GUARD = 3
  SPELLING_NOT_CALCULATED = 4

class CFICanonicalJumpTableAttrSpelling(IntEnum):
  GNU_CFI_CANONICAL_JUMP_TABLE = 0
  CXX11_CLANG_CFI_CANONICAL_JUMP_TABLE = 1
  C2X_CLANG_CFI_CANONICAL_JUMP_TABLE = 2
  SPELLING_NOT_CALCULATED = 3

class CFReturnsNotRetainedAttrSpelling(IntEnum):
  GNU_CF_RETURNS_NOT_RETAINED = 0
  CXX11_CLANG_CF_RETURNS_NOT_RETAINED = 1
  C2X_CLANG_CF_RETURNS_NOT_RETAINED = 2
  SPELLING_NOT_CALCULATED = 3

class CFReturnsRetainedAttrSpelling(IntEnum):
  GNU_CF_RETURNS_RETAINED = 0
  CXX11_CLANG_CF_RETURNS_RETAINED = 1
  C2X_CLANG_CF_RETURNS_RETAINED = 2
  SPELLING_NOT_CALCULATED = 3

class CFUnknownTransferAttrSpelling(IntEnum):
  GNU_CF_UNKNOWN_TRANSFER = 0
  CXX11_CLANG_CF_UNKNOWN_TRANSFER = 1
  C2X_CLANG_CF_UNKNOWN_TRANSFER = 2
  SPELLING_NOT_CALCULATED = 3

class CPUDispatchAttrSpelling(IntEnum):
  GNU_CPU_DISPATCH = 0
  CXX11_CLANG_CPU_DISPATCH = 1
  C2X_CLANG_CPU_DISPATCH = 2
  DECLSPEC_CPU_DISPATCH = 3
  SPELLING_NOT_CALCULATED = 4

class CPUSpecificAttrSpelling(IntEnum):
  GNU_CPU_SPECIFIC = 0
  CXX11_CLANG_CPU_SPECIFIC = 1
  C2X_CLANG_CPU_SPECIFIC = 2
  DECLSPEC_CPU_SPECIFIC = 3
  SPELLING_NOT_CALCULATED = 4

class CUDAConstantAttrSpelling(IntEnum):
  GNU_CONSTANT = 0
  DECLSPEC_CONSTANT = 1
  SPELLING_NOT_CALCULATED = 2

class CUDADeviceAttrSpelling(IntEnum):
  GNU_DEVICE = 0
  DECLSPEC_DEVICE = 1
  SPELLING_NOT_CALCULATED = 2

class CUDADeviceBuiltinSurfaceTypeAttrSpelling(IntEnum):
  GNU_DEVICE_BUILTIN_SURFACE_TYPE = 0
  DECLSPEC_DEVICE_BUILTIN_SURFACE_TYPE = 1
  SPELLING_NOT_CALCULATED = 2

class CUDADeviceBuiltinTextureTypeAttrSpelling(IntEnum):
  GNU_DEVICE_BUILTIN_TEXTURE_TYPE = 0
  DECLSPEC_DEVICE_BUILTIN_TEXTURE_TYPE = 1
  SPELLING_NOT_CALCULATED = 2

class CUDAGlobalAttrSpelling(IntEnum):
  GNU_GLOBAL = 0
  DECLSPEC_GLOBAL = 1
  SPELLING_NOT_CALCULATED = 2

class CUDAHostAttrSpelling(IntEnum):
  GNU_HOST = 0
  DECLSPEC_HOST = 1
  SPELLING_NOT_CALCULATED = 2

class CUDALaunchBoundsAttrSpelling(IntEnum):
  GNU_LAUNCH_BOUNDS = 0
  DECLSPEC_LAUNCH_BOUNDS = 1
  SPELLING_NOT_CALCULATED = 2

class CUDASharedAttrSpelling(IntEnum):
  GNU_SHARED = 0
  DECLSPEC_SHARED = 1
  SPELLING_NOT_CALCULATED = 2

class CXX11NoReturnAttrSpelling(IntEnum):
  CXX11_NORETURN = 0
  C2XNORETURN = 1
  C2X_NORETURN = 2
  SPELLING_NOT_CALCULATED = 3

class CXXConstructExprConstructionKind(IntEnum):
  COMPLETE = 0
  NON_VIRTUAL_BASE = 1
  VIRTUAL_BASE = 2
  DELEGATING = 3

class CXXNewExprInitializationStyle(IntEnum):
  NO_INITIALIZER = 0
  CALL_INITIALIZER = 1
  LIST_INITIALIZER = 2

class CXXRecordDeclLambdaDependencyKind(IntEnum):
  UNKNOWN = 0
  ALWAYS_DEPENDENT = 1
  NEVER_DEPENDENT = 2

class CallExprADLCallKind(IntEnum):
  NOT_ADL = 0
  USES_ADL = 1

class CallableWhenAttrConsumedState(IntEnum):
  UNKNOWN = 0
  CONSUMED = 1
  UNCONSUMED = 2

class CallableWhenAttrSpelling(IntEnum):
  GNU_CALLABLE_WHEN = 0
  CXX11_CLANG_CALLABLE_WHEN = 1
  SPELLING_NOT_CALCULATED = 2

class CallbackAttrSpelling(IntEnum):
  GNU_CALLBACK = 0
  CXX11_CLANG_CALLBACK = 1
  C2X_CLANG_CALLBACK = 2
  SPELLING_NOT_CALCULATED = 3

class CalledOnceAttrSpelling(IntEnum):
  GNU_CALLED_ONCE = 0
  CXX11_CLANG_CALLED_ONCE = 1
  C2X_CLANG_CALLED_ONCE = 2
  SPELLING_NOT_CALCULATED = 3

class CapabilityAttrSpelling(IntEnum):
  GNU_CAPABILITY = 0
  CXX11_CLANG_CAPABILITY = 1
  GNU_SHARED_CAPABILITY = 2
  CXX11_CLANG_SHARED_CAPABILITY = 3
  SPELLING_NOT_CALCULATED = 4

class CapturedStmtVariableCaptureKind(IntEnum):
  THIS = 0
  BY_REFERENCE = 1
  BY_COPY = 2
  VLA_TYPE = 3

class CarriesDependencyAttrSpelling(IntEnum):
  GNU_CARRIES_DEPENDENCY = 0
  CXX11_CARRIES_DEPENDENCY = 1
  SPELLING_NOT_CALCULATED = 2

class CharacterLiteralCharacterKind(IntEnum):
  ASCII = 0
  WIDE = 1
  UTF8 = 2
  UTF16 = 3
  UTF32 = 4

class CleanupAttrSpelling(IntEnum):
  GNU_CLEANUP = 0
  CXX11_GNU_CLEANUP = 1
  C2X_GNU_CLEANUP = 2
  SPELLING_NOT_CALCULATED = 3

class ColdAttrSpelling(IntEnum):
  GNU_COLD = 0
  CXX11_GNU_COLD = 1
  C2X_GNU_COLD = 2
  SPELLING_NOT_CALCULATED = 3

class CommonAttrSpelling(IntEnum):
  GNU_COMMON = 0
  CXX11_GNU_COMMON = 1
  C2X_GNU_COMMON = 2
  SPELLING_NOT_CALCULATED = 3

class ConstAttrSpelling(IntEnum):
  GNU_CONST = 0
  CXX11_GNU_CONST = 1
  C2X_GNU_CONST = 2
  SPELLING_NOT_CALCULATED = 3

class ConstInitAttrSpelling(IntEnum):
  KEYWORD_CONSTINIT = 0
  GNU_REQUIRE_CONSTANT_INITIALIZATION = 1
  CXX11_CLANG_REQUIRE_CONSTANT_INITIALIZATION = 2
  SPELLING_NOT_CALCULATED = 3

class ConstantExprResultStorageKind(IntEnum):
  NONE = 0
  INT64 = 1
  AP_VALUE = 2

class ConstructorAttrSpelling(IntEnum):
  GNU_CONSTRUCTOR = 0
  CXX11_GNU_CONSTRUCTOR = 1
  C2X_GNU_CONSTRUCTOR = 2
  SPELLING_NOT_CALCULATED = 3

class ConsumableAttrConsumedState(IntEnum):
  UNKNOWN = 0
  CONSUMED = 1
  UNCONSUMED = 2

class ConsumableAttrSpelling(IntEnum):
  GNU_CONSUMABLE = 0
  CXX11_CLANG_CONSUMABLE = 1
  SPELLING_NOT_CALCULATED = 2

class ConsumableAutoCastAttrSpelling(IntEnum):
  GNU_CONSUMABLE_AUTO_CAST_STATE = 0
  CXX11_CLANG_CONSUMABLE_AUTO_CAST_STATE = 1
  SPELLING_NOT_CALCULATED = 2

class ConsumableSetOnReadAttrSpelling(IntEnum):
  GNU_CONSUMABLE_STATE_ON_READ = 0
  CXX11_CLANG_CONSUMABLE_STATE_ON_READ = 1
  SPELLING_NOT_CALCULATED = 2

class ConvergentAttrSpelling(IntEnum):
  GNU_CONVERGENT = 0
  CXX11_CLANG_CONVERGENT = 1
  C2X_CLANG_CONVERGENT = 2
  SPELLING_NOT_CALCULATED = 3

class DLLExportAttrSpelling(IntEnum):
  DECLSPEC_DLLEXPORT = 0
  GNU_DLLEXPORT = 1
  CXX11_GNU_DLLEXPORT = 2
  C2X_GNU_DLLEXPORT = 3
  SPELLING_NOT_CALCULATED = 4

class DLLImportAttrSpelling(IntEnum):
  DECLSPEC_DLLIMPORT = 0
  GNU_DLLIMPORT = 1
  CXX11_GNU_DLLIMPORT = 2
  C2X_GNU_DLLIMPORT = 3
  SPELLING_NOT_CALCULATED = 4

class DeclFriendObjectKind(IntEnum):
  NONE = 0
  DECLARED = 1
  UNDECLARED = 2

class DeclIdentifierNamespace(IntEnum):
  LABEL = 0
  TAG = 1
  TYPE = 2
  MEMBER = 3
  NAMESPACE = 4
  ORDINARY = 5
  OBJ_C_PROTOCOL = 6
  ORDINARY_FRIEND = 7
  TAG_FRIEND = 8
  USING = 9
  NON_MEMBER_OPERATOR = 10
  LOCAL_EXTERN = 11
  OMP_REDUCTION = 12
  OMP_MAPPER = 13

class DeclModuleOwnershipKind(IntEnum):
  UNOWNED = 0
  VISIBLE = 1
  VISIBLE_WHEN_IMPORTED = 2
  REACHABLE_WHEN_IMPORTED = 3
  MODULE_PRIVATE = 4

class DeclObjCDeclQualifier(IntEnum):
  NONE = 0
  IN = 1
  INOUT = 2
  OUT = 3
  BYCOPY = 4
  BYREF = 5
  ONEWAY = 6
  CS_NULLABILITY = 7

class DeprecatedAttrSpelling(IntEnum):
  GNU_DEPRECATED = 0
  CXX11_GNU_DEPRECATED = 1
  C2X_GNU_DEPRECATED = 2
  DECLSPEC_DEPRECATED = 3
  CXX11_DEPRECATED = 4
  C2X_DEPRECATED = 5
  SPELLING_NOT_CALCULATED = 6

class DestructorAttrSpelling(IntEnum):
  GNU_DESTRUCTOR = 0
  CXX11_GNU_DESTRUCTOR = 1
  C2X_GNU_DESTRUCTOR = 2
  SPELLING_NOT_CALCULATED = 3

class DiagnoseAsBuiltinAttrSpelling(IntEnum):
  GNU_DIAGNOSE_AS_BUILTIN = 0
  CXX11_CLANG_DIAGNOSE_AS_BUILTIN = 1
  C2X_CLANG_DIAGNOSE_AS_BUILTIN = 2
  SPELLING_NOT_CALCULATED = 3

class DiagnoseIfAttrDiagnosticType(IntEnum):
  ERROR = 0
  WARNING = 1

class DisableSanitizerInstrumentationAttrSpelling(IntEnum):
  GNU_DISABLE_SANITIZER_INSTRUMENTATION = 0
  CXX11_CLANG_DISABLE_SANITIZER_INSTRUMENTATION = 1
  C2X_CLANG_DISABLE_SANITIZER_INSTRUMENTATION = 2
  SPELLING_NOT_CALCULATED = 3

class DisableTailCallsAttrSpelling(IntEnum):
  GNU_DISABLE_TAIL_CALLS = 0
  CXX11_CLANG_DISABLE_TAIL_CALLS = 1
  C2X_CLANG_DISABLE_TAIL_CALLS = 2
  SPELLING_NOT_CALCULATED = 3

class EnforceTCBAttrSpelling(IntEnum):
  GNU_ENFORCE_TCB = 0
  CXX11_CLANG_ENFORCE_TCB = 1
  C2X_CLANG_ENFORCE_TCB = 2
  SPELLING_NOT_CALCULATED = 3

class EnforceTCBLeafAttrSpelling(IntEnum):
  GNU_ENFORCE_TCB_LEAF = 0
  CXX11_CLANG_ENFORCE_TCB_LEAF = 1
  C2X_CLANG_ENFORCE_TCB_LEAF = 2
  SPELLING_NOT_CALCULATED = 3

class EnumExtensibilityAttrKind(IntEnum):
  CLOSED = 0
  OPEN = 1

class EnumExtensibilityAttrSpelling(IntEnum):
  GNU_ENUM_EXTENSIBILITY = 0
  CXX11_CLANG_ENUM_EXTENSIBILITY = 1
  C2X_CLANG_ENUM_EXTENSIBILITY = 2
  SPELLING_NOT_CALCULATED = 3

class ErrorAttrSpelling(IntEnum):
  GNU_ERROR = 0
  CXX11_GNU_ERROR = 1
  C2X_GNU_ERROR = 2
  GNU_WARNING = 3
  CXX11_GNU_WARNING = 4
  C2X_GNU_WARNING = 5
  SPELLING_NOT_CALCULATED = 6

class ExcludeFromExplicitInstantiationAttrSpelling(IntEnum):
  GNU_EXCLUDE_FROM_EXPLICIT_INSTANTIATION = 0
  CXX11_CLANG_EXCLUDE_FROM_EXPLICIT_INSTANTIATION = 1
  C2X_CLANG_EXCLUDE_FROM_EXPLICIT_INSTANTIATION = 2
  SPELLING_NOT_CALCULATED = 3

class ExprConstantExprKind(IntEnum):
  NORMAL = 0
  NON_CLASS_TEMPLATE_ARGUMENT = 1
  CLASS_TEMPLATE_ARGUMENT = 2
  IMMEDIATE_INVOCATION = 3

class ExprLValueClassification(IntEnum):
  VALID = 0
  NOT_OBJECT_TYPE = 1
  INCOMPLETE_VOID_TYPE = 2
  DUPLICATE_VECTOR_COMPONENTS = 3
  INVALID_EXPRESSION = 4
  INVALID_MESSAGE_EXPRESSION = 5
  MEMBER_FUNCTION = 6
  SUB_OBJ_C_PROPERTY_SETTING = 7
  CLASS_TEMPORARY = 8
  ARRAY_TEMPORARY = 9

class ExprNullPointerConstantKind(IntEnum):
  NOT_NULL = 0
  ZERO_EXPRESSION = 1
  ZERO_LITERAL = 2
  CXX11_NULLPTR = 3
  GNU_NULL = 4

class ExprNullPointerConstantValueDependence(IntEnum):
  NEVER_VALUE_DEPENDENT = 0
  VALUE_DEPENDENT_IS_NULL = 1
  VALUE_DEPENDENT_IS_NOT_NULL = 2

class ExprSideEffectsKind(IntEnum):
  NO_SIDE_EFFECTS = 0
  ALLOW_UNDEFINED_BEHAVIOR = 1
  ALLOW_SIDE_EFFECTS = 2

class ExprisModifiableLvalueResult(IntEnum):
  VALID = 0
  NOT_OBJECT_TYPE = 1
  INCOMPLETE_VOID_TYPE = 2
  DUPLICATE_VECTOR_COMPONENTS = 3
  INVALID_EXPRESSION = 4
  L_VALUE_CAST = 5
  INCOMPLETE_TYPE = 6
  CONST_QUALIFIED = 7
  CONST_QUALIFIED_FIELD = 8
  CONST_ADDRESS_SPACE = 9
  ARRAY_TYPE = 10
  NO_SETTER_PROPERTY = 11
  MEMBER_FUNCTION = 12
  SUB_OBJ_C_PROPERTY_SETTING = 13
  INVALID_MESSAGE_EXPRESSION = 14
  CLASS_TEMPORARY = 15
  ARRAY_TEMPORARY = 16

class ExternalSourceSymbolAttrSpelling(IntEnum):
  GNU_EXTERNAL_SOURCE_SYMBOL = 0
  CXX11_CLANG_EXTERNAL_SOURCE_SYMBOL = 1
  C2X_CLANG_EXTERNAL_SOURCE_SYMBOL = 2
  SPELLING_NOT_CALCULATED = 3

class FallThroughAttrSpelling(IntEnum):
  CXX11_FALLTHROUGH = 0
  C2X_FALLTHROUGH = 1
  CXX11_CLANG_FALLTHROUGH = 2
  GNU_FALLTHROUGH = 3
  CXX11_GNU_FALLTHROUGH = 4
  C2X_GNU_FALLTHROUGH = 5
  SPELLING_NOT_CALCULATED = 6

class FastCallAttrSpelling(IntEnum):
  GNU_FASTCALL = 0
  CXX11_GNU_FASTCALL = 1
  C2X_GNU_FASTCALL = 2
  KEYWORD_FASTCALL = 3
  SPELLING_NOT_CALCULATED = 4

class FinalAttrSpelling(IntEnum):
  KEYWORD_FINAL = 0
  KEYWORD_SEALED = 1
  SPELLING_NOT_CALCULATED = 2

class FlagEnumAttrSpelling(IntEnum):
  GNU_FLAG_ENUM = 0
  CXX11_CLANG_FLAG_ENUM = 1
  C2X_CLANG_FLAG_ENUM = 2
  SPELLING_NOT_CALCULATED = 3

class FlattenAttrSpelling(IntEnum):
  GNU_FLATTEN = 0
  CXX11_GNU_FLATTEN = 1
  C2X_GNU_FLATTEN = 2
  SPELLING_NOT_CALCULATED = 3

class FormatArgAttrSpelling(IntEnum):
  GNU_FORMAT_ARGUMENT = 0
  CXX11_GNU_FORMAT_ARGUMENT = 1
  C2X_GNU_FORMAT_ARGUMENT = 2
  SPELLING_NOT_CALCULATED = 3

class FormatAttrSpelling(IntEnum):
  GNU_FORMAT = 0
  CXX11_GNU_FORMAT = 1
  C2X_GNU_FORMAT = 2
  SPELLING_NOT_CALCULATED = 3

class FunctionDeclTemplatedKind(IntEnum):
  NON_TEMPLATE = 0
  FUNCTION_TEMPLATE = 1
  MEMBER_SPECIALIZATION = 2
  FUNCTION_TEMPLATE_SPECIALIZATION = 3
  DEPENDENT_FUNCTION_TEMPLATE_SPECIALIZATION = 4
  DEPENDENT_NON_TEMPLATE = 5

class FunctionReturnThunksAttrKind(IntEnum):
  KEEP = 0
  EXTERN = 1

class FunctionReturnThunksAttrSpelling(IntEnum):
  GNU_FUNCTION_RETURN = 0
  CXX11_GNU_FUNCTION_RETURN = 1
  C2X_GNU_FUNCTION_RETURN = 2
  SPELLING_NOT_CALCULATED = 3

class GNUInlineAttrSpelling(IntEnum):
  GNU_GNU_INLINE = 0
  CXX11_GNU_GNU_INLINE = 1
  C2X_GNU_GNU_INLINE = 2
  SPELLING_NOT_CALCULATED = 3

class GuardedVarAttrSpelling(IntEnum):
  GNU_GUARDED_VARIABLE = 0
  CXX11_CLANG_GUARDED_VARIABLE = 1
  SPELLING_NOT_CALCULATED = 2

class HIPManagedAttrSpelling(IntEnum):
  GNU_MANAGED = 0
  DECLSPEC_MANAGED = 1
  SPELLING_NOT_CALCULATED = 2

class HLSLResourceAttrResourceClass(IntEnum):
  SRV = 0
  UAV = 1
  C_BUFFER = 2
  SAMPLER = 3

class HLSLResourceAttrResourceKind(IntEnum):
  TEXTURE1_D = 0
  TEXTURE2_D = 1
  TEXTURE2_DMS = 2
  TEXTURE3_D = 3
  TEXTURE_CUBE = 4
  TEXTURE1_D_ARRAY = 5
  TEXTURE2_D_ARRAY = 6
  TEXTURE2_DMS_ARRAY = 7
  TEXTURE_CUBE_ARRAY = 8
  TYPED_BUFFER = 9
  RAW_BUFFER = 10
  STRUCTURED_BUFFER = 11
  C_BUFFER_KIND = 12
  SAMPLER_KIND = 13
  T_BUFFER = 14
  RT_ACCELERATION_STRUCTURE = 15
  FEEDBACK_TEXTURE2_D = 16
  FEEDBACK_TEXTURE2_D_ARRAY = 17

class HLSLShaderAttrShaderType(IntEnum):
  PIXEL = 0
  VERTEX = 1
  GEOMETRY = 2
  HULL = 3
  DOMAIN_ = 4
  COMPUTE = 5
  LIBRARY = 6
  RAY_GENERATION = 7
  INTERSECTION = 8
  ANY_HIT = 9
  CLOSEST_HIT = 10
  MISS = 11
  CALLABLE = 12
  MESH = 13
  AMPLIFICATION = 14

class HotAttrSpelling(IntEnum):
  GNU_HOT = 0
  CXX11_GNU_HOT = 1
  C2X_GNU_HOT = 2
  SPELLING_NOT_CALCULATED = 3

class IBActionAttrSpelling(IntEnum):
  GNU_IBACTION = 0
  CXX11_CLANG_IBACTION = 1
  C2X_CLANG_IBACTION = 2
  SPELLING_NOT_CALCULATED = 3

class IBOutletAttrSpelling(IntEnum):
  GNU_IBOUTLET = 0
  CXX11_CLANG_IBOUTLET = 1
  C2X_CLANG_IBOUTLET = 2
  SPELLING_NOT_CALCULATED = 3

class IBOutletCollectionAttrSpelling(IntEnum):
  GNU_IBOUTLETCOLLECTION = 0
  CXX11_CLANG_IBOUTLETCOLLECTION = 1
  C2X_CLANG_IBOUTLETCOLLECTION = 2
  SPELLING_NOT_CALCULATED = 3

class IFuncAttrSpelling(IntEnum):
  GNU_IFUNC = 0
  CXX11_GNU_IFUNC = 1
  C2X_GNU_IFUNC = 2
  SPELLING_NOT_CALCULATED = 3

class ImplicitCastExprOnStack(IntEnum):
  ON_STACK = 0

class ImplicitParamDeclImplicitParamKind(IntEnum):
  OBJ_C_SELF = 0
  OBJ_C_CMD = 1
  CXX_THIS = 2
  CXXVTT = 3
  CAPTURED_CONTEXT = 4
  THREAD_PRIVATE_VARIABLE = 5
  OTHER = 6

class InitPriorityAttrSpelling(IntEnum):
  GNU_INITIALIZER_PRIORITY = 0
  CXX11_GNU_INITIALIZER_PRIORITY = 1
  SPELLING_NOT_CALCULATED = 2

class IntelOclBiccAttrSpelling(IntEnum):
  GNU_INTEL_OCL_BICC = 0
  CXX11_CLANG_INTEL_OCL_BICC = 1
  SPELLING_NOT_CALCULATED = 2

class InternalLinkageAttrSpelling(IntEnum):
  GNU_INTERNAL_LINKAGE = 0
  CXX11_CLANG_INTERNAL_LINKAGE = 1
  C2X_CLANG_INTERNAL_LINKAGE = 2
  SPELLING_NOT_CALCULATED = 3

class LTOVisibilityPublicAttrSpelling(IntEnum):
  GNU_LTO_VISIBILITY_PUBLIC = 0
  CXX11_CLANG_LTO_VISIBILITY_PUBLIC = 1
  C2X_CLANG_LTO_VISIBILITY_PUBLIC = 2
  SPELLING_NOT_CALCULATED = 3

class LeafAttrSpelling(IntEnum):
  GNU_LEAF = 0
  CXX11_GNU_LEAF = 1
  C2X_GNU_LEAF = 2
  SPELLING_NOT_CALCULATED = 3

class LifetimeBoundAttrSpelling(IntEnum):
  GNU_LIFETIMEBOUND = 0
  CXX11_CLANG_LIFETIMEBOUND = 1
  SPELLING_NOT_CALCULATED = 2

class LikelyAttrSpelling(IntEnum):
  CXX11_LIKELY = 0
  C2X_CLANG_LIKELY = 1
  SPELLING_NOT_CALCULATED = 2

class LinkageSpecDeclLanguageIDs(IntEnum):
  C = 0
  CXX = 1

class LoaderUninitializedAttrSpelling(IntEnum):
  GNU_LOADER_UNINITIALIZED = 0
  CXX11_CLANG_LOADER_UNINITIALIZED = 1
  C2X_CLANG_LOADER_UNINITIALIZED = 2
  SPELLING_NOT_CALCULATED = 3

class LoopHintAttrLoopHintState(IntEnum):
  ENABLE = 0
  DISABLE = 1
  NUMERIC = 2
  FIXED_WIDTH = 3
  SCALABLE_WIDTH = 4
  ASSUME_SAFETY = 5
  FULL = 6

class LoopHintAttrOptionType(IntEnum):
  VECTORIZE = 0
  VECTORIZE_WIDTH = 1
  INTERLEAVE = 2
  INTERLEAVE_COUNT = 3
  UNROLL = 4
  UNROLL_COUNT = 5
  UNROLL_AND_JAM = 6
  UNROLL_AND_JAM_COUNT = 7
  PIPELINE_DISABLED = 8
  PIPELINE_INITIATION_INTERVAL = 9
  DISTRIBUTE = 10
  VECTORIZE_PREDICATE = 11

class LoopHintAttrSpelling(IntEnum):
  PRAGMA_CLANG_LOOP = 0
  PRAGMA_UNROLL = 1
  PRAGMA_NOUNROLL = 2
  PRAGMA_UNROLL_AND_JAM = 3
  PRAGMA_NOUNROLL_AND_JAM = 4
  SPELLING_NOT_CALCULATED = 5

class MIGServerRoutineAttrSpelling(IntEnum):
  GNU_MIG_SERVER_ROUTINE = 0
  CXX11_CLANG_MIG_SERVER_ROUTINE = 1
  C2X_CLANG_MIG_SERVER_ROUTINE = 2
  SPELLING_NOT_CALCULATED = 3

class MSABIAttrSpelling(IntEnum):
  GNU_MS_ABI = 0
  CXX11_GNU_MS_ABI = 1
  C2X_GNU_MS_ABI = 2
  SPELLING_NOT_CALCULATED = 3

class MSInheritanceAttrSpelling(IntEnum):
  KEYWORD_SINGLE_INHERITANCE = 0
  KEYWORD_MULTIPLE_INHERITANCE = 1
  KEYWORD_VIRTUAL_INHERITANCE = 2
  KEYWORD_UNSPECIFIED_INHERITANCE = 3
  SPELLING_NOT_CALCULATED = 4

class MSP430InterruptAttrSpelling(IntEnum):
  GNU_INTERRUPT = 0
  CXX11_GNU_INTERRUPT = 1
  C2X_GNU_INTERRUPT = 2
  SPELLING_NOT_CALCULATED = 3

class MSStructAttrSpelling(IntEnum):
  GNU_MS_STRUCT = 0
  CXX11_GNU_MS_STRUCT = 1
  C2X_GNU_MS_STRUCT = 2
  SPELLING_NOT_CALCULATED = 3

class MayAliasAttrSpelling(IntEnum):
  GNU_MAY_ALIAS = 0
  CXX11_GNU_MAY_ALIAS = 1
  C2X_GNU_MAY_ALIAS = 2
  SPELLING_NOT_CALCULATED = 3

class MaybeUndefAttrSpelling(IntEnum):
  GNU_MAYBE_UNDEF = 0
  CXX11_CLANG_MAYBE_UNDEF = 1
  C2X_CLANG_MAYBE_UNDEF = 2
  SPELLING_NOT_CALCULATED = 3

class MicroMipsAttrSpelling(IntEnum):
  GNU_MICROMIPS = 0
  CXX11_GNU_MICROMIPS = 1
  C2X_GNU_MICROMIPS = 2
  SPELLING_NOT_CALCULATED = 3

class MinSizeAttrSpelling(IntEnum):
  GNU_MINSIZE = 0
  CXX11_CLANG_MINSIZE = 1
  C2X_CLANG_MINSIZE = 2
  SPELLING_NOT_CALCULATED = 3

class MinVectorWidthAttrSpelling(IntEnum):
  GNU_MIN_VECTOR_WIDTH = 0
  CXX11_CLANG_MIN_VECTOR_WIDTH = 1
  C2X_CLANG_MIN_VECTOR_WIDTH = 2
  SPELLING_NOT_CALCULATED = 3

class Mips16AttrSpelling(IntEnum):
  GNU_MIPS16 = 0
  CXX11_GNU_MIPS16 = 1
  C2X_GNU_MIPS16 = 2
  SPELLING_NOT_CALCULATED = 3

class MipsInterruptAttrInterruptType(IntEnum):
  SW0 = 0
  SW1 = 1
  HW0 = 2
  HW1 = 3
  HW2 = 4
  HW3 = 5
  HW4 = 6
  HW5 = 7
  EIC = 8

class MipsInterruptAttrSpelling(IntEnum):
  GNU_INTERRUPT = 0
  CXX11_GNU_INTERRUPT = 1
  C2X_GNU_INTERRUPT = 2
  SPELLING_NOT_CALCULATED = 3

class MipsLongCallAttrSpelling(IntEnum):
  GNU_LONG_CALL = 0
  CXX11_GNU_LONG_CALL = 1
  C2X_GNU_LONG_CALL = 2
  GNU_FAR = 3
  CXX11_GNU_FAR = 4
  C2X_GNU_FAR = 5
  SPELLING_NOT_CALCULATED = 6

class MipsShortCallAttrSpelling(IntEnum):
  GNU_SHORT_CALL = 0
  CXX11_GNU_SHORT_CALL = 1
  C2X_GNU_SHORT_CALL = 2
  GNU_NEAR = 3
  CXX11_GNU_NEAR = 4
  C2X_GNU_NEAR = 5
  SPELLING_NOT_CALCULATED = 6

class ModeAttrSpelling(IntEnum):
  GNU_MODE = 0
  CXX11_GNU_MODE = 1
  C2X_GNU_MODE = 2
  SPELLING_NOT_CALCULATED = 3

class MustTailAttrSpelling(IntEnum):
  GNU_MUSTTAIL = 0
  CXX11_CLANG_MUSTTAIL = 1
  C2X_CLANG_MUSTTAIL = 2
  SPELLING_NOT_CALCULATED = 3

class NSConsumedAttrSpelling(IntEnum):
  GNU_NS_CONSUMED = 0
  CXX11_CLANG_NS_CONSUMED = 1
  C2X_CLANG_NS_CONSUMED = 2
  SPELLING_NOT_CALCULATED = 3

class NSConsumesSelfAttrSpelling(IntEnum):
  GNU_NS_CONSUMES_SELF = 0
  CXX11_CLANG_NS_CONSUMES_SELF = 1
  C2X_CLANG_NS_CONSUMES_SELF = 2
  SPELLING_NOT_CALCULATED = 3

class NSReturnsAutoreleasedAttrSpelling(IntEnum):
  GNU_NS_RETURNS_AUTORELEASED = 0
  CXX11_CLANG_NS_RETURNS_AUTORELEASED = 1
  C2X_CLANG_NS_RETURNS_AUTORELEASED = 2
  SPELLING_NOT_CALCULATED = 3

class NSReturnsNotRetainedAttrSpelling(IntEnum):
  GNU_NS_RETURNS_NOT_RETAINED = 0
  CXX11_CLANG_NS_RETURNS_NOT_RETAINED = 1
  C2X_CLANG_NS_RETURNS_NOT_RETAINED = 2
  SPELLING_NOT_CALCULATED = 3

class NSReturnsRetainedAttrSpelling(IntEnum):
  GNU_NS_RETURNS_RETAINED = 0
  CXX11_CLANG_NS_RETURNS_RETAINED = 1
  C2X_CLANG_NS_RETURNS_RETAINED = 2
  SPELLING_NOT_CALCULATED = 3

class NVPTXKernelAttrSpelling(IntEnum):
  GNU_NVPTX_KERNEL = 0
  CXX11_CLANG_NVPTX_KERNEL = 1
  C2X_CLANG_NVPTX_KERNEL = 2
  SPELLING_NOT_CALCULATED = 3

class NakedAttrSpelling(IntEnum):
  GNU_NAKED = 0
  CXX11_GNU_NAKED = 1
  C2X_GNU_NAKED = 2
  DECLSPEC_NAKED = 3
  SPELLING_NOT_CALCULATED = 4

class NamedDeclExplicitVisibilityKind(IntEnum):
  VISIBILITY_FOR_TYPE = 0
  VISIBILITY_FOR_VALUE = 1

class NoBuiltinAttrSpelling(IntEnum):
  GNU_NO_BUILTIN = 0
  CXX11_CLANG_NO_BUILTIN = 1
  C2X_CLANG_NO_BUILTIN = 2
  SPELLING_NOT_CALCULATED = 3

class NoCommonAttrSpelling(IntEnum):
  GNU_NOCOMMON = 0
  CXX11_GNU_NOCOMMON = 1
  C2X_GNU_NOCOMMON = 2
  SPELLING_NOT_CALCULATED = 3

class NoDebugAttrSpelling(IntEnum):
  GNU_NODEBUG = 0
  CXX11_GNU_NODEBUG = 1
  C2X_GNU_NODEBUG = 2
  SPELLING_NOT_CALCULATED = 3

class NoDerefAttrSpelling(IntEnum):
  GNU_NODEREF = 0
  CXX11_CLANG_NODEREF = 1
  C2X_CLANG_NODEREF = 2
  SPELLING_NOT_CALCULATED = 3

class NoDestroyAttrSpelling(IntEnum):
  GNU_NO_DESTROY = 0
  CXX11_CLANG_NO_DESTROY = 1
  SPELLING_NOT_CALCULATED = 2

class NoDuplicateAttrSpelling(IntEnum):
  GNU_NODUPLICATE = 0
  CXX11_CLANG_NODUPLICATE = 1
  C2X_CLANG_NODUPLICATE = 2
  SPELLING_NOT_CALCULATED = 3

class NoEscapeAttrSpelling(IntEnum):
  GNU_NOESCAPE = 0
  CXX11_CLANG_NOESCAPE = 1
  C2X_CLANG_NOESCAPE = 2
  SPELLING_NOT_CALCULATED = 3

class NoInlineAttrSpelling(IntEnum):
  KEYWORD_NOINLINE = 0
  GNU_NOINLINE = 1
  CXX11_GNU_NOINLINE = 2
  C2X_GNU_NOINLINE = 3
  CXX11_CLANG_NOINLINE = 4
  C2X_CLANG_NOINLINE = 5
  DECLSPEC_NOINLINE = 6
  SPELLING_NOT_CALCULATED = 7

class NoInstrumentFunctionAttrSpelling(IntEnum):
  GNU_NO_INSTRUMENT_FUNCTION = 0
  CXX11_GNU_NO_INSTRUMENT_FUNCTION = 1
  C2X_GNU_NO_INSTRUMENT_FUNCTION = 2
  SPELLING_NOT_CALCULATED = 3

class NoMergeAttrSpelling(IntEnum):
  GNU_NOMERGE = 0
  CXX11_CLANG_NOMERGE = 1
  C2X_CLANG_NOMERGE = 2
  SPELLING_NOT_CALCULATED = 3

class NoMicroMipsAttrSpelling(IntEnum):
  GNU_NOMICROMIPS = 0
  CXX11_GNU_NOMICROMIPS = 1
  C2X_GNU_NOMICROMIPS = 2
  SPELLING_NOT_CALCULATED = 3

class NoMips16AttrSpelling(IntEnum):
  GNU_NOMIPS16 = 0
  CXX11_GNU_NOMIPS16 = 1
  C2X_GNU_NOMIPS16 = 2
  SPELLING_NOT_CALCULATED = 3

class NoProfileFunctionAttrSpelling(IntEnum):
  GNU_NO_PROFILE_INSTRUMENT_FUNCTION = 0
  CXX11_GNU_NO_PROFILE_INSTRUMENT_FUNCTION = 1
  C2X_GNU_NO_PROFILE_INSTRUMENT_FUNCTION = 2
  SPELLING_NOT_CALCULATED = 3

class NoRandomizeLayoutAttrSpelling(IntEnum):
  GNU_NO_RANDOMIZE_LAYOUT = 0
  CXX11_GNU_NO_RANDOMIZE_LAYOUT = 1
  C2X_GNU_NO_RANDOMIZE_LAYOUT = 2
  SPELLING_NOT_CALCULATED = 3

class NoReturnAttrSpelling(IntEnum):
  GNU_NORETURN = 0
  CXX11_GNU_NORETURN = 1
  C2X_GNU_NORETURN = 2
  DECLSPEC_NORETURN = 3
  SPELLING_NOT_CALCULATED = 4

class NoSanitizeAttrSpelling(IntEnum):
  GNU_NO_SANITIZE = 0
  CXX11_CLANG_NO_SANITIZE = 1
  C2X_CLANG_NO_SANITIZE = 2
  SPELLING_NOT_CALCULATED = 3

class NoSpeculativeLoadHardeningAttrSpelling(IntEnum):
  GNU_NO_SPECULATIVE_LOAD_HARDENING = 0
  CXX11_CLANG_NO_SPECULATIVE_LOAD_HARDENING = 1
  C2X_CLANG_NO_SPECULATIVE_LOAD_HARDENING = 2
  SPELLING_NOT_CALCULATED = 3

class NoSplitStackAttrSpelling(IntEnum):
  GNU_NO_SPLIT_STACK = 0
  CXX11_GNU_NO_SPLIT_STACK = 1
  C2X_GNU_NO_SPLIT_STACK = 2
  SPELLING_NOT_CALCULATED = 3

class NoStackProtectorAttrSpelling(IntEnum):
  GNU_NO_STACK_PROTECTOR = 0
  CXX11_CLANG_NO_STACK_PROTECTOR = 1
  C2X_CLANG_NO_STACK_PROTECTOR = 2
  DECLSPEC_SAFEBUFFERS = 3
  SPELLING_NOT_CALCULATED = 4

class NoThreadSafetyAnalysisAttrSpelling(IntEnum):
  GNU_NO_THREAD_SAFETY_ANALYSIS = 0
  CXX11_CLANG_NO_THREAD_SAFETY_ANALYSIS = 1
  C2X_CLANG_NO_THREAD_SAFETY_ANALYSIS = 2
  SPELLING_NOT_CALCULATED = 3

class NoThrowAttrSpelling(IntEnum):
  GNU_NOTHROW = 0
  CXX11_GNU_NOTHROW = 1
  C2X_GNU_NOTHROW = 2
  DECLSPEC_NOTHROW = 3
  SPELLING_NOT_CALCULATED = 4

class NoUwtableAttrSpelling(IntEnum):
  GNU_NOUWTABLE = 0
  CXX11_CLANG_NOUWTABLE = 1
  C2X_CLANG_NOUWTABLE = 2
  SPELLING_NOT_CALCULATED = 3

class NonNullAttrSpelling(IntEnum):
  GNU_NONNULL = 0
  CXX11_GNU_NONNULL = 1
  C2X_GNU_NONNULL = 2
  SPELLING_NOT_CALCULATED = 3

class NotTailCalledAttrSpelling(IntEnum):
  GNU_NOT_TAIL_CALLED = 0
  CXX11_CLANG_NOT_TAIL_CALLED = 1
  C2X_CLANG_NOT_TAIL_CALLED = 2
  SPELLING_NOT_CALCULATED = 3

class OMPAllocateDeclAttrAllocatorTypeTy(IntEnum):
  OMP_NULL_MEMORY_ALLOC = 0
  OMP_DEFAULT_MEMORY_ALLOC = 1
  OMP_LARGE_CAP_MEMORY_ALLOC = 2
  OMP_CONST_MEMORY_ALLOC = 3
  OMP_HIGH_BW_MEMORY_ALLOC = 4
  OMP_LOW_LAT_MEMORY_ALLOC = 5
  OMPC_GROUP_MEMORY_ALLOC = 6
  OMPP_TEAM_MEMORY_ALLOC = 7
  OMP_THREAD_MEMORY_ALLOC = 8
  OMP_USER_DEFINED_MEMORY_ALLOC = 9

class OMPDeclareReductionDeclInitKind(IntEnum):
  CALL_INITIALIZER = 0
  DIRECT_INITIALIZER = 1
  COPY_INITIALIZER = 2

class OMPDeclareSimdDeclAttrBranchStateTy(IntEnum):
  UNDEFINED = 0
  INBRANCH = 1
  NOTINBRANCH = 2

class OMPDeclareTargetDeclAttrDevTypeTy(IntEnum):
  HOST = 0
  NO_HOST = 1
  ANY = 2

class OMPDeclareTargetDeclAttrMapTypeTy(IntEnum):
  TO = 0
  ENTER = 1
  LINK = 2

class OSConsumedAttrSpelling(IntEnum):
  GNU_OS_CONSUMED = 0
  CXX11_CLANG_OS_CONSUMED = 1
  C2X_CLANG_OS_CONSUMED = 2
  SPELLING_NOT_CALCULATED = 3

class OSConsumesThisAttrSpelling(IntEnum):
  GNU_OS_CONSUMES_THIS = 0
  CXX11_CLANG_OS_CONSUMES_THIS = 1
  C2X_CLANG_OS_CONSUMES_THIS = 2
  SPELLING_NOT_CALCULATED = 3

class OSReturnsNotRetainedAttrSpelling(IntEnum):
  GNU_OS_RETURNS_NOT_RETAINED = 0
  CXX11_CLANG_OS_RETURNS_NOT_RETAINED = 1
  C2X_CLANG_OS_RETURNS_NOT_RETAINED = 2
  SPELLING_NOT_CALCULATED = 3

class OSReturnsRetainedAttrSpelling(IntEnum):
  GNU_OS_RETURNS_RETAINED = 0
  CXX11_CLANG_OS_RETURNS_RETAINED = 1
  C2X_CLANG_OS_RETURNS_RETAINED = 2
  SPELLING_NOT_CALCULATED = 3

class OSReturnsRetainedOnNonZeroAttrSpelling(IntEnum):
  GNU_OS_RETURNS_RETAINED_ON_NON_ZERO = 0
  CXX11_CLANG_OS_RETURNS_RETAINED_ON_NON_ZERO = 1
  C2X_CLANG_OS_RETURNS_RETAINED_ON_NON_ZERO = 2
  SPELLING_NOT_CALCULATED = 3

class OSReturnsRetainedOnZeroAttrSpelling(IntEnum):
  GNU_OS_RETURNS_RETAINED_ON_ZERO = 0
  CXX11_CLANG_OS_RETURNS_RETAINED_ON_ZERO = 1
  C2X_CLANG_OS_RETURNS_RETAINED_ON_ZERO = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCBoxableAttrSpelling(IntEnum):
  GNU_OBJC_BOXABLE = 0
  CXX11_CLANG_OBJC_BOXABLE = 1
  C2X_CLANG_OBJC_BOXABLE = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCBridgeAttrSpelling(IntEnum):
  GNU_OBJC_BRIDGE = 0
  CXX11_CLANG_OBJC_BRIDGE = 1
  C2X_CLANG_OBJC_BRIDGE = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCBridgeMutableAttrSpelling(IntEnum):
  GNU_OBJC_BRIDGE_MUTABLE = 0
  CXX11_CLANG_OBJC_BRIDGE_MUTABLE = 1
  C2X_CLANG_OBJC_BRIDGE_MUTABLE = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCBridgeRelatedAttrSpelling(IntEnum):
  GNU_OBJC_BRIDGE_RELATED = 0
  CXX11_CLANG_OBJC_BRIDGE_RELATED = 1
  C2X_CLANG_OBJC_BRIDGE_RELATED = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCClassStubAttrSpelling(IntEnum):
  GNU_OBJC_CLASS_STUB = 0
  CXX11_CLANG_OBJC_CLASS_STUB = 1
  C2X_CLANG_OBJC_CLASS_STUB = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCDesignatedInitializerAttrSpelling(IntEnum):
  GNU_OBJC_DESIGNATED_INITIALIZER = 0
  CXX11_CLANG_OBJC_DESIGNATED_INITIALIZER = 1
  C2X_CLANG_OBJC_DESIGNATED_INITIALIZER = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCDirectAttrSpelling(IntEnum):
  GNU_OBJC_DIRECT = 0
  CXX11_CLANG_OBJC_DIRECT = 1
  C2X_CLANG_OBJC_DIRECT = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCDirectMembersAttrSpelling(IntEnum):
  GNU_OBJC_DIRECT_MEMBERS = 0
  CXX11_CLANG_OBJC_DIRECT_MEMBERS = 1
  C2X_CLANG_OBJC_DIRECT_MEMBERS = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCExceptionAttrSpelling(IntEnum):
  GNU_OBJC_EXCEPTION = 0
  CXX11_CLANG_OBJC_EXCEPTION = 1
  C2X_CLANG_OBJC_EXCEPTION = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCExplicitProtocolImplAttrSpelling(IntEnum):
  GNU_OBJC_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION = 0
  CXX11_CLANG_OBJC_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION = 1
  C2X_CLANG_OBJC_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCExternallyRetainedAttrSpelling(IntEnum):
  GNU_OBJC_EXTERNALLY_RETAINED = 0
  CXX11_CLANG_OBJC_EXTERNALLY_RETAINED = 1
  C2X_CLANG_OBJC_EXTERNALLY_RETAINED = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCGCAttrSpelling(IntEnum):
  GNU_OBJC_GC = 0
  CXX11_CLANG_OBJC_GC = 1
  C2X_CLANG_OBJC_GC = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCIndependentClassAttrSpelling(IntEnum):
  GNU_OBJC_INDEPENDENT_CLASS = 0
  CXX11_CLANG_OBJC_INDEPENDENT_CLASS = 1
  C2X_CLANG_OBJC_INDEPENDENT_CLASS = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCIvarDeclAccessControl(IntEnum):
  NONE = 0
  PRIVATE = 1
  PROTECTED = 2
  PUBLIC = 3
  PACKAGE = 4

class ObjCMessageExprReceiverKind(IntEnum):
  CLASS = 0
  INSTANCE = 1
  SUPER_CLASS = 2
  SUPER_INSTANCE = 3

class ObjCMethodDeclImplementationControl(IntEnum):
  NONE = 0
  REQUIRED = 1
  OPTIONAL = 2

class ObjCMethodFamilyAttrFamilyKind(IntEnum):
  NONE = 0
  ALLOC = 1
  COPY = 2
  INITIALIZER = 3
  MUTABLE_COPY = 4
  NEW = 5

class ObjCMethodFamilyAttrSpelling(IntEnum):
  GNU_OBJC_METHOD_FAMILY = 0
  CXX11_CLANG_OBJC_METHOD_FAMILY = 1
  C2X_CLANG_OBJC_METHOD_FAMILY = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCNSObjectAttrSpelling(IntEnum):
  GNUNS_OBJECT = 0
  CXX11_CLANG_NS_OBJECT = 1
  C2X_CLANG_NS_OBJECT = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCNonLazyClassAttrSpelling(IntEnum):
  GNU_OBJC_NONLAZY_CLASS = 0
  CXX11_CLANG_OBJC_NONLAZY_CLASS = 1
  C2X_CLANG_OBJC_NONLAZY_CLASS = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCNonRuntimeProtocolAttrSpelling(IntEnum):
  GNU_OBJC_NON_RUNTIME_PROTOCOL = 0
  CXX11_CLANG_OBJC_NON_RUNTIME_PROTOCOL = 1
  C2X_CLANG_OBJC_NON_RUNTIME_PROTOCOL = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCOwnershipAttrSpelling(IntEnum):
  GNU_OBJC_OWNERSHIP = 0
  CXX11_CLANG_OBJC_OWNERSHIP = 1
  C2X_CLANG_OBJC_OWNERSHIP = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCPreciseLifetimeAttrSpelling(IntEnum):
  GNU_OBJC_PRECISE_LIFETIME = 0
  CXX11_CLANG_OBJC_PRECISE_LIFETIME = 1
  C2X_CLANG_OBJC_PRECISE_LIFETIME = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCPropertyDeclPropertyControl(IntEnum):
  NONE = 0
  REQUIRED = 1
  OPTIONAL = 2

class ObjCPropertyDeclSetterKind(IntEnum):
  ASSIGN = 0
  RETAIN = 1
  COPY = 2
  WEAK = 3

class ObjCPropertyImplDeclKind(IntEnum):
  SYNTHESIZE = 0
  DYNAMIC = 1

class ObjCRequiresPropertyDefsAttrSpelling(IntEnum):
  GNU_OBJC_REQUIRES_PROPERTY_DEFINITIONS = 0
  CXX11_CLANG_OBJC_REQUIRES_PROPERTY_DEFINITIONS = 1
  C2X_CLANG_OBJC_REQUIRES_PROPERTY_DEFINITIONS = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCRequiresSuperAttrSpelling(IntEnum):
  GNU_OBJC_REQUIRES_SUPER = 0
  CXX11_CLANG_OBJC_REQUIRES_SUPER = 1
  C2X_CLANG_OBJC_REQUIRES_SUPER = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCReturnsInnerPointerAttrSpelling(IntEnum):
  GNU_OBJC_RETURNS_INNER_POINTER = 0
  CXX11_CLANG_OBJC_RETURNS_INNER_POINTER = 1
  C2X_CLANG_OBJC_RETURNS_INNER_POINTER = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCRootClassAttrSpelling(IntEnum):
  GNU_OBJC_ROOT_CLASS = 0
  CXX11_CLANG_OBJC_ROOT_CLASS = 1
  C2X_CLANG_OBJC_ROOT_CLASS = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCRuntimeNameAttrSpelling(IntEnum):
  GNU_OBJC_RUNTIME_NAME = 0
  CXX11_CLANG_OBJC_RUNTIME_NAME = 1
  C2X_CLANG_OBJC_RUNTIME_NAME = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCRuntimeVisibleAttrSpelling(IntEnum):
  GNU_OBJC_RUNTIME_VISIBLE = 0
  CXX11_CLANG_OBJC_RUNTIME_VISIBLE = 1
  C2X_CLANG_OBJC_RUNTIME_VISIBLE = 2
  SPELLING_NOT_CALCULATED = 3

class ObjCSubclassingRestrictedAttrSpelling(IntEnum):
  GNU_OBJC_SUBCLASSING_RESTRICTED = 0
  CXX11_CLANG_OBJC_SUBCLASSING_RESTRICTED = 1
  C2X_CLANG_OBJC_SUBCLASSING_RESTRICTED = 2
  SPELLING_NOT_CALCULATED = 3

class OpenCLAccessAttrSpelling(IntEnum):
  KEYWORD_READ_ONLY = 0
  KEYWORD_WRITE_ONLY = 1
  KEYWORD_READ_WRITE = 2
  SPELLING_NOT_CALCULATED = 3

class OpenCLConstantAddressSpaceAttrSpelling(IntEnum):
  KEYWORD_CONSTANT = 0
  GNU_OPENCL_CONSTANT = 1
  CXX11_CLANG_OPENCL_CONSTANT = 2
  C2X_CLANG_OPENCL_CONSTANT = 3
  SPELLING_NOT_CALCULATED = 4

class OpenCLGenericAddressSpaceAttrSpelling(IntEnum):
  KEYWORD_GENERIC = 0
  GNU_OPENCL_GENERIC = 1
  CXX11_CLANG_OPENCL_GENERIC = 2
  C2X_CLANG_OPENCL_GENERIC = 3
  SPELLING_NOT_CALCULATED = 4

class OpenCLGlobalAddressSpaceAttrSpelling(IntEnum):
  KEYWORD_GLOBAL = 0
  GNU_OPENCL_GLOBAL = 1
  CXX11_CLANG_OPENCL_GLOBAL = 2
  C2X_CLANG_OPENCL_GLOBAL = 3
  SPELLING_NOT_CALCULATED = 4

class OpenCLGlobalDeviceAddressSpaceAttrSpelling(IntEnum):
  GNU_OPENCL_GLOBAL_DEVICE = 0
  CXX11_CLANG_OPENCL_GLOBAL_DEVICE = 1
  C2X_CLANG_OPENCL_GLOBAL_DEVICE = 2
  SPELLING_NOT_CALCULATED = 3

class OpenCLGlobalHostAddressSpaceAttrSpelling(IntEnum):
  GNU_OPENCL_GLOBAL_HOST = 0
  CXX11_CLANG_OPENCL_GLOBAL_HOST = 1
  C2X_CLANG_OPENCL_GLOBAL_HOST = 2
  SPELLING_NOT_CALCULATED = 3

class OpenCLKernelAttrSpelling(IntEnum):
  KEYWORD_KERNEL = 0
  SPELLING_NOT_CALCULATED = 1

class OpenCLLocalAddressSpaceAttrSpelling(IntEnum):
  KEYWORD_LOCAL = 0
  GNU_OPENCL_LOCAL = 1
  CXX11_CLANG_OPENCL_LOCAL = 2
  C2X_CLANG_OPENCL_LOCAL = 3
  SPELLING_NOT_CALCULATED = 4

class OpenCLPrivateAddressSpaceAttrSpelling(IntEnum):
  KEYWORD_PRIVATE = 0
  GNU_OPENCL_PRIVATE = 1
  CXX11_CLANG_OPENCL_PRIVATE = 2
  C2X_CLANG_OPENCL_PRIVATE = 3
  SPELLING_NOT_CALCULATED = 4

class OptimizeNoneAttrSpelling(IntEnum):
  GNU_OPTNONE = 0
  CXX11_CLANG_OPTNONE = 1
  C2X_CLANG_OPTNONE = 2
  SPELLING_NOT_CALCULATED = 3

class OverloadableAttrSpelling(IntEnum):
  GNU_OVERLOADABLE = 0
  CXX11_CLANG_OVERLOADABLE = 1
  C2X_CLANG_OVERLOADABLE = 2
  SPELLING_NOT_CALCULATED = 3

class OwnershipAttrOwnershipKind(IntEnum):
  HOLDS = 0
  RETURNS = 1
  TAKES = 2

class OwnershipAttrSpelling(IntEnum):
  GNU_OWNERSHIP_HOLDS = 0
  CXX11_CLANG_OWNERSHIP_HOLDS = 1
  C2X_CLANG_OWNERSHIP_HOLDS = 2
  GNU_OWNERSHIP_RETURNS = 3
  CXX11_CLANG_OWNERSHIP_RETURNS = 4
  C2X_CLANG_OWNERSHIP_RETURNS = 5
  GNU_OWNERSHIP_TAKES = 6
  CXX11_CLANG_OWNERSHIP_TAKES = 7
  C2X_CLANG_OWNERSHIP_TAKES = 8
  SPELLING_NOT_CALCULATED = 9

class PackedAttrSpelling(IntEnum):
  GNU_PACKED = 0
  CXX11_GNU_PACKED = 1
  C2X_GNU_PACKED = 2
  SPELLING_NOT_CALCULATED = 3

class ParamTypestateAttrConsumedState(IntEnum):
  UNKNOWN = 0
  CONSUMED = 1
  UNCONSUMED = 2

class ParamTypestateAttrSpelling(IntEnum):
  GNU_PARAMETER_TYPESTATE = 0
  CXX11_CLANG_PARAMETER_TYPESTATE = 1
  SPELLING_NOT_CALCULATED = 2

class PascalAttrSpelling(IntEnum):
  GNU_PASCAL = 0
  CXX11_CLANG_PASCAL = 1
  C2X_CLANG_PASCAL = 2
  KEYWORD_PASCAL = 3
  SPELLING_NOT_CALCULATED = 4

class PassObjectSizeAttrSpelling(IntEnum):
  GNU_PASS_OBJECT_SIZE = 0
  CXX11_CLANG_PASS_OBJECT_SIZE = 1
  C2X_CLANG_PASS_OBJECT_SIZE = 2
  GNU_PASS_DYNAMIC_OBJECT_SIZE = 3
  CXX11_CLANG_PASS_DYNAMIC_OBJECT_SIZE = 4
  C2X_CLANG_PASS_DYNAMIC_OBJECT_SIZE = 5
  SPELLING_NOT_CALCULATED = 6

class PatchableFunctionEntryAttrSpelling(IntEnum):
  GNU_PATCHABLE_FUNCTION_ENTRY = 0
  CXX11_GNU_PATCHABLE_FUNCTION_ENTRY = 1
  C2X_GNU_PATCHABLE_FUNCTION_ENTRY = 2
  SPELLING_NOT_CALCULATED = 3

class PcsAttrPCSType(IntEnum):
  AAPCS = 0
  VFP = 1

class PcsAttrSpelling(IntEnum):
  GNU_PCS = 0
  CXX11_GNU_PCS = 1
  C2X_GNU_PCS = 2
  SPELLING_NOT_CALCULATED = 3

class PredefinedExprIdentKind(IntEnum):
  FUNC = 0
  FUNCTION = 1
  L_FUNCTION = 2
  FUNC_D_NAME = 3
  FUNC_SIG = 4
  L_FUNC_SIG = 5
  PRETTY_FUNCTION = 6
  PRETTY_FUNCTION_NO_VIRTUAL = 7

class PreferredNameAttrSpelling(IntEnum):
  GNU_PREFERRED_NAME = 0
  CXX11_CLANG_PREFERRED_NAME = 1
  SPELLING_NOT_CALCULATED = 2

class PreserveAllAttrSpelling(IntEnum):
  GNU_PRESERVE_ALL = 0
  CXX11_CLANG_PRESERVE_ALL = 1
  C2X_CLANG_PRESERVE_ALL = 2
  SPELLING_NOT_CALCULATED = 3

class PreserveMostAttrSpelling(IntEnum):
  GNU_PRESERVE_MOST = 0
  CXX11_CLANG_PRESERVE_MOST = 1
  C2X_CLANG_PRESERVE_MOST = 2
  SPELLING_NOT_CALCULATED = 3

class PtGuardedVarAttrSpelling(IntEnum):
  GNU_PT_GUARDED_VARIABLE = 0
  CXX11_CLANG_PT_GUARDED_VARIABLE = 1
  SPELLING_NOT_CALCULATED = 2

class PureAttrSpelling(IntEnum):
  GNU_PURE = 0
  CXX11_GNU_PURE = 1
  C2X_GNU_PURE = 2
  SPELLING_NOT_CALCULATED = 3

class QualifiedTypeDestructionKind(IntEnum):
  NONE = 0
  CXX_DESTRUCTOR = 1
  OBJC_STRONG_LIFETIME = 2
  OBJC_WEAK_LIFETIME = 3
  NONTRIVIAL_C_STRUCT = 4

class QualifiedTypePrimitiveCopyKind(IntEnum):
  TRIVIAL = 0
  VOLATILE_TRIVIAL = 1
  ARC_STRONG = 2
  ARC_WEAK = 3
  STRUCT = 4

class QualifiedTypePrimitiveDefaultInitializeKind(IntEnum):
  TRIVIAL = 0
  ARC_STRONG = 1
  ARC_WEAK = 2
  STRUCT = 3

class RISCVInterruptAttrInterruptType(IntEnum):
  SUPERVISOR = 0
  MACHINE = 1

class RISCVInterruptAttrSpelling(IntEnum):
  GNU_INTERRUPT = 0
  CXX11_GNU_INTERRUPT = 1
  C2X_GNU_INTERRUPT = 2
  SPELLING_NOT_CALCULATED = 3

class RandomizeLayoutAttrSpelling(IntEnum):
  GNU_RANDOMIZE_LAYOUT = 0
  CXX11_GNU_RANDOMIZE_LAYOUT = 1
  C2X_GNU_RANDOMIZE_LAYOUT = 2
  SPELLING_NOT_CALCULATED = 3

class ReadOnlyPlacementAttrSpelling(IntEnum):
  GNU_ENFORCE_READ_ONLY_PLACEMENT = 0
  CXX11_CLANG_ENFORCE_READ_ONLY_PLACEMENT = 1
  C2X_CLANG_ENFORCE_READ_ONLY_PLACEMENT = 2
  SPELLING_NOT_CALCULATED = 3

class RecordDeclArgPassingKind(IntEnum):
  CAN_PASS_IN_REGS = 0
  CANNOT_PASS_IN_REGS = 1
  CAN_NEVER_PASS_IN_REGS = 2

class RegCallAttrSpelling(IntEnum):
  GNU_REGCALL = 0
  CXX11_GNU_REGCALL = 1
  C2X_GNU_REGCALL = 2
  KEYWORD_REGCALL = 3
  SPELLING_NOT_CALCULATED = 4

class ReinitializesAttrSpelling(IntEnum):
  GNU_REINITIALIZES = 0
  CXX11_CLANG_REINITIALIZES = 1
  SPELLING_NOT_CALCULATED = 2

class ReleaseCapabilityAttrSpelling(IntEnum):
  GNU_RELEASE_CAPABILITY = 0
  CXX11_CLANG_RELEASE_CAPABILITY = 1
  GNU_RELEASE_SHARED_CAPABILITY = 2
  CXX11_CLANG_RELEASE_SHARED_CAPABILITY = 3
  GNU_RELEASE_GENERIC_CAPABILITY = 4
  CXX11_CLANG_RELEASE_GENERIC_CAPABILITY = 5
  GNU_UNLOCK_FUNCTION = 6
  CXX11_CLANG_UNLOCK_FUNCTION = 7
  SPELLING_NOT_CALCULATED = 8

class ReleaseHandleAttrSpelling(IntEnum):
  GNU_RELEASE_HANDLE = 0
  CXX11_CLANG_RELEASE_HANDLE = 1
  C2X_CLANG_RELEASE_HANDLE = 2
  SPELLING_NOT_CALCULATED = 3

class RequiresCapabilityAttrSpelling(IntEnum):
  GNU_REQUIRES_CAPABILITY = 0
  CXX11_CLANG_REQUIRES_CAPABILITY = 1
  GNU_EXCLUSIVE_LOCKS_REQUIRED = 2
  CXX11_CLANG_EXCLUSIVE_LOCKS_REQUIRED = 3
  GNU_REQUIRES_SHARED_CAPABILITY = 4
  CXX11_CLANG_REQUIRES_SHARED_CAPABILITY = 5
  GNU_SHARED_LOCKS_REQUIRED = 6
  CXX11_CLANG_SHARED_LOCKS_REQUIRED = 7
  SPELLING_NOT_CALCULATED = 8

class RestrictAttrSpelling(IntEnum):
  DECLSPEC_RESTRICT = 0
  GNU_MALLOC = 1
  CXX11_GNU_MALLOC = 2
  C2X_GNU_MALLOC = 3
  SPELLING_NOT_CALCULATED = 4

class RetainAttrSpelling(IntEnum):
  GNU_RETAIN = 0
  CXX11_GNU_RETAIN = 1
  C2X_GNU_RETAIN = 2
  SPELLING_NOT_CALCULATED = 3

class ReturnTypestateAttrConsumedState(IntEnum):
  UNKNOWN = 0
  CONSUMED = 1
  UNCONSUMED = 2

class ReturnTypestateAttrSpelling(IntEnum):
  GNU_RETURN_TYPESTATE = 0
  CXX11_CLANG_RETURN_TYPESTATE = 1
  SPELLING_NOT_CALCULATED = 2

class ReturnsNonNullAttrSpelling(IntEnum):
  GNU_RETURNS_NONNULL = 0
  CXX11_GNU_RETURNS_NONNULL = 1
  C2X_GNU_RETURNS_NONNULL = 2
  SPELLING_NOT_CALCULATED = 3

class ReturnsTwiceAttrSpelling(IntEnum):
  GNU_RETURNS_TWICE = 0
  CXX11_GNU_RETURNS_TWICE = 1
  C2X_GNU_RETURNS_TWICE = 2
  SPELLING_NOT_CALCULATED = 3

class SYCLKernelAttrSpelling(IntEnum):
  GNU_SYCL_KERNEL = 0
  CXX11_CLANG_SYCL_KERNEL = 1
  C2X_CLANG_SYCL_KERNEL = 2
  SPELLING_NOT_CALCULATED = 3

class SYCLSpecialClassAttrSpelling(IntEnum):
  GNU_SYCL_SPECIAL_CLASS = 0
  CXX11_CLANG_SYCL_SPECIAL_CLASS = 1
  C2X_CLANG_SYCL_SPECIAL_CLASS = 2
  SPELLING_NOT_CALCULATED = 3

class ScopedLockableAttrSpelling(IntEnum):
  GNU_SCOPED_LOCKABLE = 0
  CXX11_CLANG_SCOPED_LOCKABLE = 1
  SPELLING_NOT_CALCULATED = 2

class SectionAttrSpelling(IntEnum):
  GNU_SECTION = 0
  CXX11_GNU_SECTION = 1
  C2X_GNU_SECTION = 2
  DECLSPEC_ALLOCATE = 3
  SPELLING_NOT_CALCULATED = 4

class SelectAnyAttrSpelling(IntEnum):
  DECLSPEC_SELECTANY = 0
  GNU_SELECTANY = 1
  CXX11_GNU_SELECTANY = 2
  C2X_GNU_SELECTANY = 3
  SPELLING_NOT_CALCULATED = 4

class SentinelAttrSpelling(IntEnum):
  GNU_SENTINEL = 0
  CXX11_GNU_SENTINEL = 1
  C2X_GNU_SENTINEL = 2
  SPELLING_NOT_CALCULATED = 3

class SetTypestateAttrConsumedState(IntEnum):
  UNKNOWN = 0
  CONSUMED = 1
  UNCONSUMED = 2

class SetTypestateAttrSpelling(IntEnum):
  GNU_TYPESTATE = 0
  CXX11_CLANG_TYPESTATE = 1
  SPELLING_NOT_CALCULATED = 2

class SourceLocExprIdentKind(IntEnum):
  FUNCTION = 0
  FUNC_SIG = 1
  FILE = 2
  FILE_NAME = 3
  LINE = 4
  COLUMN = 5
  SOURCE_TOKEN_STRUCT = 6

class SpeculativeLoadHardeningAttrSpelling(IntEnum):
  GNU_SPECULATIVE_LOAD_HARDENING = 0
  CXX11_CLANG_SPECULATIVE_LOAD_HARDENING = 1
  C2X_CLANG_SPECULATIVE_LOAD_HARDENING = 2
  SPELLING_NOT_CALCULATED = 3

class StandaloneDebugAttrSpelling(IntEnum):
  GNU_STANDALONE_DEBUG = 0
  CXX11_CLANG_STANDALONE_DEBUG = 1
  SPELLING_NOT_CALCULATED = 2

class StdCallAttrSpelling(IntEnum):
  GNU_STDCALL = 0
  CXX11_GNU_STDCALL = 1
  C2X_GNU_STDCALL = 2
  KEYWORD_STDCALL = 3
  SPELLING_NOT_CALCULATED = 4

class StmtLikelihood(IntEnum):
  UNLIKELY = 0
  NONE = 1
  LIKELY = 2

class StmtKind(IntEnum):
  GCC_ASM_STMT = 0
  MS_ASM_STMT = 1
  BREAK_STMT = 2
  CXX_CATCH_STMT = 3
  CXX_FOR_RANGE_STMT = 4
  CXX_TRY_STMT = 5
  CAPTURED_STMT = 6
  COMPOUND_STMT = 7
  CONTINUE_STMT = 8
  CORETURN_STMT = 9
  COROUTINE_BODY_STMT = 10
  DECL_STMT = 11
  DO_STMT = 12
  FOR_STMT = 13
  GOTO_STMT = 14
  IF_STMT = 15
  INDIRECT_GOTO_STMT = 16
  MS_DEPENDENT_EXISTS_STMT = 17
  NULL_STMT = 18
  OMP_CANONICAL_LOOP = 19
  OMP_ATOMIC_DIRECTIVE = 20
  OMP_BARRIER_DIRECTIVE = 21
  OMP_CANCEL_DIRECTIVE = 22
  OMP_CANCELLATION_POINT_DIRECTIVE = 23
  OMP_CRITICAL_DIRECTIVE = 24
  OMP_DEPOBJ_DIRECTIVE = 25
  OMP_DISPATCH_DIRECTIVE = 26
  OMP_ERROR_DIRECTIVE = 27
  OMP_FLUSH_DIRECTIVE = 28
  OMP_INTEROP_DIRECTIVE = 29
  OMP_DISTRIBUTE_DIRECTIVE = 30
  OMP_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE = 31
  OMP_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE = 32
  OMP_DISTRIBUTE_SIMD_DIRECTIVE = 33
  OMP_FOR_DIRECTIVE = 34
  OMP_FOR_SIMD_DIRECTIVE = 35
  OMP_GENERIC_LOOP_DIRECTIVE = 36
  OMP_MASKED_TASK_LOOP_DIRECTIVE = 37
  OMP_MASKED_TASK_LOOP_SIMD_DIRECTIVE = 38
  OMP_MASTER_TASK_LOOP_DIRECTIVE = 39
  OMP_MASTER_TASK_LOOP_SIMD_DIRECTIVE = 40
  OMP_PARALLEL_FOR_DIRECTIVE = 41
  OMP_PARALLEL_FOR_SIMD_DIRECTIVE = 42
  OMP_PARALLEL_GENERIC_LOOP_DIRECTIVE = 43
  OMP_PARALLEL_MASKED_TASK_LOOP_DIRECTIVE = 44
  OMP_PARALLEL_MASKED_TASK_LOOP_SIMD_DIRECTIVE = 45
  OMP_PARALLEL_MASTER_TASK_LOOP_DIRECTIVE = 46
  OMP_PARALLEL_MASTER_TASK_LOOP_SIMD_DIRECTIVE = 47
  OMP_SIMD_DIRECTIVE = 48
  OMP_TARGET_PARALLEL_FOR_SIMD_DIRECTIVE = 49
  OMP_TARGET_PARALLEL_GENERIC_LOOP_DIRECTIVE = 50
  OMP_TARGET_SIMD_DIRECTIVE = 51
  OMP_TARGET_TEAMS_DISTRIBUTE_DIRECTIVE = 52
  OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE = 53
  OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE = 54
  OMP_TARGET_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE = 55
  OMP_TARGET_TEAMS_GENERIC_LOOP_DIRECTIVE = 56
  OMP_TASK_LOOP_DIRECTIVE = 57
  OMP_TASK_LOOP_SIMD_DIRECTIVE = 58
  OMP_TEAMS_DISTRIBUTE_DIRECTIVE = 59
  OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE = 60
  OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE = 61
  OMP_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE = 62
  OMP_TEAMS_GENERIC_LOOP_DIRECTIVE = 63
  OMP_TILE_DIRECTIVE = 64
  OMP_UNROLL_DIRECTIVE = 65
  OMP_MASKED_DIRECTIVE = 66
  OMP_MASTER_DIRECTIVE = 67
  OMP_META_DIRECTIVE = 68
  OMP_ORDERED_DIRECTIVE = 69
  OMP_PARALLEL_DIRECTIVE = 70
  OMP_PARALLEL_MASKED_DIRECTIVE = 71
  OMP_PARALLEL_MASTER_DIRECTIVE = 72
  OMP_PARALLEL_SECTIONS_DIRECTIVE = 73
  OMP_SCAN_DIRECTIVE = 74
  OMP_SECTION_DIRECTIVE = 75
  OMP_SECTIONS_DIRECTIVE = 76
  OMP_SINGLE_DIRECTIVE = 77
  OMP_TARGET_DATA_DIRECTIVE = 78
  OMP_TARGET_DIRECTIVE = 79
  OMP_TARGET_ENTER_DATA_DIRECTIVE = 80
  OMP_TARGET_EXIT_DATA_DIRECTIVE = 81
  OMP_TARGET_PARALLEL_DIRECTIVE = 82
  OMP_TARGET_PARALLEL_FOR_DIRECTIVE = 83
  OMP_TARGET_TEAMS_DIRECTIVE = 84
  OMP_TARGET_UPDATE_DIRECTIVE = 85
  OMP_TASK_DIRECTIVE = 86
  OMP_TASKGROUP_DIRECTIVE = 87
  OMP_TASKWAIT_DIRECTIVE = 88
  OMP_TASKYIELD_DIRECTIVE = 89
  OMP_TEAMS_DIRECTIVE = 90
  OBJ_C_AT_CATCH_STMT = 91
  OBJ_C_AT_FINALLY_STMT = 92
  OBJ_C_AT_SYNCHRONIZED_STMT = 93
  OBJ_C_AT_THROW_STMT = 94
  OBJ_C_AT_TRY_STMT = 95
  OBJ_C_AUTORELEASE_POOL_STMT = 96
  OBJ_C_FOR_COLLECTION_STMT = 97
  RETURN_STMT = 98
  SEH_EXCEPT_STMT = 99
  SEH_FINALLY_STMT = 100
  SEH_LEAVE_STMT = 101
  SEH_TRY_STMT = 102
  CASE_STMT = 103
  DEFAULT_STMT = 104
  SWITCH_STMT = 105
  ATTRIBUTED_STMT = 106
  BINARY_CONDITIONAL_OPERATOR = 107
  CONDITIONAL_OPERATOR = 108
  ADDR_LABEL_EXPR = 109
  ARRAY_INIT_INDEX_EXPR = 110
  ARRAY_INIT_LOOP_EXPR = 111
  ARRAY_SUBSCRIPT_EXPR = 112
  ARRAY_TYPE_TRAIT_EXPR = 113
  AS_TYPE_EXPR = 114
  ATOMIC_EXPR = 115
  BINARY_OPERATOR = 116
  COMPOUND_ASSIGN_OPERATOR = 117
  BLOCK_EXPR = 118
  CXX_BIND_TEMPORARY_EXPR = 119
  CXX_BOOL_LITERAL_EXPR = 120
  CXX_CONSTRUCT_EXPR = 121
  CXX_TEMPORARY_OBJECT_EXPR = 122
  CXX_DEFAULT_ARG_EXPR = 123
  CXX_DEFAULT_INIT_EXPR = 124
  CXX_DELETE_EXPR = 125
  CXX_DEPENDENT_SCOPE_MEMBER_EXPR = 126
  CXX_FOLD_EXPR = 127
  CXX_INHERITED_CTOR_INIT_EXPR = 128
  CXX_NEW_EXPR = 129
  CXX_NOEXCEPT_EXPR = 130
  CXX_NULL_PTR_LITERAL_EXPR = 131
  CXX_PAREN_LIST_INIT_EXPR = 132
  CXX_PSEUDO_DESTRUCTOR_EXPR = 133
  CXX_REWRITTEN_BINARY_OPERATOR = 134
  CXX_SCALAR_VALUE_INIT_EXPR = 135
  CXX_STD_INITIALIZER_LIST_EXPR = 136
  CXX_THIS_EXPR = 137
  CXX_THROW_EXPR = 138
  CXX_TYPEID_EXPR = 139
  CXX_UNRESOLVED_CONSTRUCT_EXPR = 140
  CXX_UUIDOF_EXPR = 141
  CALL_EXPR = 142
  CUDA_KERNEL_CALL_EXPR = 143
  CXX_MEMBER_CALL_EXPR = 144
  CXX_OPERATOR_CALL_EXPR = 145
  USER_DEFINED_LITERAL = 146
  BUILTIN_BIT_CAST_EXPR = 147
  C_STYLE_CAST_EXPR = 148
  CXX_FUNCTIONAL_CAST_EXPR = 149
  CXX_ADDRSPACE_CAST_EXPR = 150
  CXX_CONST_CAST_EXPR = 151
  CXX_DYNAMIC_CAST_EXPR = 152
  CXX_REINTERPRET_CAST_EXPR = 153
  CXX_STATIC_CAST_EXPR = 154
  OBJ_C_BRIDGED_CAST_EXPR = 155
  IMPLICIT_CAST_EXPR = 156
  CHARACTER_LITERAL = 157
  CHOOSE_EXPR = 158
  COMPOUND_LITERAL_EXPR = 159
  CONCEPT_SPECIALIZATION_EXPR = 160
  CONVERT_VECTOR_EXPR = 161
  COAWAIT_EXPR = 162
  COYIELD_EXPR = 163
  DECL_REF_EXPR = 164
  DEPENDENT_COAWAIT_EXPR = 165
  DEPENDENT_SCOPE_DECL_REF_EXPR = 166
  DESIGNATED_INIT_EXPR = 167
  DESIGNATED_INIT_UPDATE_EXPR = 168
  EXPRESSION_TRAIT_EXPR = 169
  EXT_VECTOR_ELEMENT_EXPR = 170
  FIXED_POINT_LITERAL = 171
  FLOATING_LITERAL = 172
  CONSTANT_EXPR = 173
  EXPR_WITH_CLEANUPS = 174
  FUNCTION_PARM_PACK_EXPR = 175
  GNU_NULL_EXPR = 176
  GENERIC_SELECTION_EXPR = 177
  IMAGINARY_LITERAL = 178
  IMPLICIT_VALUE_INIT_EXPR = 179
  INIT_LIST_EXPR = 180
  INTEGER_LITERAL = 181
  LAMBDA_EXPR = 182
  MS_PROPERTY_REF_EXPR = 183
  MS_PROPERTY_SUBSCRIPT_EXPR = 184
  MATERIALIZE_TEMPORARY_EXPR = 185
  MATRIX_SUBSCRIPT_EXPR = 186
  MEMBER_EXPR = 187
  NO_INIT_EXPR = 188
  OMP_ARRAY_SECTION_EXPR = 189
  OMP_ARRAY_SHAPING_EXPR = 190
  OMP_ITERATOR_EXPR = 191
  OBJ_C_ARRAY_LITERAL = 192
  OBJ_C_AVAILABILITY_CHECK_EXPR = 193
  OBJ_C_BOOL_LITERAL_EXPR = 194
  OBJ_C_BOXED_EXPR = 195
  OBJ_C_DICTIONARY_LITERAL = 196
  OBJ_C_ENCODE_EXPR = 197
  OBJ_C_INDIRECT_COPY_RESTORE_EXPR = 198
  OBJ_C_ISA_EXPR = 199
  OBJ_C_IVAR_REF_EXPR = 200
  OBJ_C_MESSAGE_EXPR = 201
  OBJ_C_PROPERTY_REF_EXPR = 202
  OBJ_C_PROTOCOL_EXPR = 203
  OBJ_C_SELECTOR_EXPR = 204
  OBJ_C_STRING_LITERAL = 205
  OBJ_C_SUBSCRIPT_REF_EXPR = 206
  OFFSET_OF_EXPR = 207
  OPAQUE_VALUE_EXPR = 208
  UNRESOLVED_LOOKUP_EXPR = 209
  UNRESOLVED_MEMBER_EXPR = 210
  PACK_EXPANSION_EXPR = 211
  PAREN_EXPR = 212
  PAREN_LIST_EXPR = 213
  PREDEFINED_EXPR = 214
  PSEUDO_OBJECT_EXPR = 215
  RECOVERY_EXPR = 216
  REQUIRES_EXPR = 217
  SYCL_UNIQUE_STABLE_NAME_EXPR = 218
  SHUFFLE_VECTOR_EXPR = 219
  SIZE_OF_PACK_EXPR = 220
  SOURCE_LOC_EXPR = 221
  STMT_EXPR = 222
  STRING_LITERAL = 223
  SUBST_NON_TYPE_TEMPLATE_PARM_EXPR = 224
  SUBST_NON_TYPE_TEMPLATE_PARM_PACK_EXPR = 225
  TYPE_TRAIT_EXPR = 226
  TYPO_EXPR = 227
  UNARY_EXPR_OR_TYPE_TRAIT_EXPR = 228
  UNARY_OPERATOR = 229
  VA_ARG_EXPR = 230
  LABEL_STMT = 231
  WHILE_STMT = 232

class StringLiteralStringKind(IntEnum):
  ORDINARY = 0
  WIDE = 1
  UTF8 = 2
  UTF16 = 3
  UTF32 = 4
  UNEVALUATED = 5

class SwiftAsyncAttrKind(IntEnum):
  NONE = 0
  SWIFT_PRIVATE = 1
  NOT_SWIFT_PRIVATE = 2

class SwiftAsyncAttrSpelling(IntEnum):
  GNU_SWIFT_ASYNC = 0
  CXX11_CLANG_SWIFT_ASYNC = 1
  C2X_CLANG_SWIFT_ASYNC = 2
  SPELLING_NOT_CALCULATED = 3

class SwiftAsyncCallAttrSpelling(IntEnum):
  GNU_SWIFTASYNCCALL = 0
  CXX11_CLANG_SWIFTASYNCCALL = 1
  C2X_CLANG_SWIFTASYNCCALL = 2
  SPELLING_NOT_CALCULATED = 3

class SwiftAsyncContextAttrSpelling(IntEnum):
  GNU_SWIFT_ASYNC_CONTEXT = 0
  CXX11_CLANG_SWIFT_ASYNC_CONTEXT = 1
  C2X_CLANG_SWIFT_ASYNC_CONTEXT = 2
  SPELLING_NOT_CALCULATED = 3

class SwiftAsyncErrorAttrConventionKind(IntEnum):
  NONE = 0
  NON_NULL_ERROR = 1
  ZERO_ARGUMENT = 2
  NON_ZERO_ARGUMENT = 3

class SwiftAsyncErrorAttrSpelling(IntEnum):
  GNU_SWIFT_ASYNC_ERROR = 0
  CXX11_CLANG_SWIFT_ASYNC_ERROR = 1
  C2X_CLANG_SWIFT_ASYNC_ERROR = 2
  SPELLING_NOT_CALCULATED = 3

class SwiftCallAttrSpelling(IntEnum):
  GNU_SWIFTCALL = 0
  CXX11_CLANG_SWIFTCALL = 1
  C2X_CLANG_SWIFTCALL = 2
  SPELLING_NOT_CALCULATED = 3

class SwiftContextAttrSpelling(IntEnum):
  GNU_SWIFT_CONTEXT = 0
  CXX11_CLANG_SWIFT_CONTEXT = 1
  C2X_CLANG_SWIFT_CONTEXT = 2
  SPELLING_NOT_CALCULATED = 3

class SwiftErrorAttrConventionKind(IntEnum):
  NONE = 0
  NON_NULL_ERROR = 1
  NULL_RESULT = 2
  ZERO_RESULT = 3
  NON_ZERO_RESULT = 4

class SwiftErrorResultAttrSpelling(IntEnum):
  GNU_SWIFT_ERROR_RESULT = 0
  CXX11_CLANG_SWIFT_ERROR_RESULT = 1
  C2X_CLANG_SWIFT_ERROR_RESULT = 2
  SPELLING_NOT_CALCULATED = 3

class SwiftIndirectResultAttrSpelling(IntEnum):
  GNU_SWIFT_INDIRECT_RESULT = 0
  CXX11_CLANG_SWIFT_INDIRECT_RESULT = 1
  C2X_CLANG_SWIFT_INDIRECT_RESULT = 2
  SPELLING_NOT_CALCULATED = 3

class SwiftNewTypeAttrNewtypeKind(IntEnum):
  STRUCT = 0
  ENUM = 1

class SwiftNewTypeAttrSpelling(IntEnum):
  GNU_SWIFT_NEWTYPE = 0
  GNU_SWIFT_WRAPPER = 1
  SPELLING_NOT_CALCULATED = 2

class SysVABIAttrSpelling(IntEnum):
  GNU_SYSV_ABI = 0
  CXX11_GNU_SYSV_ABI = 1
  C2X_GNU_SYSV_ABI = 2
  SPELLING_NOT_CALCULATED = 3

class TLSModelAttrSpelling(IntEnum):
  GNU_TLS_MODEL = 0
  CXX11_GNU_TLS_MODEL = 1
  C2X_GNU_TLS_MODEL = 2
  SPELLING_NOT_CALCULATED = 3

class TargetAttrSpelling(IntEnum):
  GNU_TARGET = 0
  CXX11_GNU_TARGET = 1
  C2X_GNU_TARGET = 2
  SPELLING_NOT_CALCULATED = 3

class TargetClonesAttrSpelling(IntEnum):
  GNU_TARGET_CLONES = 0
  CXX11_GNU_TARGET_CLONES = 1
  C2X_GNU_TARGET_CLONES = 2
  SPELLING_NOT_CALCULATED = 3

class TargetVersionAttrSpelling(IntEnum):
  GNU_TARGET_VERSION = 0
  CXX11_GNU_TARGET_VERSION = 1
  C2X_GNU_TARGET_VERSION = 2
  SPELLING_NOT_CALCULATED = 3

class TemplateArgumentKind(IntEnum):
  EMPTY = 0
  TYPE = 1
  DECLARATION = 2
  NULL_POINTER = 3
  INTEGRAL = 4
  TEMPLATE = 5
  TEMPLATE_EXPANSION = 6
  EXPRESSION = 7
  PACK = 8

class TestTypestateAttrConsumedState(IntEnum):
  CONSUMED = 0
  UNCONSUMED = 1

class TestTypestateAttrSpelling(IntEnum):
  GNU_TEST_TYPESTATE = 0
  CXX11_CLANG_TEST_TYPESTATE = 1
  SPELLING_NOT_CALCULATED = 2

class ThisCallAttrSpelling(IntEnum):
  GNU_THISCALL = 0
  CXX11_GNU_THISCALL = 1
  C2X_GNU_THISCALL = 2
  KEYWORD_THISCALL = 3
  SPELLING_NOT_CALCULATED = 4

class TransparentUnionAttrSpelling(IntEnum):
  GNU_TRANSPARENT_UNION = 0
  CXX11_GNU_TRANSPARENT_UNION = 1
  C2X_GNU_TRANSPARENT_UNION = 2
  SPELLING_NOT_CALCULATED = 3

class TrivialABIAttrSpelling(IntEnum):
  GNU_TRIVIAL_ABI = 0
  CXX11_CLANG_TRIVIAL_ABI = 1
  SPELLING_NOT_CALCULATED = 2

class TryAcquireCapabilityAttrSpelling(IntEnum):
  GNU_TRY_ACQUIRE_CAPABILITY = 0
  CXX11_CLANG_TRY_ACQUIRE_CAPABILITY = 1
  GNU_TRY_ACQUIRE_SHARED_CAPABILITY = 2
  CXX11_CLANG_TRY_ACQUIRE_SHARED_CAPABILITY = 3
  SPELLING_NOT_CALCULATED = 4

class TypeScalarTypeKind(IntEnum):
  C_POINTER = 0
  BLOCK_POINTER = 1
  OBJ_C_OBJECT_POINTER = 2
  MEMBER_POINTER = 3
  BOOLEAN = 4
  INTEGRAL = 5
  FLOATING = 6
  INTEGRAL_COMPLEX = 7
  FLOATING_COMPLEX = 8
  FIXED_POINT = 9

class TypeKind(IntEnum):
  ADJUSTED = 0
  DECAYED = 1
  CONSTANT_ARRAY = 2
  DEPENDENT_SIZED_ARRAY = 3
  INCOMPLETE_ARRAY = 4
  VARIABLE_ARRAY = 5
  ATOMIC = 6
  ATTRIBUTED = 7
  BTF_TAG_ATTRIBUTED = 8
  BIT_INT = 9
  BLOCK_POINTER = 10
  BUILTIN = 11
  COMPLEX = 12
  DECLTYPE = 13
  AUTO = 14
  DEDUCED_TEMPLATE_SPECIALIZATION = 15
  DEPENDENT_ADDRESS_SPACE = 16
  DEPENDENT_BIT_INT = 17
  DEPENDENT_NAME = 18
  DEPENDENT_SIZED_EXT_VECTOR = 19
  DEPENDENT_TEMPLATE_SPECIALIZATION = 20
  DEPENDENT_VECTOR = 21
  ELABORATED = 22
  FUNCTION_NO_PROTO = 23
  FUNCTION_PROTO = 24
  INJECTED_CLASS_NAME = 25
  MACRO_QUALIFIED = 26
  CONSTANT_MATRIX = 27
  DEPENDENT_SIZED_MATRIX = 28
  MEMBER_POINTER = 29
  OBJ_C_OBJECT_POINTER = 30
  OBJ_C_OBJECT = 31
  OBJ_C_INTERFACE = 32
  OBJ_C_TYPE_PARAM = 33
  PACK_EXPANSION = 34
  PAREN = 35
  PIPE = 36
  POINTER = 37
  L_VALUE_REFERENCE = 38
  R_VALUE_REFERENCE = 39
  SUBST_TEMPLATE_TYPE_PARM_PACK = 40
  SUBST_TEMPLATE_TYPE_PARM = 41
  ENUM = 42
  RECORD = 43
  TEMPLATE_SPECIALIZATION = 44
  TEMPLATE_TYPE_PARM = 45
  TYPE_OF_EXPR = 46
  TYPE_OF = 47
  TYPEDEF = 48
  UNARY_TRANSFORM = 49
  UNRESOLVED_USING = 50
  USING = 51
  VECTOR = 52
  EXT_VECTOR = 53
  QUALIFIED = 54

class TypeTagForDatatypeAttrSpelling(IntEnum):
  GNU_TYPE_TAG_FOR_DATATYPE = 0
  CXX11_CLANG_TYPE_TAG_FOR_DATATYPE = 1
  C2X_CLANG_TYPE_TAG_FOR_DATATYPE = 2
  SPELLING_NOT_CALCULATED = 3

class TypeVisibilityAttrSpelling(IntEnum):
  GNU_TYPE_VISIBILITY = 0
  CXX11_CLANG_TYPE_VISIBILITY = 1
  C2X_CLANG_TYPE_VISIBILITY = 2
  SPELLING_NOT_CALCULATED = 3

class TypeVisibilityAttrVisibilityType(IntEnum):
  DEFAULT = 0
  HIDDEN = 1
  PROTECTED = 2

class UnaryTransformTypeUTTKind(IntEnum):
  ADD_LVALUE_REFERENCE = 0
  ADD_POINTER = 1
  ADD_RVALUE_REFERENCE = 2
  DECAY = 3
  MAKE_SIGNED = 4
  MAKE_UNSIGNED = 5
  REMOVE_ALL_EXTENTS = 6
  REMOVE_CONST = 7
  REMOVE_CV = 8
  REMOVE_CV_REFERENCE = 9
  REMOVE_EXTENT = 10
  REMOVE_POINTER = 11
  REMOVE_REFERENCE = 12
  REMOVE_RESTRICT = 13
  REMOVE_VOLATILE = 14
  ENUM_UNDERLYING_TYPE = 15

class UnavailableAttrImplicitReason(IntEnum):
  NONE = 0
  ARC_FORBIDDEN_TYPE = 1
  FORBIDDEN_WEAK = 2
  ARC_FORBIDDEN_CONVERSION = 3
  ARC_INIT_RETURNS_UNRELATED = 4
  ARC_FIELD_WITH_OWNERSHIP = 5

class UnavailableAttrSpelling(IntEnum):
  GNU_UNAVAILABLE = 0
  CXX11_CLANG_UNAVAILABLE = 1
  C2X_CLANG_UNAVAILABLE = 2
  SPELLING_NOT_CALCULATED = 3

class UninitializedAttrSpelling(IntEnum):
  GNU_UNINITIALIZED = 0
  CXX11_CLANG_UNINITIALIZED = 1
  SPELLING_NOT_CALCULATED = 2

class UnlikelyAttrSpelling(IntEnum):
  CXX11_UNLIKELY = 0
  C2X_CLANG_UNLIKELY = 1
  SPELLING_NOT_CALCULATED = 2

class UnsafeBufferUsageAttrSpelling(IntEnum):
  GNU_UNSAFE_BUFFER_USAGE = 0
  CXX11_CLANG_UNSAFE_BUFFER_USAGE = 1
  C2X_CLANG_UNSAFE_BUFFER_USAGE = 2
  SPELLING_NOT_CALCULATED = 3

class UnusedAttrSpelling(IntEnum):
  CXX11_MAYBE_UNUSED = 0
  GNU_UNUSED = 1
  CXX11_GNU_UNUSED = 2
  C2X_GNU_UNUSED = 3
  C2X_MAYBE_UNUSED = 4
  SPELLING_NOT_CALCULATED = 5

class UseHandleAttrSpelling(IntEnum):
  GNU_USE_HANDLE = 0
  CXX11_CLANG_USE_HANDLE = 1
  C2X_CLANG_USE_HANDLE = 2
  SPELLING_NOT_CALCULATED = 3

class UsedAttrSpelling(IntEnum):
  GNU_USED = 0
  CXX11_GNU_USED = 1
  C2X_GNU_USED = 2
  SPELLING_NOT_CALCULATED = 3

class UserDefinedLiteralLiteralOperatorKind(IntEnum):
  RAW = 0
  TEMPLATE = 1
  INTEGER = 2
  FLOATING = 3
  STRING = 4
  CHARACTER = 5

class UsingIfExistsAttrSpelling(IntEnum):
  GNU_USING_IF_EXISTS = 0
  CXX11_CLANG_USING_IF_EXISTS = 1
  SPELLING_NOT_CALCULATED = 2

class UuidAttrSpelling(IntEnum):
  DECLSPEC_UUID = 0
  MICROSOFT_UUID = 1
  SPELLING_NOT_CALCULATED = 2

class VarDeclDefinitionKind(IntEnum):
  DECLARATION_ONLY = 0
  TENTATIVE_DEFINITION = 1
  DEFINITION = 2

class VarDeclInitializationStyle(IntEnum):
  C_INIT = 0
  CALL_INITIALIZER = 1
  LIST_INITIALIZER = 2
  PARENTHESIS_LIST_INITIALIZER = 3

class VarDeclTLSKind(IntEnum):
  NONE = 0
  STATIC = 1
  DYNAMIC = 2

class VecReturnAttrSpelling(IntEnum):
  GNU_VECRETURN = 0
  CXX11_CLANG_VECRETURN = 1
  SPELLING_NOT_CALCULATED = 2

class VectorCallAttrSpelling(IntEnum):
  GNU_VECTORCALL = 0
  CXX11_CLANG_VECTORCALL = 1
  C2X_CLANG_VECTORCALL = 2
  KEYWORD_VECTORCALL = 3
  SPELLING_NOT_CALCULATED = 4

class VectorTypeVectorKind(IntEnum):
  GENERIC_VECTOR = 0
  ALTI_VEC_VECTOR = 1
  ALTI_VEC_PIXEL = 2
  ALTI_VEC_BOOLEAN = 3
  NEON_VECTOR = 4
  NEON_POLY_VECTOR = 5
  SVE_FIXED_LENGTH_DATA_VECTOR = 6
  SVE_FIXED_LENGTH_PREDICATE_VECTOR = 7
  RVV_FIXED_LENGTH_DATA_VECTOR = 8

class VisibilityAttrSpelling(IntEnum):
  GNU_VISIBILITY = 0
  CXX11_GNU_VISIBILITY = 1
  C2X_GNU_VISIBILITY = 2
  SPELLING_NOT_CALCULATED = 3

class VisibilityAttrVisibilityType(IntEnum):
  DEFAULT = 0
  HIDDEN = 1
  PROTECTED = 2

class WarnUnusedAttrSpelling(IntEnum):
  GNU_WARN_UNUSED = 0
  CXX11_GNU_WARN_UNUSED = 1
  C2X_GNU_WARN_UNUSED = 2
  SPELLING_NOT_CALCULATED = 3

class WarnUnusedResultAttrSpelling(IntEnum):
  CXX11_NODISCARD = 0
  C2X_NODISCARD = 1
  CXX11_CLANG_WARN_UNUSED_RESULT = 2
  GNU_WARN_UNUSED_RESULT = 3
  CXX11_GNU_WARN_UNUSED_RESULT = 4
  C2X_GNU_WARN_UNUSED_RESULT = 5
  SPELLING_NOT_CALCULATED = 6

class WeakAttrSpelling(IntEnum):
  GNU_WEAK = 0
  CXX11_GNU_WEAK = 1
  C2X_GNU_WEAK = 2
  SPELLING_NOT_CALCULATED = 3

class WeakImportAttrSpelling(IntEnum):
  GNU_WEAK_IMPORT = 0
  CXX11_CLANG_WEAK_IMPORT = 1
  C2X_CLANG_WEAK_IMPORT = 2
  SPELLING_NOT_CALCULATED = 3

class WeakRefAttrSpelling(IntEnum):
  GNU_WEAKREF = 0
  CXX11_GNU_WEAKREF = 1
  C2X_GNU_WEAKREF = 2
  SPELLING_NOT_CALCULATED = 3

class WebAssemblyExportNameAttrSpelling(IntEnum):
  GNU_EXPORT_NAME = 0
  CXX11_CLANG_EXPORT_NAME = 1
  C2X_CLANG_EXPORT_NAME = 2
  SPELLING_NOT_CALCULATED = 3

class WebAssemblyImportModuleAttrSpelling(IntEnum):
  GNU_IMPORT_MODULE = 0
  CXX11_CLANG_IMPORT_MODULE = 1
  C2X_CLANG_IMPORT_MODULE = 2
  SPELLING_NOT_CALCULATED = 3

class WebAssemblyImportNameAttrSpelling(IntEnum):
  GNU_IMPORT_NAME = 0
  CXX11_CLANG_IMPORT_NAME = 1
  C2X_CLANG_IMPORT_NAME = 2
  SPELLING_NOT_CALCULATED = 3

class X86ForceAlignArgPointerAttrSpelling(IntEnum):
  GNU_FORCE_ALIGN_ARGUMENT_POINTER = 0
  CXX11_GNU_FORCE_ALIGN_ARGUMENT_POINTER = 1
  C2X_GNU_FORCE_ALIGN_ARGUMENT_POINTER = 2
  SPELLING_NOT_CALCULATED = 3

class XRayInstrumentAttrSpelling(IntEnum):
  GNU_XRAY_ALWAYS_INSTRUMENT = 0
  CXX11_CLANG_XRAY_ALWAYS_INSTRUMENT = 1
  C2X_CLANG_XRAY_ALWAYS_INSTRUMENT = 2
  GNU_XRAY_NEVER_INSTRUMENT = 3
  CXX11_CLANG_XRAY_NEVER_INSTRUMENT = 4
  C2X_CLANG_XRAY_NEVER_INSTRUMENT = 5
  SPELLING_NOT_CALCULATED = 6

class XRayLogArgsAttrSpelling(IntEnum):
  GNU_XRAY_LOG_ARGUMENTS = 0
  CXX11_CLANG_XRAY_LOG_ARGUMENTS = 1
  C2X_CLANG_XRAY_LOG_ARGUMENTS = 2
  SPELLING_NOT_CALCULATED = 3

class ZeroCallUsedRegsAttrSpelling(IntEnum):
  GNU_ZERO_CALL_USED_REGS = 0
  CXX11_GNU_ZERO_CALL_USED_REGS = 1
  C2X_GNU_ZERO_CALL_USED_REGS = 2
  SPELLING_NOT_CALCULATED = 3

class ZeroCallUsedRegsAttrZeroCallUsedRegsKind(IntEnum):
  SKIP = 0
  USED_GPR_ARG = 1
  USED_GPR = 2
  USED_ARGUMENT = 3
  USED = 4
  ALL_GPR_ARG = 5
  ALL_GPR = 6
  ALL_ARGUMENT = 7
  ALL = 8

class ASTDumpOutputFormat(IntEnum):
  DEFAULT = 0
  JSON = 1

class AccessSpecifier(IntEnum):
  PUBLIC = 0
  PROTECTED = 1
  PRIVATE = 2
  NONE = 3

class AddrSpaceMapMangling(IntEnum):
  TARGET = 0
  ON = 1
  OFF = 2

class AlignRequirementKind(IntEnum):
  NONE = 0
  REQUIRED_BY_TYPEDEF = 1
  REQUIRED_BY_RECORD = 2
  REQUIRED_BY_ENUM = 3

class AltivecSrcCompatKind(IntEnum):
  MIXED = 0
  GCC = 1
  XL = 2

class ArgumentKind(IntEnum):
  STD_STRING = 0
  C_STRING = 1
  SINT = 2
  UINT = 3
  TOKENKIND = 4
  IDENTIFIERINFO = 5
  ADDRSPACE = 6
  QUALIFIED = 7
  QUALTYPE = 8
  DECLARATIONNAME = 9
  NAMEDDECL = 10
  NESTEDNAMESPEC = 11
  DECLCONTEXT = 12
  QUALTYPE_PAIR = 13
  ATTRIBUTE = 14

class ArrayTypeTrait(IntEnum):
  ARRAY_RANK = 0
  ARRAY_EXTENT = 1

class AssignmentTrackingOpts(IntEnum):
  DISABLED = 0
  ENABLED = 1
  FORCED = 2

class AtomicScopeModelKind(IntEnum):
  NONE = 0
  OPEN_CL = 1
  HIP = 2

class AutoTypeKeyword(IntEnum):
  AUTO = 0
  DECLTYPE_AUTO = 1
  GNU_AUTO_TYPE = 2

class AvailabilityResult(IntEnum):
  AVAILABLE = 0
  NOT_YET_INTRODUCED = 1
  DEPRECATED = 2
  UNAVAILABLE = 3

class BinaryOperatorKind(IntEnum):
  POINTER_MEMORY_D = 0
  POINTER_MEMORY_I = 1
  MUL = 2
  DIV = 3
  REM = 4
  ADD = 5
  SUB = 6
  SHL = 7
  SHR = 8
  CMP = 9
  LT = 10
  GT = 11
  LE = 12
  GE = 13
  EQ = 14
  NE = 15
  AND = 16
  XOR = 17
  OR = 18
  L_AND = 19
  L_OR = 20
  ASSIGN = 21
  MUL_ASSIGN = 22
  DIV_ASSIGN = 23
  REM_ASSIGN = 24
  ADD_ASSIGN = 25
  SUB_ASSIGN = 26
  SHL_ASSIGN = 27
  SHR_ASSIGN = 28
  AND_ASSIGN = 29
  XOR_ASSIGN = 30
  OR_ASSIGN = 31
  COMMA = 32

class Bits(IntEnum):
  NONE = 0
  UNEXPANDED_PACK = 1
  INSTANTIATION = 2
  TYPE = 3
  VALUE = 4
  DEPENDENT = 5
  ERROR = 6
  VARIABLY_MODIFIED = 7
  SYNTACTIC = 8
  SEMANTIC = 9

class CallingConv(IntEnum):
  C = 0
  X86_STD_CALL = 1
  X86_FAST_CALL = 2
  X86_THIS_CALL = 3
  X86_VECTOR_CALL = 4
  X86_PASCAL = 5
  WIN64 = 6
  X8664_SYS_V = 7
  X86_REG_CALL = 8
  AAPCS = 9
  AAPCSVFP = 10
  INTEL_OCL_BICC = 11
  SPIR_FUNCTION = 12
  OPEN_CL_KERNEL = 13
  SWIFT = 14
  SWIFT_ASYNC = 15
  PRESERVE_MOST = 16
  PRESERVE_ALL = 17
  A_ARCH64_VECTOR_CALL = 18
  A_ARCH64_SVEPCS = 19
  AMDGPU_KERNEL_CALL = 20

class CanThrowResult(IntEnum):
  CANNOT = 0
  DEPENDENT = 1
  CAN = 2

class CapturedRegionKind(IntEnum):
  DEFAULT = 0
  OBJ_C_AT_FINALLY = 1
  OPEN_MP = 2

class CastKind(IntEnum):
  DEPENDENT = 0
  BIT_CAST = 1
  L_VALUE_BIT_CAST = 2
  L_VALUE_TO_R_VALUE_BIT_CAST = 3
  L_VALUE_TO_R_VALUE = 4
  NO_OPERATION = 5
  BASE_TO_DERIVED = 6
  DERIVED_TO_BASE = 7
  UNCHECKED_DERIVED_TO_BASE = 8
  DYNAMIC = 9
  TO_UNION = 10
  ARRAY_TO_POINTER_DECAY = 11
  FUNCTION_TO_POINTER_DECAY = 12
  NULL_TO_POINTER = 13
  NULL_TO_MEMBER_POINTER = 14
  BASE_TO_DERIVED_MEMBER_POINTER = 15
  DERIVED_TO_BASE_MEMBER_POINTER = 16
  MEMBER_POINTER_TO_BOOLEAN = 17
  REINTERPRET_MEMBER_POINTER = 18
  USER_DEFINED_CONVERSION = 19
  CONSTRUCTOR_CONVERSION = 20
  INTEGRAL_TO_POINTER = 21
  POINTER_TO_INTEGRAL = 22
  POINTER_TO_BOOLEAN = 23
  TO_VOID = 24
  MATRIX_CAST = 25
  VECTOR_SPLAT = 26
  INTEGRAL_CAST = 27
  INTEGRAL_TO_BOOLEAN = 28
  INTEGRAL_TO_FLOATING = 29
  FLOATING_TO_FIXED_POINT = 30
  FIXED_POINT_TO_FLOATING = 31
  FIXED_POINT_CAST = 32
  FIXED_POINT_TO_INTEGRAL = 33
  INTEGRAL_TO_FIXED_POINT = 34
  FIXED_POINT_TO_BOOLEAN = 35
  FLOATING_TO_INTEGRAL = 36
  FLOATING_TO_BOOLEAN = 37
  BOOLEAN_TO_SIGNED_INTEGRAL = 38
  FLOATING_CAST = 39
  C_POINTER_TO_OBJ_C_POINTER_CAST = 40
  BLOCK_POINTER_TO_OBJ_C_POINTER_CAST = 41
  ANY_POINTER_TO_BLOCK_POINTER_CAST = 42
  OBJ_C_OBJECT_L_VALUE_CAST = 43
  FLOATING_REAL_TO_COMPLEX = 44
  FLOATING_COMPLEX_TO_REAL = 45
  FLOATING_COMPLEX_TO_BOOLEAN = 46
  FLOATING_COMPLEX_CAST = 47
  FLOATING_COMPLEX_TO_INTEGRAL_COMPLEX = 48
  INTEGRAL_REAL_TO_COMPLEX = 49
  INTEGRAL_COMPLEX_TO_REAL = 50
  INTEGRAL_COMPLEX_TO_BOOLEAN = 51
  INTEGRAL_COMPLEX_CAST = 52
  INTEGRAL_COMPLEX_TO_FLOATING_COMPLEX = 53
  ARC_PRODUCE_OBJECT = 54
  ARC_CONSUME_OBJECT = 55
  ARC_RECLAIM_RETURNED_OBJECT = 56
  ARC_EXTEND_BLOCK_OBJECT = 57
  ATOMIC_TO_NON_ATOMIC = 58
  NON_ATOMIC_TO_ATOMIC = 59
  COPY_AND_AUTORELEASE_BLOCK_OBJECT = 60
  BUILTIN_FN_TO_FN_POINTER = 61
  ZERO_TO_OCL_OPAQUE_TYPE = 62
  ADDRESS_SPACE_CONVERSION = 63
  INT_TO_OCL_SAMPLER = 64

class ClangABI(IntEnum):
  VER38 = 0
  VER4 = 1
  VER6 = 2
  VER7 = 3
  VER9 = 4
  VER11 = 5
  VER12 = 6
  VER14 = 7
  VER15 = 8
  LATEST = 9

class CommentKind(IntEnum):
  INVALID = 0
  ORDINARY_BCPL = 1
  ORDINARY_C = 2
  BCPL_SLASH = 3
  BCPL_EXCL = 4
  JAVA_DOC = 5
  QT = 6
  MERGED = 7

class ComparisonCategoryResult(IntEnum):
  EQUAL = 0
  EQUIVALENT = 1
  LESS = 2
  GREATER = 3
  UNORDERED = 4

class ComparisonCategoryType(IntEnum):
  PARTIAL_ORDERING = 0
  WEAK_ORDERING = 1
  STRONG_ORDERING = 2

class CompilingModuleKind(IntEnum):
  NONE = 0
  MODULE_MAP = 1
  HEADER_UNIT = 2
  MODULE_INTERFACE = 3

class ConstexprSpecKind(IntEnum):
  UNSPECIFIED = 0
  CONSTEXPR = 1
  CONSTEVAL = 2
  CONSTINIT = 3

class CoreFoundationABI(IntEnum):
  UNSPECIFIED = 0
  STANDALONE = 1
  OBJECTIVE_C = 2
  SWIFT = 3
  SWIFT50 = 4
  SWIFT42 = 5
  SWIFT41 = 6

class DataPositionTy(IntEnum):
  POSX = 0
  POSV = 1
  POSE = 2
  POS_UPDATE_EXPRESSION = 3
  POSD = 4
  POS_CONDITION = 5
  POSR = 6

class DebugSrcHashKind(IntEnum):
  DSHMD5 = 0
  DSHSHA1 = 1
  DSHSHA256 = 2

class DeductionCandidate(IntEnum):
  NORMAL = 0
  COPY = 1
  AGGREGATE = 2

class DefaultArgKind(IntEnum):
  NONE = 0
  UNPARSED = 1
  UNINSTANTIATED = 2
  NORMAL = 3

class DefaultCallingConvention(IntEnum):
  NONE = 0
  C_DECL = 1
  FAST_CALL = 2
  STD_CALL = 3
  VECTOR_CALL = 4
  REG_CALL = 5

class DefaultVisiblityExportMapping(IntEnum):
  NONE = 0
  EXPLICIT = 1
  ALL = 2

class DesignatorKind(IntEnum):
  FIELD_DESIGNATOR = 0
  ARRAY_DESIGNATOR = 1
  ARRAY_RANGE_DESIGNATOR = 2

class DiagnosticLevelMask(IntEnum):
  NONE = 0
  NOTE = 1
  REMARK = 2
  WARNING = 3
  ERROR = 4
  ALL = 5

class ElaboratedTypeKeyword(IntEnum):
  STRUCT = 0
  INTERFACE = 1
  UNION = 2
  CLASS = 3
  ENUM = 4
  TYPENAME = 5
  NONE = 6

class EmbedBitcodeKind(IntEnum):
  EMBED_OFF = 0
  EMBED_ALL = 1
  EMBED_BITCODE = 2
  EMBED_MARKER = 3

class EscapeChar(IntEnum):
  SINGLE = 0
  DOUBLE = 1
  SINGLE_AND_DOUBLE = 2

class ExceptionHandlingKind(IntEnum):
  NONE = 0
  SJ_LJ = 1
  WIN_EH = 2
  DWARF_CFI = 3
  WASM = 4

class ExceptionSpecificationType(IntEnum):
  NONE = 0
  DYNAMIC_NONE = 1
  DYNAMIC = 2
  MS_ANY = 3
  NO_THROW = 4
  BASIC_NOEXCEPT = 5
  DEPENDENT_NOEXCEPT = 6
  NOEXCEPT_FALSE = 7
  NOEXCEPT_TRUE = 8
  UNEVALUATED = 9
  UNINSTANTIATED = 10
  UNPARSED = 11

class ExcessPrecisionKind(IntEnum):
  FPP_STANDARD = 0
  FPP_FAST = 1
  FPP_NONE = 2

class ExclusionType(IntEnum):
  ALLOW = 0
  SKIP = 1
  FORBID = 2

class ExplicitSpecKind(IntEnum):
  RESOLVED_FALSE = 0
  RESOLVED_TRUE = 1
  UNRESOLVED = 2

class ExprDependence(IntEnum):
  UNEXPANDED_PACK = 0
  INSTANTIATION = 1
  TYPE = 2
  VALUE = 3
  ERROR = 4
  NONE = 5
  ALL = 6
  TYPE_VALUE = 7
  TYPE_INSTANTIATION = 8
  VALUE_INSTANTIATION = 9
  TYPE_VALUE_INSTANTIATION = 10
  ERROR_DEPENDENT = 11

class ExprObjectKind(IntEnum):
  ORDINARY = 0
  BIT_FIELD = 1
  VECTOR_COMPONENT = 2
  OBJ_C_PROPERTY = 3
  OBJ_C_SUBSCRIPT = 4
  MATRIX_COMPONENT = 5

class ExprOffsets(IntEnum):
  ALLOCATOR = 0
  ALLOCATOR_TRAITS = 1
  TOTAL = 2

class ExprValueKind(IntEnum):
  PR_VALUE = 0
  L_VALUE = 1
  X_VALUE = 2

class ExpressionTrait(IntEnum):
  IS_L_VALUE_EXPRESSION = 0
  IS_R_VALUE_EXPRESSION = 1

class ExtKind(IntEnum):
  ALWAYS = 0
  NEVER = 1
  REPLY_HAZY = 2

class ExtendArgsKind(IntEnum):
  EXTEND_TO32 = 0
  EXTEND_TO64 = 1

class FPEvalMethodKind(IntEnum):
  FEM_INDETERMINABLE = 0
  FEM_SOURCE = 1
  FEM_DOUBLE = 2
  FEM_EXTENDED = 3
  FEM_UNSET_ON_COMMAND_LINE = 4

class FPExceptionModeKind(IntEnum):
  IGNORE = 0
  MAY_TRAP = 1
  STRICT = 2
  DEFAULT = 3

class FPModeKind(IntEnum):
  OFF = 0
  ON = 1
  FAST = 2
  FAST_HONOR_PRAGMAS = 3

class FiniteLoopsKind(IntEnum):
  LANGUAGE = 0
  ALWAYS = 1
  NEVER = 2

class Flags(IntEnum):
  F_INLINE = 0
  F_NESTED = 1

class FramePointerKind(IntEnum):
  NONE = 0
  NON_LEAF = 1
  ALL = 2

class GC(IntEnum):
  GC_NONE = 0
  WEAK = 1
  STRONG = 2

class GCMode(IntEnum):
  NON_GC = 0
  GC_ONLY = 1
  HYBRID_GC = 2

class GPUDefaultStreamKind(IntEnum):
  LEGACY = 0
  PER_THREAD = 1

class GVALinkage(IntEnum):
  INTERNAL = 0
  AVAILABLE_EXTERNALLY = 1
  DISCARDABLE_ODR = 2
  STRONG_EXTERNAL = 3
  STRONG_ODR = 4

class GetBuiltinTypeError(IntEnum):
  NONE = 0
  MISSING_TYPE = 1
  MISSING_STDIO = 2
  MISSING = 3
  MISSING_UCONTEXT = 4

class HLSLLangStd(IntEnum):
  HLSL_UNSET = 0
  HLSL2015 = 1
  HLSL2016 = 2
  HLSL2017 = 3
  HLSL2018 = 4
  HLSL2021 = 5
  HLSL202X = 6

class ID(IntEnum):
  WORK_GROUP = 0
  DEVICE = 1
  ALL_SVM_DEVICES = 2
  SUB_GROUP = 3

class IdentifierInfoFlag(IntEnum):
  ZERO_ARGUMENT = 0
  ONE_ARGUMENT = 1
  MULTI_ARGUMENT = 2

class IfStatementKind(IntEnum):
  ORDINARY = 0
  CONSTEXPR = 1
  CONSTEVAL_NON_NEGATED = 2
  CONSTEVAL_NEGATED = 3

class ImbueAttribute(IntEnum):
  NONE = 0
  ALWAYS = 1
  NEVER = 2
  ALWAYSARG1 = 3

class InClassInitStyle(IntEnum):
  NO_INITIALIZER = 0
  COPY_INITIALIZER = 1
  LIST_INITIALIZER = 2

class InheritedDesignatedInitializersState(IntEnum):
  UNKNOWN = 0
  INHERITED = 1
  NOT_INHERITED = 2

class InitStorageKind(IntEnum):
  NO_INITIALIZER = 0
  IN_CLASS_COPY_INITIALIZER = 1
  IN_CLASS_LIST_INITIALIZER = 2
  CAPTURED_VLA_TYPE = 3

class InlineAsmDialectKind(IntEnum):
  IADATT = 0
  IAD_INTEL = 1

class InlineVariableDefinitionKind(IntEnum):
  NONE = 0
  WEAK = 1
  WEAK_UNKNOWN = 2
  STRONG = 3

class InliningMethod(IntEnum):
  NORMAL_INLINING = 0
  ONLY_HINT_INLINING = 1
  ONLY_ALWAYS_INLINING = 2

class InterestingIdentifierKind(IntEnum):
  NOT_INTERESTING = 0
  FILE = 1
  JMP_BUF = 2
  SIGJMP_BUF = 3
  UCONTEXT_T = 4
  FLOAT_T = 5
  DOUBLE_T = 6
  NUMINTERESTINGIDENTIFIERS = 7

class Kinds(IntEnum):
  L_VALUE = 0
  X_VALUE = 1
  FUNCTION = 2
  VOID = 3
  ADDRESSABLE_VOID = 4
  DUPLICATE_VECTOR_COMPONENTS = 5
  MEMBER_FUNCTION = 6
  SUB_OBJ_C_PROPERTY_SETTING = 7
  CLASS_TEMPORARY = 8
  ARRAY_TEMPORARY = 9
  OBJ_C_MESSAGE_R_VALUE = 10
  PR_VALUE = 11

class LambdaCaptureDefault(IntEnum):
  NONE = 0
  BY_COPY = 1
  BY_REFERENCE = 2

class LambdaCaptureKind(IntEnum):
  THIS = 0
  STAR_THIS = 1
  BY_COPY = 2
  BY_REFERENCE = 3
  VLA_TYPE = 4

class LangAS(IntEnum):
  DEFAULT = 0
  OPENCL_GLOBAL = 1
  OPENCL_LOCAL = 2
  OPENCL_CONSTANT = 3
  OPENCL_PRIVATE = 4
  OPENCL_GENERIC = 5
  OPENCL_GLOBAL_DEVICE = 6
  OPENCL_GLOBAL_HOST = 7
  CUDA_DEVICE = 8
  CUDA_CONSTANT = 9
  CUDA_SHARED = 10
  SYCL_GLOBAL = 11
  SYCL_GLOBAL_DEVICE = 12
  SYCL_GLOBAL_HOST = 13
  SYCL_LOCAL = 14
  SYCL_PRIVATE = 15
  PTR32_SPTR = 16
  PTR32_UPTR = 17
  PTR64 = 18
  HLSL_GROUPSHARED = 19
  WASM_FUNCREF = 20

class LangFeatures(IntEnum):
  LINE_COMMENT = 0
  C99 = 1
  C11 = 2
  C17 = 3
  C2X = 4
  C_PLUS_PLUS = 5
  C_PLUS_PLUS11 = 6
  C_PLUS_PLUS14 = 7
  C_PLUS_PLUS17 = 8
  C_PLUS_PLUS20 = 9
  C_PLUS_PLUS23 = 10
  C_PLUS_PLUS26 = 11
  DIGRAPHS = 12
  GNU_MODE = 13
  HEX_FLOAT = 14
  OPEN_CL = 15
  HLSL = 16

class Language(IntEnum):
  UNKNOWN = 0
  ASSEMBLY = 1
  LLVMIR = 2
  C = 3
  CXX = 4
  OBJ_C = 5
  OBJ_CXX = 6
  OPEN_CL = 7
  OPEN_CLCXX = 8
  CUDA = 9
  RENDER_SCRIPT = 10
  HIP = 11
  HLSL = 12

class LanguageLinkage(IntEnum):
  C_LANGUAGE_LINKAGE = 0
  CXX_LANGUAGE_LINKAGE = 1
  NO_LANGUAGE_LINKAGE = 2

class LaxVectorConversionKind(IntEnum):
  NONE = 0
  INTEGER = 1
  ALL = 2

class Level(IntEnum):
  IGNORED = 0
  NOTE = 1
  REMARK = 2
  WARNING = 3
  ERROR = 4
  FATAL = 5

class Linkage(IntEnum):
  NO_LINKAGE = 0
  INTERNAL_LINKAGE = 1
  UNIQUE_EXTERNAL_LINKAGE = 2
  VISIBLE_NO_LINKAGE = 3
  MODULE_LINKAGE = 4
  EXTERNAL_LINKAGE = 5

class MSInheritanceModel(IntEnum):
  SINGLE = 0
  MULTIPLE = 1
  VIRTUAL = 2
  UNSPECIFIED = 3

class MSVCMajorVersion(IntEnum):
  MSVC2010 = 0
  MSVC2012 = 1
  MSVC2013 = 2
  MSVC2015 = 3
  MSVC2017 = 4
  MSVC20175 = 5
  MSVC20177 = 6
  MSVC2019 = 7
  MSVC20195 = 8
  MSVC20198 = 9

class MSVtorDispMode(IntEnum):
  NEVER = 0
  FOR_VIRTUAL_BASE_OVERRIDE = 1
  FOR_VF_TABLE = 2

class MethodRefFlags(IntEnum):
  METHOD_REFERENCE_NONE = 0
  METHOD_REFERENCE_GETTER = 1
  METHOD_REFERENCE_SETTER = 2

class ModifiableType(IntEnum):
  UNTESTED = 0
  MODIFIABLE = 1
  R_VALUE = 2
  FUNCTION = 3
  L_VALUE_CAST = 4
  NO_SETTER_PROPERTY = 5
  CONST_QUALIFIED = 6
  CONST_QUALIFIED_FIELD = 7
  CONST_ADDRESS_SPACE = 8
  ARRAY_TYPE = 9
  INCOMPLETE_TYPE = 10

class MultiVersionKind(IntEnum):
  NONE = 0
  TARGET = 1
  CPU_SPECIFIC = 2
  CPU_DISPATCH = 3
  TARGET_CLONES = 4
  TARGET_VERSION = 5

class NameKind(IntEnum):
  TEMPLATE = 0
  OVERLOADED_TEMPLATE = 1
  ASSUMED_TEMPLATE = 2
  QUALIFIED_TEMPLATE = 3
  DEPENDENT_TEMPLATE = 4
  SUBST_TEMPLATE_TEMPLATE_PARM = 5
  SUBST_TEMPLATE_TEMPLATE_PARM_PACK = 6
  USING_TEMPLATE = 7

class NeedExtraManglingDecl(IntEnum):
  NEED_EXTRA_MANGLING_DECLARATION = 0

class NestedNameSpecifierDependence(IntEnum):
  UNEXPANDED_PACK = 0
  INSTANTIATION = 1
  DEPENDENT = 2
  ERROR = 3
  NONE = 4
  DEPENDENT_INSTANTIATION = 5
  ALL = 6

class NonOdrUseReason(IntEnum):
  NONE = 0
  UNEVALUATED = 1
  CONSTANT = 2
  DISCARDED = 3

class NonceObjCInterface(IntEnum):
  OBJ_C_INTERFACE = 0

class NullabilityKind(IntEnum):
  NON_NULL = 0
  NULLABLE = 1
  UNSPECIFIED = 2
  NULLABLE_RESULT = 3

class ObjCBridgeCastKind(IntEnum):
  BRIDGE = 0
  BRIDGE_TRANSFER = 1
  BRIDGE_RETAINED = 2

class ObjCDispatchMethodKind(IntEnum):
  LEGACY = 0
  NON_LEGACY = 1
  MIXED = 2

class ObjCInstanceTypeFamily(IntEnum):
  NONE = 0
  ARRAY = 1
  DICTIONARY = 2
  SINGLETON = 3
  INITIALIZER = 4
  RETURNS_SELF = 5

class ObjCLifetime(IntEnum):
  NONE = 0
  EXPLICIT_NONE = 1
  STRONG = 2
  WEAK = 3
  AUTORELEASING = 4

class ObjCMethodFamily(IntEnum):
  NONE = 0
  ALLOC = 1
  COPY = 2
  INITIALIZER = 3
  MUTABLE_COPY = 4
  NEW = 5
  AUTORELEASE = 6
  DEALLOC = 7
  FINALIZE = 8
  RELEASE = 9
  RETAIN = 10
  RETAIN_COUNT = 11
  SELF = 12
  INITIALIZE = 13
  PERFORM_SELECTOR = 14

class ObjCPropertyQueryKind(IntEnum):
  QUERY_UNKNOWN = 0
  QUERY_INSTANCE = 1
  QUERY_CLASS = 2

class ObjCStringFormatFamily(IntEnum):
  NONE = 0
  NS_STRING = 1
  CF_STRING = 2

class ObjCSubstitutionContext(IntEnum):
  ORDINARY = 0
  RESULT = 1
  PARAMETER = 2
  PROPERTY = 3
  SUPERCLASS = 4

class ObjCTypeParamVariance(IntEnum):
  INVARIANT = 0
  COVARIANT = 1
  CONTRAVARIANT = 2

class OnOffSwitch(IntEnum):
  ON = 0
  OFF = 1
  DEFAULT = 2

class OnStackType(IntEnum):
  ON_STACK = 0

class OpenMPAdjustArgsOpKind(IntEnum):
  ADJUSTARGS_NOTHING = 0
  ADJUSTARGS_NEED_DEVICE_POINTER = 1
  ADJUSTARGS_UNKNOWN = 2

class OpenMPAtClauseKind(IntEnum):
  AT_COMPILATION = 0
  AT_EXECUTION = 1
  AT_UNKNOWN = 2

class OpenMPAtomicDefaultMemOrderClauseKind(IntEnum):
  SEQ_CST = 0
  ACQ_REL = 1
  RELAXED = 2
  UNKNOWN = 3

class OpenMPBindClauseKind(IntEnum):
  BIND_TEAMS = 0
  BIND_PARALLEL = 1
  BIND_THREAD = 2
  BIND_UNKNOWN = 3

class OpenMPDefaultmapClauseKind(IntEnum):
  SCALAR = 0
  AGGREGATE = 1
  POINTER = 2
  UNKNOWN = 3

class OpenMPDefaultmapClauseModifier(IntEnum):
  UNKNOWN = 0
  ALLOC = 1
  TO = 2
  FROM = 3
  TOFROM = 4
  NONE = 5
  DEFAULT = 6
  PRESENT = 7

class OpenMPDependClauseKind(IntEnum):
  IN = 0
  OUT = 1
  INOUT = 2
  MUTEXINOUTSET = 3
  DEPOBJ = 4
  SOURCE = 5
  SINK = 6
  INOUTSET = 7
  OUTALLMEMORY = 8
  INOUTALLMEMORY = 9
  UNKNOWN = 10

class OpenMPDeviceClauseModifier(IntEnum):
  ANCESTOR = 0
  DEVICE_NUM = 1
  UNKNOWN = 2

class OpenMPDeviceType(IntEnum):
  HOST = 0
  NOHOST = 1
  ANY = 2
  UNKNOWN = 3

class OpenMPDistScheduleClauseKind(IntEnum):
  STATIC = 0
  UNKNOWN = 1

class OpenMPDoacrossClauseModifier(IntEnum):
  DOACROSS_SOURCE = 0
  DOACROSS_SINK = 1
  DOACROSS_SINK_OMP_CUR_ITERATION = 2
  DOACROSS_SOURCE_OMP_CUR_ITERATION = 3
  DOACROSS_UNKNOWN = 4

class OpenMPGrainsizeClauseModifier(IntEnum):
  GRAINSIZE_STRICT = 0
  GRAINSIZE_UNKNOWN = 1

class OpenMPLastprivateModifier(IntEnum):
  CONDITIONAL = 0
  UNKNOWN = 1

class OpenMPLinearClauseKind(IntEnum):
  VALUE = 0
  REFERENCE = 1
  UVAL = 2
  UNKNOWN = 3

class OpenMPMapClauseKind(IntEnum):
  ALLOC = 0
  TO = 1
  FROM = 2
  TOFROM = 3
  DELETE = 4
  RELEASE = 5
  UNKNOWN = 6

class OpenMPMapModifierKind(IntEnum):
  UNKNOWN = 0
  ALWAYS = 1
  CLOSE = 2
  MAPPER = 3
  ITERATOR = 4
  PRESENT = 5
  OMPX_HOLD = 6

class OpenMPMotionModifierKind(IntEnum):
  MOTIONMODIFIER_MAPPER = 0
  MOTIONMODIFIER_PRESENT = 1
  MOTIONMODIFIER_UNKNOWN = 2

class OpenMPNumTasksClauseModifier(IntEnum):
  NUMTASKS_STRICT = 0
  NUMTASKS_UNKNOWN = 1

class OpenMPOrderClauseKind(IntEnum):
  CONCURRENT = 0
  UNKNOWN = 1

class OpenMPOrderClauseModifier(IntEnum):
  MODIFIER_UNKNOWN = 0
  MODIFIER_REPRODUCIBLE = 1
  MODIFIER_UNCONSTRAINED = 2
  MODIFIER_LAST = 3

class OpenMPReductionClauseModifier(IntEnum):
  DEFAULT = 0
  INSCAN = 1
  TASK = 2
  UNKNOWN = 3

class OpenMPScheduleClauseKind(IntEnum):
  STATIC = 0
  DYNAMIC = 1
  GUIDED = 2
  AUTO = 3
  RUNTIME = 4
  UNKNOWN = 5

class OpenMPScheduleClauseModifier(IntEnum):
  UNKNOWN = 0
  MONOTONIC = 1
  NONMONOTONIC = 2
  SIMD = 3

class OpenMPSeverityClauseKind(IntEnum):
  SEVERITY_FATAL = 0
  SEVERITY_WARNING = 1
  SEVERITY_UNKNOWN = 2

class OverloadedOperatorKind(IntEnum):
  NONE = 0
  NEW = 1
  DELETE = 2
  ARRAY_NEW = 3
  ARRAY_DELETE = 4
  PLUS = 5
  MINUS = 6
  STAR = 7
  SLASH = 8
  PERCENT = 9
  CARET = 10
  AMP = 11
  PIPE = 12
  TILDE = 13
  EXCLAIM = 14
  EQUAL = 15
  LESS = 16
  GREATER = 17
  PLUS_EQUAL = 18
  MINUS_EQUAL = 19
  STAR_EQUAL = 20
  SLASH_EQUAL = 21
  PERCENT_EQUAL = 22
  CARET_EQUAL = 23
  AMP_EQUAL = 24
  PIPE_EQUAL = 25
  LESS_LESS = 26
  GREATER_GREATER = 27
  LESS_LESS_EQUAL = 28
  GREATER_GREATER_EQUAL = 29
  EQUAL_EQUAL = 30
  EXCLAIM_EQUAL = 31
  LESS_EQUAL = 32
  GREATER_EQUAL = 33
  SPACESHIP = 34
  AMP_AMP = 35
  PIPE_PIPE = 36
  PLUS_PLUS = 37
  MINUS_MINUS = 38
  COMMA = 39
  ARROW_STAR = 40
  ARROW = 41
  CALL = 42
  SUBSCRIPT = 43
  CONDITIONAL = 44
  COAWAIT = 45

class OverloadsShown(IntEnum):
  ALL = 0
  BEST = 1

class ParameterABI(IntEnum):
  ORDINARY = 0
  SWIFT_INDIRECT_RESULT = 1
  SWIFT_ERROR_RESULT = 2
  SWIFT_CONTEXT = 3
  SWIFT_ASYNC_CONTEXT = 4

class ParenLocsOffsets(IntEnum):
  L_PAREN_TOKEN = 0
  R_PAREN_TOKEN = 1
  TOTAL = 2

class PragmaFloatControlKind(IntEnum):
  UNKNOWN = 0
  PRECISE = 1
  NO_PRECISE = 2
  EXCEPT = 3
  NO_EXCEPT = 4
  PUSH = 5
  POP = 6

class PragmaMSCommentKind(IntEnum):
  UNKNOWN = 0
  LINKER = 1
  LIB = 2
  COMPILER = 3
  EXE_STRING = 4
  USER = 5

class PragmaMSPointersToMembersKind(IntEnum):
  BEST_CASE = 0
  FULL_GENERALITY_SINGLE_INHERITANCE = 1
  FULL_GENERALITY_MULTIPLE_INHERITANCE = 2
  FULL_GENERALITY_VIRTUAL_INHERITANCE = 3

class PragmaMSStructKind(IntEnum):
  OFF = 0
  ON = 1

class PragmaSectionFlag(IntEnum):
  NONE = 0
  READ = 1
  WRITE = 2
  EXECUTE = 3
  IMPLICIT = 4
  ZERO_INITIALIZER = 5
  INVALID = 6

class ProfileInstrKind(IntEnum):
  PROFILE_NONE = 0
  PROFILE_CLANG_INSTR = 1
  PROFILE_IR_INSTR = 2
  PROFILE_CSIR_INSTR = 3

class Qualified(IntEnum):
  NONE = 0
  AS_WRITTEN = 1
  FULLY = 2

class RangeExprOffset(IntEnum):
  BEGIN = 0
  END = 1
  STEP = 2
  TOTAL = 3

class RangeLocOffset(IntEnum):
  ASSIGN_TOKEN = 0
  SECOND_COLON_TOKEN = 1
  TOTAL = 2

class RefQualifierKind(IntEnum):
  NONE = 0
  L_VALUE = 1
  R_VALUE = 2

class RemarkKind(IntEnum):
  MISSING = 0
  ENABLED = 1
  ENABLED_EVERYTHING = 2
  DISABLED = 3
  DISABLED_EVERYTHING = 4
  WITH_PATTERN = 5

class ReservedIdentifierStatus(IntEnum):
  NOT_RESERVED = 0
  STARTS_WITH_UNDERSCORE_AT_GLOBAL_SCOPE = 1
  STARTS_WITH_UNDERSCORE_AND_IS_EXTERN_C = 2
  STARTS_WITH_DOUBLE_UNDERSCORE = 3
  STARTS_WITH_UNDERSCORE_FOLLOWED_BY_CAPITAL_LETTER = 4
  CONTAINS_DOUBLE_UNDERSCORE = 5

class ReservedLiteralSuffixIdStatus(IntEnum):
  NOT_RESERVED = 0
  NOT_STARTS_WITH_UNDERSCORE = 1
  CONTAINS_DOUBLE_UNDERSCORE = 2

class SFINAEResponse(IntEnum):
  SUBSTITUTION_FAILURE = 0
  SUPPRESS = 1
  REPORT = 2
  ACCESS_CONTROL = 3

class SYCLMajorVersion(IntEnum):
  VERSION_NONE = 0
  VERSION2017 = 1
  VERSION2020 = 2

class SanitizerOrdinal(IntEnum):
  ADDRESS = 0
  POINTER_COMPARE = 1
  POINTER_SUBTRACT = 2
  KERNEL_ADDRESS = 3
  HW_ADDRESS = 4
  KERNEL_HW_ADDRESS = 5
  MEMTAG_STACK = 6
  MEMTAG_HEAP = 7
  MEMTAG_GLOBALS = 8
  MEMORY_TAG_GROUP = 9
  MEMORY = 10
  KERNEL_MEMORY = 11
  FUZZER = 12
  FUZZER_NO_LINK = 13
  THREAD = 14
  LEAK = 15
  ALIGNMENT = 16
  ARRAY_BOUNDS = 17
  BOOLEAN = 18
  BUILTIN = 19
  ENUM = 20
  FLOAT_CAST_OVERFLOW = 21
  FLOAT_DIVIDE_BY_ZERO = 22
  FUNCTION = 23
  INTEGER_DIVIDE_BY_ZERO = 24
  NONNULL_ATTRIBUTE = 25
  NULL_ = 26
  NULLABILITY_ARGUMENT = 27
  NULLABILITY_ASSIGN = 28
  NULLABILITY_RETURN = 29
  NULLABILITY_GROUP = 30
  OBJECT_SIZE = 31
  POINTER_OVERFLOW = 32
  RETURN = 33
  RETURNS_NONNULL_ATTRIBUTE = 34
  SHIFT_BASE = 35
  SHIFT_EXPONENT = 36
  SHIFT_GROUP = 37
  SIGNED_INTEGER_OVERFLOW = 38
  UNREACHABLE = 39
  VLA_BOUND = 40
  VPTR = 41
  UNSIGNED_INTEGER_OVERFLOW = 42
  UNSIGNED_SHIFT_BASE = 43
  DATA_FLOW = 44
  CFI_CAST_STRICT = 45
  CFI_DERIVED_CAST = 46
  CFII_CALL = 47
  CFIMF_CALL = 48
  CFI_UNRELATED_CAST = 49
  CFINV_CALL = 50
  CFIV_CALL = 51
  CFI_GROUP = 52
  KCFI = 53
  SAFE_STACK = 54
  SHADOW_CALL_STACK = 55
  UNDEFINED_GROUP = 56
  UNDEFINED_TRAP_GROUP = 57
  IMPLICIT_UNSIGNED_INTEGER_TRUNCATION = 58
  IMPLICIT_SIGNED_INTEGER_TRUNCATION = 59
  IMPLICIT_INTEGER_TRUNCATION_GROUP = 60
  IMPLICIT_INTEGER_SIGN_CHANGE = 61
  IMPLICIT_INTEGER_ARITHMETIC_VALUE_CHANGE_GROUP = 62
  OBJ_C_CAST = 63
  IMPLICIT_CONVERSION_GROUP = 64
  INTEGER_GROUP = 65
  LOCAL_BOUNDS = 66
  BOUNDS_GROUP = 67
  SCUDO = 68
  ALL_GROUP = 69
  COUNT = 70

class SelectorLocationsKind(IntEnum):
  NON_STANDARD = 0
  STANDARD_NO_SPACE = 1
  STANDARD_WITH_SPACE = 2

class ShaderStage(IntEnum):
  PIXEL = 0
  VERTEX = 1
  GEOMETRY = 2
  HULL = 3
  DOMAIN_ = 4
  COMPUTE = 5
  LIBRARY = 6
  RAY_GENERATION = 7
  INTERSECTION = 8
  ANY_HIT = 9
  CLOSEST_HIT = 10
  MISS = 11
  CALLABLE = 12
  MESH = 13
  AMPLIFICATION = 14
  INVALID = 15

class SignReturnAddressKeyKind(IntEnum):
  A_KEY = 0
  B_KEY = 1

class SignReturnAddressScopeKind(IntEnum):
  NONE = 0
  NON_LEAF = 1
  ALL = 2

class SignedOverflowBehaviorTy(IntEnum):
  UNDEFINED = 0
  DEFINED = 1
  TRAPPING = 2

class SpecialMemberFlags(IntEnum):
  DEFAULT_CONSTRUCTOR = 0
  COPY_CONSTRUCTOR = 1
  MOVE_CONSTRUCTOR = 2
  COPY_ASSIGNMENT = 3
  MOVE_ASSIGNMENT = 4
  DESTRUCTOR = 5
  ALL = 6

class SpecifierKind(IntEnum):
  IDENTIFIER = 0
  NAMESPACE = 1
  NAMESPACE_ALIAS = 2
  TYPE_SPEC = 3
  TYPE_SPEC_WITH_TEMPLATE = 4
  GLOBAL = 5
  SUPER = 6

class StackProtectorMode(IntEnum):
  OFF = 0
  ON = 1
  STRONG = 2
  REQ = 3

class StorageClass(IntEnum):
  NONE = 0
  EXTERN = 1
  STATIC = 2
  PRIVATE_EXTERN = 3
  AUTO = 4
  REGISTER = 5

class StorageDuration(IntEnum):
  FULL_EXPRESSION = 0
  AUTOMATIC = 1
  THREAD = 2
  STATIC = 3
  DYNAMIC = 4

class StoredNameKind(IntEnum):
  STORED_IDENTIFIER = 0
  STORED_OBJ_C_ZERO_ARGUMENT_SELECTOR = 1
  STORED_OBJ_C_ONE_ARGUMENT_SELECTOR = 2
  STORED_CXX_CONSTRUCTOR_NAME = 3
  STORED_CXX_DESTRUCTOR_NAME = 4
  STORED_CXX_CONVERSION_FUNCTION_NAME = 5
  STORED_CXX_OPERATOR_NAME = 6
  STORED_DECLARATION_NAME_EXTRA = 7
  UNCOMMON_NAME_KIND_OFFSET = 8

class StoredSpecifierKind(IntEnum):
  STORED_IDENTIFIER = 0
  STORED_DECLARATION = 1
  STORED_TYPE_SPEC = 2
  STORED_TYPE_SPEC_WITH_TEMPLATE = 3

class StrictFlexArraysLevelKind(IntEnum):
  DEFAULT = 0
  ONE_ZERO_OR_INCOMPLETE = 1
  ZERO_OR_INCOMPLETE = 2
  INCOMPLETE_ONLY = 3

class StructReturnConventionKind(IntEnum):
  DEFAULT = 0
  ON_STACK = 1
  IN_REGS = 2

class SubExpr(IntEnum):
  CALLEE = 0
  LHS = 1
  RHS = 2
  COUNT = 3

class SubStmt(IntEnum):
  BODY = 0
  PROMISE = 1
  INITIALIZER_SUSPEND = 2
  FINAL_SUSPEND = 3
  ON_EXCEPTION = 4
  ON_FALLTHROUGH = 5
  ALLOCATE = 6
  DEALLOCATE = 7
  RESULT_DECLARATION = 8
  RETURN_VALUE = 9
  RETURN_STATEMENT = 10
  RETURN_STATEMENT_ON_ALLOC_FAILURE = 11

class SwiftAsyncFramePointerKind(IntEnum):
  AUTO = 0
  ALWAYS = 1
  NEVER = 2

class SyncScope(IntEnum):
  HIP_SINGLE_THREAD = 0
  HIP_WAVEFRONT = 1
  HIP_WORKGROUP = 2
  HIP_AGENT = 3
  HIP_SYSTEM = 4
  OPEN_CL_WORK_GROUP = 5
  OPEN_CL_DEVICE = 6
  OPEN_CL_ALL_SVM_DEVICES = 7
  OPEN_CL_SUB_GROUP = 8

class Syntax(IntEnum):
  GNU = 0
  CXX11 = 1
  C2X = 2
  DECLSPEC = 3
  MICROSOFT = 4
  KEYWORD = 5
  PRAGMA = 6
  CONTEXT_SENSITIVE_KEYWORD = 7
  HLSL_SEMANTIC = 8
  IMPLICIT = 9

class TLSModel(IntEnum):
  GENERAL_DYNAMIC_TLS_MODEL = 0
  LOCAL_DYNAMIC_TLS_MODEL = 1
  INITIAL_EXEC_TLS_MODEL = 2
  LOCAL_EXEC_TLS_MODEL = 3

class TQ(IntEnum):
  CONST = 0
  RESTRICT = 1
  VOLATILE = 2
  CVR_MASK = 3

class TagTypeKind(IntEnum):
  STRUCT = 0
  INTERFACE = 1
  UNION = 2
  CLASS = 3
  ENUM = 4

class TailPaddingUseRules(IntEnum):
  ALWAYS_USE_TAIL_PADDING = 0
  USE_TAIL_PADDING_UNLESS_POD03 = 1
  USE_TAIL_PADDING_UNLESS_POD11 = 2

class TemplateArgumentDependence(IntEnum):
  UNEXPANDED_PACK = 0
  INSTANTIATION = 1
  DEPENDENT = 2
  ERROR = 3
  NONE = 4
  DEPENDENT_INSTANTIATION = 5
  ALL = 6

class TemplateNameDependence(IntEnum):
  UNEXPANDED_PACK = 0
  INSTANTIATION = 1
  DEPENDENT = 2
  ERROR = 3
  NONE = 4
  DEPENDENT_INSTANTIATION = 5
  ALL = 6

class TemplateSpecializationKind(IntEnum):
  UNDECLARED = 0
  IMPLICIT_INSTANTIATION = 1
  EXPLICIT_SPECIALIZATION = 2
  EXPLICIT_INSTANTIATION_DECLARATION = 3
  EXPLICIT_INSTANTIATION_DEFINITION = 4

class TextDiagnosticFormat(IntEnum):
  CLANG = 0
  MSVC = 1
  VI = 2
  SARIF = 3

class ThreadModelKind(IntEnum):
  POSIX = 0
  SINGLE = 1

class ThreadStorageClassSpecifier(IntEnum):
  UNSPECIFIED = 0
  __THREAD = 1
  THREAD_LOCAL = 2
  _THREAD_LOCAL = 3

class TrailingAllocKind(IntEnum):
  TAK_INHERITS_CONSTRUCTOR = 0
  TAK_HAS_TAIL_EXPLICIT = 1

class TranslationUnitKind(IntEnum):
  COMPLETE = 0
  PREFIX = 1
  MODULE = 2
  INCREMENTAL = 3

class TrivialAutoVarInitKind(IntEnum):
  UNINITIALIZED = 0
  ZERO = 1
  PATTERN = 2

class TypeDependence(IntEnum):
  UNEXPANDED_PACK = 0
  INSTANTIATION = 1
  DEPENDENT = 2
  VARIABLY_MODIFIED = 3
  ERROR = 4
  NONE = 5
  ALL = 6
  DEPENDENT_INSTANTIATION = 7

class TypeLocClass(IntEnum):
  ADJUSTED = 0
  DECAYED = 1
  CONSTANT_ARRAY = 2
  DEPENDENT_SIZED_ARRAY = 3
  INCOMPLETE_ARRAY = 4
  VARIABLE_ARRAY = 5
  ATOMIC = 6
  ATTRIBUTED = 7
  BTF_TAG_ATTRIBUTED = 8
  BIT_INT = 9
  BLOCK_POINTER = 10
  BUILTIN = 11
  COMPLEX = 12
  DECLTYPE = 13
  AUTO = 14
  DEDUCED_TEMPLATE_SPECIALIZATION = 15
  DEPENDENT_ADDRESS_SPACE = 16
  DEPENDENT_BIT_INT = 17
  DEPENDENT_NAME = 18
  DEPENDENT_SIZED_EXT_VECTOR = 19
  DEPENDENT_TEMPLATE_SPECIALIZATION = 20
  DEPENDENT_VECTOR = 21
  ELABORATED = 22
  FUNCTION_NO_PROTO = 23
  FUNCTION_PROTO = 24
  INJECTED_CLASS_NAME = 25
  MACRO_QUALIFIED = 26
  CONSTANT_MATRIX = 27
  DEPENDENT_SIZED_MATRIX = 28
  MEMBER_POINTER = 29
  OBJ_C_OBJECT_POINTER = 30
  OBJ_C_OBJECT = 31
  OBJ_C_INTERFACE = 32
  OBJ_C_TYPE_PARAMETER = 33
  PACK_EXPANSION = 34
  PARENTHESIS = 35
  PIPE = 36
  POINTER = 37
  L_VALUE_REFERENCE = 38
  R_VALUE_REFERENCE = 39
  SUBST_TEMPLATE_TYPE_PARM_PACK = 40
  SUBST_TEMPLATE_TYPE_PARM = 41
  ENUM = 42
  RECORD = 43
  TEMPLATE_SPECIALIZATION = 44
  TEMPLATE_TYPE_PARM = 45
  TYPE_OF_EXPRESSION = 46
  TYPE_OF = 47
  TYPEDEF = 48
  UNARY_TRANSFORM = 49
  UNRESOLVED_USING = 50
  USING = 51
  VECTOR = 52
  EXT_VECTOR = 53
  QUALIFIED = 54

class TypeOfKind(IntEnum):
  QUALIFIED = 0
  UNQUALIFIED = 1

class TypeSpecifierSign(IntEnum):
  UNSPECIFIED = 0
  SIGNED = 1
  UNSIGNED = 2

class TypeSpecifierType(IntEnum):
  UNSPECIFIED = 0
  VOID = 1
  CHARACTER = 2
  WCHAR = 3
  CHAR8 = 4
  CHAR16 = 5
  CHAR32 = 6
  INT = 7
  INT128 = 8
  BITINT = 9
  HALF = 10
  FLOAT16 = 11
  ACCUM = 12
  FRACT = 13
  B_FLOAT16 = 14
  FLOAT = 15
  DOUBLE = 16
  FLOAT128 = 17
  IBM128 = 18
  BOOLEAN = 19
  DECIMAL32 = 20
  DECIMAL64 = 21
  DECIMAL128 = 22
  ENUM = 23
  UNION = 24
  STRUCT = 25
  CLASS = 26
  INTERFACE = 27
  TYPENAME = 28
  TYPEOF_TYPE = 29
  TYPEOF_EXPRESSION = 30
  TYPEOF_UNQUALIFIED_TYPE = 31
  TYPEOF_UNQUALIFIED_EXPRESSION = 32
  DECLTYPE = 33
  ADD_LVALUE_REFERENCE = 34
  ADD_POINTER = 35
  ADD_RVALUE_REFERENCE = 36
  DECAY = 37
  MAKE_SIGNED = 38
  MAKE_UNSIGNED = 39
  REMOVE_ALL_EXTENTS = 40
  REMOVE_CONST = 41
  REMOVE_CV = 42
  REMOVE_CVREF = 43
  REMOVE_EXTENT = 44
  REMOVE_POINTER = 45
  REMOVE_REFERENCE_T = 46
  REMOVE_RESTRICT = 47
  REMOVE_VOLATILE = 48
  UNDERLYING_TYPE = 49
  AUTO = 50
  DECLTYPE_AUTO = 51
  AUTO_TYPE = 52
  UNKNOWN_ANYTYPE = 53
  ATOMIC = 54
  IMAGE_1D_T = 55
  IMAGE_1D_ARRAY_T = 56
  IMAGE_1D_BUFFER_T = 57
  IMAGE_2D_T = 58
  IMAGE_2D_ARRAY_T = 59
  IMAGE_2D_DEPTH_T = 60
  IMAGE_2D_ARRAY_DEPTH_T = 61
  IMAGE_2D_MSAA_T = 62
  IMAGE_2D_ARRAY_MSAA_T = 63
  IMAGE_2D_MSAA_DEPTH_T = 64
  IMAGE_2D_ARRAY_MSAA_DEPTH_T = 65
  IMAGE_3D_T = 66
  ERROR = 67

class TypeSpecifierWidth(IntEnum):
  UNSPECIFIED = 0
  SHORT = 1
  LONG = 2
  LONG_LONG = 3

class TypeSpecifiersPipe(IntEnum):
  UNSPECIFIED = 0
  PIPE = 1

class TypeTrait(IntEnum):
  IS_INTERFACE_CLASS = 0
  IS_SEALED = 1
  IS_DESTRUCTIBLE = 2
  IS_TRIVIALLY_DESTRUCTIBLE = 3
  IS_NOTHROW_DESTRUCTIBLE = 4
  HAS_NOTHROW_MOVE_ASSIGN = 5
  HAS_TRIVIAL_MOVE_ASSIGN = 6
  HAS_TRIVIAL_MOVE_CONSTRUCTOR = 7
  HAS_NOTHROW_ASSIGN = 8
  HAS_NOTHROW_COPY = 9
  HAS_NOTHROW_CONSTRUCTOR = 10
  HAS_TRIVIAL_ASSIGN = 11
  HAS_TRIVIAL_COPY = 12
  HAS_TRIVIAL_DEFAULT_CONSTRUCTOR = 13
  HAS_TRIVIAL_DESTRUCTOR = 14
  HAS_VIRTUAL_DESTRUCTOR = 15
  IS_ABSTRACT = 16
  IS_AGGREGATE = 17
  IS_CLASS = 18
  IS_EMPTY = 19
  IS_ENUM = 20
  IS_FINAL = 21
  IS_LITERAL = 22
  IS_POD = 23
  IS_POLYMORPHIC = 24
  IS_STANDARD_LAYOUT = 25
  IS_TRIVIAL = 26
  IS_TRIVIALLY_COPYABLE = 27
  IS_UNION = 28
  HAS_UNIQUE_OBJECT_REPRESENTATIONS = 29
  IS_TRIVIALLY_RELOCATABLE = 30
  IS_TRIVIALLY_EQUALITY_COMPARABLE = 31
  IS_BOUNDED_ARRAY = 32
  IS_UNBOUNDED_ARRAY = 33
  IS_NULL_POINTER = 34
  IS_SCOPED_ENUM = 35
  IS_REFERENCEABLE = 36
  CAN_PASS_IN_REGS = 37
  IS_ARITHMETIC = 38
  IS_FLOATING_POINT = 39
  IS_INTEGRAL = 40
  IS_COMPLETE_TYPE = 41
  IS_VOID = 42
  IS_ARRAY = 43
  IS_FUNCTION = 44
  IS_REFERENCE = 45
  IS_LVALUE_REFERENCE = 46
  IS_RVALUE_REFERENCE = 47
  IS_FUNDAMENTAL = 48
  IS_OBJECT = 49
  IS_SCALAR = 50
  IS_COMPOUND = 51
  IS_POINTER = 52
  IS_MEMBER_OBJECT_POINTER = 53
  IS_MEMBER_FUNCTION_POINTER = 54
  IS_MEMBER_POINTER = 55
  IS_CONST = 56
  IS_VOLATILE = 57
  IS_SIGNED = 58
  IS_UNSIGNED = 59
  TYPE_COMPATIBLE = 60
  IS_NOTHROW_ASSIGNABLE = 61
  IS_ASSIGNABLE = 62
  IS_BASE_OF = 63
  IS_CONVERTIBLE_TO = 64
  IS_TRIVIALLY_ASSIGNABLE = 65
  REFERENCE_BINDS_TO_TEMPORARY = 66
  IS_SAME = 67
  IS_CONVERTIBLE = 68
  XNU_TYPE_COMPATIBLE = 69
  IS_CONSTRUCTIBLE = 70
  IS_NOTHROW_CONSTRUCTIBLE = 71
  IS_TRIVIALLY_CONSTRUCTIBLE = 72

class UnaryExprOrTypeTrait(IntEnum):
  SIZE_OF = 0
  ALIGN_OF = 1
  PREFERRED_ALIGN_OF = 2
  POINTER_AUTH_TYPE_DISCRIMINATOR = 3
  XNU_TYPE_SIGNATURE = 4
  XNU_TYPE_SUMMARY = 5
  TMO_TYPE_GET_METADATA = 6
  VEC_STEP = 7
  OPEN_MP_REQUIRED_SIMD_ALIGN = 8

class UnaryOperatorKind(IntEnum):
  POST_INCREMENT = 0
  POST_DECREMENT = 1
  PRE_INCREMENT = 2
  PRE_DECREMENT = 3
  ADDRESS_OF = 4
  DEREF = 5
  PLUS = 6
  MINUS = 7
  NOT = 8
  L_NOT = 9
  REAL = 10
  IMAG = 11
  EXTENSION = 12
  COAWAIT = 13

class APValueKind(IntEnum):
  NONE = 0
  INDETERMINATE = 1
  INT = 2
  FLOAT = 3
  FIXED_POINT = 4
  COMPLEX_INT = 5
  COMPLEX_FLOAT = 6
  L_VALUE = 7
  VECTOR = 8
  ARRAY = 9
  STRUCT = 10
  UNION = 11
  MEMBER_POINTER = 12
  ADDRESS_LABEL_DIFF = 13

class VectorLibrary(IntEnum):
  NO_LIBRARY = 0
  ACCELERATE = 1
  LIBMVEC = 2
  MASSV = 3
  SVML = 4
  SLEEF = 5
  DARWIN_LIBSYSTEM_M = 6
  ARM_PL = 7

class Visibility(IntEnum):
  HIDDEN_VISIBILITY = 0
  PROTECTED_VISIBILITY = 1
  DEFAULT_VISIBILITY = 2

class AttributeSyntax(IntEnum):
  GNU = 0
  CXX11 = 1
  C2X = 2
  DECLSPEC = 3
  MICROSOFT = 4
  KEYWORD = 5
  PRAGMA = 6
  CONTEXT_SENSITIVE_KEYWORD = 7

class DeclCategory(IntEnum):
  UNKNOWN = 0
  LOCAL_VARIABLE = 1
  GLOBAL_VARIABLE = 2
  PARAMETER_VARIABLE = 3
  FUNCTION = 4
  INSTANCE_METHOD = 5
  INSTANCE_MEMBER = 6
  CLASS_METHOD = 7
  CLASS_MEMBER = 8
  THIS = 9
  CLASS = 10
  STRUCTURE = 11
  UNION = 12
  CONCEPT = 13
  INTERFACE = 14
  ENUMERATION = 15
  ENUMERATOR = 16
  NAMESPACE = 17
  TYPE_ALIAS = 18
  TEMPLATE_TYPE_PARAMETER = 19
  TEMPLATE_VALUE_PARAMETER = 20
  LABEL = 21

class PseudoKind(IntEnum):
  TEMPLATE_ARGUMENT = 0
  TEMPLATE_PARAMETER_LIST = 1
  CXX_BASE_SPECIFIER = 2
  DESIGNATOR = 3

class Designator(multiplier.Entity):
  parent_declaration: Optional[multiplier.ast.Decl]
  parent_statement: Optional[multiplier.ast.Stmt]
  is_field_designator: bool
  is_array_designator: bool
  is_array_range_designator: bool
  field: Optional[multiplier.ast.FieldDecl]
  tokens: multiplier.frontend.TokenRange
  dot_token: multiplier.frontend.Token
  field_token: multiplier.frontend.Token
  left_bracket_token: multiplier.frontend.Token
  right_bracket_token: multiplier.frontend.Token
  ellipsis_token: multiplier.frontend.Token

  @staticmethod
  def static_category() -> multiplier.EntityCategory:
    ...

  @overload
  @staticmethod
  def FROM(self: multiplier.ast.Designator) -> Optional[multiplier.ast.Designator]:
    ...

  @overload
  @staticmethod
  def FROM(self: Optional[multiplier.ast.Designator]) -> Optional[multiplier.ast.Designator]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.Designator]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.Designator]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.Designator]:
    ...

class CXXBaseSpecifier(multiplier.Entity):
  parent_declaration: Optional[multiplier.ast.Decl]
  tokens: multiplier.frontend.TokenRange
  base_type_token: multiplier.frontend.Token
  is_virtual: bool
  base_kind: multiplier.ast.TagTypeKind
  is_pack_expansion: bool
  constructors_are_inherited: bool
  ellipsis_token: multiplier.frontend.Token
  semantic_access_specifier: multiplier.ast.AccessSpecifier
  lexical_access_specifier: multiplier.ast.AccessSpecifier
  base_type: multiplier.ast.Type

  @staticmethod
  def static_category() -> multiplier.EntityCategory:
    ...

  @overload
  @staticmethod
  def FROM(self: multiplier.ast.CXXBaseSpecifier) -> Optional[multiplier.ast.CXXBaseSpecifier]:
    ...

  @overload
  @staticmethod
  def FROM(self: Optional[multiplier.ast.CXXBaseSpecifier]) -> Optional[multiplier.ast.CXXBaseSpecifier]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXBaseSpecifier]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXBaseSpecifier]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXBaseSpecifier]:
    ...

class TemplateParameterList(multiplier.Entity):
  depth: int
  has_unexpanded_parameter_pack: bool
  has_parameter_pack: bool
  requires_clause: Optional[multiplier.ast.Expr]
  template_keyword_token: multiplier.frontend.Token
  left_angle_token: multiplier.frontend.Token
  right_angle_token: multiplier.frontend.Token
  tokens: multiplier.frontend.TokenRange
  num_parameters: int
  parameters: Generator[multiplier.ast.NamedDecl]

  @staticmethod
  def static_category() -> multiplier.EntityCategory:
    ...

  @overload
  @staticmethod
  def FROM(self: multiplier.ast.TemplateParameterList) -> Optional[multiplier.ast.TemplateParameterList]:
    ...

  @overload
  @staticmethod
  def FROM(self: Optional[multiplier.ast.TemplateParameterList]) -> Optional[multiplier.ast.TemplateParameterList]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TemplateParameterList]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TemplateParameterList]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TemplateParameterList]:
    ...

  def nth_parameter(self, n: int) -> Optional[multiplier.ast.NamedDecl]:
    ...

class TemplateArgument(multiplier.Entity):
  parent_declaration: Optional[multiplier.ast.Decl]
  parent_statement: Optional[multiplier.ast.Stmt]
  kind: multiplier.ast.TemplateArgumentKind
  is_empty: bool
  is_dependent: bool
  is_instantiation_dependent: bool
  contains_unexpanded_parameter_pack: bool
  is_pack_expansion: bool
  as_declaration: Optional[multiplier.ast.ValueDecl]
  as_type: Optional[multiplier.ast.Type]
  parameter_type_for_declaration: Optional[multiplier.ast.Type]
  null_pointer_type: Optional[multiplier.ast.Type]
  pack_elements: Optional[Sequence[multiplier.ast.TemplateArgument]]

  @staticmethod
  def static_category() -> multiplier.EntityCategory:
    ...

  @overload
  @staticmethod
  def FROM(self: multiplier.ast.TemplateArgument) -> Optional[multiplier.ast.TemplateArgument]:
    ...

  @overload
  @staticmethod
  def FROM(self: Optional[multiplier.ast.TemplateArgument]) -> Optional[multiplier.ast.TemplateArgument]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TemplateArgument]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TemplateArgument]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TemplateArgument]:
    ...

class Attr(multiplier.Entity):
  token: multiplier.frontend.Token
  is_implicit: bool
  is_inherited: bool
  is_late_parsed: bool
  is_pack_expansion: bool
  kind: multiplier.ast.AttrKind
  tokens: multiplier.frontend.TokenRange

  @staticmethod
  def static_category() -> multiplier.EntityCategory:
    ...

  @overload
  @staticmethod
  def IN(index: multiplier.Index, kinds: Sequence[multiplier.ast.AttrKind]) -> Generator[multiplier.ast.Attr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment, kinds: Sequence[multiplier.ast.AttrKind]) -> Generator[multiplier.ast.Attr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File, kinds: Sequence[multiplier.ast.AttrKind]) -> Generator[multiplier.ast.Attr]:
    ...

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.Attr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.Attr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.Attr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.Attr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.Attr]:
    ...

  @overload
  @staticmethod
  def FROM(self: multiplier.ast.Attr) -> Optional[multiplier.ast.Attr]:
    ...

  @overload
  @staticmethod
  def FROM(self: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.Attr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.Attr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.Attr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.Attr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AlignValueAttr(multiplier.ast.Attr):
  alignment: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AlignValueAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AlignValueAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AlignValueAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AlignValueAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AlignValueAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AlignValueAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AlignValueAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AlignValueAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AlignValueAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AlignValueAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AlignValueAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AliasAttr(multiplier.ast.Attr):
  aliasee: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AliasAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AliasAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AliasAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AliasAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AliasAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AliasAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AbiTagAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AbiTagAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AbiTagAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AbiTagAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AbiTagAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AbiTagAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AbiTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AbiTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AbiTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AbiTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AbiTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AbiTagAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TypeAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeAttr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SPtrAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SPtrAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SPtrAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SPtrAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SPtrAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SPtrAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SPtrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SPtrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SPtrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SPtrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SPtrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SPtrAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class Ptr64Attr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.Ptr64Attr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.Ptr64Attr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.Ptr64Attr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.Ptr64Attr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.Ptr64Attr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.Ptr64Attr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.Ptr64Attr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.Ptr64Attr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.Ptr64Attr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.Ptr64Attr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.Ptr64Attr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class Ptr32Attr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.Ptr32Attr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.Ptr32Attr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.Ptr32Attr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.Ptr32Attr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.Ptr32Attr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.Ptr32Attr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.Ptr32Attr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.Ptr32Attr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.Ptr32Attr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.Ptr32Attr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.Ptr32Attr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OpenCLPrivateAddressSpaceAttr(multiplier.ast.TypeAttr):
  semantic_spelling: multiplier.ast.OpenCLPrivateAddressSpaceAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OpenCLPrivateAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OpenCLPrivateAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OpenCLPrivateAddressSpaceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OpenCLPrivateAddressSpaceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OpenCLPrivateAddressSpaceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLPrivateAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLPrivateAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OpenCLPrivateAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OpenCLPrivateAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OpenCLPrivateAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OpenCLPrivateAddressSpaceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OpenCLLocalAddressSpaceAttr(multiplier.ast.TypeAttr):
  semantic_spelling: multiplier.ast.OpenCLLocalAddressSpaceAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OpenCLLocalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OpenCLLocalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OpenCLLocalAddressSpaceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OpenCLLocalAddressSpaceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OpenCLLocalAddressSpaceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLLocalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLLocalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OpenCLLocalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OpenCLLocalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OpenCLLocalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OpenCLLocalAddressSpaceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OpenCLGlobalHostAddressSpaceAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OpenCLGlobalHostAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OpenCLGlobalHostAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OpenCLGlobalHostAddressSpaceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OpenCLGlobalHostAddressSpaceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OpenCLGlobalHostAddressSpaceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLGlobalHostAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLGlobalHostAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OpenCLGlobalHostAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OpenCLGlobalHostAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OpenCLGlobalHostAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OpenCLGlobalHostAddressSpaceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OpenCLGlobalDeviceAddressSpaceAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OpenCLGlobalDeviceAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OpenCLGlobalDeviceAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OpenCLGlobalDeviceAddressSpaceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OpenCLGlobalDeviceAddressSpaceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OpenCLGlobalDeviceAddressSpaceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLGlobalDeviceAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLGlobalDeviceAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OpenCLGlobalDeviceAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OpenCLGlobalDeviceAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OpenCLGlobalDeviceAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OpenCLGlobalDeviceAddressSpaceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OpenCLGlobalAddressSpaceAttr(multiplier.ast.TypeAttr):
  semantic_spelling: multiplier.ast.OpenCLGlobalAddressSpaceAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OpenCLGlobalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OpenCLGlobalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OpenCLGlobalAddressSpaceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OpenCLGlobalAddressSpaceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OpenCLGlobalAddressSpaceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLGlobalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLGlobalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OpenCLGlobalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OpenCLGlobalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OpenCLGlobalAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OpenCLGlobalAddressSpaceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OpenCLGenericAddressSpaceAttr(multiplier.ast.TypeAttr):
  semantic_spelling: multiplier.ast.OpenCLGenericAddressSpaceAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OpenCLGenericAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OpenCLGenericAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OpenCLGenericAddressSpaceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OpenCLGenericAddressSpaceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OpenCLGenericAddressSpaceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLGenericAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLGenericAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OpenCLGenericAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OpenCLGenericAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OpenCLGenericAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OpenCLGenericAddressSpaceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OpenCLConstantAddressSpaceAttr(multiplier.ast.TypeAttr):
  semantic_spelling: multiplier.ast.OpenCLConstantAddressSpaceAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OpenCLConstantAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OpenCLConstantAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OpenCLConstantAddressSpaceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OpenCLConstantAddressSpaceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OpenCLConstantAddressSpaceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLConstantAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLConstantAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OpenCLConstantAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OpenCLConstantAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OpenCLConstantAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OpenCLConstantAddressSpaceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCKindOfAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCKindOfAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCKindOfAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCKindOfAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCKindOfAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCKindOfAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCKindOfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCKindOfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCKindOfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCKindOfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCKindOfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCKindOfAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCInertUnsafeUnretainedAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCInertUnsafeUnretainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCInertUnsafeUnretainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCInertUnsafeUnretainedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCInertUnsafeUnretainedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCInertUnsafeUnretainedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCInertUnsafeUnretainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCInertUnsafeUnretainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCInertUnsafeUnretainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCInertUnsafeUnretainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCInertUnsafeUnretainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCInertUnsafeUnretainedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCGCAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCGCAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCGCAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCGCAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCGCAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCGCAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCGCAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCGCAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCGCAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCGCAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCGCAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCGCAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoDerefAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoDerefAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoDerefAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoDerefAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoDerefAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoDerefAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoDerefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoDerefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoDerefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoDerefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoDerefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoDerefAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class HLSLGroupSharedAddressSpaceAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.HLSLGroupSharedAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.HLSLGroupSharedAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.HLSLGroupSharedAddressSpaceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.HLSLGroupSharedAddressSpaceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.HLSLGroupSharedAddressSpaceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLGroupSharedAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLGroupSharedAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.HLSLGroupSharedAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.HLSLGroupSharedAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.HLSLGroupSharedAddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.HLSLGroupSharedAddressSpaceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CmseNSCallAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CmseNSCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CmseNSCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CmseNSCallAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CmseNSCallAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CmseNSCallAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CmseNSCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CmseNSCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CmseNSCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CmseNSCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CmseNSCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CmseNSCallAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class BTFTypeTagAttr(multiplier.ast.TypeAttr):
  btf_type_tag: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BTFTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BTFTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BTFTypeTagAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BTFTypeTagAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BTFTypeTagAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.BTFTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.BTFTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.BTFTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BTFTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BTFTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BTFTypeTagAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ArmStreamingAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ArmStreamingAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ArmStreamingAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ArmStreamingAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ArmStreamingAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ArmStreamingAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ArmStreamingAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ArmStreamingAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ArmStreamingAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ArmStreamingAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ArmStreamingAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ArmStreamingAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ArmMveStrictPolymorphismAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ArmMveStrictPolymorphismAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ArmMveStrictPolymorphismAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ArmMveStrictPolymorphismAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ArmMveStrictPolymorphismAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ArmMveStrictPolymorphismAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ArmMveStrictPolymorphismAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ArmMveStrictPolymorphismAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ArmMveStrictPolymorphismAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ArmMveStrictPolymorphismAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ArmMveStrictPolymorphismAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ArmMveStrictPolymorphismAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AnnotateTypeAttr(multiplier.ast.TypeAttr):
  annotation: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AnnotateTypeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AnnotateTypeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AnnotateTypeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AnnotateTypeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AnnotateTypeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AnnotateTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AnnotateTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AnnotateTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AnnotateTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AnnotateTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AnnotateTypeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AddressSpaceAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AddressSpaceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AddressSpaceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AddressSpaceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AddressSpaceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AddressSpaceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class WebAssemblyFuncrefAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.WebAssemblyFuncrefAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.WebAssemblyFuncrefAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.WebAssemblyFuncrefAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.WebAssemblyFuncrefAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.WebAssemblyFuncrefAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WebAssemblyFuncrefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WebAssemblyFuncrefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.WebAssemblyFuncrefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.WebAssemblyFuncrefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.WebAssemblyFuncrefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.WebAssemblyFuncrefAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UPtrAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UPtrAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UPtrAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UPtrAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UPtrAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UPtrAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UPtrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UPtrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.UPtrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UPtrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UPtrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UPtrAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TypeNullableResultAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeNullableResultAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypeNullableResultAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypeNullableResultAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeNullableResultAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeNullableResultAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeNullableResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeNullableResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TypeNullableResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeNullableResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeNullableResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeNullableResultAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TypeNullableAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeNullableAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypeNullableAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypeNullableAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeNullableAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeNullableAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeNullableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeNullableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TypeNullableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeNullableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeNullableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeNullableAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TypeNullUnspecifiedAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeNullUnspecifiedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypeNullUnspecifiedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypeNullUnspecifiedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeNullUnspecifiedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeNullUnspecifiedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeNullUnspecifiedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeNullUnspecifiedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TypeNullUnspecifiedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeNullUnspecifiedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeNullUnspecifiedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeNullUnspecifiedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TypeNonNullAttr(multiplier.ast.TypeAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeNonNullAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypeNonNullAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypeNonNullAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeNonNullAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeNonNullAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeNonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeNonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TypeNonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeNonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeNonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeNonNullAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ThreadAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ThreadAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ThreadAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ThreadAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ThreadAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ThreadAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ThreadAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ThreadAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ThreadAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ThreadAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ThreadAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ThreadAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftObjCMembersAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftObjCMembersAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftObjCMembersAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftObjCMembersAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftObjCMembersAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftObjCMembersAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftObjCMembersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftObjCMembersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftObjCMembersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftObjCMembersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftObjCMembersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftObjCMembersAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class StmtAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.StmtAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.StmtAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.StmtAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.StmtAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.StmtAttr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.StmtAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.StmtAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.StmtAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.StmtAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.StmtAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.StmtAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OpenCLUnrollHintAttr(multiplier.ast.StmtAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OpenCLUnrollHintAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OpenCLUnrollHintAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OpenCLUnrollHintAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OpenCLUnrollHintAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OpenCLUnrollHintAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLUnrollHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLUnrollHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OpenCLUnrollHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OpenCLUnrollHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OpenCLUnrollHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OpenCLUnrollHintAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MustTailAttr(multiplier.ast.StmtAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MustTailAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MustTailAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MustTailAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MustTailAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MustTailAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MustTailAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MustTailAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MustTailAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MustTailAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MustTailAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MustTailAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class LikelyAttr(multiplier.ast.StmtAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LikelyAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LikelyAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LikelyAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LikelyAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LikelyAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LikelyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LikelyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.LikelyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LikelyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LikelyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LikelyAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class FallThroughAttr(multiplier.ast.StmtAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FallThroughAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FallThroughAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FallThroughAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FallThroughAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FallThroughAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FallThroughAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FallThroughAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.FallThroughAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FallThroughAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FallThroughAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FallThroughAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UnlikelyAttr(multiplier.ast.StmtAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnlikelyAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UnlikelyAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UnlikelyAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnlikelyAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnlikelyAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UnlikelyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UnlikelyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.UnlikelyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnlikelyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnlikelyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnlikelyAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SuppressAttr(multiplier.ast.StmtAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SuppressAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SuppressAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SuppressAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SuppressAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SuppressAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SuppressAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SuppressAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SuppressAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SuppressAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SuppressAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SuppressAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class RenderScriptKernelAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RenderScriptKernelAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.RenderScriptKernelAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.RenderScriptKernelAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RenderScriptKernelAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RenderScriptKernelAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RenderScriptKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RenderScriptKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.RenderScriptKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RenderScriptKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RenderScriptKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RenderScriptKernelAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OverloadableAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OverloadableAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OverloadableAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OverloadableAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OverloadableAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OverloadableAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OverloadableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OverloadableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OverloadableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OverloadableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OverloadableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OverloadableAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OpenCLAccessAttr(multiplier.ast.Attr):
  semantic_spelling: multiplier.ast.OpenCLAccessAttrSpelling
  is_read_only: bool
  is_read_write: bool
  is_write_only: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OpenCLAccessAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OpenCLAccessAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OpenCLAccessAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OpenCLAccessAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OpenCLAccessAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLAccessAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLAccessAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OpenCLAccessAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OpenCLAccessAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OpenCLAccessAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OpenCLAccessAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCRuntimeVisibleAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCRuntimeVisibleAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCRuntimeVisibleAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCRuntimeVisibleAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCRuntimeVisibleAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCRuntimeVisibleAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCRuntimeVisibleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCRuntimeVisibleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCRuntimeVisibleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCRuntimeVisibleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCRuntimeVisibleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCRuntimeVisibleAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCRuntimeNameAttr(multiplier.ast.Attr):
  metadata_name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCRuntimeNameAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCRuntimeNameAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCRuntimeNameAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCRuntimeNameAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCRuntimeNameAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCRuntimeNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCRuntimeNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCRuntimeNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCRuntimeNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCRuntimeNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCRuntimeNameAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCNonRuntimeProtocolAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCNonRuntimeProtocolAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCNonRuntimeProtocolAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCNonRuntimeProtocolAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCNonRuntimeProtocolAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCNonRuntimeProtocolAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCNonRuntimeProtocolAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCNonRuntimeProtocolAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCNonRuntimeProtocolAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCNonRuntimeProtocolAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCNonRuntimeProtocolAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCNonRuntimeProtocolAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCNonLazyClassAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCNonLazyClassAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCNonLazyClassAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCNonLazyClassAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCNonLazyClassAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCNonLazyClassAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCNonLazyClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCNonLazyClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCNonLazyClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCNonLazyClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCNonLazyClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCNonLazyClassAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCDirectMembersAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCDirectMembersAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCDirectMembersAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCDirectMembersAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCDirectMembersAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCDirectMembersAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCDirectMembersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCDirectMembersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCDirectMembersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCDirectMembersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCDirectMembersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCDirectMembersAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCDirectAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCDirectAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCDirectAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCDirectAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCDirectAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCDirectAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCDirectAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCDirectAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCDirectAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCDirectAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCDirectAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCDirectAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCDesignatedInitializerAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCDesignatedInitializerAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCDesignatedInitializerAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCDesignatedInitializerAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCDesignatedInitializerAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCDesignatedInitializerAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCDesignatedInitializerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCDesignatedInitializerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCDesignatedInitializerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCDesignatedInitializerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCDesignatedInitializerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCDesignatedInitializerAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCClassStubAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCClassStubAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCClassStubAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCClassStubAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCClassStubAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCClassStubAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCClassStubAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCClassStubAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCClassStubAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCClassStubAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCClassStubAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCClassStubAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCBoxableAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCBoxableAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCBoxableAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCBoxableAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCBoxableAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCBoxableAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCBoxableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCBoxableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCBoxableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCBoxableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCBoxableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCBoxableAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OMPReferencedVarAttr(multiplier.ast.Attr):
  reference: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPReferencedVarAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPReferencedVarAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPReferencedVarAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPReferencedVarAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPReferencedVarAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPReferencedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPReferencedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OMPReferencedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPReferencedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPReferencedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPReferencedVarAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OMPDeclareSimdDeclAttr(multiplier.ast.Attr):
  branch_state: multiplier.ast.OMPDeclareSimdDeclAttrBranchStateTy
  simdlen: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDeclareSimdDeclAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDeclareSimdDeclAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDeclareSimdDeclAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDeclareSimdDeclAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDeclareSimdDeclAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPDeclareSimdDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPDeclareSimdDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OMPDeclareSimdDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDeclareSimdDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDeclareSimdDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDeclareSimdDeclAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OMPCaptureKindAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPCaptureKindAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPCaptureKindAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPCaptureKindAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPCaptureKindAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPCaptureKindAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPCaptureKindAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPCaptureKindAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OMPCaptureKindAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPCaptureKindAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPCaptureKindAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPCaptureKindAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoEscapeAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoEscapeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoEscapeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoEscapeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoEscapeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoEscapeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoEscapeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoEscapeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoEscapeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoEscapeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoEscapeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoEscapeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoBuiltinAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoBuiltinAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoBuiltinAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoBuiltinAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoBuiltinAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ModeAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ModeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ModeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ModeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ModeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ModeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ModeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ModeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ModeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ModeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ModeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ModeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class LoopHintAttr(multiplier.ast.Attr):
  option: multiplier.ast.LoopHintAttrOptionType
  semantic_spelling: multiplier.ast.LoopHintAttrSpelling
  state: multiplier.ast.LoopHintAttrLoopHintState
  value: Optional[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LoopHintAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LoopHintAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LoopHintAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LoopHintAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LoopHintAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LoopHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LoopHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.LoopHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LoopHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LoopHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LoopHintAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class LoaderUninitializedAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LoaderUninitializedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LoaderUninitializedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LoaderUninitializedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LoaderUninitializedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LoaderUninitializedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LoaderUninitializedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LoaderUninitializedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.LoaderUninitializedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LoaderUninitializedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LoaderUninitializedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LoaderUninitializedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class InitSegAttr(multiplier.ast.Attr):
  section: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.InitSegAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.InitSegAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.InitSegAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.InitSegAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.InitSegAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.InitSegAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.InitSegAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.InitSegAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.InitSegAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.InitSegAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.InitSegAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class InheritableAttr(multiplier.ast.Attr):
  should_inherit_even_if_already_present: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.InheritableAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.InheritableAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.InheritableAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.InheritableAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.InheritableAttr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.InheritableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.InheritableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.InheritableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.InheritableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.InheritableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.InheritableAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class IBOutletCollectionAttr(multiplier.ast.InheritableAttr):
  interface: multiplier.ast.Type
  interface_token: multiplier.ast.Type

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.IBOutletCollectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.IBOutletCollectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.IBOutletCollectionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.IBOutletCollectionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.IBOutletCollectionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.IBOutletCollectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.IBOutletCollectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.IBOutletCollectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.IBOutletCollectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.IBOutletCollectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.IBOutletCollectionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class IBOutletAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.IBOutletAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.IBOutletAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.IBOutletAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.IBOutletAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.IBOutletAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.IBOutletAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.IBOutletAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.IBOutletAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.IBOutletAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.IBOutletAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.IBOutletAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class IBActionAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.IBActionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.IBActionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.IBActionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.IBActionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.IBActionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.IBActionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.IBActionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.IBActionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.IBActionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.IBActionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.IBActionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class HotAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.HotAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.HotAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.HotAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.HotAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.HotAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HotAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HotAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.HotAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.HotAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.HotAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.HotAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class HLSLShaderAttr(multiplier.ast.InheritableAttr):
  type: multiplier.ast.HLSLShaderAttrShaderType

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.HLSLShaderAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.HLSLShaderAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.HLSLShaderAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.HLSLShaderAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.HLSLShaderAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLShaderAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLShaderAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.HLSLShaderAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.HLSLShaderAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.HLSLShaderAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.HLSLShaderAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class HLSLResourceBindingAttr(multiplier.ast.InheritableAttr):
  slot: str
  space: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.HLSLResourceBindingAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.HLSLResourceBindingAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.HLSLResourceBindingAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.HLSLResourceBindingAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.HLSLResourceBindingAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLResourceBindingAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLResourceBindingAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.HLSLResourceBindingAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.HLSLResourceBindingAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.HLSLResourceBindingAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.HLSLResourceBindingAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class HLSLResourceAttr(multiplier.ast.InheritableAttr):
  resource_shape: multiplier.ast.HLSLResourceAttrResourceKind
  resource_type: multiplier.ast.HLSLResourceAttrResourceClass

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.HLSLResourceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.HLSLResourceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.HLSLResourceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.HLSLResourceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.HLSLResourceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLResourceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLResourceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.HLSLResourceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.HLSLResourceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.HLSLResourceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.HLSLResourceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class HLSLNumThreadsAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.HLSLNumThreadsAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.HLSLNumThreadsAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.HLSLNumThreadsAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.HLSLNumThreadsAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.HLSLNumThreadsAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLNumThreadsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLNumThreadsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.HLSLNumThreadsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.HLSLNumThreadsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.HLSLNumThreadsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.HLSLNumThreadsAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class HLSLAnnotationAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.HLSLAnnotationAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.HLSLAnnotationAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.HLSLAnnotationAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.HLSLAnnotationAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.HLSLAnnotationAttr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLAnnotationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLAnnotationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.HLSLAnnotationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.HLSLAnnotationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.HLSLAnnotationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.HLSLAnnotationAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class HLSLSV_GroupIndexAttr(multiplier.ast.HLSLAnnotationAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.HLSLSV_GroupIndexAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.HLSLSV_GroupIndexAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.HLSLSV_GroupIndexAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.HLSLSV_GroupIndexAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.HLSLSV_GroupIndexAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLSV_GroupIndexAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLSV_GroupIndexAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.HLSLSV_GroupIndexAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.HLSLSV_GroupIndexAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.HLSLSV_GroupIndexAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.HLSLSV_GroupIndexAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class HLSLSV_DispatchThreadIDAttr(multiplier.ast.HLSLAnnotationAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.HLSLSV_DispatchThreadIDAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.HLSLSV_DispatchThreadIDAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.HLSLSV_DispatchThreadIDAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.HLSLSV_DispatchThreadIDAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.HLSLSV_DispatchThreadIDAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLSV_DispatchThreadIDAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HLSLSV_DispatchThreadIDAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.HLSLSV_DispatchThreadIDAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.HLSLSV_DispatchThreadIDAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.HLSLSV_DispatchThreadIDAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.HLSLSV_DispatchThreadIDAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class HIPManagedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.HIPManagedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.HIPManagedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.HIPManagedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.HIPManagedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.HIPManagedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HIPManagedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.HIPManagedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.HIPManagedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.HIPManagedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.HIPManagedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.HIPManagedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class GuardedVarAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.GuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.GuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.GuardedVarAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.GuardedVarAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.GuardedVarAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.GuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.GuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.GuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.GuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.GuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.GuardedVarAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class GuardedByAttr(multiplier.ast.InheritableAttr):
  argument: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.GuardedByAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.GuardedByAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.GuardedByAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.GuardedByAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.GuardedByAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.GuardedByAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.GuardedByAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.GuardedByAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.GuardedByAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.GuardedByAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.GuardedByAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class GNUInlineAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.GNUInlineAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.GNUInlineAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.GNUInlineAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.GNUInlineAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.GNUInlineAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.GNUInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.GNUInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.GNUInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.GNUInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.GNUInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.GNUInlineAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class FunctionReturnThunksAttr(multiplier.ast.InheritableAttr):
  thunk_type: multiplier.ast.FunctionReturnThunksAttrKind

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FunctionReturnThunksAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FunctionReturnThunksAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FunctionReturnThunksAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FunctionReturnThunksAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FunctionReturnThunksAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FunctionReturnThunksAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FunctionReturnThunksAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.FunctionReturnThunksAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FunctionReturnThunksAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FunctionReturnThunksAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FunctionReturnThunksAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class FormatAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FormatAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FormatAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FormatAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FormatAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FormatAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FormatAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FormatAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.FormatAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FormatAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FormatAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FormatAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class FormatArgAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FormatArgAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FormatArgAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FormatArgAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FormatArgAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FormatArgAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FormatArgAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FormatArgAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.FormatArgAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FormatArgAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FormatArgAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FormatArgAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class FlattenAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FlattenAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FlattenAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FlattenAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FlattenAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FlattenAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FlattenAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FlattenAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.FlattenAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FlattenAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FlattenAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FlattenAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class FlagEnumAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FlagEnumAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FlagEnumAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FlagEnumAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FlagEnumAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FlagEnumAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FlagEnumAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FlagEnumAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.FlagEnumAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FlagEnumAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FlagEnumAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FlagEnumAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class FinalAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.FinalAttrSpelling
  is_spelled_as_sealed: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FinalAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FinalAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FinalAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FinalAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FinalAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FinalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FinalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.FinalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FinalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FinalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FinalAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class FastCallAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FastCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FastCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FastCallAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FastCallAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FastCallAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FastCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.FastCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.FastCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FastCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FastCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FastCallAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ExternalSourceSymbolAttr(multiplier.ast.InheritableAttr):
  defined_in: str
  generated_declaration: bool
  language: str
  usr: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ExternalSourceSymbolAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ExternalSourceSymbolAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ExternalSourceSymbolAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ExternalSourceSymbolAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ExternalSourceSymbolAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ExternalSourceSymbolAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ExternalSourceSymbolAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ExternalSourceSymbolAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ExternalSourceSymbolAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ExternalSourceSymbolAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ExternalSourceSymbolAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ExclusiveTrylockFunctionAttr(multiplier.ast.InheritableAttr):
  success_value: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ExclusiveTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ExclusiveTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ExclusiveTrylockFunctionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ExclusiveTrylockFunctionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ExclusiveTrylockFunctionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ExclusiveTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ExclusiveTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ExclusiveTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ExclusiveTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ExclusiveTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ExclusiveTrylockFunctionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ExcludeFromExplicitInstantiationAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ExcludeFromExplicitInstantiationAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ExcludeFromExplicitInstantiationAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ExcludeFromExplicitInstantiationAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ExcludeFromExplicitInstantiationAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ExcludeFromExplicitInstantiationAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ExcludeFromExplicitInstantiationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ExcludeFromExplicitInstantiationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ExcludeFromExplicitInstantiationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ExcludeFromExplicitInstantiationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ExcludeFromExplicitInstantiationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ExcludeFromExplicitInstantiationAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ErrorAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.ErrorAttrSpelling
  user_diagnostic: str
  is_error: bool
  is_warning: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ErrorAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ErrorAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ErrorAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ErrorAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ErrorAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ErrorAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class EnumExtensibilityAttr(multiplier.ast.InheritableAttr):
  extensibility: multiplier.ast.EnumExtensibilityAttrKind

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.EnumExtensibilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.EnumExtensibilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.EnumExtensibilityAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.EnumExtensibilityAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.EnumExtensibilityAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.EnumExtensibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.EnumExtensibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.EnumExtensibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.EnumExtensibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.EnumExtensibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.EnumExtensibilityAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class EnforceTCBLeafAttr(multiplier.ast.InheritableAttr):
  tcb_name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.EnforceTCBLeafAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.EnforceTCBLeafAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.EnforceTCBLeafAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.EnforceTCBLeafAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.EnforceTCBLeafAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.EnforceTCBLeafAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.EnforceTCBLeafAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.EnforceTCBLeafAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.EnforceTCBLeafAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.EnforceTCBLeafAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.EnforceTCBLeafAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class EnforceTCBAttr(multiplier.ast.InheritableAttr):
  tcb_name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.EnforceTCBAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.EnforceTCBAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.EnforceTCBAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.EnforceTCBAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.EnforceTCBAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.EnforceTCBAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.EnforceTCBAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.EnforceTCBAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.EnforceTCBAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.EnforceTCBAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.EnforceTCBAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class EnableIfAttr(multiplier.ast.InheritableAttr):
  condition: multiplier.ast.Expr
  message: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.EnableIfAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.EnableIfAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.EnableIfAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.EnableIfAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.EnableIfAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.EnableIfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.EnableIfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.EnableIfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.EnableIfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.EnableIfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.EnableIfAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class EmptyBasesAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.EmptyBasesAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.EmptyBasesAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.EmptyBasesAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.EmptyBasesAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.EmptyBasesAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.EmptyBasesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.EmptyBasesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.EmptyBasesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.EmptyBasesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.EmptyBasesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.EmptyBasesAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DisableTailCallsAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DisableTailCallsAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DisableTailCallsAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DisableTailCallsAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DisableTailCallsAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DisableTailCallsAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DisableTailCallsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DisableTailCallsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.DisableTailCallsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DisableTailCallsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DisableTailCallsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DisableTailCallsAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DisableSanitizerInstrumentationAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DisableSanitizerInstrumentationAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DisableSanitizerInstrumentationAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DisableSanitizerInstrumentationAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DisableSanitizerInstrumentationAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DisableSanitizerInstrumentationAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DisableSanitizerInstrumentationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DisableSanitizerInstrumentationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.DisableSanitizerInstrumentationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DisableSanitizerInstrumentationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DisableSanitizerInstrumentationAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DisableSanitizerInstrumentationAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DiagnoseIfAttr(multiplier.ast.InheritableAttr):
  argument_dependent: bool
  condition: multiplier.ast.Expr
  diagnostic_type: multiplier.ast.DiagnoseIfAttrDiagnosticType
  message: str
  parent: multiplier.ast.NamedDecl
  is_error: bool
  is_warning: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DiagnoseIfAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DiagnoseIfAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DiagnoseIfAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DiagnoseIfAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DiagnoseIfAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DiagnoseIfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DiagnoseIfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.DiagnoseIfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DiagnoseIfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DiagnoseIfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DiagnoseIfAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DiagnoseAsBuiltinAttr(multiplier.ast.InheritableAttr):
  function: multiplier.ast.FunctionDecl

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DiagnoseAsBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DiagnoseAsBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DiagnoseAsBuiltinAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DiagnoseAsBuiltinAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DiagnoseAsBuiltinAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DiagnoseAsBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DiagnoseAsBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.DiagnoseAsBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DiagnoseAsBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DiagnoseAsBuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DiagnoseAsBuiltinAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DestructorAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DestructorAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DestructorAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DestructorAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DestructorAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DestructorAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DestructorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DestructorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.DestructorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DestructorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DestructorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DestructorAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DeprecatedAttr(multiplier.ast.InheritableAttr):
  message: str
  replacement: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DeprecatedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DeprecatedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DeprecatedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DeprecatedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DeprecatedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DeprecatedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DeprecatedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.DeprecatedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DeprecatedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DeprecatedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DeprecatedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DeclOrStmtAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DeclOrStmtAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DeclOrStmtAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DeclOrStmtAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DeclOrStmtAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DeclOrStmtAttr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DeclOrStmtAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DeclOrStmtAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.DeclOrStmtAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DeclOrStmtAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DeclOrStmtAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DeclOrStmtAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AlwaysInlineAttr(multiplier.ast.DeclOrStmtAttr):
  semantic_spelling: multiplier.ast.AlwaysInlineAttrSpelling
  is_clang_always_inline: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AlwaysInlineAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AlwaysInlineAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AlwaysInlineAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AlwaysInlineAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AlwaysInlineAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AlwaysInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AlwaysInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AlwaysInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AlwaysInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AlwaysInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AlwaysInlineAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoMergeAttr(multiplier.ast.DeclOrStmtAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoMergeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoMergeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoMergeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoMergeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoMergeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoMergeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoMergeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoMergeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoMergeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoMergeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoMergeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoInlineAttr(multiplier.ast.DeclOrStmtAttr):
  is_clang_no_inline: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoInlineAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoInlineAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoInlineAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoInlineAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoInlineAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoInlineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoInlineAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DLLImportStaticLocalAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DLLImportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DLLImportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DLLImportStaticLocalAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DLLImportStaticLocalAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DLLImportStaticLocalAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DLLImportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DLLImportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.DLLImportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DLLImportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DLLImportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DLLImportStaticLocalAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DLLImportAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DLLImportAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DLLImportAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DLLImportAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DLLImportAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DLLImportAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DLLImportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DLLImportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.DLLImportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DLLImportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DLLImportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DLLImportAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DLLExportStaticLocalAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DLLExportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DLLExportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DLLExportStaticLocalAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DLLExportStaticLocalAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DLLExportStaticLocalAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DLLExportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DLLExportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.DLLExportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DLLExportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DLLExportStaticLocalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DLLExportStaticLocalAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DLLExportAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DLLExportAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DLLExportAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DLLExportAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DLLExportAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DLLExportAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DLLExportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.DLLExportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.DLLExportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DLLExportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DLLExportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DLLExportAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ConvergentAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConvergentAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConvergentAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConvergentAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConvergentAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConvergentAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConvergentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConvergentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ConvergentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConvergentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConvergentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConvergentAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ConsumableSetOnReadAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConsumableSetOnReadAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConsumableSetOnReadAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConsumableSetOnReadAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConsumableSetOnReadAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConsumableSetOnReadAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConsumableSetOnReadAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConsumableSetOnReadAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ConsumableSetOnReadAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConsumableSetOnReadAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConsumableSetOnReadAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConsumableSetOnReadAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ConsumableAutoCastAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConsumableAutoCastAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConsumableAutoCastAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConsumableAutoCastAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConsumableAutoCastAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConsumableAutoCastAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConsumableAutoCastAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConsumableAutoCastAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ConsumableAutoCastAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConsumableAutoCastAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConsumableAutoCastAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConsumableAutoCastAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ConsumableAttr(multiplier.ast.InheritableAttr):
  default_state: multiplier.ast.ConsumableAttrConsumedState

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConsumableAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConsumableAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConsumableAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConsumableAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConsumableAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConsumableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConsumableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ConsumableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConsumableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConsumableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConsumableAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ConstructorAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConstructorAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConstructorAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConstructorAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConstructorAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConstructorAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConstructorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConstructorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ConstructorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConstructorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConstructorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConstructorAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ConstInitAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.ConstInitAttrSpelling
  is_constinit: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConstInitAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConstInitAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConstInitAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConstInitAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConstInitAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConstInitAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConstInitAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ConstInitAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConstInitAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConstInitAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConstInitAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ConstAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConstAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConstAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConstAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConstAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConstAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConstAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ConstAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ConstAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConstAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConstAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConstAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CommonAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CommonAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CommonAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CommonAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CommonAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CommonAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CommonAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CommonAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CommonAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CommonAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CommonAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CommonAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ColdAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ColdAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ColdAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ColdAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ColdAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ColdAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ColdAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ColdAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ColdAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ColdAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ColdAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ColdAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CodeSegAttr(multiplier.ast.InheritableAttr):
  name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CodeSegAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CodeSegAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CodeSegAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CodeSegAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CodeSegAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CodeSegAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CodeSegAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CodeSegAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CodeSegAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CodeSegAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CodeSegAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CmseNSEntryAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CmseNSEntryAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CmseNSEntryAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CmseNSEntryAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CmseNSEntryAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CmseNSEntryAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CmseNSEntryAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CmseNSEntryAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CmseNSEntryAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CmseNSEntryAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CmseNSEntryAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CmseNSEntryAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CleanupAttr(multiplier.ast.InheritableAttr):
  function_declaration: multiplier.ast.FunctionDecl

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CleanupAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CleanupAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CleanupAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CleanupAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CleanupAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CleanupAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CleanupAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CleanupAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CleanupAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CleanupAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CleanupAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CapturedRecordAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CapturedRecordAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CapturedRecordAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CapturedRecordAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CapturedRecordAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CapturedRecordAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CapturedRecordAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CapturedRecordAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CapturedRecordAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CapturedRecordAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CapturedRecordAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CapturedRecordAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CapabilityAttr(multiplier.ast.InheritableAttr):
  name: str
  semantic_spelling: multiplier.ast.CapabilityAttrSpelling
  is_shared: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CapabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CapabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CapabilityAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CapabilityAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CapabilityAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CapabilityAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CallbackAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CallbackAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CallbackAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CallbackAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CallbackAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CallbackAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CallbackAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CallbackAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CallbackAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CallbackAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CallbackAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CallbackAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CallableWhenAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CallableWhenAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CallableWhenAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CallableWhenAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CallableWhenAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CallableWhenAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CallableWhenAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CallableWhenAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CallableWhenAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CallableWhenAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CallableWhenAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CallableWhenAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CXX11NoReturnAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.CXX11NoReturnAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXX11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXX11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXX11NoReturnAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXX11NoReturnAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXX11NoReturnAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CXX11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CXX11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CXX11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXX11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXX11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXX11NoReturnAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CUDASharedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CUDASharedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CUDASharedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CUDASharedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CUDASharedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CUDASharedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDASharedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDASharedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CUDASharedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CUDASharedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CUDASharedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CUDASharedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CUDALaunchBoundsAttr(multiplier.ast.InheritableAttr):
  max_threads: multiplier.ast.Expr
  min_blocks: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CUDALaunchBoundsAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CUDALaunchBoundsAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CUDALaunchBoundsAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CUDALaunchBoundsAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CUDALaunchBoundsAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDALaunchBoundsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDALaunchBoundsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CUDALaunchBoundsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CUDALaunchBoundsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CUDALaunchBoundsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CUDALaunchBoundsAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CUDAInvalidTargetAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CUDAInvalidTargetAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CUDAInvalidTargetAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CUDAInvalidTargetAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CUDAInvalidTargetAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CUDAInvalidTargetAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDAInvalidTargetAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDAInvalidTargetAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CUDAInvalidTargetAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CUDAInvalidTargetAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CUDAInvalidTargetAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CUDAInvalidTargetAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CUDAHostAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CUDAHostAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CUDAHostAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CUDAHostAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CUDAHostAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CUDAHostAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDAHostAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDAHostAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CUDAHostAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CUDAHostAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CUDAHostAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CUDAHostAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CUDAGlobalAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CUDAGlobalAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CUDAGlobalAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CUDAGlobalAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CUDAGlobalAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CUDAGlobalAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDAGlobalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDAGlobalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CUDAGlobalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CUDAGlobalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CUDAGlobalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CUDAGlobalAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CUDADeviceBuiltinTextureTypeAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CUDADeviceBuiltinTextureTypeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CUDADeviceBuiltinTextureTypeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CUDADeviceBuiltinTextureTypeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CUDADeviceBuiltinTextureTypeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CUDADeviceBuiltinTextureTypeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDADeviceBuiltinTextureTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDADeviceBuiltinTextureTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CUDADeviceBuiltinTextureTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CUDADeviceBuiltinTextureTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CUDADeviceBuiltinTextureTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CUDADeviceBuiltinTextureTypeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CUDADeviceBuiltinSurfaceTypeAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CUDADeviceBuiltinSurfaceTypeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CUDADeviceBuiltinSurfaceTypeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CUDADeviceBuiltinSurfaceTypeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CUDADeviceBuiltinSurfaceTypeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CUDADeviceBuiltinSurfaceTypeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDADeviceBuiltinSurfaceTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDADeviceBuiltinSurfaceTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CUDADeviceBuiltinSurfaceTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CUDADeviceBuiltinSurfaceTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CUDADeviceBuiltinSurfaceTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CUDADeviceBuiltinSurfaceTypeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CUDADeviceAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CUDADeviceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CUDADeviceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CUDADeviceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CUDADeviceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CUDADeviceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDADeviceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDADeviceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CUDADeviceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CUDADeviceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CUDADeviceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CUDADeviceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CUDAConstantAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CUDAConstantAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CUDAConstantAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CUDAConstantAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CUDAConstantAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CUDAConstantAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDAConstantAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CUDAConstantAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CUDAConstantAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CUDAConstantAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CUDAConstantAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CUDAConstantAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CPUSpecificAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CPUSpecificAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CPUSpecificAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CPUSpecificAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CPUSpecificAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CPUSpecificAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CPUSpecificAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CPUSpecificAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CPUSpecificAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CPUSpecificAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CPUSpecificAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CPUSpecificAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CPUDispatchAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CPUDispatchAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CPUDispatchAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CPUDispatchAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CPUDispatchAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CPUDispatchAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CPUDispatchAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CPUDispatchAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CPUDispatchAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CPUDispatchAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CPUDispatchAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CPUDispatchAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CFUnknownTransferAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CFUnknownTransferAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CFUnknownTransferAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CFUnknownTransferAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CFUnknownTransferAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CFUnknownTransferAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFUnknownTransferAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFUnknownTransferAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CFUnknownTransferAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CFUnknownTransferAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CFUnknownTransferAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CFUnknownTransferAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CFReturnsRetainedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CFReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CFReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CFReturnsRetainedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CFReturnsRetainedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CFReturnsRetainedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CFReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CFReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CFReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CFReturnsRetainedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CFReturnsNotRetainedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CFReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CFReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CFReturnsNotRetainedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CFReturnsNotRetainedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CFReturnsNotRetainedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CFReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CFReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CFReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CFReturnsNotRetainedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CFICanonicalJumpTableAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CFICanonicalJumpTableAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CFICanonicalJumpTableAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CFICanonicalJumpTableAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CFICanonicalJumpTableAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CFICanonicalJumpTableAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFICanonicalJumpTableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFICanonicalJumpTableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CFICanonicalJumpTableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CFICanonicalJumpTableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CFICanonicalJumpTableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CFICanonicalJumpTableAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CFGuardAttr(multiplier.ast.InheritableAttr):
  guard: multiplier.ast.CFGuardAttrGuardArg

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CFGuardAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CFGuardAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CFGuardAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CFGuardAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CFGuardAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFGuardAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFGuardAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CFGuardAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CFGuardAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CFGuardAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CFGuardAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CFAuditedTransferAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CFAuditedTransferAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CFAuditedTransferAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CFAuditedTransferAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CFAuditedTransferAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CFAuditedTransferAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFAuditedTransferAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFAuditedTransferAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CFAuditedTransferAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CFAuditedTransferAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CFAuditedTransferAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CFAuditedTransferAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CDeclAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CDeclAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CDeclAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CDeclAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CDeclAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CDeclAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CDeclAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class C11NoReturnAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.C11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.C11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.C11NoReturnAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.C11NoReturnAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.C11NoReturnAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.C11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.C11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.C11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.C11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.C11NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.C11NoReturnAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class BuiltinAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BuiltinAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BuiltinAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BuiltinAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BuiltinAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BuiltinAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.BuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.BuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.BuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BuiltinAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BuiltinAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class BlocksAttr(multiplier.ast.InheritableAttr):
  type: multiplier.ast.BlocksAttrBlockType

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BlocksAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BlocksAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BlocksAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BlocksAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BlocksAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.BlocksAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.BlocksAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.BlocksAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BlocksAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BlocksAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BlocksAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class BTFDeclTagAttr(multiplier.ast.InheritableAttr):
  btf_decl_tag: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BTFDeclTagAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BTFDeclTagAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BTFDeclTagAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BTFDeclTagAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BTFDeclTagAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.BTFDeclTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.BTFDeclTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.BTFDeclTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BTFDeclTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BTFDeclTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BTFDeclTagAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class BPFPreserveAccessIndexAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BPFPreserveAccessIndexAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BPFPreserveAccessIndexAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BPFPreserveAccessIndexAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BPFPreserveAccessIndexAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BPFPreserveAccessIndexAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.BPFPreserveAccessIndexAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.BPFPreserveAccessIndexAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.BPFPreserveAccessIndexAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BPFPreserveAccessIndexAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BPFPreserveAccessIndexAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BPFPreserveAccessIndexAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AvailableOnlyInDefaultEvalMethodAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AvailableOnlyInDefaultEvalMethodAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AvailableOnlyInDefaultEvalMethodAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AvailableOnlyInDefaultEvalMethodAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AvailableOnlyInDefaultEvalMethodAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AvailableOnlyInDefaultEvalMethodAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AvailableOnlyInDefaultEvalMethodAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AvailableOnlyInDefaultEvalMethodAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AvailableOnlyInDefaultEvalMethodAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AvailableOnlyInDefaultEvalMethodAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AvailableOnlyInDefaultEvalMethodAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AvailableOnlyInDefaultEvalMethodAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AvailabilityAttr(multiplier.ast.InheritableAttr):
  message: str
  replacement: str
  strict: bool
  unavailable: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AvailabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AvailabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AvailabilityAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AvailabilityAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AvailabilityAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AvailabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AvailabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AvailabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AvailabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AvailabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AvailabilityAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AssumptionAttr(multiplier.ast.InheritableAttr):
  assumption: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AssumptionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AssumptionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AssumptionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AssumptionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AssumptionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AssumptionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AssumptionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AssumptionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AssumptionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AssumptionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AssumptionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AssumeAlignedAttr(multiplier.ast.InheritableAttr):
  alignment: multiplier.ast.Expr
  offset: Optional[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AssumeAlignedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AssumeAlignedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AssumeAlignedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AssumeAlignedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AssumeAlignedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AssumeAlignedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AssumeAlignedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AssumeAlignedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AssumeAlignedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AssumeAlignedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AssumeAlignedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AssertSharedLockAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AssertSharedLockAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AssertSharedLockAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AssertSharedLockAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AssertSharedLockAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AssertSharedLockAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AssertSharedLockAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AssertSharedLockAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AssertSharedLockAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AssertSharedLockAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AssertSharedLockAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AssertSharedLockAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AssertExclusiveLockAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AssertExclusiveLockAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AssertExclusiveLockAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AssertExclusiveLockAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AssertExclusiveLockAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AssertExclusiveLockAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AssertExclusiveLockAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AssertExclusiveLockAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AssertExclusiveLockAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AssertExclusiveLockAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AssertExclusiveLockAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AssertExclusiveLockAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AssertCapabilityAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.AssertCapabilityAttrSpelling
  is_shared: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AssertCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AssertCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AssertCapabilityAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AssertCapabilityAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AssertCapabilityAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AssertCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AssertCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AssertCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AssertCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AssertCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AssertCapabilityAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AsmLabelAttr(multiplier.ast.InheritableAttr):
  is_literal_label: bool
  label: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AsmLabelAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AsmLabelAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AsmLabelAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AsmLabelAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AsmLabelAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AsmLabelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AsmLabelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AsmLabelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AsmLabelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AsmLabelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AsmLabelAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ArtificialAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ArtificialAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ArtificialAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ArtificialAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ArtificialAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ArtificialAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ArtificialAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ArtificialAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ArtificialAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ArtificialAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ArtificialAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ArtificialAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ArmBuiltinAliasAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ArmBuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ArmBuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ArmBuiltinAliasAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ArmBuiltinAliasAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ArmBuiltinAliasAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ArmBuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ArmBuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ArmBuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ArmBuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ArmBuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ArmBuiltinAliasAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ArgumentWithTypeTagAttr(multiplier.ast.InheritableAttr):
  is_pointer: bool
  semantic_spelling: multiplier.ast.ArgumentWithTypeTagAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ArgumentWithTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ArgumentWithTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ArgumentWithTypeTagAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ArgumentWithTypeTagAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ArgumentWithTypeTagAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ArgumentWithTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ArgumentWithTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ArgumentWithTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ArgumentWithTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ArgumentWithTypeTagAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ArgumentWithTypeTagAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ArcWeakrefUnavailableAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ArcWeakrefUnavailableAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ArcWeakrefUnavailableAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ArcWeakrefUnavailableAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ArcWeakrefUnavailableAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ArcWeakrefUnavailableAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ArcWeakrefUnavailableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ArcWeakrefUnavailableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ArcWeakrefUnavailableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ArcWeakrefUnavailableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ArcWeakrefUnavailableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ArcWeakrefUnavailableAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AnyX86NoCfCheckAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AnyX86NoCfCheckAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AnyX86NoCfCheckAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AnyX86NoCfCheckAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AnyX86NoCfCheckAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AnyX86NoCfCheckAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AnyX86NoCfCheckAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AnyX86NoCfCheckAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AnyX86NoCfCheckAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AnyX86NoCfCheckAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AnyX86NoCfCheckAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AnyX86NoCfCheckAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AnyX86NoCallerSavedRegistersAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AnyX86NoCallerSavedRegistersAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AnyX86NoCallerSavedRegistersAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AnyX86NoCallerSavedRegistersAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AnyX86NoCallerSavedRegistersAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AnyX86NoCallerSavedRegistersAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AnyX86NoCallerSavedRegistersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AnyX86NoCallerSavedRegistersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AnyX86NoCallerSavedRegistersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AnyX86NoCallerSavedRegistersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AnyX86NoCallerSavedRegistersAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AnyX86NoCallerSavedRegistersAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AnyX86InterruptAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AnyX86InterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AnyX86InterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AnyX86InterruptAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AnyX86InterruptAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AnyX86InterruptAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AnyX86InterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AnyX86InterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AnyX86InterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AnyX86InterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AnyX86InterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AnyX86InterruptAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AnalyzerNoReturnAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AnalyzerNoReturnAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AnalyzerNoReturnAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AnalyzerNoReturnAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AnalyzerNoReturnAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AnalyzerNoReturnAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AnalyzerNoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AnalyzerNoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AnalyzerNoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AnalyzerNoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AnalyzerNoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AnalyzerNoReturnAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AlwaysDestroyAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AlwaysDestroyAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AlwaysDestroyAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AlwaysDestroyAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AlwaysDestroyAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AlwaysDestroyAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AlwaysDestroyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AlwaysDestroyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AlwaysDestroyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AlwaysDestroyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AlwaysDestroyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AlwaysDestroyAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AllocSizeAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AllocSizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AllocSizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AllocSizeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AllocSizeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AllocSizeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AllocSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AllocSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AllocSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AllocSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AllocSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AllocSizeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AllocAlignAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AllocAlignAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AllocAlignAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AllocAlignAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AllocAlignAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AllocAlignAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AllocAlignAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AllocAlignAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AllocAlignAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AllocAlignAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AllocAlignAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AllocAlignAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AlignedAttr(multiplier.ast.InheritableAttr):
  alignment_expression: Optional[multiplier.ast.Expr]
  alignment_type: Optional[multiplier.ast.Type]
  cached_alignment_value: Optional[int]
  semantic_spelling: multiplier.ast.AlignedAttrSpelling
  is_alignas: bool
  is_alignment_dependent: bool
  is_alignment_error_dependent: bool
  is_alignment_expression: bool
  is_c11: bool
  is_declspec: bool
  is_gnu: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AlignedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AlignedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AlignedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AlignedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AlignedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AlignedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AlignedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AlignedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AlignedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AlignedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AlignedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AlignNaturalAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AlignNaturalAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AlignNaturalAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AlignNaturalAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AlignNaturalAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AlignNaturalAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AlignNaturalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AlignNaturalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AlignNaturalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AlignNaturalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AlignNaturalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AlignNaturalAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AlignMac68kAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AlignMac68kAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AlignMac68kAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AlignMac68kAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AlignMac68kAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AlignMac68kAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AlignMac68kAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AlignMac68kAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AlignMac68kAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AlignMac68kAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AlignMac68kAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AlignMac68kAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AcquiredBeforeAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AcquiredBeforeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AcquiredBeforeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AcquiredBeforeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AcquiredBeforeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AcquiredBeforeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AcquiredBeforeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AcquiredBeforeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AcquiredBeforeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AcquiredBeforeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AcquiredBeforeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AcquiredBeforeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AcquiredAfterAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AcquiredAfterAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AcquiredAfterAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AcquiredAfterAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AcquiredAfterAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AcquiredAfterAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AcquiredAfterAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AcquiredAfterAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AcquiredAfterAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AcquiredAfterAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AcquiredAfterAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AcquiredAfterAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AcquireHandleAttr(multiplier.ast.InheritableAttr):
  handle_type: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AcquireHandleAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AcquireHandleAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AcquireHandleAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AcquireHandleAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AcquireHandleAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AcquireHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AcquireHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AcquireHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AcquireHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AcquireHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AcquireHandleAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AcquireCapabilityAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.AcquireCapabilityAttrSpelling
  is_shared: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AcquireCapabilityAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AcquireCapabilityAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AcquireCapabilityAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AcquireCapabilityAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AVRSignalAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AVRSignalAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AVRSignalAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AVRSignalAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AVRSignalAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AVRSignalAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AVRSignalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AVRSignalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AVRSignalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AVRSignalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AVRSignalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AVRSignalAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AVRInterruptAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AVRInterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AVRInterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AVRInterruptAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AVRInterruptAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AVRInterruptAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AVRInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AVRInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AVRInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AVRInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AVRInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AVRInterruptAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ARMInterruptAttr(multiplier.ast.InheritableAttr):
  interrupt: multiplier.ast.ARMInterruptAttrInterruptType

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ARMInterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ARMInterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ARMInterruptAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ARMInterruptAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ARMInterruptAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ARMInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ARMInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ARMInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ARMInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ARMInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ARMInterruptAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AMDGPUWavesPerEUAttr(multiplier.ast.InheritableAttr):
  max: multiplier.ast.Expr
  min: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AMDGPUWavesPerEUAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AMDGPUWavesPerEUAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AMDGPUWavesPerEUAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AMDGPUWavesPerEUAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AMDGPUWavesPerEUAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AMDGPUWavesPerEUAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AMDGPUWavesPerEUAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AMDGPUWavesPerEUAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AMDGPUWavesPerEUAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AMDGPUWavesPerEUAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AMDGPUWavesPerEUAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AMDGPUNumVGPRAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AMDGPUNumVGPRAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AMDGPUNumVGPRAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AMDGPUNumVGPRAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AMDGPUNumVGPRAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AMDGPUNumVGPRAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AMDGPUNumVGPRAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AMDGPUNumVGPRAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AMDGPUNumVGPRAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AMDGPUNumVGPRAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AMDGPUNumVGPRAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AMDGPUNumVGPRAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AMDGPUNumSGPRAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AMDGPUNumSGPRAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AMDGPUNumSGPRAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AMDGPUNumSGPRAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AMDGPUNumSGPRAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AMDGPUNumSGPRAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AMDGPUNumSGPRAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AMDGPUNumSGPRAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AMDGPUNumSGPRAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AMDGPUNumSGPRAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AMDGPUNumSGPRAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AMDGPUNumSGPRAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AMDGPUKernelCallAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AMDGPUKernelCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AMDGPUKernelCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AMDGPUKernelCallAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AMDGPUKernelCallAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AMDGPUKernelCallAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AMDGPUKernelCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AMDGPUKernelCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AMDGPUKernelCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AMDGPUKernelCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AMDGPUKernelCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AMDGPUKernelCallAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AMDGPUFlatWorkGroupSizeAttr(multiplier.ast.InheritableAttr):
  max: multiplier.ast.Expr
  min: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AMDGPUFlatWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AMDGPUFlatWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AMDGPUFlatWorkGroupSizeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AMDGPUFlatWorkGroupSizeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AMDGPUFlatWorkGroupSizeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AMDGPUFlatWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AMDGPUFlatWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AMDGPUFlatWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AMDGPUFlatWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AMDGPUFlatWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AMDGPUFlatWorkGroupSizeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AArch64VectorPcsAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AArch64VectorPcsAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AArch64VectorPcsAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AArch64VectorPcsAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AArch64VectorPcsAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AArch64VectorPcsAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AArch64VectorPcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AArch64VectorPcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AArch64VectorPcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AArch64VectorPcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AArch64VectorPcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AArch64VectorPcsAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AArch64SVEPcsAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AArch64SVEPcsAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AArch64SVEPcsAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AArch64SVEPcsAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AArch64SVEPcsAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AArch64SVEPcsAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AArch64SVEPcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AArch64SVEPcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AArch64SVEPcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AArch64SVEPcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AArch64SVEPcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AArch64SVEPcsAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ZeroCallUsedRegsAttr(multiplier.ast.InheritableAttr):
  zero_call_used_regs: multiplier.ast.ZeroCallUsedRegsAttrZeroCallUsedRegsKind

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ZeroCallUsedRegsAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ZeroCallUsedRegsAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ZeroCallUsedRegsAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ZeroCallUsedRegsAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ZeroCallUsedRegsAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ZeroCallUsedRegsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ZeroCallUsedRegsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ZeroCallUsedRegsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ZeroCallUsedRegsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ZeroCallUsedRegsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ZeroCallUsedRegsAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class XRayLogArgsAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.XRayLogArgsAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.XRayLogArgsAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.XRayLogArgsAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.XRayLogArgsAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.XRayLogArgsAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.XRayLogArgsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.XRayLogArgsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.XRayLogArgsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.XRayLogArgsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.XRayLogArgsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.XRayLogArgsAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class XRayInstrumentAttr(multiplier.ast.InheritableAttr):
  always_x_ray_instrument: bool
  semantic_spelling: multiplier.ast.XRayInstrumentAttrSpelling
  never_x_ray_instrument: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.XRayInstrumentAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.XRayInstrumentAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.XRayInstrumentAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.XRayInstrumentAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.XRayInstrumentAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.XRayInstrumentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.XRayInstrumentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.XRayInstrumentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.XRayInstrumentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.XRayInstrumentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.XRayInstrumentAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class X86ForceAlignArgPointerAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.X86ForceAlignArgPointerAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.X86ForceAlignArgPointerAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.X86ForceAlignArgPointerAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.X86ForceAlignArgPointerAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.X86ForceAlignArgPointerAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.X86ForceAlignArgPointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.X86ForceAlignArgPointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.X86ForceAlignArgPointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.X86ForceAlignArgPointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.X86ForceAlignArgPointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.X86ForceAlignArgPointerAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class WorkGroupSizeHintAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.WorkGroupSizeHintAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.WorkGroupSizeHintAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.WorkGroupSizeHintAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.WorkGroupSizeHintAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.WorkGroupSizeHintAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WorkGroupSizeHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WorkGroupSizeHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.WorkGroupSizeHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.WorkGroupSizeHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.WorkGroupSizeHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.WorkGroupSizeHintAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class WebAssemblyImportNameAttr(multiplier.ast.InheritableAttr):
  import_name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.WebAssemblyImportNameAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.WebAssemblyImportNameAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.WebAssemblyImportNameAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.WebAssemblyImportNameAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.WebAssemblyImportNameAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WebAssemblyImportNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WebAssemblyImportNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.WebAssemblyImportNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.WebAssemblyImportNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.WebAssemblyImportNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.WebAssemblyImportNameAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class WebAssemblyImportModuleAttr(multiplier.ast.InheritableAttr):
  import_module: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.WebAssemblyImportModuleAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.WebAssemblyImportModuleAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.WebAssemblyImportModuleAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.WebAssemblyImportModuleAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.WebAssemblyImportModuleAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WebAssemblyImportModuleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WebAssemblyImportModuleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.WebAssemblyImportModuleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.WebAssemblyImportModuleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.WebAssemblyImportModuleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.WebAssemblyImportModuleAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class WebAssemblyExportNameAttr(multiplier.ast.InheritableAttr):
  export_name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.WebAssemblyExportNameAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.WebAssemblyExportNameAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.WebAssemblyExportNameAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.WebAssemblyExportNameAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.WebAssemblyExportNameAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WebAssemblyExportNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WebAssemblyExportNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.WebAssemblyExportNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.WebAssemblyExportNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.WebAssemblyExportNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.WebAssemblyExportNameAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class WeakRefAttr(multiplier.ast.InheritableAttr):
  aliasee: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.WeakRefAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.WeakRefAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.WeakRefAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.WeakRefAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.WeakRefAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WeakRefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WeakRefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.WeakRefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.WeakRefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.WeakRefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.WeakRefAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class WeakImportAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.WeakImportAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.WeakImportAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.WeakImportAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.WeakImportAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.WeakImportAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WeakImportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WeakImportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.WeakImportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.WeakImportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.WeakImportAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.WeakImportAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class WeakAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.WeakAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.WeakAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.WeakAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.WeakAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.WeakAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WeakAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WeakAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.WeakAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.WeakAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.WeakAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.WeakAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class WarnUnusedResultAttr(multiplier.ast.InheritableAttr):
  is_cxx11_no_discard: bool
  message: str
  semantic_spelling: multiplier.ast.WarnUnusedResultAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.WarnUnusedResultAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.WarnUnusedResultAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.WarnUnusedResultAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.WarnUnusedResultAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.WarnUnusedResultAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WarnUnusedResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WarnUnusedResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.WarnUnusedResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.WarnUnusedResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.WarnUnusedResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.WarnUnusedResultAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class WarnUnusedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.WarnUnusedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.WarnUnusedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.WarnUnusedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.WarnUnusedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.WarnUnusedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WarnUnusedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.WarnUnusedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.WarnUnusedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.WarnUnusedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.WarnUnusedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.WarnUnusedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class VisibilityAttr(multiplier.ast.InheritableAttr):
  visibility: multiplier.ast.VisibilityAttrVisibilityType

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.VisibilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.VisibilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.VisibilityAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.VisibilityAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.VisibilityAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.VisibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.VisibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.VisibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.VisibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.VisibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.VisibilityAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class VectorCallAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.VectorCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.VectorCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.VectorCallAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.VectorCallAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.VectorCallAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.VectorCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.VectorCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.VectorCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.VectorCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.VectorCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.VectorCallAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class VecTypeHintAttr(multiplier.ast.InheritableAttr):
  type_hint: multiplier.ast.Type
  type_hint_token: multiplier.ast.Type

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.VecTypeHintAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.VecTypeHintAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.VecTypeHintAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.VecTypeHintAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.VecTypeHintAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.VecTypeHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.VecTypeHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.VecTypeHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.VecTypeHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.VecTypeHintAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.VecTypeHintAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class VecReturnAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.VecReturnAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.VecReturnAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.VecReturnAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.VecReturnAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.VecReturnAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.VecReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.VecReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.VecReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.VecReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.VecReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.VecReturnAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UuidAttr(multiplier.ast.InheritableAttr):
  guid: str
  guid_declaration: multiplier.ast.MSGuidDecl

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UuidAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UuidAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UuidAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UuidAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UuidAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UuidAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UuidAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.UuidAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UuidAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UuidAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UuidAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UsingIfExistsAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UsingIfExistsAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UsingIfExistsAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UsingIfExistsAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UsingIfExistsAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UsingIfExistsAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UsingIfExistsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UsingIfExistsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.UsingIfExistsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UsingIfExistsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UsingIfExistsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UsingIfExistsAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UsedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UsedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UsedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UsedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UsedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UsedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UsedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UsedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.UsedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UsedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UsedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UsedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UnusedAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.UnusedAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnusedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UnusedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UnusedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnusedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnusedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UnusedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UnusedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.UnusedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnusedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnusedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnusedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UnsafeBufferUsageAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnsafeBufferUsageAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UnsafeBufferUsageAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UnsafeBufferUsageAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnsafeBufferUsageAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnsafeBufferUsageAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UnsafeBufferUsageAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UnsafeBufferUsageAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.UnsafeBufferUsageAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnsafeBufferUsageAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnsafeBufferUsageAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnsafeBufferUsageAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UninitializedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UninitializedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UninitializedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UninitializedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UninitializedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UninitializedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UninitializedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UninitializedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.UninitializedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UninitializedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UninitializedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UninitializedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UnavailableAttr(multiplier.ast.InheritableAttr):
  implicit_reason: multiplier.ast.UnavailableAttrImplicitReason
  message: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnavailableAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UnavailableAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UnavailableAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnavailableAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnavailableAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UnavailableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UnavailableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.UnavailableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnavailableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnavailableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnavailableAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TypeVisibilityAttr(multiplier.ast.InheritableAttr):
  visibility: multiplier.ast.TypeVisibilityAttrVisibilityType

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeVisibilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypeVisibilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypeVisibilityAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeVisibilityAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeVisibilityAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeVisibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeVisibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TypeVisibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeVisibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeVisibilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeVisibilityAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TypeTagForDatatypeAttr(multiplier.ast.InheritableAttr):
  layout_compatible: bool
  matching_c_type: multiplier.ast.Type
  matching_c_type_token: multiplier.ast.Type
  must_be_null: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeTagForDatatypeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypeTagForDatatypeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypeTagForDatatypeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeTagForDatatypeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeTagForDatatypeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeTagForDatatypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TypeTagForDatatypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TypeTagForDatatypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeTagForDatatypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeTagForDatatypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeTagForDatatypeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TryAcquireCapabilityAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.TryAcquireCapabilityAttrSpelling
  success_value: multiplier.ast.Expr
  is_shared: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TryAcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TryAcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TryAcquireCapabilityAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TryAcquireCapabilityAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TryAcquireCapabilityAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TryAcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TryAcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TryAcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TryAcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TryAcquireCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TryAcquireCapabilityAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TrivialABIAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TrivialABIAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TrivialABIAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TrivialABIAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TrivialABIAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TrivialABIAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TrivialABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TrivialABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TrivialABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TrivialABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TrivialABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TrivialABIAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TransparentUnionAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TransparentUnionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TransparentUnionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TransparentUnionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TransparentUnionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TransparentUnionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TransparentUnionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TransparentUnionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TransparentUnionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TransparentUnionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TransparentUnionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TransparentUnionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ThisCallAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ThisCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ThisCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ThisCallAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ThisCallAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ThisCallAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ThisCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ThisCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ThisCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ThisCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ThisCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ThisCallAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TestTypestateAttr(multiplier.ast.InheritableAttr):
  test_state: multiplier.ast.TestTypestateAttrConsumedState

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TestTypestateAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TestTypestateAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TestTypestateAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TestTypestateAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TestTypestateAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TestTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TestTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TestTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TestTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TestTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TestTypestateAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TargetVersionAttr(multiplier.ast.InheritableAttr):
  name: str
  names_string: str
  is_default_version: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TargetVersionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TargetVersionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TargetVersionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TargetVersionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TargetVersionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TargetVersionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TargetVersionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TargetVersionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TargetVersionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TargetVersionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TargetVersionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TargetClonesAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TargetClonesAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TargetClonesAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TargetClonesAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TargetClonesAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TargetClonesAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TargetClonesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TargetClonesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TargetClonesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TargetClonesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TargetClonesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TargetClonesAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TargetAttr(multiplier.ast.InheritableAttr):
  architecture: str
  features_string: str
  is_default_version: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TargetAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TargetAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TargetAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TargetAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TargetAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TargetAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TargetAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TargetAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TargetAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TargetAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TargetAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TLSModelAttr(multiplier.ast.InheritableAttr):
  model: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TLSModelAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TLSModelAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TLSModelAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TLSModelAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TLSModelAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TLSModelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.TLSModelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.TLSModelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TLSModelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TLSModelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TLSModelAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SysVABIAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SysVABIAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SysVABIAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SysVABIAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SysVABIAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SysVABIAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SysVABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SysVABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SysVABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SysVABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SysVABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SysVABIAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftPrivateAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftPrivateAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftPrivateAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftPrivateAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftPrivateAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftPrivateAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftPrivateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftPrivateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftPrivateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftPrivateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftPrivateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftPrivateAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftNewTypeAttr(multiplier.ast.InheritableAttr):
  newtype_kind: multiplier.ast.SwiftNewTypeAttrNewtypeKind
  semantic_spelling: multiplier.ast.SwiftNewTypeAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftNewTypeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftNewTypeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftNewTypeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftNewTypeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftNewTypeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftNewTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftNewTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftNewTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftNewTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftNewTypeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftNewTypeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftNameAttr(multiplier.ast.InheritableAttr):
  name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftNameAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftNameAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftNameAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftNameAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftNameAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftNameAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftErrorAttr(multiplier.ast.InheritableAttr):
  convention: multiplier.ast.SwiftErrorAttrConventionKind

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftErrorAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftErrorAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftErrorAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftErrorAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftErrorAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftErrorAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftCallAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftCallAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftCallAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftCallAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftCallAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftBridgedTypedefAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftBridgedTypedefAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftBridgedTypedefAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftBridgedTypedefAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftBridgedTypedefAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftBridgedTypedefAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftBridgedTypedefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftBridgedTypedefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftBridgedTypedefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftBridgedTypedefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftBridgedTypedefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftBridgedTypedefAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftBridgeAttr(multiplier.ast.InheritableAttr):
  swift_type: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftBridgeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftBridgeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftBridgeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftBridgeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftBridgeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftBridgeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftBridgeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftBridgeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftBridgeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftBridgeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftBridgeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftAttrAttr(multiplier.ast.InheritableAttr):
  attribute: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftAttrAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftAttrAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftAttrAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftAttrAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftAttrAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftAttrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftAttrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftAttrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftAttrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftAttrAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftAttrAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftAsyncNameAttr(multiplier.ast.InheritableAttr):
  name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftAsyncNameAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftAsyncNameAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftAsyncNameAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftAsyncNameAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftAsyncNameAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftAsyncNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftAsyncNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftAsyncNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftAsyncNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftAsyncNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftAsyncNameAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftAsyncErrorAttr(multiplier.ast.InheritableAttr):
  convention: multiplier.ast.SwiftAsyncErrorAttrConventionKind

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftAsyncErrorAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftAsyncErrorAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftAsyncErrorAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftAsyncErrorAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftAsyncErrorAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftAsyncErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftAsyncErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftAsyncErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftAsyncErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftAsyncErrorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftAsyncErrorAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftAsyncCallAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftAsyncCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftAsyncCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftAsyncCallAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftAsyncCallAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftAsyncCallAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftAsyncCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftAsyncCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftAsyncCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftAsyncCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftAsyncCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftAsyncCallAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftAsyncAttr(multiplier.ast.InheritableAttr):
  attribute_kind: multiplier.ast.SwiftAsyncAttrKind

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftAsyncAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftAsyncAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftAsyncAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftAsyncAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftAsyncAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftAsyncAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftAsyncAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftAsyncAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftAsyncAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftAsyncAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftAsyncAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class StrictGuardStackCheckAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.StrictGuardStackCheckAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.StrictGuardStackCheckAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.StrictGuardStackCheckAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.StrictGuardStackCheckAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.StrictGuardStackCheckAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.StrictGuardStackCheckAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.StrictGuardStackCheckAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.StrictGuardStackCheckAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.StrictGuardStackCheckAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.StrictGuardStackCheckAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.StrictGuardStackCheckAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class StrictFPAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.StrictFPAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.StrictFPAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.StrictFPAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.StrictFPAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.StrictFPAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.StrictFPAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.StrictFPAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.StrictFPAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.StrictFPAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.StrictFPAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.StrictFPAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class StdCallAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.StdCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.StdCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.StdCallAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.StdCallAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.StdCallAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.StdCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.StdCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.StdCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.StdCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.StdCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.StdCallAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class StandaloneDebugAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.StandaloneDebugAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.StandaloneDebugAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.StandaloneDebugAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.StandaloneDebugAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.StandaloneDebugAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.StandaloneDebugAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.StandaloneDebugAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.StandaloneDebugAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.StandaloneDebugAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.StandaloneDebugAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.StandaloneDebugAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SpeculativeLoadHardeningAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SpeculativeLoadHardeningAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SpeculativeLoadHardeningAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SpeculativeLoadHardeningAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SpeculativeLoadHardeningAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SharedTrylockFunctionAttr(multiplier.ast.InheritableAttr):
  success_value: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SharedTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SharedTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SharedTrylockFunctionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SharedTrylockFunctionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SharedTrylockFunctionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SharedTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SharedTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SharedTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SharedTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SharedTrylockFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SharedTrylockFunctionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SetTypestateAttr(multiplier.ast.InheritableAttr):
  new_state: multiplier.ast.SetTypestateAttrConsumedState

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SetTypestateAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SetTypestateAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SetTypestateAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SetTypestateAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SetTypestateAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SetTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SetTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SetTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SetTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SetTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SetTypestateAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SentinelAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SentinelAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SentinelAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SentinelAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SentinelAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SentinelAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SentinelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SentinelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SentinelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SentinelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SentinelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SentinelAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SelectAnyAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SelectAnyAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SelectAnyAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SelectAnyAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SelectAnyAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SelectAnyAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SelectAnyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SelectAnyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SelectAnyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SelectAnyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SelectAnyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SelectAnyAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SectionAttr(multiplier.ast.InheritableAttr):
  name: str
  semantic_spelling: multiplier.ast.SectionAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SectionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SectionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SectionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SectionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ScopedLockableAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ScopedLockableAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ScopedLockableAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ScopedLockableAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ScopedLockableAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ScopedLockableAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ScopedLockableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ScopedLockableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ScopedLockableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ScopedLockableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ScopedLockableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ScopedLockableAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SYCLSpecialClassAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SYCLSpecialClassAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SYCLSpecialClassAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SYCLSpecialClassAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SYCLSpecialClassAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SYCLSpecialClassAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SYCLSpecialClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SYCLSpecialClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SYCLSpecialClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SYCLSpecialClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SYCLSpecialClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SYCLSpecialClassAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SYCLKernelAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SYCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SYCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SYCLKernelAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SYCLKernelAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SYCLKernelAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SYCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SYCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SYCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SYCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SYCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SYCLKernelAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ReturnsTwiceAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ReturnsTwiceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ReturnsTwiceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ReturnsTwiceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ReturnsTwiceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ReturnsTwiceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReturnsTwiceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReturnsTwiceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ReturnsTwiceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ReturnsTwiceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ReturnsTwiceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ReturnsTwiceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ReturnsNonNullAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ReturnsNonNullAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ReturnsNonNullAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ReturnsNonNullAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ReturnsNonNullAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ReturnsNonNullAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReturnsNonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReturnsNonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ReturnsNonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ReturnsNonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ReturnsNonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ReturnsNonNullAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ReturnTypestateAttr(multiplier.ast.InheritableAttr):
  state: multiplier.ast.ReturnTypestateAttrConsumedState

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ReturnTypestateAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ReturnTypestateAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ReturnTypestateAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ReturnTypestateAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ReturnTypestateAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReturnTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReturnTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ReturnTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ReturnTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ReturnTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ReturnTypestateAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class RetainAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RetainAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.RetainAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.RetainAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RetainAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RetainAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RetainAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RetainAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.RetainAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RetainAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RetainAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RetainAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class RestrictAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.RestrictAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RestrictAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.RestrictAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.RestrictAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RestrictAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RestrictAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RestrictAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RestrictAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.RestrictAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RestrictAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RestrictAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RestrictAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class RequiresCapabilityAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.RequiresCapabilityAttrSpelling
  is_shared: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RequiresCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.RequiresCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.RequiresCapabilityAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RequiresCapabilityAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RequiresCapabilityAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RequiresCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RequiresCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.RequiresCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RequiresCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RequiresCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RequiresCapabilityAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ReqdWorkGroupSizeAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ReqdWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ReqdWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ReqdWorkGroupSizeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ReqdWorkGroupSizeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ReqdWorkGroupSizeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReqdWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReqdWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ReqdWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ReqdWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ReqdWorkGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ReqdWorkGroupSizeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ReleaseCapabilityAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.ReleaseCapabilityAttrSpelling
  is_generic: bool
  is_shared: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ReleaseCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ReleaseCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ReleaseCapabilityAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ReleaseCapabilityAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ReleaseCapabilityAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReleaseCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReleaseCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ReleaseCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ReleaseCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ReleaseCapabilityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ReleaseCapabilityAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ReinitializesAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ReinitializesAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ReinitializesAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ReinitializesAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ReinitializesAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ReinitializesAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReinitializesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReinitializesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ReinitializesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ReinitializesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ReinitializesAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ReinitializesAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class RegCallAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RegCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.RegCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.RegCallAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RegCallAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RegCallAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RegCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RegCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.RegCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RegCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RegCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RegCallAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ReadOnlyPlacementAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ReadOnlyPlacementAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ReadOnlyPlacementAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ReadOnlyPlacementAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ReadOnlyPlacementAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ReadOnlyPlacementAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReadOnlyPlacementAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReadOnlyPlacementAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ReadOnlyPlacementAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ReadOnlyPlacementAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ReadOnlyPlacementAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ReadOnlyPlacementAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class RandomizeLayoutAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.RandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.RandomizeLayoutAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RandomizeLayoutAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RandomizeLayoutAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.RandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RandomizeLayoutAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class RISCVInterruptAttr(multiplier.ast.InheritableAttr):
  interrupt: multiplier.ast.RISCVInterruptAttrInterruptType

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RISCVInterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.RISCVInterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.RISCVInterruptAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RISCVInterruptAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RISCVInterruptAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RISCVInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.RISCVInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.RISCVInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RISCVInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RISCVInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RISCVInterruptAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PureAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PureAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PureAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PureAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PureAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PureAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PureAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PureAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PureAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PureAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PureAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PureAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PtGuardedVarAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PtGuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PtGuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PtGuardedVarAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PtGuardedVarAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PtGuardedVarAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PtGuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PtGuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PtGuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PtGuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PtGuardedVarAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PtGuardedVarAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PtGuardedByAttr(multiplier.ast.InheritableAttr):
  argument: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PtGuardedByAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PtGuardedByAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PtGuardedByAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PtGuardedByAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PtGuardedByAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PtGuardedByAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PtGuardedByAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PtGuardedByAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PtGuardedByAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PtGuardedByAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PtGuardedByAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PreserveMostAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PreserveMostAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PreserveMostAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PreserveMostAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PreserveMostAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PreserveMostAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PreserveMostAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PreserveMostAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PreserveMostAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PreserveMostAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PreserveMostAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PreserveMostAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PreserveAllAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PreserveAllAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PreserveAllAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PreserveAllAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PreserveAllAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PreserveAllAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PreserveAllAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PreserveAllAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PreserveAllAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PreserveAllAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PreserveAllAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PreserveAllAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PreferredNameAttr(multiplier.ast.InheritableAttr):
  typedef_type: multiplier.ast.Type
  typedef_type_token: multiplier.ast.Type

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PreferredNameAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PreferredNameAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PreferredNameAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PreferredNameAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PreferredNameAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PreferredNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PreferredNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PreferredNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PreferredNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PreferredNameAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PreferredNameAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PragmaClangTextSectionAttr(multiplier.ast.InheritableAttr):
  name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PragmaClangTextSectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PragmaClangTextSectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PragmaClangTextSectionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PragmaClangTextSectionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PragmaClangTextSectionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PragmaClangTextSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PragmaClangTextSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PragmaClangTextSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PragmaClangTextSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PragmaClangTextSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PragmaClangTextSectionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PragmaClangRodataSectionAttr(multiplier.ast.InheritableAttr):
  name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PragmaClangRodataSectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PragmaClangRodataSectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PragmaClangRodataSectionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PragmaClangRodataSectionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PragmaClangRodataSectionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PragmaClangRodataSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PragmaClangRodataSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PragmaClangRodataSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PragmaClangRodataSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PragmaClangRodataSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PragmaClangRodataSectionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PragmaClangRelroSectionAttr(multiplier.ast.InheritableAttr):
  name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PragmaClangRelroSectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PragmaClangRelroSectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PragmaClangRelroSectionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PragmaClangRelroSectionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PragmaClangRelroSectionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PragmaClangRelroSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PragmaClangRelroSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PragmaClangRelroSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PragmaClangRelroSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PragmaClangRelroSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PragmaClangRelroSectionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PragmaClangDataSectionAttr(multiplier.ast.InheritableAttr):
  name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PragmaClangDataSectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PragmaClangDataSectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PragmaClangDataSectionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PragmaClangDataSectionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PragmaClangDataSectionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PragmaClangDataSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PragmaClangDataSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PragmaClangDataSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PragmaClangDataSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PragmaClangDataSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PragmaClangDataSectionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PragmaClangBSSSectionAttr(multiplier.ast.InheritableAttr):
  name: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PragmaClangBSSSectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PragmaClangBSSSectionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PragmaClangBSSSectionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PragmaClangBSSSectionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PragmaClangBSSSectionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PragmaClangBSSSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PragmaClangBSSSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PragmaClangBSSSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PragmaClangBSSSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PragmaClangBSSSectionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PragmaClangBSSSectionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PointerAttr(multiplier.ast.InheritableAttr):
  dereferenced_type: Optional[multiplier.ast.Type]
  dereferenced_type_token: Optional[multiplier.ast.Type]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PointerAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PointerAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PointerAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PointerAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PointerAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PointerAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PcsAttr(multiplier.ast.InheritableAttr):
  pcs: multiplier.ast.PcsAttrPCSType

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PcsAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PcsAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PcsAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PcsAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PcsAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PcsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PcsAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PatchableFunctionEntryAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PatchableFunctionEntryAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PatchableFunctionEntryAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PatchableFunctionEntryAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PatchableFunctionEntryAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PatchableFunctionEntryAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PatchableFunctionEntryAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PatchableFunctionEntryAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PatchableFunctionEntryAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PatchableFunctionEntryAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PatchableFunctionEntryAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PatchableFunctionEntryAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PascalAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PascalAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PascalAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PascalAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PascalAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PascalAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PascalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PascalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PascalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PascalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PascalAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PascalAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ParamTypestateAttr(multiplier.ast.InheritableAttr):
  parameter_state: multiplier.ast.ParamTypestateAttrConsumedState

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ParamTypestateAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ParamTypestateAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ParamTypestateAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ParamTypestateAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ParamTypestateAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ParamTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ParamTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ParamTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ParamTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ParamTypestateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ParamTypestateAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PackedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PackedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PackedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PackedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PackedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PackedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PackedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PackedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PackedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PackedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PackedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PackedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OwnershipAttr(multiplier.ast.InheritableAttr):
  own_kind: multiplier.ast.OwnershipAttrOwnershipKind
  semantic_spelling: multiplier.ast.OwnershipAttrSpelling
  is_holds: bool
  is_returns: bool
  is_takes: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OwnershipAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OwnershipAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OwnershipAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OwnershipAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OwnershipAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OwnershipAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OwnershipAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OwnershipAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OwnershipAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OwnershipAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OwnershipAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OwnerAttr(multiplier.ast.InheritableAttr):
  dereferenced_type: Optional[multiplier.ast.Type]
  dereferenced_type_token: Optional[multiplier.ast.Type]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OwnerAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OwnerAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OwnerAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OwnerAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OwnerAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OwnerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OwnerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OwnerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OwnerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OwnerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OwnerAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OverrideAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OverrideAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OverrideAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OverrideAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OverrideAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OverrideAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OverrideAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OverrideAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OverrideAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OverrideAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OverrideAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OverrideAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OptimizeNoneAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OptimizeNoneAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OptimizeNoneAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OptimizeNoneAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OptimizeNoneAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OptimizeNoneAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OptimizeNoneAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OptimizeNoneAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OptimizeNoneAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OptimizeNoneAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OptimizeNoneAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OptimizeNoneAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OpenCLKernelAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OpenCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OpenCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OpenCLKernelAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OpenCLKernelAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OpenCLKernelAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OpenCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OpenCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OpenCLKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OpenCLKernelAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OpenCLIntelReqdSubGroupSizeAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OpenCLIntelReqdSubGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OpenCLIntelReqdSubGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OpenCLIntelReqdSubGroupSizeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OpenCLIntelReqdSubGroupSizeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OpenCLIntelReqdSubGroupSizeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLIntelReqdSubGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OpenCLIntelReqdSubGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OpenCLIntelReqdSubGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OpenCLIntelReqdSubGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OpenCLIntelReqdSubGroupSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OpenCLIntelReqdSubGroupSizeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCSubclassingRestrictedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCSubclassingRestrictedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCSubclassingRestrictedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCSubclassingRestrictedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCSubclassingRestrictedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCSubclassingRestrictedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCSubclassingRestrictedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCSubclassingRestrictedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCSubclassingRestrictedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCSubclassingRestrictedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCSubclassingRestrictedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCSubclassingRestrictedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCRootClassAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCRootClassAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCRootClassAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCRootClassAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCRootClassAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCRootClassAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCRootClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCRootClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCRootClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCRootClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCRootClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCRootClassAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCReturnsInnerPointerAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCReturnsInnerPointerAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCReturnsInnerPointerAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCReturnsInnerPointerAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCReturnsInnerPointerAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCReturnsInnerPointerAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCReturnsInnerPointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCReturnsInnerPointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCReturnsInnerPointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCReturnsInnerPointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCReturnsInnerPointerAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCReturnsInnerPointerAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCRequiresSuperAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCRequiresSuperAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCRequiresSuperAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCRequiresSuperAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCRequiresSuperAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCRequiresSuperAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCRequiresSuperAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCRequiresSuperAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCRequiresSuperAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCRequiresSuperAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCRequiresSuperAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCRequiresSuperAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCRequiresPropertyDefsAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCRequiresPropertyDefsAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCRequiresPropertyDefsAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCRequiresPropertyDefsAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCRequiresPropertyDefsAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCRequiresPropertyDefsAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCRequiresPropertyDefsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCRequiresPropertyDefsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCRequiresPropertyDefsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCRequiresPropertyDefsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCRequiresPropertyDefsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCRequiresPropertyDefsAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCPreciseLifetimeAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCPreciseLifetimeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCPreciseLifetimeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCPreciseLifetimeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCPreciseLifetimeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCPreciseLifetimeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCPreciseLifetimeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCPreciseLifetimeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCPreciseLifetimeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCPreciseLifetimeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCPreciseLifetimeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCPreciseLifetimeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCOwnershipAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCOwnershipAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCOwnershipAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCOwnershipAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCOwnershipAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCOwnershipAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCOwnershipAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCOwnershipAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCOwnershipAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCOwnershipAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCOwnershipAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCOwnershipAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCNSObjectAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCNSObjectAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCNSObjectAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCNSObjectAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCNSObjectAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCNSObjectAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCNSObjectAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCNSObjectAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCNSObjectAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCNSObjectAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCNSObjectAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCNSObjectAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCMethodFamilyAttr(multiplier.ast.InheritableAttr):
  family: multiplier.ast.ObjCMethodFamilyAttrFamilyKind

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCMethodFamilyAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCMethodFamilyAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCMethodFamilyAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCMethodFamilyAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCMethodFamilyAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCMethodFamilyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCMethodFamilyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCMethodFamilyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCMethodFamilyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCMethodFamilyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCMethodFamilyAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCIndependentClassAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCIndependentClassAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCIndependentClassAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCIndependentClassAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCIndependentClassAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCIndependentClassAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCIndependentClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCIndependentClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCIndependentClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCIndependentClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCIndependentClassAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCIndependentClassAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCExternallyRetainedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCExternallyRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCExternallyRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCExternallyRetainedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCExternallyRetainedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCExternallyRetainedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCExternallyRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCExternallyRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCExternallyRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCExternallyRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCExternallyRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCExternallyRetainedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCExplicitProtocolImplAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCExplicitProtocolImplAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCExplicitProtocolImplAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCExplicitProtocolImplAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCExplicitProtocolImplAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCExplicitProtocolImplAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCExplicitProtocolImplAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCExplicitProtocolImplAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCExplicitProtocolImplAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCExplicitProtocolImplAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCExplicitProtocolImplAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCExplicitProtocolImplAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCExceptionAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCExceptionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCExceptionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCExceptionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCExceptionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCExceptionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCExceptionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCExceptionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCExceptionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCExceptionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCExceptionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCExceptionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCBridgeRelatedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCBridgeRelatedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCBridgeRelatedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCBridgeRelatedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCBridgeRelatedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCBridgeRelatedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCBridgeRelatedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCBridgeRelatedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCBridgeRelatedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCBridgeRelatedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCBridgeRelatedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCBridgeRelatedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCBridgeMutableAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCBridgeMutableAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCBridgeMutableAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCBridgeMutableAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCBridgeMutableAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCBridgeMutableAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCBridgeMutableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCBridgeMutableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCBridgeMutableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCBridgeMutableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCBridgeMutableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCBridgeMutableAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCBridgeAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCBridgeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCBridgeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCBridgeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCBridgeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCBridgeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCBridgeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ObjCBridgeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ObjCBridgeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCBridgeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCBridgeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCBridgeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OSReturnsRetainedOnZeroAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OSReturnsRetainedOnZeroAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OSReturnsRetainedOnZeroAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OSReturnsRetainedOnZeroAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OSReturnsRetainedOnZeroAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OSReturnsRetainedOnZeroAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OSReturnsRetainedOnZeroAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OSReturnsRetainedOnZeroAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OSReturnsRetainedOnZeroAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OSReturnsRetainedOnZeroAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OSReturnsRetainedOnZeroAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OSReturnsRetainedOnZeroAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OSReturnsRetainedOnNonZeroAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OSReturnsRetainedOnNonZeroAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OSReturnsRetainedOnNonZeroAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OSReturnsRetainedOnNonZeroAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OSReturnsRetainedOnNonZeroAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OSReturnsRetainedOnNonZeroAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OSReturnsRetainedOnNonZeroAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OSReturnsRetainedOnNonZeroAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OSReturnsRetainedOnNonZeroAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OSReturnsRetainedOnNonZeroAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OSReturnsRetainedOnNonZeroAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OSReturnsRetainedOnNonZeroAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OSReturnsRetainedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OSReturnsRetainedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OSReturnsRetainedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OSReturnsRetainedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OSReturnsRetainedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OSReturnsNotRetainedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OSReturnsNotRetainedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OSReturnsNotRetainedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OSReturnsNotRetainedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OSReturnsNotRetainedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OSConsumesThisAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OSConsumesThisAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OSConsumesThisAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OSConsumesThisAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OSConsumesThisAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OSConsumesThisAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OSConsumesThisAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OSConsumesThisAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OSConsumesThisAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OSConsumesThisAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OSConsumesThisAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OSConsumesThisAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OMPThreadPrivateDeclAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPThreadPrivateDeclAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPThreadPrivateDeclAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPThreadPrivateDeclAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPThreadPrivateDeclAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPThreadPrivateDeclAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPThreadPrivateDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPThreadPrivateDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OMPThreadPrivateDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPThreadPrivateDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPThreadPrivateDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPThreadPrivateDeclAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OMPDeclareVariantAttr(multiplier.ast.InheritableAttr):
  variant_func_reference: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDeclareVariantAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDeclareVariantAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDeclareVariantAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDeclareVariantAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDeclareVariantAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPDeclareVariantAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPDeclareVariantAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OMPDeclareVariantAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDeclareVariantAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDeclareVariantAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDeclareVariantAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OMPDeclareTargetDeclAttr(multiplier.ast.InheritableAttr):
  dev_type: multiplier.ast.OMPDeclareTargetDeclAttrDevTypeTy
  indirect: bool
  indirect_expression: multiplier.ast.Expr
  map_type: multiplier.ast.OMPDeclareTargetDeclAttrMapTypeTy

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDeclareTargetDeclAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDeclareTargetDeclAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDeclareTargetDeclAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDeclareTargetDeclAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDeclareTargetDeclAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPDeclareTargetDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPDeclareTargetDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OMPDeclareTargetDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDeclareTargetDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDeclareTargetDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDeclareTargetDeclAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OMPCaptureNoInitAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPCaptureNoInitAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPCaptureNoInitAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPCaptureNoInitAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPCaptureNoInitAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPCaptureNoInitAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPCaptureNoInitAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPCaptureNoInitAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OMPCaptureNoInitAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPCaptureNoInitAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPCaptureNoInitAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPCaptureNoInitAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OMPAllocateDeclAttr(multiplier.ast.InheritableAttr):
  alignment: multiplier.ast.Expr
  allocator: multiplier.ast.Expr
  allocator_type: multiplier.ast.OMPAllocateDeclAttrAllocatorTypeTy

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPAllocateDeclAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPAllocateDeclAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPAllocateDeclAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPAllocateDeclAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPAllocateDeclAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPAllocateDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OMPAllocateDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OMPAllocateDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPAllocateDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPAllocateDeclAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPAllocateDeclAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NotTailCalledAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NotTailCalledAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NotTailCalledAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NotTailCalledAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NotTailCalledAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NotTailCalledAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NotTailCalledAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NotTailCalledAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NotTailCalledAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NotTailCalledAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NotTailCalledAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NotTailCalledAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoUwtableAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoUwtableAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoUwtableAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoUwtableAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoUwtableAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoUwtableAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoUwtableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoUwtableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoUwtableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoUwtableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoUwtableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoUwtableAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoUniqueAddressAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoUniqueAddressAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoUniqueAddressAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoUniqueAddressAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoUniqueAddressAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoUniqueAddressAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoUniqueAddressAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoUniqueAddressAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoUniqueAddressAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoUniqueAddressAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoUniqueAddressAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoUniqueAddressAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoThrowAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoThrowAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoThrowAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoThrowAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoThrowAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoThrowAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoThrowAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoThrowAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoThrowAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoThrowAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoThrowAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoThrowAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoThreadSafetyAnalysisAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoThreadSafetyAnalysisAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoThreadSafetyAnalysisAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoThreadSafetyAnalysisAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoThreadSafetyAnalysisAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoThreadSafetyAnalysisAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoThreadSafetyAnalysisAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoThreadSafetyAnalysisAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoThreadSafetyAnalysisAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoThreadSafetyAnalysisAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoThreadSafetyAnalysisAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoThreadSafetyAnalysisAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoStackProtectorAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.NoStackProtectorAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoStackProtectorAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoStackProtectorAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoStackProtectorAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoStackProtectorAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoStackProtectorAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoStackProtectorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoStackProtectorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoStackProtectorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoStackProtectorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoStackProtectorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoStackProtectorAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoSplitStackAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoSplitStackAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoSplitStackAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoSplitStackAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoSplitStackAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoSplitStackAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoSplitStackAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoSplitStackAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoSplitStackAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoSplitStackAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoSplitStackAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoSplitStackAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoSpeculativeLoadHardeningAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoSpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoSpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoSpeculativeLoadHardeningAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoSpeculativeLoadHardeningAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoSpeculativeLoadHardeningAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoSpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoSpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoSpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoSpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoSpeculativeLoadHardeningAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoSpeculativeLoadHardeningAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoSanitizeAttr(multiplier.ast.InheritableAttr):
  has_coverage: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoSanitizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoSanitizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoSanitizeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoSanitizeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoSanitizeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoSanitizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoSanitizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoSanitizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoSanitizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoSanitizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoSanitizeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoReturnAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoReturnAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoReturnAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoReturnAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoReturnAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoReturnAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoRandomizeLayoutAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoRandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoRandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoRandomizeLayoutAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoRandomizeLayoutAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoRandomizeLayoutAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoRandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoRandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoRandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoRandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoRandomizeLayoutAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoRandomizeLayoutAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoProfileFunctionAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoProfileFunctionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoProfileFunctionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoProfileFunctionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoProfileFunctionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoProfileFunctionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoProfileFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoProfileFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoProfileFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoProfileFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoProfileFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoProfileFunctionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoMips16Attr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoMips16Attr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoMips16Attr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoMips16Attr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoMips16Attr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoMips16Attr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoMips16Attr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoMips16Attr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoMips16Attr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoMips16Attr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoMips16Attr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoMips16Attr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoMicroMipsAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoMicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoMicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoMicroMipsAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoMicroMipsAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoMicroMipsAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoMicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoMicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoMicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoMicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoMicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoMicroMipsAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoInstrumentFunctionAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoInstrumentFunctionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoInstrumentFunctionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoInstrumentFunctionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoInstrumentFunctionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoInstrumentFunctionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoInstrumentFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoInstrumentFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoInstrumentFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoInstrumentFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoInstrumentFunctionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoInstrumentFunctionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoDuplicateAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoDuplicateAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoDuplicateAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoDuplicateAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoDuplicateAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoDuplicateAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoDuplicateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoDuplicateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoDuplicateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoDuplicateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoDuplicateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoDuplicateAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoDestroyAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoDestroyAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoDestroyAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoDestroyAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoDestroyAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoDestroyAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoDestroyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoDestroyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoDestroyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoDestroyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoDestroyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoDestroyAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoDebugAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoDebugAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoDebugAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoDebugAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoDebugAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoDebugAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoDebugAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoDebugAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoDebugAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoDebugAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoDebugAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoDebugAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoCommonAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoCommonAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoCommonAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoCommonAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoCommonAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoCommonAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoCommonAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoCommonAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoCommonAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoCommonAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoCommonAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoCommonAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NoAliasAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoAliasAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoAliasAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoAliasAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoAliasAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoAliasAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NoAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NoAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoAliasAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NakedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NakedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NakedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NakedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NakedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NakedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NakedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NakedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NakedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NakedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NakedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NakedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NVPTXKernelAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NVPTXKernelAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NVPTXKernelAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NVPTXKernelAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NVPTXKernelAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NVPTXKernelAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NVPTXKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NVPTXKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NVPTXKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NVPTXKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NVPTXKernelAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NVPTXKernelAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NSReturnsRetainedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NSReturnsRetainedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NSReturnsRetainedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NSReturnsRetainedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NSReturnsRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NSReturnsRetainedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NSReturnsNotRetainedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NSReturnsNotRetainedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NSReturnsNotRetainedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NSReturnsNotRetainedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NSReturnsNotRetainedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NSReturnsNotRetainedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NSReturnsAutoreleasedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NSReturnsAutoreleasedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NSReturnsAutoreleasedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NSReturnsAutoreleasedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NSReturnsAutoreleasedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NSReturnsAutoreleasedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NSReturnsAutoreleasedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NSReturnsAutoreleasedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NSReturnsAutoreleasedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NSReturnsAutoreleasedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NSReturnsAutoreleasedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NSReturnsAutoreleasedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NSErrorDomainAttr(multiplier.ast.InheritableAttr):
  error_domain: multiplier.ast.VarDecl

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NSErrorDomainAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NSErrorDomainAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NSErrorDomainAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NSErrorDomainAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NSErrorDomainAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NSErrorDomainAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NSErrorDomainAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NSErrorDomainAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NSErrorDomainAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NSErrorDomainAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NSErrorDomainAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NSConsumesSelfAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NSConsumesSelfAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NSConsumesSelfAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NSConsumesSelfAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NSConsumesSelfAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NSConsumesSelfAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NSConsumesSelfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NSConsumesSelfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NSConsumesSelfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NSConsumesSelfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NSConsumesSelfAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NSConsumesSelfAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MipsShortCallAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.MipsShortCallAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MipsShortCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MipsShortCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MipsShortCallAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MipsShortCallAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MipsShortCallAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MipsShortCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MipsShortCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MipsShortCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MipsShortCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MipsShortCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MipsShortCallAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MipsLongCallAttr(multiplier.ast.InheritableAttr):
  semantic_spelling: multiplier.ast.MipsLongCallAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MipsLongCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MipsLongCallAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MipsLongCallAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MipsLongCallAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MipsLongCallAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MipsLongCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MipsLongCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MipsLongCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MipsLongCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MipsLongCallAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MipsLongCallAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MipsInterruptAttr(multiplier.ast.InheritableAttr):
  interrupt: multiplier.ast.MipsInterruptAttrInterruptType

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MipsInterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MipsInterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MipsInterruptAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MipsInterruptAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MipsInterruptAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MipsInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MipsInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MipsInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MipsInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MipsInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MipsInterruptAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class Mips16Attr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.Mips16Attr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.Mips16Attr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.Mips16Attr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.Mips16Attr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.Mips16Attr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.Mips16Attr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.Mips16Attr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.Mips16Attr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.Mips16Attr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.Mips16Attr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.Mips16Attr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MinVectorWidthAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MinVectorWidthAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MinVectorWidthAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MinVectorWidthAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MinVectorWidthAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MinVectorWidthAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MinVectorWidthAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MinVectorWidthAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MinVectorWidthAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MinVectorWidthAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MinVectorWidthAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MinVectorWidthAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MinSizeAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MinSizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MinSizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MinSizeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MinSizeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MinSizeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MinSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MinSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MinSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MinSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MinSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MinSizeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MicroMipsAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MicroMipsAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MicroMipsAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MicroMipsAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MicroMipsAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MicroMipsAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MaybeUndefAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MaybeUndefAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MaybeUndefAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MaybeUndefAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MaybeUndefAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MaybeUndefAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MaybeUndefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MaybeUndefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MaybeUndefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MaybeUndefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MaybeUndefAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MaybeUndefAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MayAliasAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MayAliasAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MayAliasAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MayAliasAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MayAliasAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MayAliasAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MayAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MayAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MayAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MayAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MayAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MayAliasAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MaxFieldAlignmentAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MaxFieldAlignmentAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MaxFieldAlignmentAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MaxFieldAlignmentAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MaxFieldAlignmentAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MaxFieldAlignmentAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MaxFieldAlignmentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MaxFieldAlignmentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MaxFieldAlignmentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MaxFieldAlignmentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MaxFieldAlignmentAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MaxFieldAlignmentAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MSVtorDispAttr(multiplier.ast.InheritableAttr):
  vtor_disp_mode: multiplier.ast.MSVtorDispMode

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSVtorDispAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSVtorDispAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSVtorDispAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSVtorDispAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSVtorDispAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSVtorDispAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSVtorDispAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MSVtorDispAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSVtorDispAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSVtorDispAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSVtorDispAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MSStructAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSStructAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSStructAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSStructAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSStructAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSStructAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSStructAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSStructAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MSStructAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSStructAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSStructAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSStructAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MSP430InterruptAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSP430InterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSP430InterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSP430InterruptAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSP430InterruptAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSP430InterruptAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSP430InterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSP430InterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MSP430InterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSP430InterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSP430InterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSP430InterruptAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MSNoVTableAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSNoVTableAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSNoVTableAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSNoVTableAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSNoVTableAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSNoVTableAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSNoVTableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSNoVTableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MSNoVTableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSNoVTableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSNoVTableAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSNoVTableAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MSInheritanceAttr(multiplier.ast.InheritableAttr):
  best_case: bool
  inheritance_model: multiplier.ast.MSInheritanceModel
  semantic_spelling: multiplier.ast.MSInheritanceAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSInheritanceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSInheritanceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSInheritanceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSInheritanceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSInheritanceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSInheritanceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSInheritanceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MSInheritanceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSInheritanceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSInheritanceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSInheritanceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MSAllocatorAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSAllocatorAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSAllocatorAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSAllocatorAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSAllocatorAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSAllocatorAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSAllocatorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSAllocatorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MSAllocatorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSAllocatorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSAllocatorAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSAllocatorAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MSABIAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSABIAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSABIAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSABIAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSABIAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSABIAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MSABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MSABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSABIAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MIGServerRoutineAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MIGServerRoutineAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MIGServerRoutineAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MIGServerRoutineAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MIGServerRoutineAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MIGServerRoutineAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MIGServerRoutineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.MIGServerRoutineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.MIGServerRoutineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MIGServerRoutineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MIGServerRoutineAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MIGServerRoutineAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class M68kInterruptAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.M68kInterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.M68kInterruptAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.M68kInterruptAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.M68kInterruptAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.M68kInterruptAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.M68kInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.M68kInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.M68kInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.M68kInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.M68kInterruptAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.M68kInterruptAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class LocksExcludedAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LocksExcludedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LocksExcludedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LocksExcludedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LocksExcludedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LocksExcludedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LocksExcludedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LocksExcludedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.LocksExcludedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LocksExcludedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LocksExcludedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LocksExcludedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class LockReturnedAttr(multiplier.ast.InheritableAttr):
  argument: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LockReturnedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LockReturnedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LockReturnedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LockReturnedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LockReturnedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LockReturnedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LockReturnedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.LockReturnedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LockReturnedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LockReturnedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LockReturnedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class LifetimeBoundAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LifetimeBoundAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LifetimeBoundAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LifetimeBoundAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LifetimeBoundAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LifetimeBoundAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LifetimeBoundAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LifetimeBoundAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.LifetimeBoundAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LifetimeBoundAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LifetimeBoundAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LifetimeBoundAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class LeafAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LeafAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LeafAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LeafAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LeafAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LeafAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LeafAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LeafAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.LeafAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LeafAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LeafAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LeafAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class LayoutVersionAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LayoutVersionAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LayoutVersionAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LayoutVersionAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LayoutVersionAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LayoutVersionAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LayoutVersionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LayoutVersionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.LayoutVersionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LayoutVersionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LayoutVersionAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LayoutVersionAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class LTOVisibilityPublicAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LTOVisibilityPublicAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LTOVisibilityPublicAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LTOVisibilityPublicAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LTOVisibilityPublicAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LTOVisibilityPublicAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LTOVisibilityPublicAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.LTOVisibilityPublicAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.LTOVisibilityPublicAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LTOVisibilityPublicAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LTOVisibilityPublicAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LTOVisibilityPublicAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class InternalLinkageAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.InternalLinkageAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.InternalLinkageAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.InternalLinkageAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.InternalLinkageAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.InternalLinkageAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.InternalLinkageAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.InternalLinkageAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.InternalLinkageAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.InternalLinkageAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.InternalLinkageAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.InternalLinkageAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class IntelOclBiccAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.IntelOclBiccAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.IntelOclBiccAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.IntelOclBiccAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.IntelOclBiccAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.IntelOclBiccAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.IntelOclBiccAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.IntelOclBiccAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.IntelOclBiccAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.IntelOclBiccAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.IntelOclBiccAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.IntelOclBiccAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class InitPriorityAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.InitPriorityAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.InitPriorityAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.InitPriorityAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.InitPriorityAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.InitPriorityAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.InitPriorityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.InitPriorityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.InitPriorityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.InitPriorityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.InitPriorityAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.InitPriorityAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class InheritableParamAttr(multiplier.ast.InheritableAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.InheritableParamAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.InheritableParamAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.InheritableParamAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.InheritableParamAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.InheritableParamAttr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.InheritableParamAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.InheritableParamAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.InheritableParamAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.InheritableParamAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.InheritableParamAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.InheritableParamAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CarriesDependencyAttr(multiplier.ast.InheritableParamAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CarriesDependencyAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CarriesDependencyAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CarriesDependencyAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CarriesDependencyAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CarriesDependencyAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CarriesDependencyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CarriesDependencyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CarriesDependencyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CarriesDependencyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CarriesDependencyAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CarriesDependencyAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CFConsumedAttr(multiplier.ast.InheritableParamAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CFConsumedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CFConsumedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CFConsumedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CFConsumedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CFConsumedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CFConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CFConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CFConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CFConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CFConsumedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AnnotateAttr(multiplier.ast.InheritableParamAttr):
  annotation: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AnnotateAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AnnotateAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AnnotateAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AnnotateAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AnnotateAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AnnotateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.AnnotateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.AnnotateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AnnotateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AnnotateAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AnnotateAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UseHandleAttr(multiplier.ast.InheritableParamAttr):
  handle_type: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UseHandleAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UseHandleAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UseHandleAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UseHandleAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UseHandleAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UseHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.UseHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.UseHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UseHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UseHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UseHandleAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ReleaseHandleAttr(multiplier.ast.InheritableParamAttr):
  handle_type: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ReleaseHandleAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ReleaseHandleAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ReleaseHandleAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ReleaseHandleAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ReleaseHandleAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReleaseHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ReleaseHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ReleaseHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ReleaseHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ReleaseHandleAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ReleaseHandleAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PassObjectSizeAttr(multiplier.ast.InheritableParamAttr):
  semantic_spelling: multiplier.ast.PassObjectSizeAttrSpelling
  is_dynamic: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PassObjectSizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PassObjectSizeAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PassObjectSizeAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PassObjectSizeAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PassObjectSizeAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PassObjectSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.PassObjectSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.PassObjectSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PassObjectSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PassObjectSizeAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PassObjectSizeAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ParameterABIAttr(multiplier.ast.InheritableParamAttr):
  abi: multiplier.ast.ParameterABI

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ParameterABIAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ParameterABIAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ParameterABIAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ParameterABIAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ParameterABIAttr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ParameterABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.ParameterABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.ParameterABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ParameterABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ParameterABIAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ParameterABIAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftIndirectResultAttr(multiplier.ast.ParameterABIAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftIndirectResultAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftIndirectResultAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftIndirectResultAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftIndirectResultAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftIndirectResultAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftIndirectResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftIndirectResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftIndirectResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftIndirectResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftIndirectResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftIndirectResultAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftErrorResultAttr(multiplier.ast.ParameterABIAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftErrorResultAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftErrorResultAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftErrorResultAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftErrorResultAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftErrorResultAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftErrorResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftErrorResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftErrorResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftErrorResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftErrorResultAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftErrorResultAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftContextAttr(multiplier.ast.ParameterABIAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftContextAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftContextAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftContextAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftContextAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftContextAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftContextAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftContextAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftContextAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftContextAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftContextAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftContextAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SwiftAsyncContextAttr(multiplier.ast.ParameterABIAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwiftAsyncContextAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwiftAsyncContextAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwiftAsyncContextAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwiftAsyncContextAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwiftAsyncContextAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftAsyncContextAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.SwiftAsyncContextAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.SwiftAsyncContextAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwiftAsyncContextAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwiftAsyncContextAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwiftAsyncContextAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class OSConsumedAttr(multiplier.ast.InheritableParamAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OSConsumedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OSConsumedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OSConsumedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.OSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.OSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OSConsumedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NonNullAttr(multiplier.ast.InheritableParamAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NonNullAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NonNullAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NonNullAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NonNullAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NonNullAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NonNullAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NonNullAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class NSConsumedAttr(multiplier.ast.InheritableParamAttr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NSConsumedAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NSConsumedAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NSConsumedAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.NSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.NSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NSConsumedAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NSConsumedAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class IFuncAttr(multiplier.ast.Attr):
  resolver: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.IFuncAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.IFuncAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.IFuncAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.IFuncAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.IFuncAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.IFuncAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.IFuncAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.IFuncAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.IFuncAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.IFuncAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.IFuncAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class CalledOnceAttr(multiplier.ast.Attr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CalledOnceAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CalledOnceAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CalledOnceAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CalledOnceAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CalledOnceAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CalledOnceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.CalledOnceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.CalledOnceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CalledOnceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CalledOnceAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CalledOnceAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class BuiltinAliasAttr(multiplier.ast.Attr):
  semantic_spelling: multiplier.ast.BuiltinAliasAttrSpelling

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BuiltinAliasAttr]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BuiltinAliasAttr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BuiltinAliasAttr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.AttrKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.BuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Attr) -> Optional[multiplier.ast.BuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Attr]) -> Optional[multiplier.ast.BuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BuiltinAliasAttr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BuiltinAliasAttr]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class Type(multiplier.Entity):
  tokens: multiplier.frontend.TokenRange
  desugared_type: multiplier.ast.Type
  canonical_type: multiplier.ast.Type
  is_qualified: bool
  unqualified_type: multiplier.ast.Type
  size_in_bits: Optional[int]
  alignment: Optional[int]
  accepts_obj_c_type_parameters: bool
  can_decay_to_pointer_type: bool
  can_have_nullability: bool
  contains_errors: bool
  contains_unexpanded_parameter_pack: bool
  linkage: multiplier.ast.Linkage
  kind: multiplier.ast.TypeKind
  unqualified_desugared_type: multiplier.ast.Type
  visibility: multiplier.ast.Visibility
  is_unresolved_type: bool
  is_vlst_builtin_type: bool

  @staticmethod
  def static_category() -> multiplier.EntityCategory:
    ...

  @overload
  @staticmethod
  def IN(index: multiplier.Index, kinds: Sequence[multiplier.ast.TypeKind]) -> Generator[multiplier.ast.Type]:
    ...

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.Type]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.Type]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.Type]:
    ...

  @overload
  @staticmethod
  def FROM(self: multiplier.ast.Type) -> Optional[multiplier.ast.Type]:
    ...

  @overload
  @staticmethod
  def FROM(self: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.Type]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.Type]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.Type]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.Type]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TemplateTypeParmType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  declaration: Optional[multiplier.ast.TemplateTypeParmDecl]
  is_parameter_pack: bool
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TemplateTypeParmType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TemplateTypeParmType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TemplateTypeParmType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TemplateTypeParmType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TemplateTypeParmType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.TemplateTypeParmType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TemplateTypeParmType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TemplateTypeParmType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TemplateTypeParmType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TemplateSpecializationType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  aliased_type: Optional[multiplier.ast.Type]
  is_current_instantiation: bool
  is_sugared: bool
  is_type_alias: bool
  num_template_arguments: int
  template_arguments: Generator[multiplier.ast.TemplateArgument]

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TemplateSpecializationType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TemplateSpecializationType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TemplateSpecializationType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.TemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TemplateSpecializationType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

  def nth_template_argument(self, n: int) -> Optional[multiplier.ast.TemplateArgument]:
    ...

class TagType(multiplier.ast.Type):
  declaration: multiplier.ast.TagDecl
  is_being_defined: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TagType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TagType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TagType]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TagType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TagType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.TagType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TagType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TagType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TagType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class RecordType(multiplier.ast.TagType):
  desugar: multiplier.ast.Type
  has_const_fields: bool
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RecordType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RecordType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RecordType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.RecordType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.RecordType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.RecordType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RecordType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RecordType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RecordType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class EnumType(multiplier.ast.TagType):
  desugar: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.EnumType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.EnumType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.EnumType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.EnumType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.EnumType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.EnumType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.EnumType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.EnumType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.EnumType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SubstTemplateTypeParmType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  associated_declaration: multiplier.ast.Decl
  pack_index: Optional[int]
  replaced_parameter: multiplier.ast.TemplateTypeParmDecl
  replacement_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SubstTemplateTypeParmType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SubstTemplateTypeParmType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SubstTemplateTypeParmType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.SubstTemplateTypeParmType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.SubstTemplateTypeParmType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.SubstTemplateTypeParmType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SubstTemplateTypeParmType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SubstTemplateTypeParmType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SubstTemplateTypeParmType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class SubstTemplateTypeParmPackType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  associated_declaration: multiplier.ast.Decl
  final: bool
  replaced_parameter: multiplier.ast.TemplateTypeParmDecl
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SubstTemplateTypeParmPackType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SubstTemplateTypeParmPackType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SubstTemplateTypeParmPackType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.SubstTemplateTypeParmPackType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.SubstTemplateTypeParmPackType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.SubstTemplateTypeParmPackType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SubstTemplateTypeParmPackType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SubstTemplateTypeParmPackType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SubstTemplateTypeParmPackType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ReferenceType(multiplier.ast.Type):
  pointee_type: multiplier.ast.Type
  pointee_type_as_written: multiplier.ast.Type
  is_inner_reference: bool
  is_spelled_as_l_value: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ReferenceType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ReferenceType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ReferenceType]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.ReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ReferenceType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class RValueReferenceType(multiplier.ast.ReferenceType):
  desugar: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RValueReferenceType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RValueReferenceType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RValueReferenceType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.RValueReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.RValueReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.RValueReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RValueReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RValueReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RValueReferenceType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class LValueReferenceType(multiplier.ast.ReferenceType):
  desugar: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LValueReferenceType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LValueReferenceType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LValueReferenceType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.LValueReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.LValueReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.LValueReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LValueReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LValueReferenceType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LValueReferenceType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class QualifiedType(multiplier.ast.Type):
  address_space: multiplier.ast.LangAS
  atomic_unqualified_type: multiplier.ast.Type
  has_address_space: bool
  has_non_trivial_obj_c_lifetime: bool
  has_non_trivial_to_primitive_copy_c_union: bool
  has_non_trivial_to_primitive_default_initialize_c_union: bool
  has_non_trivial_to_primitive_destruct_c_union: bool
  has_qualifiers: bool
  has_strong_or_weak_obj_c_lifetime: bool
  is_c_forbidden_l_value_type: bool
  is_cxx11_pod_type: bool
  is_cxx98_pod_type: bool
  is_canonical: bool
  is_canonical_as_parameter: bool
  is_const_qualified: bool
  is_constant: bool
  is_local_const_qualified: bool
  is_local_restrict_qualified: bool
  is_local_volatile_qualified: bool
  is_non_weak_in_mrr_with_obj_c_weak: bool
  is_null: bool
  is_obj_cgc_strong: bool
  is_obj_cgc_weak: bool
  is_pod_type: bool
  is_referenceable: bool
  is_restrict_qualified: bool
  is_trivial_type: bool
  is_trivially_copyable_type: bool
  is_trivially_equality_comparable_type: bool
  is_trivially_relocatable_type: bool
  is_volatile_qualified: bool
  is_web_assembly_funcref_type: bool
  is_web_assembly_reference_type: bool
  may_be_dynamic_class: bool
  may_be_not_dynamic_class: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.QualifiedType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.QualifiedType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.QualifiedType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.QualifiedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.QualifiedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.QualifiedType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.QualifiedType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.QualifiedType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.QualifiedType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PointerType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  pointee_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PointerType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PointerType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PointerType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.PointerType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.PointerType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.PointerType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PointerType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PointerType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PointerType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PipeType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  element_type: multiplier.ast.Type
  is_read_only: bool
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PipeType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PipeType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PipeType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.PipeType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.PipeType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.PipeType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PipeType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PipeType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PipeType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ParenType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  inner_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ParenType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ParenType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ParenType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ParenType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ParenType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.ParenType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ParenType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ParenType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ParenType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class PackExpansionType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  pattern: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PackExpansionType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PackExpansionType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PackExpansionType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.PackExpansionType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.PackExpansionType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.PackExpansionType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PackExpansionType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PackExpansionType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PackExpansionType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCTypeParamType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  declaration: multiplier.ast.ObjCTypeParamDecl
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCTypeParamType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCTypeParamType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCTypeParamType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ObjCTypeParamType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ObjCTypeParamType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.ObjCTypeParamType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCTypeParamType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCTypeParamType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCTypeParamType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCObjectType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  base_type: multiplier.ast.Type
  interface: multiplier.ast.ObjCInterfaceDecl
  super_class_type: Optional[multiplier.ast.Type]
  num_type_arguments: int
  type_arguments: Generator[multiplier.ast.Type]
  type_arguments_as_written: Generator[multiplier.ast.Type]
  is_kind_of_type: bool
  is_kind_of_type_as_written: bool
  is_obj_c_class: bool
  is_obj_c_id: bool
  is_obj_c_qualified_class: bool
  is_obj_c_qualified_id: bool
  is_obj_c_unqualified_class: bool
  is_obj_c_unqualified_id: bool
  is_obj_c_unqualified_id_or_class: bool
  is_specialized: bool
  is_specialized_as_written: bool
  is_sugared: bool
  is_unspecialized: bool
  is_unspecialized_as_written: bool
  strip_obj_c_kind_of_type_and_qualifiers: multiplier.ast.Type

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCObjectType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCObjectType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCObjectType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ObjCObjectType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ObjCObjectType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.ObjCObjectType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCObjectType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCObjectType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCObjectType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

  def nth_type_argument(self, n: int) -> Optional[multiplier.ast.Type]:
    ...

class ObjCInterfaceType(multiplier.ast.ObjCObjectType):
  declaration: multiplier.ast.ObjCInterfaceDecl

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCInterfaceType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCInterfaceType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCInterfaceType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ObjCInterfaceType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ObjCInterfaceType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.ObjCInterfaceType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCInterfaceType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCInterfaceType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCInterfaceType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ObjCObjectPointerType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  interface_declaration: multiplier.ast.ObjCInterfaceDecl
  interface_type: multiplier.ast.ObjCInterfaceType
  object_type: multiplier.ast.ObjCObjectType
  pointee_type: multiplier.ast.Type
  super_class_type: multiplier.ast.Type
  num_type_arguments: int
  type_arguments: Generator[multiplier.ast.Type]
  type_arguments_as_written: Generator[multiplier.ast.Type]
  is_kind_of_type: bool
  is_obj_c_id_or_class_type: bool
  is_specialized: bool
  is_specialized_as_written: bool
  is_sugared: bool
  is_unspecialized: bool
  is_unspecialized_as_written: bool
  num_qualifiers: int
  qualifiers: Generator[multiplier.ast.ObjCProtocolDecl]
  strip_obj_c_kind_of_type_and_qualifiers: multiplier.ast.ObjCObjectPointerType
  num_protocols: int
  protocols: Generator[multiplier.ast.ObjCProtocolDecl]

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCObjectPointerType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCObjectPointerType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCObjectPointerType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ObjCObjectPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ObjCObjectPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.ObjCObjectPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCObjectPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCObjectPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCObjectPointerType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

  def nth_type_argument(self, n: int) -> Optional[multiplier.ast.Type]:
    ...

  def nth_qualifier(self, n: int) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

  def nth_protocol(self, n: int) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

class MemberPointerType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  class_: multiplier.ast.Type
  most_recent_cxx_record_declaration: multiplier.ast.CXXRecordDecl
  pointee_type: multiplier.ast.Type
  is_member_data_pointer: bool
  is_member_function_pointer: bool
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MemberPointerType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MemberPointerType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MemberPointerType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.MemberPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.MemberPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.MemberPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MemberPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MemberPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MemberPointerType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MatrixType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  element_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MatrixType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MatrixType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MatrixType]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.MatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.MatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.MatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MatrixType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DependentSizedMatrixType(multiplier.ast.MatrixType):
  attribute_token: multiplier.frontend.Token
  column_expression: multiplier.ast.Expr
  row_expression: multiplier.ast.Expr

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DependentSizedMatrixType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DependentSizedMatrixType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DependentSizedMatrixType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentSizedMatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentSizedMatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.DependentSizedMatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DependentSizedMatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DependentSizedMatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DependentSizedMatrixType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ConstantMatrixType(multiplier.ast.MatrixType):

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConstantMatrixType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConstantMatrixType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConstantMatrixType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ConstantMatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ConstantMatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.ConstantMatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConstantMatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConstantMatrixType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConstantMatrixType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class MacroQualifiedType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  modified_type: multiplier.ast.Type
  underlying_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MacroQualifiedType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MacroQualifiedType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MacroQualifiedType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.MacroQualifiedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.MacroQualifiedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.MacroQualifiedType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MacroQualifiedType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MacroQualifiedType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MacroQualifiedType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class InjectedClassNameType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  declaration: multiplier.ast.CXXRecordDecl
  injected_specialization_type: multiplier.ast.Type
  injected_tst: multiplier.ast.TemplateSpecializationType
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.InjectedClassNameType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.InjectedClassNameType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.InjectedClassNameType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.InjectedClassNameType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.InjectedClassNameType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.InjectedClassNameType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.InjectedClassNameType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.InjectedClassNameType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.InjectedClassNameType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class FunctionType(multiplier.ast.Type):
  call_conv: multiplier.ast.CallingConv
  call_result_type: multiplier.ast.Type
  cmse_ns_call_attribute: bool
  has_reg_parm: bool
  no_return_attribute: bool
  return_type: multiplier.ast.Type
  is_const: bool
  is_restrict: bool
  is_volatile: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FunctionType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FunctionType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FunctionType]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.FunctionType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.FunctionType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.FunctionType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FunctionType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FunctionType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FunctionType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class FunctionProtoType(multiplier.ast.FunctionType):
  can_throw: Optional[multiplier.ast.CanThrowResult]
  desugar: multiplier.ast.Type
  ellipsis_token: multiplier.frontend.Token
  exception_spec_declaration: Optional[multiplier.ast.FunctionDecl]
  exception_spec_template: Optional[multiplier.ast.FunctionDecl]
  exception_spec_type: multiplier.ast.ExceptionSpecificationType
  noexcept_expression: Optional[multiplier.ast.Expr]
  num_parameter_types: int
  parameter_types: Generator[multiplier.ast.Type]
  reference_qualifier: multiplier.ast.RefQualifierKind
  has_dependent_exception_spec: bool
  has_dynamic_exception_spec: bool
  has_exception_spec: bool
  has_ext_parameter_infos: bool
  has_instantiation_dependent_exception_spec: bool
  has_noexcept_exception_spec: bool
  has_trailing_return: bool
  is_nothrow: Optional[bool]
  is_sugared: bool
  is_template_variadic: bool
  is_variadic: bool
  num_exception_types: int
  exception_types: Generator[multiplier.ast.Type]

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FunctionProtoType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FunctionProtoType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FunctionProtoType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.FunctionProtoType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.FunctionProtoType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.FunctionProtoType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FunctionProtoType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FunctionProtoType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FunctionProtoType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

  def nth_parameter_type(self, n: int) -> Optional[multiplier.ast.Type]:
    ...

  def nth_exception_type(self, n: int) -> Optional[multiplier.ast.Type]:
    ...

class FunctionNoProtoType(multiplier.ast.FunctionType):
  desugar: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FunctionNoProtoType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FunctionNoProtoType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FunctionNoProtoType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.FunctionNoProtoType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.FunctionNoProtoType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.FunctionNoProtoType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FunctionNoProtoType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FunctionNoProtoType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FunctionNoProtoType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DependentVectorType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  attribute_token: multiplier.frontend.Token
  element_type: multiplier.ast.Type
  size_expression: multiplier.ast.Expr
  vector_kind: multiplier.ast.VectorTypeVectorKind
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DependentVectorType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DependentVectorType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DependentVectorType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.DependentVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DependentVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DependentVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DependentVectorType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DependentSizedExtVectorType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  attribute_token: multiplier.frontend.Token
  element_type: multiplier.ast.Type
  size_expression: multiplier.ast.Expr
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DependentSizedExtVectorType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DependentSizedExtVectorType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DependentSizedExtVectorType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentSizedExtVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentSizedExtVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.DependentSizedExtVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DependentSizedExtVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DependentSizedExtVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DependentSizedExtVectorType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DependentBitIntType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  num_bits_expression: multiplier.ast.Expr
  is_signed: bool
  is_sugared: bool
  is_unsigned: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DependentBitIntType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DependentBitIntType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DependentBitIntType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentBitIntType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentBitIntType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.DependentBitIntType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DependentBitIntType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DependentBitIntType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DependentBitIntType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DependentAddressSpaceType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  address_space_expression: multiplier.ast.Expr
  attribute_token: multiplier.frontend.Token
  pointee_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DependentAddressSpaceType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DependentAddressSpaceType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DependentAddressSpaceType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentAddressSpaceType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentAddressSpaceType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.DependentAddressSpaceType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DependentAddressSpaceType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DependentAddressSpaceType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DependentAddressSpaceType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DeducedType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  resolved_type: Optional[multiplier.ast.Type]
  is_deduced: bool
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DeducedType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DeducedType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DeducedType]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DeducedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DeducedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.DeducedType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DeducedType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DeducedType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DeducedType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DeducedTemplateSpecializationType(multiplier.ast.DeducedType):

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DeducedTemplateSpecializationType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DeducedTemplateSpecializationType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DeducedTemplateSpecializationType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DeducedTemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DeducedTemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.DeducedTemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DeducedTemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DeducedTemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DeducedTemplateSpecializationType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AutoType(multiplier.ast.DeducedType):
  keyword: multiplier.ast.AutoTypeKeyword
  num_type_constraint_arguments: int
  type_constraint_arguments: Generator[multiplier.ast.TemplateArgument]
  type_constraint_concept: Optional[multiplier.ast.ConceptDecl]
  is_constrained: bool
  is_decltype_auto: bool
  is_gnu_auto_type: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AutoType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AutoType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AutoType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.AutoType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.AutoType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.AutoType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AutoType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AutoType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AutoType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

  def nth_type_constraint_argument(self, n: int) -> Optional[multiplier.ast.TemplateArgument]:
    ...

class DecltypeType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  underlying_expression: multiplier.ast.Expr
  underlying_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DecltypeType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DecltypeType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DecltypeType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DecltypeType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DecltypeType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.DecltypeType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DecltypeType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DecltypeType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DecltypeType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ComplexType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  element_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ComplexType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ComplexType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ComplexType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ComplexType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ComplexType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.ComplexType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ComplexType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ComplexType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ComplexType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class BuiltinType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  builtin_kind: multiplier.ast.BuiltinTypeKind
  is_floating_point: bool
  is_integer: bool
  is_sve_bool: bool
  is_sve_count: bool
  is_signed_integer: bool
  is_sugared: bool
  is_unsigned_integer: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BuiltinType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BuiltinType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BuiltinType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.BuiltinType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.BuiltinType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.BuiltinType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BuiltinType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BuiltinType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BuiltinType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class BlockPointerType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  pointee_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BlockPointerType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BlockPointerType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BlockPointerType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.BlockPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.BlockPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.BlockPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BlockPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BlockPointerType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BlockPointerType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class BitIntType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  is_signed: bool
  is_sugared: bool
  is_unsigned: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BitIntType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BitIntType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BitIntType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.BitIntType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.BitIntType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.BitIntType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BitIntType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BitIntType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BitIntType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class BTFTagAttributedType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  attribute: multiplier.ast.BTFTypeTagAttr
  wrapped_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BTFTagAttributedType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BTFTagAttributedType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BTFTagAttributedType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.BTFTagAttributedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.BTFTagAttributedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.BTFTagAttributedType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BTFTagAttributedType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BTFTagAttributedType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BTFTagAttributedType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AttributedType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  attribute: Optional[multiplier.ast.Attr]
  attribute_kind: multiplier.ast.AttrKind
  equivalent_type: multiplier.ast.Type
  immediate_nullability: Optional[multiplier.ast.NullabilityKind]
  modified_type: multiplier.ast.Type
  has_attribute: bool
  is_calling_conv: bool
  is_ms_type_spec: bool
  is_qualifier: bool
  is_sugared: bool
  is_web_assembly_funcref_spec: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AttributedType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AttributedType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AttributedType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.AttributedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.AttributedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.AttributedType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AttributedType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AttributedType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AttributedType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AtomicType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  value_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AtomicType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AtomicType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AtomicType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.AtomicType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.AtomicType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.AtomicType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AtomicType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AtomicType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AtomicType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ArrayType(multiplier.ast.Type):
  element_type: multiplier.ast.Type
  size_modifier: multiplier.ast.ArrayTypeArraySizeModifier

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ArrayType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ArrayType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ArrayType]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.ArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ArrayType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class VariableArrayType(multiplier.ast.ArrayType):
  desugar: multiplier.ast.Type
  brackets_range: multiplier.frontend.TokenRange
  l_bracket_token: multiplier.frontend.Token
  r_bracket_token: multiplier.frontend.Token
  size_expression: multiplier.ast.Expr
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.VariableArrayType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.VariableArrayType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.VariableArrayType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.VariableArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.VariableArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.VariableArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.VariableArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.VariableArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.VariableArrayType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class IncompleteArrayType(multiplier.ast.ArrayType):
  desugar: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.IncompleteArrayType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.IncompleteArrayType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.IncompleteArrayType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.IncompleteArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.IncompleteArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.IncompleteArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.IncompleteArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.IncompleteArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.IncompleteArrayType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DependentSizedArrayType(multiplier.ast.ArrayType):
  desugar: multiplier.ast.Type
  brackets_range: multiplier.frontend.TokenRange
  l_bracket_token: multiplier.frontend.Token
  r_bracket_token: multiplier.frontend.Token
  size_expression: Optional[multiplier.ast.Expr]
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DependentSizedArrayType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DependentSizedArrayType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DependentSizedArrayType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentSizedArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentSizedArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.DependentSizedArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DependentSizedArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DependentSizedArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DependentSizedArrayType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ConstantArrayType(multiplier.ast.ArrayType):
  desugar: multiplier.ast.Type
  size_expression: Optional[multiplier.ast.Expr]
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConstantArrayType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConstantArrayType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConstantArrayType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ConstantArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ConstantArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.ConstantArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConstantArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConstantArrayType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConstantArrayType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class AdjustedType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  resolved_type: multiplier.ast.Type
  original_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AdjustedType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AdjustedType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AdjustedType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.AdjustedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.AdjustedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.AdjustedType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AdjustedType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AdjustedType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AdjustedType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DecayedType(multiplier.ast.AdjustedType):
  pointee_type: multiplier.ast.Type

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DecayedType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DecayedType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DecayedType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DecayedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DecayedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.DecayedType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DecayedType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DecayedType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DecayedType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TypeWithKeyword(multiplier.ast.Type):
  keyword: multiplier.ast.ElaboratedTypeKeyword

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeWithKeyword]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeWithKeyword]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeWithKeyword]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TypeWithKeyword]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TypeWithKeyword]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.TypeWithKeyword]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeWithKeyword]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeWithKeyword]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeWithKeyword]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ElaboratedType(multiplier.ast.TypeWithKeyword):
  desugar: multiplier.ast.Type
  named_type: multiplier.ast.Type
  owned_tag_declaration: Optional[multiplier.ast.TagDecl]
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ElaboratedType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ElaboratedType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ElaboratedType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ElaboratedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ElaboratedType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.ElaboratedType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ElaboratedType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ElaboratedType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ElaboratedType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class DependentTemplateSpecializationType(multiplier.ast.TypeWithKeyword):
  desugar: multiplier.ast.Type
  is_sugared: bool
  num_template_arguments: int
  template_arguments: Generator[multiplier.ast.TemplateArgument]

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DependentTemplateSpecializationType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DependentTemplateSpecializationType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DependentTemplateSpecializationType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentTemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentTemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.DependentTemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DependentTemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DependentTemplateSpecializationType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DependentTemplateSpecializationType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

  def nth_template_argument(self, n: int) -> Optional[multiplier.ast.TemplateArgument]:
    ...

class DependentNameType(multiplier.ast.TypeWithKeyword):
  desugar: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DependentNameType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DependentNameType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DependentNameType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentNameType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.DependentNameType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.DependentNameType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DependentNameType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DependentNameType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DependentNameType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class VectorType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  element_type: multiplier.ast.Type
  vector_kind: multiplier.ast.VectorTypeVectorKind
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.VectorType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.VectorType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.VectorType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.VectorType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.VectorType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.VectorType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.VectorType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.VectorType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.VectorType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class ExtVectorType(multiplier.ast.VectorType):

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ExtVectorType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ExtVectorType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ExtVectorType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ExtVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.ExtVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.ExtVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ExtVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ExtVectorType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ExtVectorType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UsingType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  found_declaration: multiplier.ast.UsingShadowDecl
  underlying_type: multiplier.ast.Type
  is_sugared: bool
  type_matches_declaration: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UsingType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UsingType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UsingType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.UsingType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.UsingType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.UsingType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UsingType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UsingType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UsingType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UnresolvedUsingType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  declaration: multiplier.ast.UnresolvedUsingTypenameDecl
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnresolvedUsingType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnresolvedUsingType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnresolvedUsingType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.UnresolvedUsingType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.UnresolvedUsingType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.UnresolvedUsingType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnresolvedUsingType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnresolvedUsingType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnresolvedUsingType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class UnaryTransformType(multiplier.ast.Type):
  desugar: Optional[multiplier.ast.Type]
  base_type: Optional[multiplier.ast.Type]
  utt_kind: multiplier.ast.UnaryTransformTypeUTTKind
  underlying_type: Optional[multiplier.ast.Type]
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnaryTransformType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnaryTransformType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnaryTransformType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.UnaryTransformType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.UnaryTransformType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.UnaryTransformType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnaryTransformType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnaryTransformType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnaryTransformType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TypedefType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  declaration: multiplier.ast.TypedefNameDecl
  is_sugared: bool
  type_matches_declaration: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypedefType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypedefType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypedefType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TypedefType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TypedefType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.TypedefType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypedefType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypedefType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypedefType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TypeOfType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  type_kind: multiplier.ast.TypeOfKind
  unmodified_type: multiplier.ast.Type
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeOfType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeOfType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeOfType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TypeOfType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TypeOfType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.TypeOfType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeOfType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeOfType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeOfType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class TypeOfExprType(multiplier.ast.Type):
  desugar: multiplier.ast.Type
  type_kind: multiplier.ast.TypeOfKind
  underlying_expression: multiplier.ast.Expr
  is_sugared: bool

  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeOfExprType]:
    ...

  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeOfExprType]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeOfExprType]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.TypeKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TypeOfExprType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Type) -> Optional[multiplier.ast.TypeOfExprType]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Type]) -> Optional[multiplier.ast.TypeOfExprType]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeOfExprType]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeOfExprType]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeOfExprType]:
    ...

  def contains(self, tok: multiplier.frontend.Token) -> bool:
    ...

class Stmt(multiplier.Entity):
  parent_declaration: Optional[multiplier.ast.Decl]
  parent_statement: Optional[multiplier.ast.Stmt]
  referenced_declaration_id: Optional[multiplier.DeclId]
  referenced_declaration: Optional[multiplier.ast.Decl]
  ignore_containers: multiplier.ast.Stmt
  children: Generator[multiplier.ast.Stmt]
  tokens: multiplier.frontend.TokenRange
  kind: multiplier.ast.StmtKind
  strip_label_like_statements: multiplier.ast.Stmt

  @staticmethod
  def static_category() -> multiplier.EntityCategory:
    ...

  @overload
  @staticmethod
  def IN(index: multiplier.Index, kinds: Sequence[multiplier.ast.StmtKind]) -> Generator[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment, kinds: Sequence[multiplier.ast.StmtKind]) -> Generator[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File, kinds: Sequence[multiplier.ast.StmtKind]) -> Generator[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.Stmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation, kinds: Sequence[multiplier.ast.StmtKind]) -> Generator[Tuple[multiplier.ast.Stmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.Stmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def FROM(self: multiplier.ast.Stmt) -> Optional[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def FROM(self: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.Stmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.Stmt]:
    ...

class SEHTryStmt(multiplier.ast.Stmt):
  except_handler: multiplier.ast.SEHExceptStmt
  finally_handler: multiplier.ast.SEHFinallyStmt
  handler: multiplier.ast.Stmt
  is_cxx_try: bool
  try_block: multiplier.ast.CompoundStmt
  try_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.SEHTryStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.SEHTryStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SEHTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SEHTryStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SEHTryStmt]:
    ...

class SEHLeaveStmt(multiplier.ast.Stmt):
  leave_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.SEHLeaveStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.SEHLeaveStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SEHLeaveStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SEHLeaveStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SEHLeaveStmt]:
    ...

class SEHFinallyStmt(multiplier.ast.Stmt):
  block: multiplier.ast.CompoundStmt
  finally_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.SEHFinallyStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.SEHFinallyStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SEHFinallyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SEHFinallyStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SEHFinallyStmt]:
    ...

class SEHExceptStmt(multiplier.ast.Stmt):
  block: multiplier.ast.CompoundStmt
  except_token: multiplier.frontend.Token
  filter_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.SEHExceptStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.SEHExceptStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SEHExceptStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SEHExceptStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SEHExceptStmt]:
    ...

class ReturnStmt(multiplier.ast.Stmt):
  nrvo_candidate: Optional[multiplier.ast.VarDecl]
  return_value: Optional[multiplier.ast.Expr]
  return_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ReturnStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ReturnStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ReturnStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ReturnStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ReturnStmt]:
    ...

class ObjCForCollectionStmt(multiplier.ast.Stmt):
  body: multiplier.ast.Stmt
  collection: multiplier.ast.Expr
  element: multiplier.ast.Stmt
  for_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCForCollectionStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCForCollectionStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCForCollectionStmt]:
    ...

class ObjCAutoreleasePoolStmt(multiplier.ast.Stmt):
  at_token: multiplier.frontend.Token
  sub_statement: multiplier.ast.Stmt

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCAutoreleasePoolStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAutoreleasePoolStmt]:
    ...

class ObjCAtTryStmt(multiplier.ast.Stmt):
  at_try_token: multiplier.frontend.Token
  finally_statement: multiplier.ast.ObjCAtFinallyStmt
  try_body: multiplier.ast.Stmt
  num_catch_statements: int
  catch_statements: Generator[multiplier.ast.ObjCAtCatchStmt]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCAtTryStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCAtTryStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCAtTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCAtTryStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAtTryStmt]:
    ...

  def nth_catch_statement(self, n: int) -> Optional[multiplier.ast.ObjCAtCatchStmt]:
    ...

class ObjCAtThrowStmt(multiplier.ast.Stmt):
  throw_expression: multiplier.ast.Expr
  throw_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCAtThrowStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCAtThrowStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAtThrowStmt]:
    ...

class ObjCAtSynchronizedStmt(multiplier.ast.Stmt):
  at_synchronized_token: multiplier.frontend.Token
  synch_body: multiplier.ast.CompoundStmt
  synch_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCAtSynchronizedStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAtSynchronizedStmt]:
    ...

class ObjCAtFinallyStmt(multiplier.ast.Stmt):
  at_finally_token: multiplier.frontend.Token
  finally_body: multiplier.ast.Stmt

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCAtFinallyStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCAtFinallyStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAtFinallyStmt]:
    ...

class ObjCAtCatchStmt(multiplier.ast.Stmt):
  at_catch_token: multiplier.frontend.Token
  catch_body: multiplier.ast.Stmt
  catch_parameter_declaration: multiplier.ast.VarDecl
  r_paren_token: multiplier.frontend.Token
  has_ellipsis: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCAtCatchStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCAtCatchStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAtCatchStmt]:
    ...

class OMPExecutableDirective(multiplier.ast.Stmt):
  associated_statement: multiplier.ast.Stmt
  innermost_captured_statement: multiplier.ast.CapturedStmt
  raw_statement: multiplier.ast.Stmt
  structured_block: multiplier.ast.Stmt
  has_associated_statement: bool
  is_standalone_directive: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPExecutableDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPExecutableDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPExecutableDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPExecutableDirective]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPExecutableDirective]:
    ...

class OMPErrorDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPErrorDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPErrorDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPErrorDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPErrorDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPErrorDirective]:
    ...

class OMPDispatchDirective(multiplier.ast.OMPExecutableDirective):
  target_call_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPDispatchDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPDispatchDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDispatchDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDispatchDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPDispatchDirective]:
    ...

class OMPDepobjDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPDepobjDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPDepobjDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDepobjDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDepobjDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPDepobjDirective]:
    ...

class OMPCriticalDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPCriticalDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPCriticalDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPCriticalDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPCriticalDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPCriticalDirective]:
    ...

class OMPCancellationPointDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPCancellationPointDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPCancellationPointDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPCancellationPointDirective]:
    ...

class OMPCancelDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPCancelDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPCancelDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPCancelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPCancelDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPCancelDirective]:
    ...

class OMPBarrierDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPBarrierDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPBarrierDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPBarrierDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPBarrierDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPBarrierDirective]:
    ...

class OMPAtomicDirective(multiplier.ast.OMPExecutableDirective):
  condition_expression: multiplier.ast.Expr
  d: multiplier.ast.Expr
  expression: multiplier.ast.Expr
  r: multiplier.ast.Expr
  update_expression: multiplier.ast.Expr
  v: multiplier.ast.Expr
  x: multiplier.ast.Expr
  is_fail_only: bool
  is_postfix_update: bool
  is_xlhs_in_rhs_part: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPAtomicDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPAtomicDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPAtomicDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPAtomicDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPAtomicDirective]:
    ...

class OMPTeamsDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTeamsDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTeamsDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTeamsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTeamsDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTeamsDirective]:
    ...

class OMPTaskyieldDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTaskyieldDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTaskyieldDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTaskyieldDirective]:
    ...

class OMPTaskwaitDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTaskwaitDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTaskwaitDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTaskwaitDirective]:
    ...

class OMPTaskgroupDirective(multiplier.ast.OMPExecutableDirective):
  reduction_reference: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTaskgroupDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTaskgroupDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTaskgroupDirective]:
    ...

class OMPTaskDirective(multiplier.ast.OMPExecutableDirective):
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTaskDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTaskDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTaskDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTaskDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTaskDirective]:
    ...

class OMPTargetUpdateDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetUpdateDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetUpdateDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetUpdateDirective]:
    ...

class OMPTargetTeamsDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetTeamsDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetTeamsDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetTeamsDirective]:
    ...

class OMPTargetParallelDirective(multiplier.ast.OMPExecutableDirective):
  task_reduction_reference_expression: multiplier.ast.Expr
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetParallelDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetParallelDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetParallelDirective]:
    ...

class OMPTargetExitDataDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetExitDataDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetExitDataDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetExitDataDirective]:
    ...

class OMPTargetEnterDataDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetEnterDataDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetEnterDataDirective]:
    ...

class OMPTargetDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetDirective]:
    ...

class OMPTargetDataDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetDataDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetDataDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetDataDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetDataDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetDataDirective]:
    ...

class OMPSingleDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPSingleDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPSingleDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPSingleDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPSingleDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPSingleDirective]:
    ...

class OMPSectionsDirective(multiplier.ast.OMPExecutableDirective):
  task_reduction_reference_expression: multiplier.ast.Expr
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPSectionsDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPSectionsDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPSectionsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPSectionsDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPSectionsDirective]:
    ...

class OMPSectionDirective(multiplier.ast.OMPExecutableDirective):
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPSectionDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPSectionDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPSectionDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPSectionDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPSectionDirective]:
    ...

class OMPScanDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPScanDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPScanDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPScanDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPScanDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPScanDirective]:
    ...

class OMPParallelSectionsDirective(multiplier.ast.OMPExecutableDirective):
  task_reduction_reference_expression: multiplier.ast.Expr
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPParallelSectionsDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPParallelSectionsDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelSectionsDirective]:
    ...

class OMPParallelMasterDirective(multiplier.ast.OMPExecutableDirective):
  task_reduction_reference_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPParallelMasterDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPParallelMasterDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelMasterDirective]:
    ...

class OMPParallelMaskedDirective(multiplier.ast.OMPExecutableDirective):
  task_reduction_reference_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPParallelMaskedDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPParallelMaskedDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelMaskedDirective]:
    ...

class OMPParallelDirective(multiplier.ast.OMPExecutableDirective):
  task_reduction_reference_expression: multiplier.ast.Expr
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPParallelDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPParallelDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPParallelDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPParallelDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelDirective]:
    ...

class OMPOrderedDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPOrderedDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPOrderedDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPOrderedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPOrderedDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPOrderedDirective]:
    ...

class OMPMetaDirective(multiplier.ast.OMPExecutableDirective):
  if_statement: multiplier.ast.Stmt

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPMetaDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPMetaDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPMetaDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPMetaDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMetaDirective]:
    ...

class OMPMasterDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPMasterDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPMasterDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPMasterDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPMasterDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMasterDirective]:
    ...

class OMPMaskedDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPMaskedDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPMaskedDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPMaskedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPMaskedDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMaskedDirective]:
    ...

class OMPLoopBasedDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPLoopBasedDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPLoopBasedDirective]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPLoopBasedDirective]:
    ...

class OMPLoopTransformationDirective(multiplier.ast.OMPLoopBasedDirective):
  pre_initializers: multiplier.ast.Stmt
  transformed_statement: multiplier.ast.Stmt

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPLoopTransformationDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPLoopTransformationDirective]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPLoopTransformationDirective]:
    ...

class OMPUnrollDirective(multiplier.ast.OMPLoopTransformationDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPUnrollDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPUnrollDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPUnrollDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPUnrollDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPUnrollDirective]:
    ...

class OMPTileDirective(multiplier.ast.OMPLoopTransformationDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTileDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTileDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTileDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTileDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTileDirective]:
    ...

class OMPLoopDirective(multiplier.ast.OMPLoopBasedDirective):
  num_counters: int
  counters: Generator[multiplier.ast.Expr]
  num_dependent_counters: int
  dependent_counters: Generator[multiplier.ast.Expr]
  num_dependent_initializers: int
  dependent_initializers: Generator[multiplier.ast.Expr]
  num_finals: int
  finals: Generator[multiplier.ast.Expr]
  num_finals_conditions: int
  finals_conditions: Generator[multiplier.ast.Expr]
  body: multiplier.ast.Stmt
  calculate_last_iteration: multiplier.ast.Expr
  combined_condition: multiplier.ast.Expr
  combined_distance_condition: multiplier.ast.Expr
  combined_ensure_upper_bound: multiplier.ast.Expr
  combined_initializer: multiplier.ast.Expr
  combined_lower_bound_variable: multiplier.ast.Expr
  combined_next_lower_bound: multiplier.ast.Expr
  combined_next_upper_bound: multiplier.ast.Expr
  combined_parallel_for_in_distance_condition: multiplier.ast.Expr
  combined_upper_bound_variable: multiplier.ast.Expr
  condition: multiplier.ast.Expr
  distance_increment: multiplier.ast.Expr
  ensure_upper_bound: multiplier.ast.Expr
  increment: multiplier.ast.Expr
  initializer: multiplier.ast.Expr
  is_last_iteration_variable: multiplier.ast.Expr
  iteration_variable: multiplier.ast.Expr
  last_iteration: multiplier.ast.Expr
  lower_bound_variable: multiplier.ast.Expr
  next_lower_bound: multiplier.ast.Expr
  next_upper_bound: multiplier.ast.Expr
  pre_condition: multiplier.ast.Expr
  pre_initializers: multiplier.ast.Stmt
  prev_ensure_upper_bound: multiplier.ast.Expr
  prev_lower_bound_variable: multiplier.ast.Expr
  prev_upper_bound_variable: multiplier.ast.Expr
  stride_variable: multiplier.ast.Expr
  upper_bound_variable: multiplier.ast.Expr
  num_initializers: int
  initializers: Generator[multiplier.ast.Expr]
  num_private_counters: int
  private_counters: Generator[multiplier.ast.Expr]
  num_updates: int
  updates: Generator[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPLoopDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPLoopDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPLoopDirective]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPLoopDirective]:
    ...

  def nth_counter(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

  def nth_dependent_counter(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

  def nth_dependent_initializer(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

  def nth_final(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

  def nth_finals_condition(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

  def nth_initializer(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

  def nth_private_counter(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

  def nth_update(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class OMPGenericLoopDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPGenericLoopDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPGenericLoopDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPGenericLoopDirective]:
    ...

class OMPForSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPForSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPForSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPForSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPForSimdDirective]:
    ...

class OMPForDirective(multiplier.ast.OMPLoopDirective):
  task_reduction_reference_expression: multiplier.ast.Expr
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPForDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPForDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPForDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPForDirective]:
    ...

class OMPDistributeSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPDistributeSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDistributeSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPDistributeSimdDirective]:
    ...

class OMPDistributeParallelForSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPDistributeParallelForSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPDistributeParallelForSimdDirective]:
    ...

class OMPDistributeParallelForDirective(multiplier.ast.OMPLoopDirective):
  task_reduction_reference_expression: multiplier.ast.Expr
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPDistributeParallelForDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPDistributeParallelForDirective]:
    ...

class OMPDistributeDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPDistributeDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPDistributeDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDistributeDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPDistributeDirective]:
    ...

class OMPTeamsGenericLoopDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTeamsGenericLoopDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTeamsGenericLoopDirective]:
    ...

class OMPTeamsDistributeSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTeamsDistributeSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTeamsDistributeSimdDirective]:
    ...

class OMPTeamsDistributeParallelForSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForSimdDirective]:
    ...

class OMPTeamsDistributeParallelForDirective(multiplier.ast.OMPLoopDirective):
  task_reduction_reference_expression: multiplier.ast.Expr
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTeamsDistributeParallelForDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTeamsDistributeParallelForDirective]:
    ...

class OMPTeamsDistributeDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTeamsDistributeDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTeamsDistributeDirective]:
    ...

class OMPTaskLoopSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTaskLoopSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTaskLoopSimdDirective]:
    ...

class OMPTaskLoopDirective(multiplier.ast.OMPLoopDirective):
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTaskLoopDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTaskLoopDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTaskLoopDirective]:
    ...

class OMPTargetTeamsGenericLoopDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetTeamsGenericLoopDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetTeamsGenericLoopDirective]:
    ...

class OMPTargetTeamsDistributeSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetTeamsDistributeSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetTeamsDistributeSimdDirective]:
    ...

class OMPTargetTeamsDistributeParallelForSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForSimdDirective]:
    ...

class OMPTargetTeamsDistributeParallelForDirective(multiplier.ast.OMPLoopDirective):
  task_reduction_reference_expression: multiplier.ast.Expr
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetTeamsDistributeParallelForDirective]:
    ...

class OMPTargetTeamsDistributeDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetTeamsDistributeDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetTeamsDistributeDirective]:
    ...

class OMPTargetSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetSimdDirective]:
    ...

class OMPTargetParallelGenericLoopDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetParallelGenericLoopDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetParallelGenericLoopDirective]:
    ...

class OMPTargetParallelForSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetParallelForSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetParallelForSimdDirective]:
    ...

class OMPTargetParallelForDirective(multiplier.ast.OMPLoopDirective):
  task_reduction_reference_expression: multiplier.ast.Expr
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPTargetParallelForDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPTargetParallelForDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPTargetParallelForDirective]:
    ...

class OMPSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPSimdDirective]:
    ...

class OMPParallelMasterTaskLoopSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopSimdDirective]:
    ...

class OMPParallelMasterTaskLoopDirective(multiplier.ast.OMPLoopDirective):
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPParallelMasterTaskLoopDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelMasterTaskLoopDirective]:
    ...

class OMPParallelMaskedTaskLoopSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopSimdDirective]:
    ...

class OMPParallelMaskedTaskLoopDirective(multiplier.ast.OMPLoopDirective):
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPParallelMaskedTaskLoopDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelMaskedTaskLoopDirective]:
    ...

class OMPParallelGenericLoopDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPParallelGenericLoopDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelGenericLoopDirective]:
    ...

class OMPParallelForSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPParallelForSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPParallelForSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelForSimdDirective]:
    ...

class OMPParallelForDirective(multiplier.ast.OMPLoopDirective):
  task_reduction_reference_expression: multiplier.ast.Expr
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPParallelForDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPParallelForDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPParallelForDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPParallelForDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPParallelForDirective]:
    ...

class OMPMasterTaskLoopSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPMasterTaskLoopSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMasterTaskLoopSimdDirective]:
    ...

class OMPMasterTaskLoopDirective(multiplier.ast.OMPLoopDirective):
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPMasterTaskLoopDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMasterTaskLoopDirective]:
    ...

class OMPMaskedTaskLoopSimdDirective(multiplier.ast.OMPLoopDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPMaskedTaskLoopSimdDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMaskedTaskLoopSimdDirective]:
    ...

class OMPMaskedTaskLoopDirective(multiplier.ast.OMPLoopDirective):
  has_cancel: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPMaskedTaskLoopDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPMaskedTaskLoopDirective]:
    ...

class OMPInteropDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPInteropDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPInteropDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPInteropDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPInteropDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPInteropDirective]:
    ...

class OMPFlushDirective(multiplier.ast.OMPExecutableDirective):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPFlushDirective, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPFlushDirective]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPFlushDirective]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPFlushDirective]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPFlushDirective]:
    ...

class OMPCanonicalLoop(multiplier.ast.Stmt):
  distance_func: multiplier.ast.CapturedStmt
  loop_statement: multiplier.ast.Stmt
  loop_variable_func: multiplier.ast.CapturedStmt
  loop_variable_reference: multiplier.ast.DeclRefExpr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPCanonicalLoop, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPCanonicalLoop]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPCanonicalLoop]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPCanonicalLoop]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPCanonicalLoop]:
    ...

class NullStmt(multiplier.ast.Stmt):
  semi_token: multiplier.frontend.Token
  has_leading_empty_macro: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.NullStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.NullStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NullStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NullStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.NullStmt]:
    ...

class MSDependentExistsStmt(multiplier.ast.Stmt):
  keyword_token: multiplier.frontend.Token
  sub_statement: multiplier.ast.CompoundStmt
  is_if_exists: bool
  is_if_not_exists: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.MSDependentExistsStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.MSDependentExistsStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSDependentExistsStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSDependentExistsStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MSDependentExistsStmt]:
    ...

class IndirectGotoStmt(multiplier.ast.Stmt):
  constant_target: Optional[multiplier.ast.LabelDecl]
  goto_token: multiplier.frontend.Token
  star_token: multiplier.frontend.Token
  target: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.IndirectGotoStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.IndirectGotoStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.IndirectGotoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.IndirectGotoStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.IndirectGotoStmt]:
    ...

class IfStmt(multiplier.ast.Stmt):
  condition: multiplier.ast.Expr
  condition_variable: Optional[multiplier.ast.VarDecl]
  condition_variable_declaration_statement: Optional[multiplier.ast.DeclStmt]
  else_: Optional[multiplier.ast.Stmt]
  else_token: multiplier.frontend.Token
  if_token: multiplier.frontend.Token
  initializer: Optional[multiplier.ast.Stmt]
  l_paren_token: multiplier.frontend.Token
  nondiscarded_case: Optional[multiplier.ast.Stmt]
  r_paren_token: multiplier.frontend.Token
  statement_kind: multiplier.ast.IfStatementKind
  then: multiplier.ast.Stmt
  has_else_storage: bool
  has_initializer_storage: bool
  has_variable_storage: bool
  is_consteval: bool
  is_constexpr: bool
  is_negated_consteval: bool
  is_non_negated_consteval: bool
  is_obj_c_availability_check: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.IfStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.IfStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.IfStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.IfStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.IfStmt]:
    ...

class GotoStmt(multiplier.ast.Stmt):
  goto_token: multiplier.frontend.Token
  label: multiplier.ast.LabelDecl
  label_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.GotoStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.GotoStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.GotoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.GotoStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.GotoStmt]:
    ...

class ForStmt(multiplier.ast.Stmt):
  body: multiplier.ast.Stmt
  condition: Optional[multiplier.ast.Expr]
  condition_variable: Optional[multiplier.ast.VarDecl]
  condition_variable_declaration_statement: Optional[multiplier.ast.DeclStmt]
  for_token: multiplier.frontend.Token
  increment: Optional[multiplier.ast.Expr]
  initializer: Optional[multiplier.ast.Stmt]
  l_paren_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ForStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ForStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ForStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ForStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ForStmt]:
    ...

class DoStmt(multiplier.ast.Stmt):
  body: multiplier.ast.Stmt
  condition: multiplier.ast.Expr
  do_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  while_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.DoStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.DoStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DoStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DoStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DoStmt]:
    ...

class DeclStmt(multiplier.ast.Stmt):
  num_declarations: int
  declarations: Generator[multiplier.ast.Decl]
  single_declaration: Optional[multiplier.ast.Decl]
  is_single_declaration: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.DeclStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.DeclStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DeclStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DeclStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DeclStmt]:
    ...

  def nth_declaration(self, n: int) -> Optional[multiplier.ast.Decl]:
    ...

class CoroutineBodyStmt(multiplier.ast.Stmt):
  children_excl_body: Generator[multiplier.ast.Stmt]
  allocate: multiplier.ast.Expr
  body: multiplier.ast.CompoundStmt
  deallocate: multiplier.ast.Expr
  exception_handler: multiplier.ast.Stmt
  fallthrough_handler: multiplier.ast.Stmt
  final_suspend_statement: multiplier.ast.Stmt
  initializer_suspend_statement: multiplier.ast.Stmt
  num_parameter_moves: int
  parameter_moves: Generator[multiplier.ast.Stmt]
  promise_declaration: multiplier.ast.VarDecl
  promise_declaration_statement: multiplier.ast.Stmt
  result_declaration: multiplier.ast.Stmt
  return_statement: multiplier.ast.Stmt
  return_statement_on_alloc_failure: multiplier.ast.Stmt
  return_value: multiplier.ast.Expr
  return_value_initializer: multiplier.ast.Expr
  has_dependent_promise_type: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CoroutineBodyStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CoroutineBodyStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CoroutineBodyStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CoroutineBodyStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CoroutineBodyStmt]:
    ...

  def nth_parameter_move(self, n: int) -> Optional[multiplier.ast.Stmt]:
    ...

class CoreturnStmt(multiplier.ast.Stmt):
  keyword_token: multiplier.frontend.Token
  operand: multiplier.ast.Expr
  promise_call: multiplier.ast.Expr
  is_implicit: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CoreturnStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CoreturnStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CoreturnStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CoreturnStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CoreturnStmt]:
    ...

class ContinueStmt(multiplier.ast.Stmt):
  continue_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ContinueStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ContinueStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ContinueStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ContinueStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ContinueStmt]:
    ...

class CompoundStmt(multiplier.ast.Stmt):
  left_brace_token: multiplier.frontend.Token
  right_brace_token: multiplier.frontend.Token
  statement_expression_result: Optional[multiplier.ast.Stmt]
  has_stored_fp_features: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CompoundStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CompoundStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CompoundStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CompoundStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CompoundStmt]:
    ...

class CapturedStmt(multiplier.ast.Stmt):
  captured_declaration: multiplier.ast.CapturedDecl
  captured_record_declaration: multiplier.ast.RecordDecl
  captured_region_kind: multiplier.ast.CapturedRegionKind
  captured_statement: multiplier.ast.Stmt

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CapturedStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CapturedStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CapturedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CapturedStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CapturedStmt]:
    ...

class CXXTryStmt(multiplier.ast.Stmt):
  try_block: multiplier.ast.CompoundStmt
  try_token: multiplier.frontend.Token
  num_handlers: int
  handlers: Generator[multiplier.ast.CXXCatchStmt]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXTryStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXTryStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXTryStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXTryStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXTryStmt]:
    ...

  def nth_handler(self, n: int) -> Optional[multiplier.ast.CXXCatchStmt]:
    ...

class CXXForRangeStmt(multiplier.ast.Stmt):
  begin_statement: Optional[multiplier.ast.DeclStmt]
  body: multiplier.ast.Stmt
  coawait_token: multiplier.frontend.Token
  colon_token: multiplier.frontend.Token
  condition: Optional[multiplier.ast.Expr]
  end_statement: Optional[multiplier.ast.DeclStmt]
  for_token: multiplier.frontend.Token
  increment: multiplier.ast.Expr
  initializer: Optional[multiplier.ast.Stmt]
  loop_variable_statement: multiplier.ast.DeclStmt
  loop_variable: multiplier.ast.VarDecl
  r_paren_token: multiplier.frontend.Token
  range_initializer: multiplier.ast.Expr
  range_statement: multiplier.ast.DeclStmt

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXForRangeStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXForRangeStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXForRangeStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXForRangeStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXForRangeStmt]:
    ...

class CXXCatchStmt(multiplier.ast.Stmt):
  catch_token: multiplier.frontend.Token
  caught_type: Optional[multiplier.ast.Type]
  exception_declaration: Optional[multiplier.ast.VarDecl]
  handler_block: multiplier.ast.Stmt

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXCatchStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXCatchStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXCatchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXCatchStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXCatchStmt]:
    ...

class BreakStmt(multiplier.ast.Stmt):
  break_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.BreakStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.BreakStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BreakStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BreakStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.BreakStmt]:
    ...

class AsmStmt(multiplier.ast.Stmt):
  generate_assembly_string: str
  assembly_token: multiplier.frontend.Token
  num_inputs: int
  inputs: Generator[multiplier.ast.Expr]
  is_simple: bool
  is_volatile: bool
  num_outputs: int
  outputs: Generator[multiplier.ast.Expr]
  output_constraints: Generator[str]
  num_output_expressions: int
  output_expressions: Generator[multiplier.ast.Expr]
  input_constraints: Generator[str]
  num_input_expressions: int
  input_expressions: Generator[multiplier.ast.Expr]
  clobbers: Generator[str]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.AsmStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.AsmStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AsmStmt]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.AsmStmt]:
    ...

  def nth_input(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

  def nth_output(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

  def nth_output_expression(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

  def nth_input_expression(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class MSAsmStmt(multiplier.ast.AsmStmt):
  all_constraints: Generator[str]
  num_all_expressions: int
  all_expressions: Generator[multiplier.ast.Expr]
  assembly_string: str
  l_brace_token: multiplier.frontend.Token
  has_braces: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.MSAsmStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.MSAsmStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSAsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSAsmStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MSAsmStmt]:
    ...

  def nth_all_expression(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class GCCAsmStmt(multiplier.ast.AsmStmt):
  assembly_string: multiplier.ast.StringLiteral
  r_paren_token: multiplier.frontend.Token
  is_assembly_goto: bool
  num_labels: int
  labels: Generator[multiplier.ast.AddrLabelExpr]
  num_clobber_string_literals: int
  clobber_string_literals: Generator[multiplier.ast.StringLiteral]
  output_names: Generator[str]
  num_output_constraint_literals: int
  output_constraint_literals: Generator[multiplier.ast.StringLiteral]
  input_names: Generator[str]
  num_input_constraint_literals: int
  input_constraint_literals: Generator[multiplier.ast.StringLiteral]
  num_label_expressions: int
  label_expressions: Generator[multiplier.ast.AddrLabelExpr]
  label_names: Generator[str]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.GCCAsmStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.GCCAsmStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.GCCAsmStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.GCCAsmStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.GCCAsmStmt]:
    ...

  def nth_label(self, n: int) -> Optional[multiplier.ast.AddrLabelExpr]:
    ...

  def nth_clobber_string_literal(self, n: int) -> Optional[multiplier.ast.StringLiteral]:
    ...

  def nth_output_constraint_literal(self, n: int) -> Optional[multiplier.ast.StringLiteral]:
    ...

  def nth_input_constraint_literal(self, n: int) -> Optional[multiplier.ast.StringLiteral]:
    ...

  def nth_label_expression(self, n: int) -> Optional[multiplier.ast.AddrLabelExpr]:
    ...

class WhileStmt(multiplier.ast.Stmt):
  body: multiplier.ast.Stmt
  condition: multiplier.ast.Expr
  condition_variable: Optional[multiplier.ast.VarDecl]
  condition_variable_declaration_statement: Optional[multiplier.ast.DeclStmt]
  l_paren_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  while_token: multiplier.frontend.Token
  has_variable_storage: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.WhileStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.WhileStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.WhileStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.WhileStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.WhileStmt]:
    ...

class ValueStmt(multiplier.ast.Stmt):
  expression_statement: Optional[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ValueStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ValueStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ValueStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ValueStmt]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ValueStmt]:
    ...

class LabelStmt(multiplier.ast.ValueStmt):
  declaration: multiplier.ast.LabelDecl
  identifier_token: multiplier.frontend.Token
  name: str
  sub_statement: multiplier.ast.Stmt
  is_side_entry: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.LabelStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.LabelStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LabelStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LabelStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.LabelStmt]:
    ...

class Expr(multiplier.ast.ValueStmt):
  has_side_effects: bool
  ignore_casts: multiplier.ast.Expr
  ignore_conversion_operator_single_step: multiplier.ast.Expr
  ignore_implicit_casts: multiplier.ast.Expr
  ignore_implicit: multiplier.ast.Expr
  ignore_implicit_as_written: multiplier.ast.Expr
  ignore_parenthesis_base_casts: multiplier.ast.Expr
  ignore_parenthesis_casts: multiplier.ast.Expr
  ignore_parenthesis_implicit_casts: multiplier.ast.Expr
  ignore_parenthesis_l_value_casts: multiplier.ast.Expr
  ignore_parenthesis_noop_casts: multiplier.ast.Expr
  ignore_parentheses: multiplier.ast.Expr
  ignore_unless_spelled_in_source: multiplier.ast.Expr
  contains_errors: bool
  contains_unexpanded_parameter_pack: bool
  dependence: multiplier.ast.ExprDependence
  expression_token: multiplier.frontend.Token
  obj_c_property: Optional[multiplier.ast.ObjCPropertyRefExpr]
  object_kind: multiplier.ast.ExprObjectKind
  referenced_declaration_of_callee: Optional[multiplier.ast.Decl]
  source_bit_field: Optional[multiplier.ast.FieldDecl]
  type: Optional[multiplier.ast.Type]
  value_kind: multiplier.ast.ExprValueKind
  has_non_trivial_call: bool
  is_default_argument: bool
  is_gl_value: bool
  is_implicit_cxx_this: bool
  is_instantiation_dependent: bool
  is_integer_constant_expression: Optional[bool]
  is_known_to_have_boolean_value: Optional[bool]
  is_l_value: bool
  is_objcgc_candidate: bool
  is_obj_c_self_expression: bool
  is_ordinary_or_bit_field_object: bool
  is_pr_value: bool
  is_read_if_discarded_in_c_plus_plus11: Optional[bool]
  is_type_dependent: bool
  is_value_dependent: bool
  is_x_value: bool
  refers_to_bit_field: bool
  refers_to_global_register_variable: bool
  refers_to_matrix_element: bool
  refers_to_vector_element: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.Expr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.Expr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.Expr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.Expr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.Expr]:
    ...

class DesignatedInitUpdateExpr(multiplier.ast.Expr):
  base: multiplier.ast.Expr
  updater: multiplier.ast.InitListExpr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.DesignatedInitUpdateExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DesignatedInitUpdateExpr]:
    ...

class DesignatedInitExpr(multiplier.ast.Expr):
  num_designators: int
  designators: Generator[multiplier.ast.Designator]
  designators_tokens: multiplier.frontend.TokenRange
  equal_or_colon_token: multiplier.frontend.Token
  initializer: multiplier.ast.Expr
  is_direct_initializer: bool
  uses_gnu_syntax: bool
  num_sub_expressions: int
  sub_expressions: Generator[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.DesignatedInitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.DesignatedInitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DesignatedInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DesignatedInitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DesignatedInitExpr]:
    ...

  def nth_designator(self, n: int) -> Optional[multiplier.ast.Designator]:
    ...

  def nth_sub_expression(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class DependentScopeDeclRefExpr(multiplier.ast.Expr):
  l_angle_token: multiplier.frontend.Token
  r_angle_token: multiplier.frontend.Token
  template_keyword_token: multiplier.frontend.Token
  has_explicit_template_arguments: bool
  has_template_keyword: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.DependentScopeDeclRefExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DependentScopeDeclRefExpr]:
    ...

class DependentCoawaitExpr(multiplier.ast.Expr):
  keyword_token: multiplier.frontend.Token
  operand: multiplier.ast.Expr
  operator_coawait_lookup: multiplier.ast.UnresolvedLookupExpr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.DependentCoawaitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.DependentCoawaitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DependentCoawaitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DependentCoawaitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DependentCoawaitExpr]:
    ...

class DeclRefExpr(multiplier.ast.Expr):
  declaration: multiplier.ast.ValueDecl
  found_declaration: multiplier.ast.NamedDecl
  l_angle_token: multiplier.frontend.Token
  r_angle_token: multiplier.frontend.Token
  template_keyword_token: multiplier.frontend.Token
  had_multiple_candidates: bool
  has_explicit_template_arguments: bool
  has_qualifier: bool
  has_template_keyword_and_arguments_info: bool
  has_template_keyword: bool
  is_immediate_escalating: bool
  is_non_odr_use: multiplier.ast.NonOdrUseReason
  refers_to_enclosing_variable_or_capture: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.DeclRefExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.DeclRefExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DeclRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DeclRefExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DeclRefExpr]:
    ...

class CoroutineSuspendExpr(multiplier.ast.Expr):
  common_expression: multiplier.ast.Expr
  keyword_token: multiplier.frontend.Token
  opaque_value: multiplier.ast.OpaqueValueExpr
  operand: multiplier.ast.Expr
  ready_expression: multiplier.ast.Expr
  resume_expression: multiplier.ast.Expr
  suspend_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CoroutineSuspendExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CoroutineSuspendExpr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CoroutineSuspendExpr]:
    ...

class CoawaitExpr(multiplier.ast.CoroutineSuspendExpr):
  is_implicit: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CoawaitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CoawaitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CoawaitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CoawaitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CoawaitExpr]:
    ...

class CoyieldExpr(multiplier.ast.CoroutineSuspendExpr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CoyieldExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CoyieldExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CoyieldExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CoyieldExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CoyieldExpr]:
    ...

class ConvertVectorExpr(multiplier.ast.Expr):
  builtin_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  src_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ConvertVectorExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ConvertVectorExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConvertVectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConvertVectorExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ConvertVectorExpr]:
    ...

class ConceptSpecializationExpr(multiplier.ast.Expr):
  specialization_declaration: multiplier.ast.ImplicitConceptSpecializationDecl
  num_template_arguments: int
  template_arguments: Generator[multiplier.ast.TemplateArgument]
  is_satisfied: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ConceptSpecializationExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConceptSpecializationExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ConceptSpecializationExpr]:
    ...

  def nth_template_argument(self, n: int) -> Optional[multiplier.ast.TemplateArgument]:
    ...

class CompoundLiteralExpr(multiplier.ast.Expr):
  initializer: multiplier.ast.Expr
  l_paren_token: multiplier.frontend.Token
  is_file_scope: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CompoundLiteralExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CompoundLiteralExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CompoundLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CompoundLiteralExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CompoundLiteralExpr]:
    ...

class ChooseExpr(multiplier.ast.Expr):
  builtin_token: multiplier.frontend.Token
  chosen_sub_expression: multiplier.ast.Expr
  condition: multiplier.ast.Expr
  lhs: multiplier.ast.Expr
  rhs: multiplier.ast.Expr
  r_paren_token: multiplier.frontend.Token
  is_condition_dependent: bool
  is_condition_true: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ChooseExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ChooseExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ChooseExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ChooseExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ChooseExpr]:
    ...

class CharacterLiteral(multiplier.ast.Expr):
  literal_kind: multiplier.ast.CharacterLiteralCharacterKind
  token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CharacterLiteral, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CharacterLiteral]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CharacterLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CharacterLiteral]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CharacterLiteral]:
    ...

class CastExpr(multiplier.ast.Expr):
  cast_kind: multiplier.ast.CastKind
  cast_kind_name: str
  conversion_function: Optional[multiplier.ast.NamedDecl]
  sub_expression: multiplier.ast.Expr
  sub_expression_as_written: multiplier.ast.Expr
  target_union_field: Optional[multiplier.ast.FieldDecl]
  has_stored_fp_features: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CastExpr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CastExpr]:
    ...

class ImplicitCastExpr(multiplier.ast.CastExpr):
  is_part_of_explicit_cast: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ImplicitCastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ImplicitCastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ImplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ImplicitCastExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ImplicitCastExpr]:
    ...

class ExplicitCastExpr(multiplier.ast.CastExpr):
  type_as_written: multiplier.ast.Type

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ExplicitCastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ExplicitCastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ExplicitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ExplicitCastExpr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ExplicitCastExpr]:
    ...

class CXXNamedCastExpr(multiplier.ast.ExplicitCastExpr):
  angle_brackets: multiplier.frontend.TokenRange
  cast_name: str
  operator_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXNamedCastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXNamedCastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXNamedCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXNamedCastExpr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXNamedCastExpr]:
    ...

class CXXDynamicCastExpr(multiplier.ast.CXXNamedCastExpr):
  is_always_null: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXDynamicCastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXDynamicCastExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXDynamicCastExpr]:
    ...

class CXXConstCastExpr(multiplier.ast.CXXNamedCastExpr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXConstCastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXConstCastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXConstCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXConstCastExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXConstCastExpr]:
    ...

class CXXAddrspaceCastExpr(multiplier.ast.CXXNamedCastExpr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXAddrspaceCastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXAddrspaceCastExpr]:
    ...

class CXXStaticCastExpr(multiplier.ast.CXXNamedCastExpr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXStaticCastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXStaticCastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXStaticCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXStaticCastExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXStaticCastExpr]:
    ...

class CXXReinterpretCastExpr(multiplier.ast.CXXNamedCastExpr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXReinterpretCastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXReinterpretCastExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXReinterpretCastExpr]:
    ...

class CXXFunctionalCastExpr(multiplier.ast.ExplicitCastExpr):
  l_paren_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  is_list_initialization: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXFunctionalCastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXFunctionalCastExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXFunctionalCastExpr]:
    ...

class CStyleCastExpr(multiplier.ast.ExplicitCastExpr):
  l_paren_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CStyleCastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CStyleCastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CStyleCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CStyleCastExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CStyleCastExpr]:
    ...

class BuiltinBitCastExpr(multiplier.ast.ExplicitCastExpr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.BuiltinBitCastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BuiltinBitCastExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.BuiltinBitCastExpr]:
    ...

class ObjCBridgedCastExpr(multiplier.ast.ExplicitCastExpr):
  bridge_keyword_token: multiplier.frontend.Token
  bridge_kind: multiplier.ast.ObjCBridgeCastKind
  bridge_kind_name: str
  l_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCBridgedCastExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCBridgedCastExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCBridgedCastExpr]:
    ...

class CallExpr(multiplier.ast.Expr):
  num_arguments: int
  arguments: Generator[multiplier.ast.Expr]
  adl_call_kind: multiplier.ast.CallExprADLCallKind
  call_return_type: multiplier.ast.Type
  callee: multiplier.ast.Expr
  callee_declaration: Optional[multiplier.ast.Decl]
  direct_callee: Optional[multiplier.ast.FunctionDecl]
  r_paren_token: multiplier.frontend.Token
  has_stored_fp_features: bool
  has_unused_result_attribute: bool
  is_builtin_assume_false: bool
  is_call_to_std_move: bool
  is_unevaluated_builtin_call: bool
  uses_adl: bool
  casted_return_type: Optional[multiplier.ast.Type]
  casted_return_value: Optional[multiplier.ast.CastExpr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CallExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CallExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CallExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CallExpr]:
    ...

  def nth_argument(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class CXXOperatorCallExpr(multiplier.ast.CallExpr):
  operator_: multiplier.ast.OverloadedOperatorKind
  operator_token: multiplier.frontend.Token
  is_assignment_operation: bool
  is_comparison_operation: bool
  is_infix_binary_operation: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXOperatorCallExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXOperatorCallExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXOperatorCallExpr]:
    ...

class CXXMemberCallExpr(multiplier.ast.CallExpr):
  implicit_object_argument: multiplier.ast.Expr
  method_declaration: Optional[multiplier.ast.CXXMethodDecl]
  object_type: multiplier.ast.Type
  record_declaration: multiplier.ast.CXXRecordDecl

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXMemberCallExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXMemberCallExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXMemberCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXMemberCallExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXMemberCallExpr]:
    ...

class CUDAKernelCallExpr(multiplier.ast.CallExpr):
  config: multiplier.ast.CallExpr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CUDAKernelCallExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CUDAKernelCallExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CUDAKernelCallExpr]:
    ...

class UserDefinedLiteral(multiplier.ast.CallExpr):
  cooked_literal: multiplier.ast.Expr
  literal_operator_kind: multiplier.ast.UserDefinedLiteralLiteralOperatorKind
  ud_suffix_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UserDefinedLiteral, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UserDefinedLiteral]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UserDefinedLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UserDefinedLiteral]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.UserDefinedLiteral]:
    ...

class CXXUuidofExpr(multiplier.ast.Expr):
  expression_operand: Optional[multiplier.ast.Expr]
  guid_declaration: multiplier.ast.MSGuidDecl
  type_operand: multiplier.ast.Type
  type_operand_source_info: multiplier.ast.Type
  is_type_operand: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXUuidofExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXUuidofExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXUuidofExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXUuidofExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXUuidofExpr]:
    ...

class CXXUnresolvedConstructExpr(multiplier.ast.Expr):
  num_arguments: int
  arguments: Generator[multiplier.ast.Expr]
  l_paren_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  type_as_written: multiplier.ast.Type
  is_list_initialization: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXUnresolvedConstructExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXUnresolvedConstructExpr]:
    ...

  def nth_argument(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class CXXTypeidExpr(multiplier.ast.Expr):
  expression_operand: Optional[multiplier.ast.Expr]
  type_operand: multiplier.ast.Type
  type_operand_source_info: multiplier.ast.Type
  is_most_derived: Optional[bool]
  is_potentially_evaluated: bool
  is_type_operand: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXTypeidExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXTypeidExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXTypeidExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXTypeidExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXTypeidExpr]:
    ...

class CXXThrowExpr(multiplier.ast.Expr):
  sub_expression: Optional[multiplier.ast.Expr]
  throw_token: multiplier.frontend.Token
  is_thrown_variable_in_scope: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXThrowExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXThrowExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXThrowExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXThrowExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXThrowExpr]:
    ...

class CXXThisExpr(multiplier.ast.Expr):
  token: multiplier.frontend.Token
  is_implicit: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXThisExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXThisExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXThisExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXThisExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXThisExpr]:
    ...

class CXXStdInitializerListExpr(multiplier.ast.Expr):
  sub_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXStdInitializerListExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXStdInitializerListExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXStdInitializerListExpr]:
    ...

class CXXScalarValueInitExpr(multiplier.ast.Expr):
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXScalarValueInitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXScalarValueInitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXScalarValueInitExpr]:
    ...

class CXXRewrittenBinaryOperator(multiplier.ast.Expr):
  lhs: multiplier.ast.Expr
  opcode: multiplier.ast.BinaryOperatorKind
  opcode_string: str
  operator_: multiplier.ast.BinaryOperatorKind
  operator_token: multiplier.frontend.Token
  rhs: multiplier.ast.Expr
  semantic_form: multiplier.ast.Expr
  is_assignment_operation: bool
  is_comparison_operation: bool
  is_reversed: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXRewrittenBinaryOperator, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXRewrittenBinaryOperator]:
    ...

class CXXPseudoDestructorExpr(multiplier.ast.Expr):
  base: multiplier.ast.Expr
  colon_colon_token: multiplier.frontend.Token
  destroyed_type: multiplier.ast.Type
  destroyed_type_token: multiplier.frontend.Token
  operator_token: multiplier.frontend.Token
  tilde_token: multiplier.frontend.Token
  has_qualifier: bool
  is_arrow: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXPseudoDestructorExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXPseudoDestructorExpr]:
    ...

class CXXParenListInitExpr(multiplier.ast.Expr):
  array_filler: multiplier.ast.Expr
  initializer_token: multiplier.frontend.Token
  initialized_field_in_union: multiplier.ast.FieldDecl

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXParenListInitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXParenListInitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXParenListInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXParenListInitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXParenListInitExpr]:
    ...

class CXXNullPtrLiteralExpr(multiplier.ast.Expr):
  token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXNullPtrLiteralExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXNullPtrLiteralExpr]:
    ...

class CXXNoexceptExpr(multiplier.ast.Expr):
  operand: multiplier.ast.Expr
  value: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXNoexceptExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXNoexceptExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXNoexceptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXNoexceptExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXNoexceptExpr]:
    ...

class CXXNewExpr(multiplier.ast.Expr):
  does_usual_array_delete_want_size: bool
  allocated_type: multiplier.ast.Type
  array_size: Optional[multiplier.ast.Expr]
  construct_expression: Optional[multiplier.ast.CXXConstructExpr]
  direct_initializer_range: multiplier.frontend.TokenRange
  initialization_style: multiplier.ast.CXXNewExprInitializationStyle
  initializer: Optional[multiplier.ast.Expr]
  operator_delete: Optional[multiplier.ast.FunctionDecl]
  operator_new: Optional[multiplier.ast.FunctionDecl]
  type_id_parentheses: multiplier.frontend.TokenRange
  has_initializer: bool
  is_array: bool
  is_global_new: bool
  is_parenthesis_type_id: bool
  pass_alignment: bool
  num_placement_arguments: int
  placement_arguments: Generator[multiplier.ast.Expr]
  should_null_check_allocation: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXNewExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXNewExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXNewExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXNewExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXNewExpr]:
    ...

  def nth_placement_argument(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class CXXInheritedCtorInitExpr(multiplier.ast.Expr):
  constructs_virtual_base: bool
  construction_kind: multiplier.ast.CXXConstructExprConstructionKind
  constructor: multiplier.ast.CXXConstructorDecl
  token: multiplier.frontend.Token
  inherited_from_virtual_base: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXInheritedCtorInitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXInheritedCtorInitExpr]:
    ...

class CXXFoldExpr(multiplier.ast.Expr):
  callee: Optional[multiplier.ast.UnresolvedLookupExpr]
  ellipsis_token: multiplier.frontend.Token
  initializer: Optional[multiplier.ast.Expr]
  lhs: Optional[multiplier.ast.Expr]
  l_paren_token: multiplier.frontend.Token
  operator_: multiplier.ast.BinaryOperatorKind
  pattern: multiplier.ast.Expr
  rhs: Optional[multiplier.ast.Expr]
  r_paren_token: multiplier.frontend.Token
  is_left_fold: bool
  is_right_fold: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXFoldExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXFoldExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXFoldExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXFoldExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXFoldExpr]:
    ...

class CXXDependentScopeMemberExpr(multiplier.ast.Expr):
  base: Optional[multiplier.ast.Expr]
  base_type: multiplier.ast.Type
  first_qualifier_found_in_scope: Optional[multiplier.ast.NamedDecl]
  l_angle_token: multiplier.frontend.Token
  member_token: multiplier.frontend.Token
  operator_token: multiplier.frontend.Token
  r_angle_token: multiplier.frontend.Token
  template_keyword_token: multiplier.frontend.Token
  has_explicit_template_arguments: bool
  has_template_keyword: bool
  is_arrow: bool
  is_implicit_access: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXDependentScopeMemberExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXDependentScopeMemberExpr]:
    ...

class CXXDeleteExpr(multiplier.ast.Expr):
  does_usual_array_delete_want_size: bool
  argument: multiplier.ast.Expr
  destroyed_type: Optional[multiplier.ast.Type]
  operator_delete: Optional[multiplier.ast.FunctionDecl]
  is_array_form: bool
  is_array_form_as_written: bool
  is_global_delete: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXDeleteExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXDeleteExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXDeleteExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXDeleteExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXDeleteExpr]:
    ...

class CXXDefaultInitExpr(multiplier.ast.Expr):
  expression: Optional[multiplier.ast.Expr]
  field: multiplier.ast.FieldDecl
  rewritten_expression: multiplier.ast.Expr
  used_token: multiplier.frontend.Token
  has_rewritten_initializer: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXDefaultInitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXDefaultInitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXDefaultInitExpr]:
    ...

class CXXDefaultArgExpr(multiplier.ast.Expr):
  adjusted_rewritten_expression: multiplier.ast.Expr
  expression: multiplier.ast.Expr
  parameter: multiplier.ast.ParmVarDecl
  rewritten_expression: Optional[multiplier.ast.Expr]
  used_token: multiplier.frontend.Token
  has_rewritten_initializer: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXDefaultArgExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXDefaultArgExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXDefaultArgExpr]:
    ...

class CXXConstructExpr(multiplier.ast.Expr):
  num_arguments: int
  arguments: Generator[multiplier.ast.Expr]
  construction_kind: multiplier.ast.CXXConstructExprConstructionKind
  constructor: multiplier.ast.CXXConstructorDecl
  token: multiplier.frontend.Token
  parenthesis_or_brace_range: multiplier.frontend.TokenRange
  had_multiple_candidates: bool
  is_elidable: bool
  is_immediate_escalating: bool
  is_list_initialization: bool
  is_std_initializer_list_initialization: bool
  requires_zero_initialization: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXConstructExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXConstructExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXConstructExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXConstructExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXConstructExpr]:
    ...

  def nth_argument(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class CXXTemporaryObjectExpr(multiplier.ast.CXXConstructExpr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXTemporaryObjectExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXTemporaryObjectExpr]:
    ...

class CXXBoolLiteralExpr(multiplier.ast.Expr):
  token: multiplier.frontend.Token
  value: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXBoolLiteralExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXBoolLiteralExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXBoolLiteralExpr]:
    ...

class CXXBindTemporaryExpr(multiplier.ast.Expr):
  sub_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXBindTemporaryExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXBindTemporaryExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CXXBindTemporaryExpr]:
    ...

class BlockExpr(multiplier.ast.Expr):
  block_declaration: multiplier.ast.BlockDecl
  body: multiplier.ast.Stmt
  caret_token: multiplier.frontend.Token
  function_type: multiplier.ast.FunctionProtoType

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.BlockExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.BlockExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BlockExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BlockExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.BlockExpr]:
    ...

class BinaryOperator(multiplier.ast.Expr):
  lhs: multiplier.ast.Expr
  opcode: multiplier.ast.BinaryOperatorKind
  opcode_string: str
  operator_token: multiplier.frontend.Token
  rhs: multiplier.ast.Expr
  has_stored_fp_features: bool
  is_additive_operation: bool
  is_assignment_operation: bool
  is_bitwise_operation: bool
  is_comma_operation: bool
  is_comparison_operation: bool
  is_compound_assignment_operation: bool
  is_equality_operation: bool
  is_logical_operation: bool
  is_multiplicative_operation: bool
  is_pointer_memory_operation: bool
  is_relational_operation: bool
  is_shift_assign_operation: bool
  is_shift_operation: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.BinaryOperator, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.BinaryOperator]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BinaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BinaryOperator]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.BinaryOperator]:
    ...

class CompoundAssignOperator(multiplier.ast.BinaryOperator):
  computation_lhs_type: multiplier.ast.Type
  computation_result_type: multiplier.ast.Type

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CompoundAssignOperator, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CompoundAssignOperator]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CompoundAssignOperator]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CompoundAssignOperator]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CompoundAssignOperator]:
    ...

class AtomicExpr(multiplier.ast.Expr):
  builtin_token: multiplier.frontend.Token
  operation: multiplier.ast.AtomicExprAtomicOp
  order: multiplier.ast.Expr
  order_fail: Optional[multiplier.ast.Expr]
  pointer: multiplier.ast.Expr
  r_paren_token: multiplier.frontend.Token
  scope: Optional[multiplier.ast.Expr]
  value1: Optional[multiplier.ast.Expr]
  value2: Optional[multiplier.ast.Expr]
  value_type: multiplier.ast.Type
  weak: Optional[multiplier.ast.Expr]
  is_cmp_x_chg: bool
  is_open_cl: bool
  is_volatile: bool
  num_sub_expressions: int
  sub_expressions: Generator[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.AtomicExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.AtomicExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AtomicExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AtomicExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.AtomicExpr]:
    ...

  def nth_sub_expression(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class AsTypeExpr(multiplier.ast.Expr):
  builtin_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  src_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.AsTypeExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.AsTypeExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AsTypeExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AsTypeExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.AsTypeExpr]:
    ...

class ArrayTypeTraitExpr(multiplier.ast.Expr):
  dimension_expression: multiplier.ast.Expr
  queried_type: multiplier.ast.Type
  trait: multiplier.ast.ArrayTypeTrait

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ArrayTypeTraitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ArrayTypeTraitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ArrayTypeTraitExpr]:
    ...

class ArraySubscriptExpr(multiplier.ast.Expr):
  base: multiplier.ast.Expr
  index: multiplier.ast.Expr
  lhs: multiplier.ast.Expr
  r_bracket_token: multiplier.frontend.Token
  rhs: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ArraySubscriptExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ArraySubscriptExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ArraySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ArraySubscriptExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ArraySubscriptExpr]:
    ...

class ArrayInitLoopExpr(multiplier.ast.Expr):
  common_expression: multiplier.ast.OpaqueValueExpr
  sub_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ArrayInitLoopExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ArrayInitLoopExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ArrayInitLoopExpr]:
    ...

class ArrayInitIndexExpr(multiplier.ast.Expr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ArrayInitIndexExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ArrayInitIndexExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ArrayInitIndexExpr]:
    ...

class AddrLabelExpr(multiplier.ast.Expr):
  amp_amp_token: multiplier.frontend.Token
  label: multiplier.ast.LabelDecl
  label_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.AddrLabelExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.AddrLabelExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AddrLabelExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AddrLabelExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.AddrLabelExpr]:
    ...

class AbstractConditionalOperator(multiplier.ast.Expr):
  colon_token: multiplier.frontend.Token
  condition: multiplier.ast.Expr
  false_expression: multiplier.ast.Expr
  question_token: multiplier.frontend.Token
  true_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.AbstractConditionalOperator, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.AbstractConditionalOperator]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AbstractConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AbstractConditionalOperator]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.AbstractConditionalOperator]:
    ...

class ConditionalOperator(multiplier.ast.AbstractConditionalOperator):
  lhs: multiplier.ast.Expr
  rhs: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ConditionalOperator, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ConditionalOperator]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConditionalOperator]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ConditionalOperator]:
    ...

class BinaryConditionalOperator(multiplier.ast.AbstractConditionalOperator):
  common: multiplier.ast.Expr
  opaque_value: multiplier.ast.OpaqueValueExpr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.BinaryConditionalOperator, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.BinaryConditionalOperator]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BinaryConditionalOperator]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BinaryConditionalOperator]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.BinaryConditionalOperator]:
    ...

class VAArgExpr(multiplier.ast.Expr):
  builtin_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  sub_expression: multiplier.ast.Expr
  is_microsoft_abi: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.VAArgExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.VAArgExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.VAArgExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.VAArgExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.VAArgExpr]:
    ...

class UnaryOperator(multiplier.ast.Expr):
  can_overflow: bool
  opcode: multiplier.ast.UnaryOperatorKind
  operator_token: multiplier.frontend.Token
  sub_expression: multiplier.ast.Expr
  has_stored_fp_features: bool
  is_arithmetic_operation: bool
  is_decrement_operation: bool
  is_increment_decrement_operation: bool
  is_increment_operation: bool
  is_postfix: bool
  is_prefix: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UnaryOperator, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UnaryOperator]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnaryOperator]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnaryOperator]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.UnaryOperator]:
    ...

class UnaryExprOrTypeTraitExpr(multiplier.ast.Expr):
  argument_expression: Optional[multiplier.ast.Expr]
  argument_type: Optional[multiplier.ast.Type]
  keyword_kind: multiplier.ast.UnaryExprOrTypeTrait
  operator_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  type_of_argument: multiplier.ast.Type
  is_argument_type: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UnaryExprOrTypeTraitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.UnaryExprOrTypeTraitExpr]:
    ...

class TypoExpr(multiplier.ast.Expr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TypoExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TypoExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypoExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypoExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.TypoExpr]:
    ...

class TypeTraitExpr(multiplier.ast.Expr):
  trait: multiplier.ast.TypeTrait
  value: Optional[bool]
  num_arguments: int
  arguments: Generator[multiplier.ast.Type]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TypeTraitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TypeTraitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeTraitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.TypeTraitExpr]:
    ...

  def nth_argument(self, n: int) -> Optional[multiplier.ast.Type]:
    ...

class SubstNonTypeTemplateParmPackExpr(multiplier.ast.Expr):
  associated_declaration: multiplier.ast.Decl
  parameter_pack: multiplier.ast.NonTypeTemplateParmDecl
  parameter_pack_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.SubstNonTypeTemplateParmPackExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SubstNonTypeTemplateParmPackExpr]:
    ...

class SubstNonTypeTemplateParmExpr(multiplier.ast.Expr):
  associated_declaration: multiplier.ast.Decl
  name_token: multiplier.frontend.Token
  pack_index: Optional[int]
  parameter: multiplier.ast.NonTypeTemplateParmDecl
  parameter_type: multiplier.ast.Type
  replacement: multiplier.ast.Expr
  is_reference_parameter: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.SubstNonTypeTemplateParmExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SubstNonTypeTemplateParmExpr]:
    ...

class StringLiteral(multiplier.ast.Expr):
  contains_non_ascii: Optional[bool]
  contains_non_ascii_or_null: Optional[bool]
  bytes: str
  literal_kind: multiplier.ast.StringLiteralStringKind
  string: Optional[str]
  is_ordinary: bool
  is_pascal: bool
  is_utf16: bool
  is_utf32: bool
  is_utf8: bool
  is_unevaluated: bool
  is_wide: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.StringLiteral, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.StringLiteral]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.StringLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.StringLiteral]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.StringLiteral]:
    ...

class StmtExpr(multiplier.ast.Expr):
  l_paren_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  sub_statement: multiplier.ast.CompoundStmt

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.StmtExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.StmtExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.StmtExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.StmtExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.StmtExpr]:
    ...

class SourceLocExpr(multiplier.ast.Expr):
  builtin_string: str
  identifier_kind: multiplier.ast.SourceLocExprIdentKind
  token: multiplier.frontend.Token
  is_int_type: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.SourceLocExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.SourceLocExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SourceLocExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SourceLocExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SourceLocExpr]:
    ...

class SizeOfPackExpr(multiplier.ast.Expr):
  operator_token: multiplier.frontend.Token
  pack: multiplier.ast.NamedDecl
  pack_length: Optional[int]
  pack_token: multiplier.frontend.Token
  partial_arguments: Optional[Sequence[multiplier.ast.TemplateArgument]]
  r_paren_token: multiplier.frontend.Token
  is_partially_substituted: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.SizeOfPackExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.SizeOfPackExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SizeOfPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SizeOfPackExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SizeOfPackExpr]:
    ...

class ShuffleVectorExpr(multiplier.ast.Expr):
  builtin_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ShuffleVectorExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ShuffleVectorExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ShuffleVectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ShuffleVectorExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ShuffleVectorExpr]:
    ...

class SYCLUniqueStableNameExpr(multiplier.ast.Expr):
  compute_name: str
  l_paren_token: multiplier.frontend.Token
  token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.SYCLUniqueStableNameExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SYCLUniqueStableNameExpr]:
    ...

class RequiresExpr(multiplier.ast.Expr):
  body: multiplier.ast.RequiresExprBodyDecl
  num_local_parameters: int
  local_parameters: Generator[multiplier.ast.ParmVarDecl]
  r_brace_token: multiplier.frontend.Token
  requires_keyword_token: multiplier.frontend.Token
  is_satisfied: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.RequiresExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.RequiresExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RequiresExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RequiresExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.RequiresExpr]:
    ...

  def nth_local_parameter(self, n: int) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

class RecoveryExpr(multiplier.ast.Expr):
  num_sub_expressions: int
  sub_expressions: Generator[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.RecoveryExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.RecoveryExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RecoveryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RecoveryExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.RecoveryExpr]:
    ...

  def nth_sub_expression(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class PseudoObjectExpr(multiplier.ast.Expr):
  result_expression: multiplier.ast.Expr
  syntactic_form: multiplier.ast.Expr
  num_semantics: int
  semantics: Generator[multiplier.ast.Expr]
  num_semantic_expressions: int
  semantic_expressions: Generator[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.PseudoObjectExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.PseudoObjectExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PseudoObjectExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PseudoObjectExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.PseudoObjectExpr]:
    ...

  def nth_semantic(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

  def nth_semantic_expression(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class PredefinedExpr(multiplier.ast.Expr):
  function_name: Optional[multiplier.ast.StringLiteral]
  identifier_kind: multiplier.ast.PredefinedExprIdentKind
  identifier_kind_name: str
  token: multiplier.frontend.Token
  is_transparent: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.PredefinedExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.PredefinedExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PredefinedExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PredefinedExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.PredefinedExpr]:
    ...

class ParenListExpr(multiplier.ast.Expr):
  l_paren_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  num_expressions: int
  expressions: Generator[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ParenListExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ParenListExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ParenListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ParenListExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ParenListExpr]:
    ...

  def nth_expression(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class ParenExpr(multiplier.ast.Expr):
  l_paren_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  sub_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ParenExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ParenExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ParenExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ParenExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ParenExpr]:
    ...

class PackExpansionExpr(multiplier.ast.Expr):
  ellipsis_token: multiplier.frontend.Token
  pattern: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.PackExpansionExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.PackExpansionExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PackExpansionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PackExpansionExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.PackExpansionExpr]:
    ...

class OverloadExpr(multiplier.ast.Expr):
  l_angle_token: multiplier.frontend.Token
  name_token: multiplier.frontend.Token
  naming_class: Optional[multiplier.ast.CXXRecordDecl]
  r_angle_token: multiplier.frontend.Token
  template_keyword_token: multiplier.frontend.Token
  has_explicit_template_arguments: bool
  has_template_keyword: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OverloadExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OverloadExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OverloadExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OverloadExpr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OverloadExpr]:
    ...

class UnresolvedMemberExpr(multiplier.ast.OverloadExpr):
  base: multiplier.ast.Expr
  base_type: multiplier.ast.Type
  member_token: multiplier.frontend.Token
  operator_token: multiplier.frontend.Token
  has_unresolved_using: bool
  is_arrow: bool
  is_implicit_access: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UnresolvedMemberExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnresolvedMemberExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.UnresolvedMemberExpr]:
    ...

class UnresolvedLookupExpr(multiplier.ast.OverloadExpr):
  is_overloaded: bool
  requires_adl: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UnresolvedLookupExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnresolvedLookupExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.UnresolvedLookupExpr]:
    ...

class OpaqueValueExpr(multiplier.ast.Expr):
  token: multiplier.frontend.Token
  source_expression: Optional[multiplier.ast.Expr]
  is_unique: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OpaqueValueExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OpaqueValueExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OpaqueValueExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OpaqueValueExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OpaqueValueExpr]:
    ...

class OffsetOfExpr(multiplier.ast.Expr):
  operator_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OffsetOfExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OffsetOfExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OffsetOfExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OffsetOfExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OffsetOfExpr]:
    ...

class ObjCSubscriptRefExpr(multiplier.ast.Expr):
  at_index_method_declaration: multiplier.ast.ObjCMethodDecl
  base_expression: multiplier.ast.Expr
  key_expression: multiplier.ast.Expr
  r_bracket_token: multiplier.frontend.Token
  is_array_subscript_reference_expression: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCSubscriptRefExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCSubscriptRefExpr]:
    ...

class ObjCStringLiteral(multiplier.ast.Expr):
  at_token: multiplier.frontend.Token
  string: multiplier.ast.StringLiteral

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCStringLiteral, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCStringLiteral]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCStringLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCStringLiteral]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCStringLiteral]:
    ...

class ObjCSelectorExpr(multiplier.ast.Expr):
  at_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCSelectorExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCSelectorExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCSelectorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCSelectorExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCSelectorExpr]:
    ...

class ObjCProtocolExpr(multiplier.ast.Expr):
  at_token: multiplier.frontend.Token
  protocol: multiplier.ast.ObjCProtocolDecl
  protocol_id_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCProtocolExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCProtocolExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCProtocolExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCProtocolExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCProtocolExpr]:
    ...

class ObjCPropertyRefExpr(multiplier.ast.Expr):
  base: multiplier.ast.Expr
  class_receiver: multiplier.ast.ObjCInterfaceDecl
  explicit_property: multiplier.ast.ObjCPropertyDecl
  implicit_property_getter: multiplier.ast.ObjCMethodDecl
  implicit_property_setter: multiplier.ast.ObjCMethodDecl
  token: multiplier.frontend.Token
  receiver_token: multiplier.frontend.Token
  receiver_type: multiplier.ast.Type
  super_receiver_type: multiplier.ast.Type
  is_class_receiver: bool
  is_explicit_property: bool
  is_implicit_property: bool
  is_messaging_getter: bool
  is_messaging_setter: bool
  is_object_receiver: bool
  is_super_receiver: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCPropertyRefExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCPropertyRefExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCPropertyRefExpr]:
    ...

class ObjCMessageExpr(multiplier.ast.Expr):
  num_arguments: int
  arguments: Generator[multiplier.ast.Expr]
  call_return_type: multiplier.ast.Type
  class_receiver: multiplier.ast.Type
  instance_receiver: multiplier.ast.Expr
  left_token: multiplier.frontend.Token
  method_declaration: multiplier.ast.ObjCMethodDecl
  method_family: multiplier.ast.ObjCMethodFamily
  receiver_interface: multiplier.ast.ObjCInterfaceDecl
  receiver_kind: multiplier.ast.ObjCMessageExprReceiverKind
  receiver_range: multiplier.frontend.TokenRange
  receiver_type: multiplier.ast.Type
  right_token: multiplier.frontend.Token
  selector_start_token: multiplier.frontend.Token
  super_token: multiplier.frontend.Token
  super_type: multiplier.ast.Type
  is_class_message: bool
  is_delegate_initializer_call: bool
  is_implicit: bool
  is_instance_message: bool
  num_selector_tokens: int
  selector_tokens: Generator[multiplier.frontend.Token]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCMessageExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCMessageExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCMessageExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCMessageExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCMessageExpr]:
    ...

  def nth_argument(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

  def nth_selector_token(self, n: int) -> Optional[multiplier.frontend.Token]:
    ...

class ObjCIvarRefExpr(multiplier.ast.Expr):
  base: multiplier.ast.Expr
  declaration: multiplier.ast.ObjCIvarDecl
  token: multiplier.frontend.Token
  operation_token: multiplier.frontend.Token
  is_arrow: bool
  is_free_instance_variable: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCIvarRefExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCIvarRefExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCIvarRefExpr]:
    ...

class ObjCIsaExpr(multiplier.ast.Expr):
  base: multiplier.ast.Expr
  base_token_end: multiplier.frontend.Token
  isa_member_token: multiplier.frontend.Token
  operation_token: multiplier.frontend.Token
  is_arrow: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCIsaExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCIsaExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCIsaExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCIsaExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCIsaExpr]:
    ...

class ObjCIndirectCopyRestoreExpr(multiplier.ast.Expr):
  sub_expression: multiplier.ast.Expr
  should_copy: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCIndirectCopyRestoreExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCIndirectCopyRestoreExpr]:
    ...

class ObjCEncodeExpr(multiplier.ast.Expr):
  at_token: multiplier.frontend.Token
  encoded_type: multiplier.ast.Type
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCEncodeExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCEncodeExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCEncodeExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCEncodeExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCEncodeExpr]:
    ...

class ObjCDictionaryLiteral(multiplier.ast.Expr):
  dictionary_with_objects_method: multiplier.ast.ObjCMethodDecl

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCDictionaryLiteral, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCDictionaryLiteral]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCDictionaryLiteral]:
    ...

class ObjCBoxedExpr(multiplier.ast.Expr):
  at_token: multiplier.frontend.Token
  boxing_method: multiplier.ast.ObjCMethodDecl
  sub_expression: multiplier.ast.Expr
  is_expressible_as_constant_initializer: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCBoxedExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCBoxedExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCBoxedExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCBoxedExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCBoxedExpr]:
    ...

class ObjCBoolLiteralExpr(multiplier.ast.Expr):
  token: multiplier.frontend.Token
  value: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCBoolLiteralExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCBoolLiteralExpr]:
    ...

class ObjCAvailabilityCheckExpr(multiplier.ast.Expr):
  has_version: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCAvailabilityCheckExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCAvailabilityCheckExpr]:
    ...

class ObjCArrayLiteral(multiplier.ast.Expr):
  array_with_objects_method: multiplier.ast.ObjCMethodDecl
  num_elements: int
  elements: Generator[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCArrayLiteral, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCArrayLiteral]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCArrayLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCArrayLiteral]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ObjCArrayLiteral]:
    ...

  def nth_element(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class OMPIteratorExpr(multiplier.ast.Expr):
  iterator_kw_token: multiplier.frontend.Token
  l_paren_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPIteratorExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPIteratorExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPIteratorExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPIteratorExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPIteratorExpr]:
    ...

class OMPArrayShapingExpr(multiplier.ast.Expr):
  base: multiplier.ast.Expr
  num_dimensions: int
  dimensions: Generator[multiplier.ast.Expr]
  l_paren_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPArrayShapingExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPArrayShapingExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPArrayShapingExpr]:
    ...

  def nth_dimension(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class OMPArraySectionExpr(multiplier.ast.Expr):
  base: multiplier.ast.Expr
  first_colon_token: multiplier.frontend.Token
  second_colon_token: multiplier.frontend.Token
  length: multiplier.ast.Expr
  lower_bound: multiplier.ast.Expr
  r_bracket_token: multiplier.frontend.Token
  stride: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPArraySectionExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPArraySectionExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPArraySectionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPArraySectionExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.OMPArraySectionExpr]:
    ...

class NoInitExpr(multiplier.ast.Expr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.NoInitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.NoInitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NoInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NoInitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.NoInitExpr]:
    ...

class MemberExpr(multiplier.ast.Expr):
  base: multiplier.ast.Expr
  l_angle_token: multiplier.frontend.Token
  member_declaration: multiplier.ast.ValueDecl
  member_token: multiplier.frontend.Token
  operator_token: multiplier.frontend.Token
  r_angle_token: multiplier.frontend.Token
  template_keyword_token: multiplier.frontend.Token
  had_multiple_candidates: bool
  has_explicit_template_arguments: bool
  has_qualifier: bool
  has_template_keyword: bool
  is_arrow: bool
  is_implicit_access: bool
  is_non_odr_use: multiplier.ast.NonOdrUseReason

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.MemberExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.MemberExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MemberExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MemberExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MemberExpr]:
    ...

class MatrixSubscriptExpr(multiplier.ast.Expr):
  base: multiplier.ast.Expr
  column_index: multiplier.ast.Expr
  r_bracket_token: multiplier.frontend.Token
  row_index: multiplier.ast.Expr
  is_incomplete: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.MatrixSubscriptExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MatrixSubscriptExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MatrixSubscriptExpr]:
    ...

class MaterializeTemporaryExpr(multiplier.ast.Expr):
  extending_declaration: Optional[multiplier.ast.ValueDecl]
  lifetime_extended_temporary_declaration: Optional[multiplier.ast.LifetimeExtendedTemporaryDecl]
  storage_duration: multiplier.ast.StorageDuration
  sub_expression: multiplier.ast.Expr
  is_bound_to_lvalue_reference: bool
  is_usable_in_constant_expressions: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.MaterializeTemporaryExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MaterializeTemporaryExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MaterializeTemporaryExpr]:
    ...

class MSPropertySubscriptExpr(multiplier.ast.Expr):
  base: multiplier.ast.Expr
  index: multiplier.ast.Expr
  r_bracket_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.MSPropertySubscriptExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSPropertySubscriptExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MSPropertySubscriptExpr]:
    ...

class MSPropertyRefExpr(multiplier.ast.Expr):
  base_expression: multiplier.ast.Expr
  member_token: multiplier.frontend.Token
  property_declaration: multiplier.ast.MSPropertyDecl
  is_arrow: bool
  is_implicit_access: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.MSPropertyRefExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.MSPropertyRefExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSPropertyRefExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSPropertyRefExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.MSPropertyRefExpr]:
    ...

class LambdaExpr(multiplier.ast.Expr):
  body: multiplier.ast.Stmt
  call_operator: multiplier.ast.CXXMethodDecl
  capture_default: multiplier.ast.LambdaCaptureDefault
  capture_default_token: multiplier.frontend.Token
  compound_statement_body: multiplier.ast.CompoundStmt
  dependent_call_operator: Optional[multiplier.ast.FunctionTemplateDecl]
  num_explicit_template_parameters: int
  explicit_template_parameters: Generator[multiplier.ast.NamedDecl]
  introducer_range: multiplier.frontend.TokenRange
  lambda_class: multiplier.ast.CXXRecordDecl
  template_parameter_list: Optional[multiplier.ast.TemplateParameterList]
  trailing_requires_clause: Optional[multiplier.ast.Expr]
  has_explicit_parameters: bool
  has_explicit_result_type: bool
  is_generic_lambda: bool
  is_mutable: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.LambdaExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.LambdaExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LambdaExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LambdaExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.LambdaExpr]:
    ...

  def nth_explicit_template_parameter(self, n: int) -> Optional[multiplier.ast.NamedDecl]:
    ...

class IntegerLiteral(multiplier.ast.Expr):
  token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.IntegerLiteral, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.IntegerLiteral]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.IntegerLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.IntegerLiteral]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.IntegerLiteral]:
    ...

class InitListExpr(multiplier.ast.Expr):
  array_filler: Optional[multiplier.ast.Expr]
  initialized_field_in_union: Optional[multiplier.ast.FieldDecl]
  l_brace_token: multiplier.frontend.Token
  r_brace_token: multiplier.frontend.Token
  semantic_form: Optional[multiplier.ast.InitListExpr]
  syntactic_form: Optional[multiplier.ast.InitListExpr]
  had_array_range_designator: bool
  has_array_filler: bool
  has_designated_initializer: bool
  num_initializers: int
  initializers: Generator[multiplier.ast.Expr]
  is_explicit: bool
  is_semantic_form: bool
  is_string_literal_initializer: bool
  is_syntactic_form: bool
  is_transparent: Optional[bool]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.InitListExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.InitListExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.InitListExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.InitListExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.InitListExpr]:
    ...

  def nth_initializer(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class ImplicitValueInitExpr(multiplier.ast.Expr):

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ImplicitValueInitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ImplicitValueInitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ImplicitValueInitExpr]:
    ...

class ImaginaryLiteral(multiplier.ast.Expr):
  sub_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ImaginaryLiteral, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ImaginaryLiteral]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ImaginaryLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ImaginaryLiteral]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ImaginaryLiteral]:
    ...

class GenericSelectionExpr(multiplier.ast.Expr):
  num_association_expressions: int
  association_expressions: Generator[multiplier.ast.Expr]
  controlling_expression: Optional[multiplier.ast.Expr]
  controlling_type: Optional[multiplier.ast.Type]
  default_token: multiplier.frontend.Token
  generic_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  result_expression: Optional[multiplier.ast.Expr]
  is_expression_predicate: bool
  is_result_dependent: bool
  is_type_predicate: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.GenericSelectionExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.GenericSelectionExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.GenericSelectionExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.GenericSelectionExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.GenericSelectionExpr]:
    ...

  def nth_association_expression(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class GNUNullExpr(multiplier.ast.Expr):
  token_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.GNUNullExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.GNUNullExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.GNUNullExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.GNUNullExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.GNUNullExpr]:
    ...

class FunctionParmPackExpr(multiplier.ast.Expr):
  parameter_pack: multiplier.ast.VarDecl
  parameter_pack_token: multiplier.frontend.Token
  num_expansions: int
  expansions: Generator[multiplier.ast.VarDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.FunctionParmPackExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.FunctionParmPackExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FunctionParmPackExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FunctionParmPackExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.FunctionParmPackExpr]:
    ...

  def nth_expansion(self, n: int) -> Optional[multiplier.ast.VarDecl]:
    ...

class FullExpr(multiplier.ast.Expr):
  sub_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.FullExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.FullExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FullExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FullExpr]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.FullExpr]:
    ...

class ExprWithCleanups(multiplier.ast.FullExpr):
  cleanups_have_side_effects: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ExprWithCleanups, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ExprWithCleanups]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ExprWithCleanups]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ExprWithCleanups]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ExprWithCleanups]:
    ...

class ConstantExpr(multiplier.ast.FullExpr):
  result_storage_kind: multiplier.ast.ConstantExprResultStorageKind
  has_ap_value_result: bool
  is_immediate_invocation: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ConstantExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ConstantExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConstantExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConstantExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ConstantExpr]:
    ...

class FloatingLiteral(multiplier.ast.Expr):
  token: multiplier.frontend.Token
  is_exact: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.FloatingLiteral, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.FloatingLiteral]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FloatingLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FloatingLiteral]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.FloatingLiteral]:
    ...

class FixedPointLiteral(multiplier.ast.Expr):
  token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.FixedPointLiteral, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.FixedPointLiteral]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FixedPointLiteral]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FixedPointLiteral]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.FixedPointLiteral]:
    ...

class ExtVectorElementExpr(multiplier.ast.Expr):
  contains_duplicate_elements: bool
  accessor_token: multiplier.frontend.Token
  base: multiplier.ast.Expr
  is_arrow: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ExtVectorElementExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ExtVectorElementExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ExtVectorElementExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ExtVectorElementExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ExtVectorElementExpr]:
    ...

class ExpressionTraitExpr(multiplier.ast.Expr):
  queried_expression: multiplier.ast.Expr
  trait: multiplier.ast.ExpressionTrait
  value: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ExpressionTraitExpr, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ExpressionTraitExpr]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ExpressionTraitExpr]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ExpressionTraitExpr]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.ExpressionTraitExpr]:
    ...

class AttributedStmt(multiplier.ast.ValueStmt):
  attribute_token: multiplier.frontend.Token
  num_attributes: int
  attributes: Generator[multiplier.ast.Attr]
  sub_statement: multiplier.ast.Stmt

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.AttributedStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.AttributedStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AttributedStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AttributedStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.AttributedStmt]:
    ...

  def nth_attribute(self, n: int) -> Optional[multiplier.ast.Attr]:
    ...

class SwitchStmt(multiplier.ast.Stmt):
  body: multiplier.ast.Stmt
  condition: multiplier.ast.Expr
  condition_variable: Optional[multiplier.ast.VarDecl]
  condition_variable_declaration_statement: Optional[multiplier.ast.DeclStmt]
  initializer: Optional[multiplier.ast.Stmt]
  l_paren_token: multiplier.frontend.Token
  r_paren_token: multiplier.frontend.Token
  first_switch_case: Optional[multiplier.ast.SwitchCase]
  switch_token: multiplier.frontend.Token
  has_initializer_storage: bool
  has_variable_storage: bool
  is_all_enum_cases_covered: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.SwitchStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.SwitchStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwitchStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwitchStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SwitchStmt]:
    ...

class SwitchCase(multiplier.ast.Stmt):
  colon_token: multiplier.frontend.Token
  keyword_token: multiplier.frontend.Token
  next_switch_case: Optional[multiplier.ast.SwitchCase]
  sub_statement: multiplier.ast.Stmt

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.SwitchCase, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.SwitchCase]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.SwitchCase]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.SwitchCase]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.SwitchCase]:
    ...

class DefaultStmt(multiplier.ast.SwitchCase):
  default_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.DefaultStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.DefaultStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DefaultStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DefaultStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.DefaultStmt]:
    ...

class CaseStmt(multiplier.ast.SwitchCase):
  case_statement_is_gnu_range: bool
  case_token: multiplier.frontend.Token
  ellipsis_token: multiplier.frontend.Token
  lhs: multiplier.ast.Expr
  rhs: Optional[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CaseStmt, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CaseStmt]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Stmt]) -> Optional[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CaseStmt]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CaseStmt]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.StmtKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Stmt) -> Optional[multiplier.ast.CaseStmt]:
    ...

class Decl(multiplier.Entity):
  parent_declaration: Optional[multiplier.ast.Decl]
  parent_statement: Optional[multiplier.ast.Stmt]
  definition: Optional[multiplier.ast.Decl]
  is_definition: bool
  canonical_declaration: multiplier.ast.Decl
  redeclarations: Generator[multiplier.ast.Decl]
  num_attributes: int
  attributes: Generator[multiplier.ast.Attr]
  access: multiplier.ast.AccessSpecifier
  availability: multiplier.ast.AvailabilityResult
  defining_attribute: Optional[multiplier.ast.Attr]
  described_template: Optional[multiplier.ast.TemplateDecl]
  described_template_parameters: Optional[multiplier.ast.TemplateParameterList]
  external_source_symbol_attribute: Optional[multiplier.ast.ExternalSourceSymbolAttr]
  friend_object_kind: multiplier.ast.DeclFriendObjectKind
  max_alignment: Optional[int]
  module_ownership_kind: multiplier.ast.DeclModuleOwnershipKind
  non_closure_context: Optional[multiplier.ast.Decl]
  has_attributes: bool
  has_owning_module: bool
  has_tag_identifier_namespace: bool
  is_defined_outside_function_or_method: bool
  is_deprecated: bool
  is_discarded_in_global_module_fragment: bool
  is_file_context_declaration: bool
  is_function_or_function_template: bool
  is_function_pointer_type: bool
  is_implicit: bool
  is_in_anonymous_namespace: bool
  is_in_another_module_unit: bool
  is_in_export_declaration_context: bool
  is_in_local_scope_for_instantiation: Optional[bool]
  is_in_std_namespace: bool
  is_invisible_outside_the_owning_module: bool
  is_local_extern_declaration: bool
  is_module_private: bool
  is_out_of_line: bool
  is_parameter_pack: bool
  is_template_declaration: bool
  is_template_parameter: bool
  is_template_parameter_pack: bool
  is_templated: bool
  is_top_level_declaration_in_obj_c_container: bool
  is_unavailable: bool
  is_unconditionally_visible: bool
  is_weak_imported: bool
  kind: multiplier.ast.DeclKind
  category: multiplier.ast.DeclCategory
  token: multiplier.frontend.Token
  tokens: multiplier.frontend.TokenRange

  @staticmethod
  def static_category() -> multiplier.EntityCategory:
    ...

  @overload
  @staticmethod
  def IN(index: multiplier.Index, kinds: Sequence[multiplier.ast.DeclKind]) -> Generator[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment, kinds: Sequence[multiplier.ast.DeclKind]) -> Generator[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File, kinds: Sequence[multiplier.ast.DeclKind]) -> Generator[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.Decl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation, kinds: Sequence[multiplier.ast.DeclKind]) -> Generator[Tuple[multiplier.ast.Decl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.Decl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def FROM(self: multiplier.ast.Decl) -> Optional[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def FROM(self: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.Decl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.Decl]:
    ...

  def nth_attribute(self, n: int) -> Optional[multiplier.ast.Attr]:
    ...

class ClassScopeFunctionSpecializationDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.ClassScopeFunctionSpecializationDecl
  definition: Optional[multiplier.ast.ClassScopeFunctionSpecializationDecl]
  redeclarations: Generator[multiplier.ast.ClassScopeFunctionSpecializationDecl]
  specialization: multiplier.ast.CXXMethodDecl
  has_explicit_template_arguments: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ClassScopeFunctionSpecializationDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ClassScopeFunctionSpecializationDecl]:
    ...

class CapturedDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.CapturedDecl
  definition: Optional[multiplier.ast.CapturedDecl]
  redeclarations: Generator[multiplier.ast.CapturedDecl]
  context_parameter: multiplier.ast.ImplicitParamDecl
  is_nothrow: bool
  num_parameters: int
  parameters: Generator[multiplier.ast.ImplicitParamDecl]
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CapturedDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CapturedDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CapturedDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CapturedDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CapturedDecl]:
    ...

  def nth_parameter(self, n: int) -> Optional[multiplier.ast.ImplicitParamDecl]:
    ...

class BlockDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.BlockDecl
  definition: Optional[multiplier.ast.BlockDecl]
  redeclarations: Generator[multiplier.ast.BlockDecl]
  block_missing_return_type: bool
  can_avoid_copy_to_heap: bool
  captures_cxx_this: bool
  does_not_escape: bool
  block_mangling_context_declaration: Optional[multiplier.ast.Decl]
  caret_token: multiplier.frontend.Token
  compound_body: multiplier.ast.CompoundStmt
  signature_as_written: multiplier.ast.Type
  has_captures: bool
  is_conversion_from_lambda: bool
  is_variadic: bool
  num_parameters: int
  parameters: Generator[multiplier.ast.ParmVarDecl]
  num_parameter_declarations: int
  parameter_declarations: Generator[multiplier.ast.ParmVarDecl]
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.BlockDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.BlockDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BlockDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BlockDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.BlockDecl]:
    ...

  def nth_parameter(self, n: int) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

  def nth_parameter_declaration(self, n: int) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

class AccessSpecDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.AccessSpecDecl
  definition: Optional[multiplier.ast.AccessSpecDecl]
  redeclarations: Generator[multiplier.ast.AccessSpecDecl]
  access_specifier_token: multiplier.frontend.Token
  colon_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.AccessSpecDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.AccessSpecDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.AccessSpecDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.AccessSpecDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.AccessSpecDecl]:
    ...

class OMPDeclarativeDirectiveDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.OMPDeclarativeDirectiveDecl
  definition: Optional[multiplier.ast.OMPDeclarativeDirectiveDecl]
  redeclarations: Generator[multiplier.ast.OMPDeclarativeDirectiveDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPDeclarativeDirectiveDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPDeclarativeDirectiveDecl]:
    ...

class OMPThreadPrivateDecl(multiplier.ast.OMPDeclarativeDirectiveDecl):
  canonical_declaration: multiplier.ast.OMPThreadPrivateDecl
  definition: Optional[multiplier.ast.OMPThreadPrivateDecl]
  redeclarations: Generator[multiplier.ast.OMPThreadPrivateDecl]
  num_varlists: int
  varlists: Generator[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPThreadPrivateDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPThreadPrivateDecl]:
    ...

  def nth_varlist(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class OMPRequiresDecl(multiplier.ast.OMPDeclarativeDirectiveDecl):
  canonical_declaration: multiplier.ast.OMPRequiresDecl
  definition: Optional[multiplier.ast.OMPRequiresDecl]
  redeclarations: Generator[multiplier.ast.OMPRequiresDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPRequiresDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPRequiresDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPRequiresDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPRequiresDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPRequiresDecl]:
    ...

class OMPAllocateDecl(multiplier.ast.OMPDeclarativeDirectiveDecl):
  canonical_declaration: multiplier.ast.OMPAllocateDecl
  definition: Optional[multiplier.ast.OMPAllocateDecl]
  redeclarations: Generator[multiplier.ast.OMPAllocateDecl]
  num_varlists: int
  varlists: Generator[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPAllocateDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPAllocateDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPAllocateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPAllocateDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPAllocateDecl]:
    ...

  def nth_varlist(self, n: int) -> Optional[multiplier.ast.Expr]:
    ...

class TranslationUnitDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.TranslationUnitDecl
  definition: Optional[multiplier.ast.TranslationUnitDecl]
  redeclarations: Generator[multiplier.ast.TranslationUnitDecl]
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TranslationUnitDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TranslationUnitDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TranslationUnitDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TranslationUnitDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TranslationUnitDecl]:
    ...

class TopLevelStmtDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.TopLevelStmtDecl
  definition: Optional[multiplier.ast.TopLevelStmtDecl]
  redeclarations: Generator[multiplier.ast.TopLevelStmtDecl]
  statement: multiplier.ast.Stmt
  is_semi_missing: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TopLevelStmtDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TopLevelStmtDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TopLevelStmtDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TopLevelStmtDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TopLevelStmtDecl]:
    ...

class StaticAssertDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.StaticAssertDecl
  definition: Optional[multiplier.ast.StaticAssertDecl]
  redeclarations: Generator[multiplier.ast.StaticAssertDecl]
  assert_expression: multiplier.ast.Expr
  message: Optional[multiplier.ast.Expr]
  r_paren_token: multiplier.frontend.Token
  is_failed: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.StaticAssertDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.StaticAssertDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.StaticAssertDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.StaticAssertDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.StaticAssertDecl]:
    ...

class RequiresExprBodyDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.RequiresExprBodyDecl
  definition: Optional[multiplier.ast.RequiresExprBodyDecl]
  redeclarations: Generator[multiplier.ast.RequiresExprBodyDecl]
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.RequiresExprBodyDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RequiresExprBodyDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.RequiresExprBodyDecl]:
    ...

class PragmaDetectMismatchDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.PragmaDetectMismatchDecl
  definition: Optional[multiplier.ast.PragmaDetectMismatchDecl]
  redeclarations: Generator[multiplier.ast.PragmaDetectMismatchDecl]
  name: str
  value: str

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.PragmaDetectMismatchDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.PragmaDetectMismatchDecl]:
    ...

class PragmaCommentDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.PragmaCommentDecl
  definition: Optional[multiplier.ast.PragmaCommentDecl]
  redeclarations: Generator[multiplier.ast.PragmaCommentDecl]
  argument: str
  comment_kind: multiplier.ast.PragmaMSCommentKind

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.PragmaCommentDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.PragmaCommentDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.PragmaCommentDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.PragmaCommentDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.PragmaCommentDecl]:
    ...

class ObjCPropertyImplDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.ObjCPropertyImplDecl
  definition: Optional[multiplier.ast.ObjCPropertyImplDecl]
  redeclarations: Generator[multiplier.ast.ObjCPropertyImplDecl]
  getter_cxx_constructor: multiplier.ast.Expr
  getter_method_declaration: multiplier.ast.ObjCMethodDecl
  property_declaration: multiplier.ast.ObjCPropertyDecl
  property_implementation: multiplier.ast.ObjCPropertyImplDeclKind
  property_instance_variable_declaration: multiplier.ast.ObjCIvarDecl
  property_instance_variable_declaration_token: multiplier.frontend.Token
  setter_cxx_assignment: multiplier.ast.Expr
  setter_method_declaration: multiplier.ast.ObjCMethodDecl
  is_instance_variable_name_specified: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCPropertyImplDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCPropertyImplDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCPropertyImplDecl]:
    ...

class NamedDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.NamedDecl
  definition: Optional[multiplier.ast.NamedDecl]
  redeclarations: Generator[multiplier.ast.NamedDecl]
  formal_linkage: multiplier.ast.Linkage
  name: str
  obj_cf_string_formatting_family: Optional[multiplier.ast.ObjCStringFormatFamily]
  qualified_name_as_string: str
  underlying_declaration: multiplier.ast.NamedDecl
  visibility: Optional[multiplier.ast.Visibility]
  has_external_formal_linkage: bool
  has_linkage: bool
  has_linkage_been_computed: bool
  is_cxx_class_member: bool
  is_cxx_instance_member: bool
  is_externally_declarable: bool
  is_externally_visible: bool
  is_linkage_valid: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.NamedDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.NamedDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NamedDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NamedDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.NamedDecl]:
    ...

class LabelDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.LabelDecl
  definition: Optional[multiplier.ast.LabelDecl]
  redeclarations: Generator[multiplier.ast.LabelDecl]
  ms_assembly_label: str
  statement: multiplier.ast.LabelStmt
  is_gnu_local: bool
  is_ms_assembly_label: bool
  is_resolved_ms_assembly_label: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.LabelDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.LabelDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LabelDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LabelDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.LabelDecl]:
    ...

class HLSLBufferDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.HLSLBufferDecl
  definition: Optional[multiplier.ast.HLSLBufferDecl]
  redeclarations: Generator[multiplier.ast.HLSLBufferDecl]
  l_brace_token: multiplier.frontend.Token
  token_start: multiplier.frontend.Token
  r_brace_token: multiplier.frontend.Token
  is_c_buffer: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.HLSLBufferDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.HLSLBufferDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.HLSLBufferDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.HLSLBufferDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.HLSLBufferDecl]:
    ...

class BaseUsingDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.BaseUsingDecl
  definition: Optional[multiplier.ast.BaseUsingDecl]
  redeclarations: Generator[multiplier.ast.BaseUsingDecl]
  num_shadows: int
  shadows: Generator[multiplier.ast.UsingShadowDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.BaseUsingDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.BaseUsingDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BaseUsingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BaseUsingDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.BaseUsingDecl]:
    ...

  def nth_shadow(self, n: int) -> Optional[multiplier.ast.UsingShadowDecl]:
    ...

class UsingEnumDecl(multiplier.ast.BaseUsingDecl):
  canonical_declaration: multiplier.ast.UsingEnumDecl
  definition: Optional[multiplier.ast.UsingEnumDecl]
  redeclarations: Generator[multiplier.ast.UsingEnumDecl]
  enum_declaration: multiplier.ast.EnumDecl
  enum_token: multiplier.frontend.Token
  enum_type: multiplier.ast.Type
  using_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UsingEnumDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UsingEnumDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UsingEnumDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UsingEnumDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UsingEnumDecl]:
    ...

class UsingDecl(multiplier.ast.BaseUsingDecl):
  canonical_declaration: multiplier.ast.UsingDecl
  definition: Optional[multiplier.ast.UsingDecl]
  redeclarations: Generator[multiplier.ast.UsingDecl]
  using_token: multiplier.frontend.Token
  has_typename: bool
  is_access_declaration: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UsingDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UsingDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UsingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UsingDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UsingDecl]:
    ...

class ValueDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.ValueDecl
  definition: Optional[multiplier.ast.ValueDecl]
  redeclarations: Generator[multiplier.ast.ValueDecl]
  potentially_decomposed_variable_declaration: Optional[multiplier.ast.VarDecl]
  type: multiplier.ast.Type
  is_initializer_capture: bool
  is_weak: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ValueDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ValueDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ValueDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ValueDecl]:
    ...

class UnresolvedUsingValueDecl(multiplier.ast.ValueDecl):
  canonical_declaration: multiplier.ast.UnresolvedUsingValueDecl
  definition: Optional[multiplier.ast.UnresolvedUsingValueDecl]
  redeclarations: Generator[multiplier.ast.UnresolvedUsingValueDecl]
  ellipsis_token: multiplier.frontend.Token
  using_token: multiplier.frontend.Token
  is_access_declaration: bool
  is_pack_expansion: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UnresolvedUsingValueDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UnresolvedUsingValueDecl]:
    ...

class UnnamedGlobalConstantDecl(multiplier.ast.ValueDecl):
  canonical_declaration: multiplier.ast.UnnamedGlobalConstantDecl
  definition: Optional[multiplier.ast.UnnamedGlobalConstantDecl]
  redeclarations: Generator[multiplier.ast.UnnamedGlobalConstantDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UnnamedGlobalConstantDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UnnamedGlobalConstantDecl]:
    ...

class TemplateParamObjectDecl(multiplier.ast.ValueDecl):
  canonical_declaration: multiplier.ast.TemplateParamObjectDecl
  definition: Optional[multiplier.ast.TemplateParamObjectDecl]
  redeclarations: Generator[multiplier.ast.TemplateParamObjectDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TemplateParamObjectDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TemplateParamObjectDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TemplateParamObjectDecl]:
    ...

class OMPDeclareReductionDecl(multiplier.ast.ValueDecl):
  canonical_declaration: multiplier.ast.OMPDeclareReductionDecl
  definition: Optional[multiplier.ast.OMPDeclareReductionDecl]
  redeclarations: Generator[multiplier.ast.OMPDeclareReductionDecl]
  combiner: multiplier.ast.Expr
  combiner_in: multiplier.ast.Expr
  combiner_out: multiplier.ast.Expr
  initializer_original: multiplier.ast.Expr
  initializer_private: multiplier.ast.Expr
  initializer: multiplier.ast.Expr
  initializer_kind: multiplier.ast.OMPDeclareReductionDeclInitKind
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPDeclareReductionDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDeclareReductionDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPDeclareReductionDecl]:
    ...

class MSGuidDecl(multiplier.ast.ValueDecl):
  canonical_declaration: multiplier.ast.MSGuidDecl
  definition: Optional[multiplier.ast.MSGuidDecl]
  redeclarations: Generator[multiplier.ast.MSGuidDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.MSGuidDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.MSGuidDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSGuidDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSGuidDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.MSGuidDecl]:
    ...

class IndirectFieldDecl(multiplier.ast.ValueDecl):
  canonical_declaration: multiplier.ast.IndirectFieldDecl
  definition: Optional[multiplier.ast.IndirectFieldDecl]
  redeclarations: Generator[multiplier.ast.IndirectFieldDecl]
  chain: Generator[multiplier.ast.NamedDecl]
  anonymous_field: Optional[multiplier.ast.FieldDecl]
  variable_declaration: Optional[multiplier.ast.VarDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.IndirectFieldDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.IndirectFieldDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.IndirectFieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.IndirectFieldDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.IndirectFieldDecl]:
    ...

class EnumConstantDecl(multiplier.ast.ValueDecl):
  canonical_declaration: multiplier.ast.EnumConstantDecl
  definition: Optional[multiplier.ast.EnumConstantDecl]
  redeclarations: Generator[multiplier.ast.EnumConstantDecl]
  initializer_expression: Optional[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.EnumConstantDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.EnumConstantDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.EnumConstantDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.EnumConstantDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.EnumConstantDecl]:
    ...

class DeclaratorDecl(multiplier.ast.ValueDecl):
  canonical_declaration: multiplier.ast.DeclaratorDecl
  definition: Optional[multiplier.ast.DeclaratorDecl]
  redeclarations: Generator[multiplier.ast.DeclaratorDecl]
  first_inner_token: multiplier.frontend.Token
  first_outer_token: multiplier.frontend.Token
  trailing_requires_clause: Optional[multiplier.ast.Expr]
  type_spec_end_token: multiplier.frontend.Token
  type_spec_start_token: multiplier.frontend.Token
  num_template_parameter_lists: int
  template_parameter_lists: Generator[multiplier.ast.TemplateParameterList]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.DeclaratorDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.DeclaratorDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DeclaratorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DeclaratorDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.DeclaratorDecl]:
    ...

  def nth_template_parameter_list(self, n: int) -> Optional[multiplier.ast.TemplateParameterList]:
    ...

class VarDecl(multiplier.ast.DeclaratorDecl):
  canonical_declaration: multiplier.ast.VarDecl
  definition: Optional[multiplier.ast.VarDecl]
  redeclarations: Generator[multiplier.ast.VarDecl]
  acting_definition: Optional[multiplier.ast.VarDecl]
  described_variable_template: Optional[multiplier.ast.VarTemplateDecl]
  initializer: Optional[multiplier.ast.Expr]
  initializer_style: multiplier.ast.VarDeclInitializationStyle
  initializing_declaration: Optional[multiplier.ast.VarDecl]
  instantiated_from_static_data_member: Optional[multiplier.ast.VarDecl]
  language_linkage: multiplier.ast.LanguageLinkage
  point_of_instantiation: multiplier.frontend.Token
  storage_class: multiplier.ast.StorageClass
  storage_duration: multiplier.ast.StorageDuration
  tls_kind: multiplier.ast.VarDeclTLSKind
  tsc_spec: multiplier.ast.ThreadStorageClassSpecifier
  template_instantiation_pattern: Optional[multiplier.ast.VarDecl]
  template_specialization_kind: multiplier.ast.TemplateSpecializationKind
  template_specialization_kind_for_instantiation: multiplier.ast.TemplateSpecializationKind
  has_constant_initialization: bool
  has_dependent_alignment: bool
  has_external_storage: bool
  has_flexible_array_initializer: Optional[bool]
  has_global_storage: bool
  has_ice_initializer: Optional[bool]
  has_initializer: bool
  has_local_storage: bool
  is_arc_pseudo_strong: bool
  is_cxx_for_range_declaration: bool
  is_constexpr: bool
  is_direct_initializer: bool
  is_escaping_byref: bool
  is_exception_variable: bool
  is_extern_c: bool
  is_file_variable_declaration: bool
  is_function_or_method_variable_declaration: bool
  is_in_extern_c_context: bool
  is_in_extern_cxx_context: bool
  is_inline: bool
  is_inline_specified: bool
  is_known_to_be_defined: bool
  is_local_variable_declaration: bool
  is_local_variable_declaration_or_parm: bool
  is_nrvo_variable: bool
  is_no_destroy: bool
  is_non_escaping_byref: bool
  is_obj_c_for_declaration: bool
  is_previous_declaration_in_same_block_scope: bool
  is_static_data_member: bool
  is_static_local: bool
  is_this_declaration_a_demoted_definition: bool
  is_usable_in_constant_expressions: bool
  might_be_usable_in_constant_expressions: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.VarDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.VarDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.VarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.VarDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.VarDecl]:
    ...

class ParmVarDecl(multiplier.ast.VarDecl):
  canonical_declaration: multiplier.ast.ParmVarDecl
  definition: Optional[multiplier.ast.ParmVarDecl]
  redeclarations: Generator[multiplier.ast.ParmVarDecl]
  default_argument: Optional[multiplier.ast.Expr]
  default_argument_range: multiplier.frontend.TokenRange
  obj_c_decl_qualifier: multiplier.ast.DeclObjCDeclQualifier
  original_type: multiplier.ast.Type
  uninstantiated_default_argument: Optional[multiplier.ast.Expr]
  has_default_argument: bool
  has_inherited_default_argument: bool
  has_uninstantiated_default_argument: bool
  has_unparsed_default_argument: bool
  is_destroyed_in_callee: bool
  is_knr_promoted: bool
  is_obj_c_method_parameter: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ParmVarDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ParmVarDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

class OMPCapturedExprDecl(multiplier.ast.VarDecl):
  canonical_declaration: multiplier.ast.OMPCapturedExprDecl
  definition: Optional[multiplier.ast.OMPCapturedExprDecl]
  redeclarations: Generator[multiplier.ast.OMPCapturedExprDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPCapturedExprDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPCapturedExprDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPCapturedExprDecl]:
    ...

class ImplicitParamDecl(multiplier.ast.VarDecl):
  canonical_declaration: multiplier.ast.ImplicitParamDecl
  definition: Optional[multiplier.ast.ImplicitParamDecl]
  redeclarations: Generator[multiplier.ast.ImplicitParamDecl]
  parameter_kind: multiplier.ast.ImplicitParamDeclImplicitParamKind

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ImplicitParamDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ImplicitParamDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ImplicitParamDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ImplicitParamDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ImplicitParamDecl]:
    ...

class DecompositionDecl(multiplier.ast.VarDecl):
  canonical_declaration: multiplier.ast.DecompositionDecl
  definition: Optional[multiplier.ast.DecompositionDecl]
  redeclarations: Generator[multiplier.ast.DecompositionDecl]
  num_bindings: int
  bindings: Generator[multiplier.ast.BindingDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.DecompositionDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.DecompositionDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.DecompositionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.DecompositionDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.DecompositionDecl]:
    ...

  def nth_binding(self, n: int) -> Optional[multiplier.ast.BindingDecl]:
    ...

class VarTemplateSpecializationDecl(multiplier.ast.VarDecl):
  canonical_declaration: multiplier.ast.VarTemplateSpecializationDecl
  definition: Optional[multiplier.ast.VarTemplateSpecializationDecl]
  redeclarations: Generator[multiplier.ast.VarTemplateSpecializationDecl]
  extern_token: multiplier.frontend.Token
  specialization_kind: multiplier.ast.TemplateSpecializationKind
  specialized_template: multiplier.ast.VarTemplateDecl
  num_template_arguments: int
  template_arguments: Generator[multiplier.ast.TemplateArgument]
  num_template_instantiation_arguments: int
  template_instantiation_arguments: Generator[multiplier.ast.TemplateArgument]
  template_keyword_token: multiplier.frontend.Token
  type_as_written: Optional[multiplier.ast.Type]
  is_class_scope_explicit_specialization: bool
  is_explicit_instantiation_or_specialization: bool
  is_explicit_specialization: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.VarTemplateSpecializationDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.VarTemplateSpecializationDecl]:
    ...

  def nth_template_argument(self, n: int) -> Optional[multiplier.ast.TemplateArgument]:
    ...

  def nth_template_instantiation_argument(self, n: int) -> Optional[multiplier.ast.TemplateArgument]:
    ...

class VarTemplatePartialSpecializationDecl(multiplier.ast.VarTemplateSpecializationDecl):
  canonical_declaration: multiplier.ast.VarTemplatePartialSpecializationDecl
  definition: Optional[multiplier.ast.VarTemplatePartialSpecializationDecl]
  redeclarations: Generator[multiplier.ast.VarTemplatePartialSpecializationDecl]
  instantiated_from_member: Optional[multiplier.ast.VarTemplatePartialSpecializationDecl]
  template_parameters: multiplier.ast.TemplateParameterList
  has_associated_constraints: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.VarTemplatePartialSpecializationDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.VarTemplatePartialSpecializationDecl]:
    ...

class NonTypeTemplateParmDecl(multiplier.ast.DeclaratorDecl):
  canonical_declaration: multiplier.ast.NonTypeTemplateParmDecl
  definition: Optional[multiplier.ast.NonTypeTemplateParmDecl]
  redeclarations: Generator[multiplier.ast.NonTypeTemplateParmDecl]
  default_argument_was_inherited: bool
  default_argument: Optional[multiplier.ast.Expr]
  default_argument_token: multiplier.frontend.Token
  placeholder_type_constraint: Optional[multiplier.ast.Expr]
  has_default_argument: bool
  has_placeholder_type_constraint: bool
  is_expanded_parameter_pack: bool
  is_pack_expansion: bool
  num_expansion_types: int
  expansion_types: Generator[multiplier.ast.Type]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.NonTypeTemplateParmDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.NonTypeTemplateParmDecl]:
    ...

  def nth_expansion_type(self, n: int) -> Optional[multiplier.ast.Type]:
    ...

class MSPropertyDecl(multiplier.ast.DeclaratorDecl):
  canonical_declaration: multiplier.ast.MSPropertyDecl
  definition: Optional[multiplier.ast.MSPropertyDecl]
  redeclarations: Generator[multiplier.ast.MSPropertyDecl]
  has_getter: bool
  has_setter: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.MSPropertyDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.MSPropertyDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.MSPropertyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.MSPropertyDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.MSPropertyDecl]:
    ...

class FunctionDecl(multiplier.ast.DeclaratorDecl):
  canonical_declaration: multiplier.ast.FunctionDecl
  definition: Optional[multiplier.ast.FunctionDecl]
  redeclarations: Generator[multiplier.ast.FunctionDecl]
  body_contains_immediate_escalating_expressions: bool
  friend_constraint_refers_to_enclosing_template: bool
  uses_fp_intrin: bool
  does_declaration_force_externally_visible_definition: Optional[bool]
  does_this_declaration_have_a_body: bool
  call_result_type: multiplier.ast.Type
  constexpr_kind: multiplier.ast.ConstexprSpecKind
  declared_return_type: multiplier.ast.Type
  default_token: multiplier.frontend.Token
  described_function_template: Optional[multiplier.ast.FunctionTemplateDecl]
  ellipsis_token: multiplier.frontend.Token
  exception_spec_tokens: multiplier.frontend.TokenRange
  exception_spec_type: multiplier.ast.ExceptionSpecificationType
  instantiated_from_declaration: Optional[multiplier.ast.FunctionDecl]
  instantiated_from_member_function: Optional[multiplier.ast.FunctionDecl]
  language_linkage: multiplier.ast.LanguageLinkage
  multi_version_kind: multiplier.ast.MultiVersionKind
  odr_hash: Optional[int]
  overloaded_operator: multiplier.ast.OverloadedOperatorKind
  parameters_tokens: multiplier.frontend.TokenRange
  point_of_instantiation: multiplier.frontend.Token
  primary_template: Optional[multiplier.ast.FunctionTemplateDecl]
  return_type: multiplier.ast.Type
  storage_class: multiplier.ast.StorageClass
  template_instantiation_pattern: Optional[multiplier.ast.FunctionDecl]
  template_specialization_kind: multiplier.ast.TemplateSpecializationKind
  template_specialization_kind_for_instantiation: multiplier.ast.TemplateSpecializationKind
  templated_kind: multiplier.ast.FunctionDeclTemplatedKind
  has_implicit_return_zero: bool
  has_inherited_prototype: bool
  has_one_parameter_or_default_arguments: bool
  has_prototype: bool
  has_skipped_body: bool
  has_trivial_body: bool
  has_written_prototype: bool
  instantiation_is_pending: bool
  is_cpu_dispatch_multi_version: bool
  is_cpu_specific_multi_version: bool
  is_consteval: bool
  is_constexpr: bool
  is_constexpr_specified: bool
  is_defaulted: bool
  is_deleted: bool
  is_deleted_as_written: bool
  is_destroying_operator_delete: bool
  is_explicitly_defaulted: bool
  is_extern_c: bool
  is_function_template_specialization: bool
  is_global: bool
  is_immediate_escalating: bool
  is_immediate_function: bool
  is_implicitly_instantiable: bool
  is_in_extern_c_context: bool
  is_in_extern_cxx_context: bool
  is_ineligible_or_not_selected: bool
  is_inline_builtin_declaration: bool
  is_inline_definition_externally_visible: Optional[bool]
  is_inline_specified: bool
  is_inlined: bool
  is_late_template_parsed: bool
  is_ms_extern_inline: Optional[bool]
  is_msvcrt_entry_point: bool
  is_main: bool
  is_member_like_constrained_friend: bool
  is_multi_version: bool
  is_no_return: bool
  is_overloaded_operator: bool
  is_pure: bool
  is_replaceable_global_allocation_function: bool
  is_reserved_global_placement_operator: Optional[bool]
  is_static: bool
  is_target_clones_multi_version: bool
  is_target_multi_version: bool
  is_template_instantiation: bool
  is_this_declaration_a_definition: bool
  is_this_declaration_instantiated_from_a_friend_definition: bool
  is_trivial: bool
  is_trivial_for_call: bool
  is_user_provided: bool
  is_variadic: bool
  is_virtual_as_written: bool
  num_parameters: int
  parameters: Generator[multiplier.ast.ParmVarDecl]
  uses_seh_try: bool
  will_have_body: bool
  body: Optional[multiplier.ast.Stmt]
  declarations_in_context: Generator[multiplier.ast.Decl]
  callers: Generator[multiplier.ast.Stmt]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.FunctionDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.FunctionDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FunctionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FunctionDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.FunctionDecl]:
    ...

  def nth_parameter(self, n: int) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

class CXXMethodDecl(multiplier.ast.FunctionDecl):
  canonical_declaration: multiplier.ast.CXXMethodDecl
  definition: Optional[multiplier.ast.CXXMethodDecl]
  redeclarations: Generator[multiplier.ast.CXXMethodDecl]
  reference_qualifier: multiplier.ast.RefQualifierKind
  this_object_type: Optional[multiplier.ast.Type]
  this_type: Optional[multiplier.ast.Type]
  has_inline_body: bool
  is_const: bool
  is_copy_assignment_operator: bool
  is_instance: bool
  is_lambda_static_invoker: bool
  is_move_assignment_operator: bool
  is_virtual: bool
  is_volatile: bool
  num_overridden_methods: int
  overridden_methods: Generator[multiplier.ast.CXXMethodDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXMethodDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXMethodDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXMethodDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXMethodDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CXXMethodDecl]:
    ...

  def nth_overridden_method(self, n: int) -> Optional[multiplier.ast.CXXMethodDecl]:
    ...

class CXXDestructorDecl(multiplier.ast.CXXMethodDecl):
  canonical_declaration: multiplier.ast.CXXDestructorDecl
  definition: Optional[multiplier.ast.CXXDestructorDecl]
  redeclarations: Generator[multiplier.ast.CXXDestructorDecl]
  operator_delete: Optional[multiplier.ast.FunctionDecl]
  operator_delete_this_argument: Optional[multiplier.ast.Expr]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXDestructorDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXDestructorDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXDestructorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXDestructorDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CXXDestructorDecl]:
    ...

class CXXConversionDecl(multiplier.ast.CXXMethodDecl):
  canonical_declaration: multiplier.ast.CXXConversionDecl
  definition: Optional[multiplier.ast.CXXConversionDecl]
  redeclarations: Generator[multiplier.ast.CXXConversionDecl]
  conversion_type: multiplier.ast.Type
  is_explicit: bool
  is_lambda_to_block_pointer_conversion: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXConversionDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXConversionDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXConversionDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXConversionDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CXXConversionDecl]:
    ...

class CXXConstructorDecl(multiplier.ast.CXXMethodDecl):
  canonical_declaration: multiplier.ast.CXXConstructorDecl
  definition: Optional[multiplier.ast.CXXConstructorDecl]
  redeclarations: Generator[multiplier.ast.CXXConstructorDecl]
  target_constructor: Optional[multiplier.ast.CXXConstructorDecl]
  is_default_constructor: bool
  is_delegating_constructor: bool
  is_explicit: bool
  is_inheriting_constructor: bool
  is_specialization_copying_object: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXConstructorDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXConstructorDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXConstructorDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXConstructorDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CXXConstructorDecl]:
    ...

class CXXDeductionGuideDecl(multiplier.ast.FunctionDecl):
  canonical_declaration: multiplier.ast.CXXDeductionGuideDecl
  definition: Optional[multiplier.ast.CXXDeductionGuideDecl]
  redeclarations: Generator[multiplier.ast.CXXDeductionGuideDecl]
  corresponding_constructor: Optional[multiplier.ast.CXXConstructorDecl]
  deduced_template: multiplier.ast.TemplateDecl
  deduction_candidate_kind: multiplier.ast.DeductionCandidate
  is_explicit: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXDeductionGuideDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXDeductionGuideDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CXXDeductionGuideDecl]:
    ...

class FieldDecl(multiplier.ast.DeclaratorDecl):
  canonical_declaration: multiplier.ast.FieldDecl
  definition: Optional[multiplier.ast.FieldDecl]
  redeclarations: Generator[multiplier.ast.FieldDecl]
  bit_width: Optional[multiplier.ast.Expr]
  captured_vla_type: Optional[multiplier.ast.VariableArrayType]
  in_class_initializer_style: multiplier.ast.InClassInitStyle
  in_class_initializer: Optional[multiplier.ast.Expr]
  has_captured_vla_type: bool
  has_in_class_initializer: bool
  has_non_null_in_class_initializer: bool
  is_anonymous_struct_or_union: bool
  is_bit_field: bool
  is_mutable: bool
  is_potentially_overlapping: bool
  is_unnamed_bitfield: bool
  is_zero_length_bit_field: bool
  is_zero_size: bool
  offset_in_bits: Optional[int]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.FieldDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.FieldDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FieldDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.FieldDecl]:
    ...

class ObjCIvarDecl(multiplier.ast.FieldDecl):
  canonical_declaration: multiplier.ast.ObjCIvarDecl
  definition: Optional[multiplier.ast.ObjCIvarDecl]
  redeclarations: Generator[multiplier.ast.ObjCIvarDecl]
  access_control: multiplier.ast.ObjCIvarDeclAccessControl
  canonical_access_control: multiplier.ast.ObjCIvarDeclAccessControl
  containing_interface: multiplier.ast.ObjCInterfaceDecl
  next_instance_variable: multiplier.ast.ObjCIvarDecl
  synthesize: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCIvarDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCIvarDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCIvarDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCIvarDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCIvarDecl]:
    ...

class ObjCAtDefsFieldDecl(multiplier.ast.FieldDecl):
  canonical_declaration: multiplier.ast.ObjCAtDefsFieldDecl
  definition: Optional[multiplier.ast.ObjCAtDefsFieldDecl]
  redeclarations: Generator[multiplier.ast.ObjCAtDefsFieldDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCAtDefsFieldDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCAtDefsFieldDecl]:
    ...

class BindingDecl(multiplier.ast.ValueDecl):
  canonical_declaration: multiplier.ast.BindingDecl
  definition: Optional[multiplier.ast.BindingDecl]
  redeclarations: Generator[multiplier.ast.BindingDecl]
  binding: multiplier.ast.Expr
  decomposed_declaration: multiplier.ast.ValueDecl
  holding_variable: multiplier.ast.VarDecl

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.BindingDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.BindingDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BindingDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BindingDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.BindingDecl]:
    ...

class OMPDeclarativeDirectiveValueDecl(multiplier.ast.ValueDecl):
  canonical_declaration: multiplier.ast.OMPDeclarativeDirectiveValueDecl
  definition: Optional[multiplier.ast.OMPDeclarativeDirectiveValueDecl]
  redeclarations: Generator[multiplier.ast.OMPDeclarativeDirectiveValueDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPDeclarativeDirectiveValueDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPDeclarativeDirectiveValueDecl]:
    ...

class OMPDeclareMapperDecl(multiplier.ast.OMPDeclarativeDirectiveValueDecl):
  canonical_declaration: multiplier.ast.OMPDeclareMapperDecl
  definition: Optional[multiplier.ast.OMPDeclareMapperDecl]
  redeclarations: Generator[multiplier.ast.OMPDeclareMapperDecl]
  mapper_variable_reference: multiplier.ast.Expr
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.OMPDeclareMapperDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.OMPDeclareMapperDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.OMPDeclareMapperDecl]:
    ...

class UsingShadowDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.UsingShadowDecl
  definition: Optional[multiplier.ast.UsingShadowDecl]
  redeclarations: Generator[multiplier.ast.UsingShadowDecl]
  introducer: multiplier.ast.BaseUsingDecl
  next_using_shadow_declaration: Optional[multiplier.ast.UsingShadowDecl]
  target_declaration: multiplier.ast.NamedDecl

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UsingShadowDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UsingShadowDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UsingShadowDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UsingShadowDecl]:
    ...

class ConstructorUsingShadowDecl(multiplier.ast.UsingShadowDecl):
  canonical_declaration: multiplier.ast.ConstructorUsingShadowDecl
  definition: Optional[multiplier.ast.ConstructorUsingShadowDecl]
  redeclarations: Generator[multiplier.ast.ConstructorUsingShadowDecl]
  constructs_virtual_base: bool
  constructed_base_class: multiplier.ast.CXXRecordDecl
  constructed_base_class_shadow_declaration: Optional[multiplier.ast.ConstructorUsingShadowDecl]
  nominated_base_class: multiplier.ast.CXXRecordDecl
  nominated_base_class_shadow_declaration: Optional[multiplier.ast.ConstructorUsingShadowDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ConstructorUsingShadowDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ConstructorUsingShadowDecl]:
    ...

class UsingPackDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.UsingPackDecl
  definition: Optional[multiplier.ast.UsingPackDecl]
  redeclarations: Generator[multiplier.ast.UsingPackDecl]
  num_expansions: int
  expansions: Generator[multiplier.ast.NamedDecl]
  instantiated_from_using_declaration: multiplier.ast.NamedDecl

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UsingPackDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UsingPackDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UsingPackDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UsingPackDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UsingPackDecl]:
    ...

  def nth_expansion(self, n: int) -> Optional[multiplier.ast.NamedDecl]:
    ...

class UsingDirectiveDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.UsingDirectiveDecl
  definition: Optional[multiplier.ast.UsingDirectiveDecl]
  redeclarations: Generator[multiplier.ast.UsingDirectiveDecl]
  identifier_token: multiplier.frontend.Token
  namespace_key_token: multiplier.frontend.Token
  nominated_namespace_as_written: multiplier.ast.NamedDecl
  using_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UsingDirectiveDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UsingDirectiveDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UsingDirectiveDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UsingDirectiveDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UsingDirectiveDecl]:
    ...

class UnresolvedUsingIfExistsDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.UnresolvedUsingIfExistsDecl
  definition: Optional[multiplier.ast.UnresolvedUsingIfExistsDecl]
  redeclarations: Generator[multiplier.ast.UnresolvedUsingIfExistsDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UnresolvedUsingIfExistsDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UnresolvedUsingIfExistsDecl]:
    ...

class TypeDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.TypeDecl
  definition: Optional[multiplier.ast.TypeDecl]
  redeclarations: Generator[multiplier.ast.TypeDecl]
  type_for_declaration: Optional[multiplier.ast.Type]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TypeDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TypeDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TypeDecl]:
    ...

class TemplateTypeParmDecl(multiplier.ast.TypeDecl):
  canonical_declaration: multiplier.ast.TemplateTypeParmDecl
  definition: Optional[multiplier.ast.TemplateTypeParmDecl]
  redeclarations: Generator[multiplier.ast.TemplateTypeParmDecl]
  default_argument_was_inherited: bool
  default_argument: Optional[multiplier.ast.Type]
  default_argument_info: Optional[multiplier.ast.Type]
  default_argument_token: multiplier.frontend.Token
  has_default_argument: bool
  has_type_constraint: bool
  is_expanded_parameter_pack: bool
  is_pack_expansion: bool
  was_declared_with_typename: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TemplateTypeParmDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TemplateTypeParmDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TemplateTypeParmDecl]:
    ...

class TagDecl(multiplier.ast.TypeDecl):
  canonical_declaration: multiplier.ast.TagDecl
  definition: Optional[multiplier.ast.TagDecl]
  redeclarations: Generator[multiplier.ast.TagDecl]
  brace_range: multiplier.frontend.TokenRange
  first_inner_token: multiplier.frontend.Token
  first_outer_token: multiplier.frontend.Token
  tag_kind: multiplier.ast.TagTypeKind
  typedef_name_for_anonymous_declaration: Optional[multiplier.ast.TypedefNameDecl]
  has_name_for_linkage: bool
  is_being_defined: bool
  is_class: bool
  is_complete_definition: bool
  is_complete_definition_required: bool
  is_dependent_type: bool
  is_enum: bool
  is_free_standing: bool
  is_interface: bool
  is_struct: bool
  is_this_declaration_a_definition: bool
  is_this_declaration_a_demoted_definition: bool
  is_union: bool
  may_have_out_of_date_definition: bool
  num_template_parameter_lists: int
  template_parameter_lists: Generator[multiplier.ast.TemplateParameterList]
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TagDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TagDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TagDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TagDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TagDecl]:
    ...

  def nth_template_parameter_list(self, n: int) -> Optional[multiplier.ast.TemplateParameterList]:
    ...

class RecordDecl(multiplier.ast.TagDecl):
  canonical_declaration: multiplier.ast.RecordDecl
  definition: Optional[multiplier.ast.RecordDecl]
  redeclarations: Generator[multiplier.ast.RecordDecl]
  can_pass_in_registers: bool
  num_fields: int
  fields: Generator[multiplier.ast.FieldDecl]
  argument_passing_restrictions: multiplier.ast.RecordDeclArgPassingKind
  has_flexible_array_member: bool
  has_loaded_fields_from_external_storage: bool
  has_non_trivial_to_primitive_copy_c_union: bool
  has_non_trivial_to_primitive_default_initialize_c_union: bool
  has_non_trivial_to_primitive_destruct_c_union: bool
  has_object_member: bool
  has_volatile_member: bool
  is_anonymous_struct_or_union: bool
  is_captured_record: bool
  is_injected_class_name: bool
  is_lambda: bool
  is_ms_struct: bool
  is_non_trivial_to_primitive_copy: bool
  is_non_trivial_to_primitive_default_initialize: bool
  is_non_trivial_to_primitive_destroy: bool
  is_or_contains_union: bool
  is_parameter_destroyed_in_callee: bool
  is_randomized: bool
  may_insert_extra_padding: bool
  size: Optional[int]
  alignment: Optional[int]
  size_without_trailing_padding: Optional[int]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.RecordDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.RecordDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RecordDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RecordDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.RecordDecl]:
    ...

  def nth_field(self, n: int) -> Optional[multiplier.ast.FieldDecl]:
    ...

class CXXRecordDecl(multiplier.ast.RecordDecl):
  canonical_declaration: multiplier.ast.CXXRecordDecl
  definition: Optional[multiplier.ast.CXXRecordDecl]
  redeclarations: Generator[multiplier.ast.CXXRecordDecl]
  allow_const_default_initializer: Optional[bool]
  bases: Optional[Sequence[multiplier.ast.CXXBaseSpecifier]]
  calculate_inheritance_model: Optional[multiplier.ast.MSInheritanceModel]
  num_constructors: int
  constructors: Generator[multiplier.ast.CXXConstructorDecl]
  friends: Optional[Sequence[multiplier.ast.FriendDecl]]
  dependent_lambda_call_operator: Optional[multiplier.ast.FunctionTemplateDecl]
  described_class_template: Optional[multiplier.ast.ClassTemplateDecl]
  destructor: Optional[multiplier.ast.CXXDestructorDecl]
  generic_lambda_template_parameter_list: Optional[multiplier.ast.TemplateParameterList]
  instantiated_from_member_class: Optional[multiplier.ast.CXXRecordDecl]
  lambda_call_operator: Optional[multiplier.ast.CXXMethodDecl]
  lambda_capture_default: Optional[multiplier.ast.LambdaCaptureDefault]
  lambda_context_declaration: Optional[multiplier.ast.Decl]
  lambda_explicit_template_parameters: Optional[Sequence[multiplier.ast.NamedDecl]]
  lambda_mangling_number: Optional[int]
  ms_inheritance_model: Optional[multiplier.ast.MSInheritanceModel]
  ms_vtor_disp_mode: multiplier.ast.MSVtorDispMode
  odr_hash: Optional[int]
  template_instantiation_pattern: Optional[multiplier.ast.CXXRecordDecl]
  template_specialization_kind: multiplier.ast.TemplateSpecializationKind
  has_any_dependent_bases: Optional[bool]
  has_constexpr_default_constructor: Optional[bool]
  has_constexpr_destructor: Optional[bool]
  has_constexpr_non_copy_move_constructor: Optional[bool]
  has_copy_assignment_with_const_parameter: Optional[bool]
  has_copy_constructor_with_const_parameter: Optional[bool]
  has_default_constructor: Optional[bool]
  has_definition: Optional[bool]
  has_direct_fields: Optional[bool]
  has_friends: Optional[bool]
  has_in_class_initializer: Optional[bool]
  has_inherited_assignment: Optional[bool]
  has_inherited_constructor: Optional[bool]
  has_initializer_method: Optional[bool]
  has_irrelevant_destructor: Optional[bool]
  has_known_lambda_internal_linkage: Optional[bool]
  has_move_assignment: Optional[bool]
  has_move_constructor: Optional[bool]
  has_mutable_fields: Optional[bool]
  has_non_literal_type_fields_or_bases: Optional[bool]
  has_non_trivial_copy_assignment: Optional[bool]
  has_non_trivial_copy_constructor: Optional[bool]
  has_non_trivial_copy_constructor_for_call: Optional[bool]
  has_non_trivial_default_constructor: Optional[bool]
  has_non_trivial_destructor: Optional[bool]
  has_non_trivial_destructor_for_call: Optional[bool]
  has_non_trivial_move_assignment: Optional[bool]
  has_non_trivial_move_constructor: Optional[bool]
  has_non_trivial_move_constructor_for_call: Optional[bool]
  has_private_fields: Optional[bool]
  has_protected_fields: Optional[bool]
  has_simple_copy_assignment: Optional[bool]
  has_simple_copy_constructor: Optional[bool]
  has_simple_destructor: Optional[bool]
  has_simple_move_assignment: Optional[bool]
  has_simple_move_constructor: Optional[bool]
  has_trivial_copy_assignment: Optional[bool]
  has_trivial_copy_constructor: Optional[bool]
  has_trivial_copy_constructor_for_call: Optional[bool]
  has_trivial_default_constructor: Optional[bool]
  has_trivial_destructor: Optional[bool]
  has_trivial_destructor_for_call: Optional[bool]
  has_trivial_move_assignment: Optional[bool]
  has_trivial_move_constructor: Optional[bool]
  has_trivial_move_constructor_for_call: Optional[bool]
  has_uninitialized_reference_member: Optional[bool]
  has_user_declared_constructor: Optional[bool]
  has_user_declared_copy_assignment: Optional[bool]
  has_user_declared_copy_constructor: Optional[bool]
  has_user_declared_destructor: Optional[bool]
  has_user_declared_move_assignment: Optional[bool]
  has_user_declared_move_constructor: Optional[bool]
  has_user_declared_move_operation: Optional[bool]
  has_user_provided_default_constructor: Optional[bool]
  has_variant_members: Optional[bool]
  implicit_copy_assignment_has_const_parameter: Optional[bool]
  implicit_copy_constructor_has_const_parameter: Optional[bool]
  is_abstract: Optional[bool]
  is_aggregate: Optional[bool]
  is_any_destructor_no_return: Optional[bool]
  is_c_like: Optional[bool]
  is_cxx11_standard_layout: Optional[bool]
  is_dependent_lambda: bool
  is_dynamic_class: Optional[bool]
  is_effectively_final: Optional[bool]
  is_empty: Optional[bool]
  is_generic_lambda: bool
  is_interface_like: Optional[bool]
  is_literal: Optional[bool]
  is_local_class: Optional[multiplier.ast.FunctionDecl]
  is_never_dependent_lambda: bool
  is_pod: Optional[bool]
  is_polymorphic: Optional[bool]
  is_standard_layout: Optional[bool]
  is_structural: Optional[bool]
  is_trivial: Optional[bool]
  is_trivially_copyable: Optional[bool]
  lambda_is_default_constructible_and_assignable: Optional[bool]
  may_be_abstract: Optional[bool]
  may_be_dynamic_class: Optional[bool]
  may_be_non_dynamic_class: Optional[bool]
  methods: Optional[Sequence[multiplier.ast.CXXMethodDecl]]
  needs_implicit_copy_assignment: Optional[bool]
  needs_implicit_copy_constructor: Optional[bool]
  needs_implicit_default_constructor: Optional[bool]
  needs_implicit_destructor: Optional[bool]
  needs_implicit_move_assignment: Optional[bool]
  needs_implicit_move_constructor: Optional[bool]
  needs_overload_resolution_for_copy_assignment: Optional[bool]
  needs_overload_resolution_for_copy_constructor: Optional[bool]
  needs_overload_resolution_for_destructor: Optional[bool]
  needs_overload_resolution_for_move_assignment: Optional[bool]
  needs_overload_resolution_for_move_constructor: Optional[bool]
  null_field_offset_is_zero: Optional[bool]
  virtual_bases: Optional[Sequence[multiplier.ast.CXXBaseSpecifier]]
  size_without_virtual_bases: Optional[int]
  primary_base: Optional[multiplier.ast.CXXRecordDecl]
  has_own_virtual_function_table_pointer: Optional[bool]
  has_extendable_virtual_function_table_pointer: Optional[bool]
  has_virtual_base_table_pointer: Optional[bool]
  has_own_virtual_base_table_pointer: Optional[bool]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.CXXRecordDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.CXXRecordDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.CXXRecordDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.CXXRecordDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.CXXRecordDecl]:
    ...

  def nth_constructor(self, n: int) -> Optional[multiplier.ast.CXXConstructorDecl]:
    ...

class ClassTemplateSpecializationDecl(multiplier.ast.CXXRecordDecl):
  canonical_declaration: multiplier.ast.ClassTemplateSpecializationDecl
  definition: Optional[multiplier.ast.ClassTemplateSpecializationDecl]
  redeclarations: Generator[multiplier.ast.ClassTemplateSpecializationDecl]
  extern_token: multiplier.frontend.Token
  point_of_instantiation: multiplier.frontend.Token
  specialization_kind: multiplier.ast.TemplateSpecializationKind
  specialized_template: multiplier.ast.ClassTemplateDecl
  num_template_arguments: int
  template_arguments: Generator[multiplier.ast.TemplateArgument]
  num_template_instantiation_arguments: int
  template_instantiation_arguments: Generator[multiplier.ast.TemplateArgument]
  template_keyword_token: multiplier.frontend.Token
  type_as_written: Optional[multiplier.ast.Type]
  is_class_scope_explicit_specialization: bool
  is_explicit_instantiation_or_specialization: bool
  is_explicit_specialization: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ClassTemplateSpecializationDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ClassTemplateSpecializationDecl]:
    ...

  def nth_template_argument(self, n: int) -> Optional[multiplier.ast.TemplateArgument]:
    ...

  def nth_template_instantiation_argument(self, n: int) -> Optional[multiplier.ast.TemplateArgument]:
    ...

class ClassTemplatePartialSpecializationDecl(multiplier.ast.ClassTemplateSpecializationDecl):
  canonical_declaration: multiplier.ast.ClassTemplatePartialSpecializationDecl
  definition: Optional[multiplier.ast.ClassTemplatePartialSpecializationDecl]
  redeclarations: Generator[multiplier.ast.ClassTemplatePartialSpecializationDecl]
  injected_specialization_type: multiplier.ast.Type
  instantiated_from_member: Optional[multiplier.ast.ClassTemplatePartialSpecializationDecl]
  instantiated_from_member_template: Optional[multiplier.ast.ClassTemplatePartialSpecializationDecl]
  template_parameters: multiplier.ast.TemplateParameterList
  has_associated_constraints: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ClassTemplatePartialSpecializationDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ClassTemplatePartialSpecializationDecl]:
    ...

class EnumDecl(multiplier.ast.TagDecl):
  canonical_declaration: multiplier.ast.EnumDecl
  definition: Optional[multiplier.ast.EnumDecl]
  redeclarations: Generator[multiplier.ast.EnumDecl]
  num_enumerators: int
  enumerators: Generator[multiplier.ast.EnumConstantDecl]
  instantiated_from_member_enum: Optional[multiplier.ast.EnumDecl]
  integer_type: Optional[multiplier.ast.Type]
  integer_type_range: multiplier.frontend.TokenRange
  odr_hash: Optional[int]
  promotion_type: Optional[multiplier.ast.Type]
  template_instantiation_pattern: Optional[multiplier.ast.EnumDecl]
  template_specialization_kind: multiplier.ast.TemplateSpecializationKind
  is_closed: bool
  is_closed_flag: bool
  is_closed_non_flag: bool
  is_complete: bool
  is_fixed: bool
  is_scoped: bool
  is_scoped_using_class_tag: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.EnumDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.EnumDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.EnumDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.EnumDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.EnumDecl]:
    ...

  def nth_enumerator(self, n: int) -> Optional[multiplier.ast.EnumConstantDecl]:
    ...

class UnresolvedUsingTypenameDecl(multiplier.ast.TypeDecl):
  canonical_declaration: multiplier.ast.UnresolvedUsingTypenameDecl
  definition: Optional[multiplier.ast.UnresolvedUsingTypenameDecl]
  redeclarations: Generator[multiplier.ast.UnresolvedUsingTypenameDecl]
  ellipsis_token: multiplier.frontend.Token
  typename_token: multiplier.frontend.Token
  using_token: multiplier.frontend.Token
  is_pack_expansion: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.UnresolvedUsingTypenameDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.UnresolvedUsingTypenameDecl]:
    ...

class TypedefNameDecl(multiplier.ast.TypeDecl):
  canonical_declaration: multiplier.ast.TypedefNameDecl
  definition: Optional[multiplier.ast.TypedefNameDecl]
  redeclarations: Generator[multiplier.ast.TypedefNameDecl]
  anonymous_declaration_with_typedef_name: Optional[multiplier.ast.TagDecl]
  underlying_type: multiplier.ast.Type
  is_moded: bool
  is_transparent_tag: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TypedefNameDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TypedefNameDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypedefNameDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypedefNameDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TypedefNameDecl]:
    ...

class TypedefDecl(multiplier.ast.TypedefNameDecl):
  canonical_declaration: multiplier.ast.TypedefDecl
  definition: Optional[multiplier.ast.TypedefDecl]
  redeclarations: Generator[multiplier.ast.TypedefDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TypedefDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TypedefDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypedefDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypedefDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TypedefDecl]:
    ...

class TypeAliasDecl(multiplier.ast.TypedefNameDecl):
  canonical_declaration: multiplier.ast.TypeAliasDecl
  definition: Optional[multiplier.ast.TypeAliasDecl]
  redeclarations: Generator[multiplier.ast.TypeAliasDecl]
  described_alias_template: Optional[multiplier.ast.TypeAliasTemplateDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TypeAliasDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TypeAliasDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeAliasDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TypeAliasDecl]:
    ...

class ObjCTypeParamDecl(multiplier.ast.TypedefNameDecl):
  canonical_declaration: multiplier.ast.ObjCTypeParamDecl
  definition: Optional[multiplier.ast.ObjCTypeParamDecl]
  redeclarations: Generator[multiplier.ast.ObjCTypeParamDecl]
  colon_token: multiplier.frontend.Token
  variance: multiplier.ast.ObjCTypeParamVariance
  variance_token: multiplier.frontend.Token
  has_explicit_bound: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCTypeParamDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCTypeParamDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCTypeParamDecl]:
    ...

class TemplateDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.TemplateDecl
  definition: Optional[multiplier.ast.TemplateDecl]
  redeclarations: Generator[multiplier.ast.TemplateDecl]
  template_parameters: multiplier.ast.TemplateParameterList
  templated_declaration: Optional[multiplier.ast.NamedDecl]
  has_associated_constraints: bool
  is_type_alias: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TemplateDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TemplateDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TemplateDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TemplateDecl]:
    ...

class RedeclarableTemplateDecl(multiplier.ast.TemplateDecl):
  canonical_declaration: multiplier.ast.RedeclarableTemplateDecl
  definition: Optional[multiplier.ast.RedeclarableTemplateDecl]
  redeclarations: Generator[multiplier.ast.RedeclarableTemplateDecl]
  instantiated_from_member_template: Optional[multiplier.ast.RedeclarableTemplateDecl]
  is_member_specialization: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.RedeclarableTemplateDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.RedeclarableTemplateDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.RedeclarableTemplateDecl]:
    ...

class FunctionTemplateDecl(multiplier.ast.RedeclarableTemplateDecl):
  canonical_declaration: multiplier.ast.FunctionTemplateDecl
  definition: Optional[multiplier.ast.FunctionTemplateDecl]
  redeclarations: Generator[multiplier.ast.FunctionTemplateDecl]
  is_abbreviated: bool
  is_this_declaration_a_definition: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.FunctionTemplateDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.FunctionTemplateDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FunctionTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FunctionTemplateDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.FunctionTemplateDecl]:
    ...

class ClassTemplateDecl(multiplier.ast.RedeclarableTemplateDecl):
  canonical_declaration: multiplier.ast.ClassTemplateDecl
  definition: Optional[multiplier.ast.ClassTemplateDecl]
  redeclarations: Generator[multiplier.ast.ClassTemplateDecl]
  is_this_declaration_a_definition: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ClassTemplateDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ClassTemplateDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ClassTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ClassTemplateDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ClassTemplateDecl]:
    ...

class VarTemplateDecl(multiplier.ast.RedeclarableTemplateDecl):
  canonical_declaration: multiplier.ast.VarTemplateDecl
  definition: Optional[multiplier.ast.VarTemplateDecl]
  redeclarations: Generator[multiplier.ast.VarTemplateDecl]
  is_this_declaration_a_definition: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.VarTemplateDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.VarTemplateDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.VarTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.VarTemplateDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.VarTemplateDecl]:
    ...

class TypeAliasTemplateDecl(multiplier.ast.RedeclarableTemplateDecl):
  canonical_declaration: multiplier.ast.TypeAliasTemplateDecl
  definition: Optional[multiplier.ast.TypeAliasTemplateDecl]
  redeclarations: Generator[multiplier.ast.TypeAliasTemplateDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TypeAliasTemplateDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TypeAliasTemplateDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TypeAliasTemplateDecl]:
    ...

class ConceptDecl(multiplier.ast.TemplateDecl):
  canonical_declaration: multiplier.ast.ConceptDecl
  definition: Optional[multiplier.ast.ConceptDecl]
  redeclarations: Generator[multiplier.ast.ConceptDecl]
  constraint_expression: multiplier.ast.Expr
  is_type_concept: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ConceptDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ConceptDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ConceptDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ConceptDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ConceptDecl]:
    ...

class BuiltinTemplateDecl(multiplier.ast.TemplateDecl):
  canonical_declaration: multiplier.ast.BuiltinTemplateDecl
  definition: Optional[multiplier.ast.BuiltinTemplateDecl]
  redeclarations: Generator[multiplier.ast.BuiltinTemplateDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.BuiltinTemplateDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.BuiltinTemplateDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.BuiltinTemplateDecl]:
    ...

class TemplateTemplateParmDecl(multiplier.ast.TemplateDecl):
  canonical_declaration: multiplier.ast.TemplateTemplateParmDecl
  definition: Optional[multiplier.ast.TemplateTemplateParmDecl]
  redeclarations: Generator[multiplier.ast.TemplateTemplateParmDecl]
  default_argument_was_inherited: bool
  default_argument_token: multiplier.frontend.Token
  has_default_argument: bool
  is_expanded_parameter_pack: bool
  is_pack_expansion: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.TemplateTemplateParmDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.TemplateTemplateParmDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.TemplateTemplateParmDecl]:
    ...

class ObjCPropertyDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.ObjCPropertyDecl
  definition: Optional[multiplier.ast.ObjCPropertyDecl]
  redeclarations: Generator[multiplier.ast.ObjCPropertyDecl]
  at_token: multiplier.frontend.Token
  getter_method_declaration: multiplier.ast.ObjCMethodDecl
  getter_name_token: multiplier.frontend.Token
  l_paren_token: multiplier.frontend.Token
  property_implementation: multiplier.ast.ObjCPropertyDeclPropertyControl
  property_instance_variable_declaration: multiplier.ast.ObjCIvarDecl
  query_kind: multiplier.ast.ObjCPropertyQueryKind
  setter_kind: multiplier.ast.ObjCPropertyDeclSetterKind
  setter_method_declaration: multiplier.ast.ObjCMethodDecl
  setter_name_token: multiplier.frontend.Token
  type: multiplier.ast.Type
  is_atomic: bool
  is_class_property: bool
  is_direct_property: bool
  is_instance_property: bool
  is_optional: bool
  is_read_only: bool
  is_retaining: bool

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCPropertyDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCPropertyDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCPropertyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCPropertyDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCPropertyDecl]:
    ...

class ObjCMethodDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.ObjCMethodDecl
  definition: Optional[multiplier.ast.ObjCMethodDecl]
  redeclarations: Generator[multiplier.ast.ObjCMethodDecl]
  defined_in_ns_object: bool
  find_property_declaration: multiplier.ast.ObjCPropertyDecl
  class_interface: multiplier.ast.ObjCInterfaceDecl
  command_declaration: multiplier.ast.ImplicitParamDecl
  declarator_end_token: multiplier.frontend.Token
  implementation_control: multiplier.ast.ObjCMethodDeclImplementationControl
  method_family: multiplier.ast.ObjCMethodFamily
  obj_c_decl_qualifier: multiplier.ast.DeclObjCDeclQualifier
  return_type: multiplier.ast.Type
  return_type_tokens: multiplier.frontend.TokenRange
  selector_start_token: multiplier.frontend.Token
  self_declaration: multiplier.ast.ImplicitParamDecl
  has_parameter_destroyed_in_callee: bool
  has_redeclaration: bool
  has_related_result_type: bool
  has_skipped_body: bool
  is_class_method: bool
  is_defined: bool
  is_designated_initializer_for_the_interface: bool
  is_direct_method: bool
  is_instance_method: bool
  is_optional: bool
  is_overriding: bool
  is_property_accessor: bool
  is_redeclaration: bool
  is_synthesized_accessor_stub: bool
  is_this_declaration_a_definition: bool
  is_this_declaration_a_designated_initializer: bool
  is_variadic: bool
  num_parameters: int
  parameters: Generator[multiplier.ast.ParmVarDecl]
  num_selector_tokens: int
  selector_tokens: Generator[multiplier.frontend.Token]
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCMethodDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCMethodDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCMethodDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCMethodDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCMethodDecl]:
    ...

  def nth_parameter(self, n: int) -> Optional[multiplier.ast.ParmVarDecl]:
    ...

  def nth_selector_token(self, n: int) -> Optional[multiplier.frontend.Token]:
    ...

class ObjCContainerDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.ObjCContainerDecl
  definition: Optional[multiplier.ast.ObjCContainerDecl]
  redeclarations: Generator[multiplier.ast.ObjCContainerDecl]
  num_class_methods: int
  class_methods: Generator[multiplier.ast.ObjCMethodDecl]
  num_class_properties: int
  class_properties: Generator[multiplier.ast.ObjCPropertyDecl]
  at_end_range: multiplier.frontend.TokenRange
  at_start_token: multiplier.frontend.Token
  num_instance_methods: int
  instance_methods: Generator[multiplier.ast.ObjCMethodDecl]
  num_instance_properties: int
  instance_properties: Generator[multiplier.ast.ObjCPropertyDecl]
  num_methods: int
  methods: Generator[multiplier.ast.ObjCMethodDecl]
  num_properties: int
  properties: Generator[multiplier.ast.ObjCPropertyDecl]
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCContainerDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCContainerDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCContainerDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCContainerDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCContainerDecl]:
    ...

  def nth_class_method(self, n: int) -> Optional[multiplier.ast.ObjCMethodDecl]:
    ...

  def nth_class_propertie(self, n: int) -> Optional[multiplier.ast.ObjCPropertyDecl]:
    ...

  def nth_instance_method(self, n: int) -> Optional[multiplier.ast.ObjCMethodDecl]:
    ...

  def nth_instance_propertie(self, n: int) -> Optional[multiplier.ast.ObjCPropertyDecl]:
    ...

  def nth_method(self, n: int) -> Optional[multiplier.ast.ObjCMethodDecl]:
    ...

  def nth_propertie(self, n: int) -> Optional[multiplier.ast.ObjCPropertyDecl]:
    ...

class ObjCCategoryDecl(multiplier.ast.ObjCContainerDecl):
  canonical_declaration: multiplier.ast.ObjCCategoryDecl
  definition: Optional[multiplier.ast.ObjCCategoryDecl]
  redeclarations: Generator[multiplier.ast.ObjCCategoryDecl]
  is_class_extension: bool
  category_name_token: multiplier.frontend.Token
  class_interface: multiplier.ast.ObjCInterfaceDecl
  implementation: multiplier.ast.ObjCCategoryImplDecl
  instance_variable_l_brace_token: multiplier.frontend.Token
  instance_variable_r_brace_token: multiplier.frontend.Token
  next_class_category: multiplier.ast.ObjCCategoryDecl
  num_instance_variables: int
  instance_variables: Generator[multiplier.ast.ObjCIvarDecl]
  num_protocol_tokens: int
  protocol_tokens: Generator[multiplier.frontend.Token]
  num_protocols: int
  protocols: Generator[multiplier.ast.ObjCProtocolDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCCategoryDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCCategoryDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCCategoryDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCCategoryDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCCategoryDecl]:
    ...

  def nth_instance_variable(self, n: int) -> Optional[multiplier.ast.ObjCIvarDecl]:
    ...

  def nth_protocol_token(self, n: int) -> Optional[multiplier.frontend.Token]:
    ...

  def nth_protocol(self, n: int) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

class ObjCProtocolDecl(multiplier.ast.ObjCContainerDecl):
  canonical_declaration: multiplier.ast.ObjCProtocolDecl
  definition: Optional[multiplier.ast.ObjCProtocolDecl]
  redeclarations: Generator[multiplier.ast.ObjCProtocolDecl]
  obj_c_runtime_name_as_string: str
  has_definition: bool
  is_non_runtime_protocol: bool
  is_this_declaration_a_definition: bool
  num_protocol_tokens: int
  protocol_tokens: Generator[multiplier.frontend.Token]
  num_protocols: int
  protocols: Generator[multiplier.ast.ObjCProtocolDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCProtocolDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCProtocolDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

  def nth_protocol_token(self, n: int) -> Optional[multiplier.frontend.Token]:
    ...

  def nth_protocol(self, n: int) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

class ObjCInterfaceDecl(multiplier.ast.ObjCContainerDecl):
  canonical_declaration: multiplier.ast.ObjCInterfaceDecl
  definition: Optional[multiplier.ast.ObjCInterfaceDecl]
  redeclarations: Generator[multiplier.ast.ObjCInterfaceDecl]
  num_all_referenced_protocols: int
  all_referenced_protocols: Generator[multiplier.ast.ObjCProtocolDecl]
  declares_or_inherits_designated_initializers: bool
  end_of_definition_token: multiplier.frontend.Token
  implementation: multiplier.ast.ObjCImplementationDecl
  obj_c_runtime_name_as_string: str
  super_class: Optional[multiplier.ast.ObjCInterfaceDecl]
  super_class_token: multiplier.frontend.Token
  super_class_type: Optional[multiplier.ast.Type]
  type_for_declaration: multiplier.ast.Type
  has_definition: bool
  has_designated_initializers: bool
  is_arc_weakref_unavailable: bool
  is_implicit_interface_declaration: bool
  is_obj_c_requires_property_definitions: multiplier.ast.ObjCInterfaceDecl
  is_this_declaration_a_definition: bool
  num_instance_variables: int
  instance_variables: Generator[multiplier.ast.ObjCIvarDecl]
  num_known_categories: int
  known_categories: Generator[multiplier.ast.ObjCCategoryDecl]
  num_known_extensions: int
  known_extensions: Generator[multiplier.ast.ObjCCategoryDecl]
  num_protocol_tokens: int
  protocol_tokens: Generator[multiplier.frontend.Token]
  num_protocols: int
  protocols: Generator[multiplier.ast.ObjCProtocolDecl]
  num_visible_categories: int
  visible_categories: Generator[multiplier.ast.ObjCCategoryDecl]
  num_visible_extensions: int
  visible_extensions: Generator[multiplier.ast.ObjCCategoryDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCInterfaceDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCInterfaceDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCInterfaceDecl]:
    ...

  def nth_all_referenced_protocol(self, n: int) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

  def nth_instance_variable(self, n: int) -> Optional[multiplier.ast.ObjCIvarDecl]:
    ...

  def nth_known_categorie(self, n: int) -> Optional[multiplier.ast.ObjCCategoryDecl]:
    ...

  def nth_known_extension(self, n: int) -> Optional[multiplier.ast.ObjCCategoryDecl]:
    ...

  def nth_protocol_token(self, n: int) -> Optional[multiplier.frontend.Token]:
    ...

  def nth_protocol(self, n: int) -> Optional[multiplier.ast.ObjCProtocolDecl]:
    ...

  def nth_visible_categorie(self, n: int) -> Optional[multiplier.ast.ObjCCategoryDecl]:
    ...

  def nth_visible_extension(self, n: int) -> Optional[multiplier.ast.ObjCCategoryDecl]:
    ...

class ObjCImplDecl(multiplier.ast.ObjCContainerDecl):
  canonical_declaration: multiplier.ast.ObjCImplDecl
  definition: Optional[multiplier.ast.ObjCImplDecl]
  redeclarations: Generator[multiplier.ast.ObjCImplDecl]
  class_interface: multiplier.ast.ObjCInterfaceDecl
  num_property_implementations: int
  property_implementations: Generator[multiplier.ast.ObjCPropertyImplDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCImplDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCImplDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCImplDecl]:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCImplDecl]:
    ...

  def nth_property_implementation(self, n: int) -> Optional[multiplier.ast.ObjCPropertyImplDecl]:
    ...

class ObjCCategoryImplDecl(multiplier.ast.ObjCImplDecl):
  canonical_declaration: multiplier.ast.ObjCCategoryImplDecl
  definition: Optional[multiplier.ast.ObjCCategoryImplDecl]
  redeclarations: Generator[multiplier.ast.ObjCCategoryImplDecl]
  category_declaration: multiplier.ast.ObjCCategoryDecl
  category_name_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCCategoryImplDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCCategoryImplDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCCategoryImplDecl]:
    ...

class ObjCImplementationDecl(multiplier.ast.ObjCImplDecl):
  canonical_declaration: multiplier.ast.ObjCImplementationDecl
  definition: Optional[multiplier.ast.ObjCImplementationDecl]
  redeclarations: Generator[multiplier.ast.ObjCImplementationDecl]
  instance_variable_l_brace_token: multiplier.frontend.Token
  instance_variable_r_brace_token: multiplier.frontend.Token
  obj_c_runtime_name_as_string: str
  super_class: multiplier.ast.ObjCInterfaceDecl
  super_class_token: multiplier.frontend.Token
  has_destructors: bool
  has_non_zero_constructors: bool
  num_instance_variables: int
  instance_variables: Generator[multiplier.ast.ObjCIvarDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCImplementationDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCImplementationDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCImplementationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCImplementationDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCImplementationDecl]:
    ...

  def nth_instance_variable(self, n: int) -> Optional[multiplier.ast.ObjCIvarDecl]:
    ...

class ObjCCompatibleAliasDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.ObjCCompatibleAliasDecl
  definition: Optional[multiplier.ast.ObjCCompatibleAliasDecl]
  redeclarations: Generator[multiplier.ast.ObjCCompatibleAliasDecl]
  class_interface: multiplier.ast.ObjCInterfaceDecl

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ObjCCompatibleAliasDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ObjCCompatibleAliasDecl]:
    ...

class NamespaceDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.NamespaceDecl
  definition: Optional[multiplier.ast.NamespaceDecl]
  redeclarations: Generator[multiplier.ast.NamespaceDecl]
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.NamespaceDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.NamespaceDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NamespaceDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NamespaceDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.NamespaceDecl]:
    ...

class NamespaceAliasDecl(multiplier.ast.NamedDecl):
  canonical_declaration: multiplier.ast.NamespaceAliasDecl
  definition: Optional[multiplier.ast.NamespaceAliasDecl]
  redeclarations: Generator[multiplier.ast.NamespaceAliasDecl]
  alias_token: multiplier.frontend.Token
  aliased_namespace: multiplier.ast.NamedDecl
  namespace_token: multiplier.frontend.Token
  target_name_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.NamespaceAliasDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.NamespaceAliasDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.NamespaceAliasDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.NamespaceAliasDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.NamespaceAliasDecl]:
    ...

class LinkageSpecDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.LinkageSpecDecl
  definition: Optional[multiplier.ast.LinkageSpecDecl]
  redeclarations: Generator[multiplier.ast.LinkageSpecDecl]
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.LinkageSpecDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.LinkageSpecDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LinkageSpecDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LinkageSpecDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.LinkageSpecDecl]:
    ...

class LifetimeExtendedTemporaryDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.LifetimeExtendedTemporaryDecl
  definition: Optional[multiplier.ast.LifetimeExtendedTemporaryDecl]
  redeclarations: Generator[multiplier.ast.LifetimeExtendedTemporaryDecl]
  children: Generator[multiplier.ast.Stmt]
  extending_declaration: multiplier.ast.ValueDecl
  storage_duration: multiplier.ast.StorageDuration
  temporary_expression: multiplier.ast.Expr

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.LifetimeExtendedTemporaryDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.LifetimeExtendedTemporaryDecl]:
    ...

class ImportDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.ImportDecl
  definition: Optional[multiplier.ast.ImportDecl]
  redeclarations: Generator[multiplier.ast.ImportDecl]
  num_identifier_tokens: int
  identifier_tokens: Generator[multiplier.frontend.Token]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ImportDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ImportDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ImportDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ImportDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ImportDecl]:
    ...

  def nth_identifier_token(self, n: int) -> Optional[multiplier.frontend.Token]:
    ...

class ImplicitConceptSpecializationDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.ImplicitConceptSpecializationDecl
  definition: Optional[multiplier.ast.ImplicitConceptSpecializationDecl]
  redeclarations: Generator[multiplier.ast.ImplicitConceptSpecializationDecl]
  num_template_arguments: int
  template_arguments: Generator[multiplier.ast.TemplateArgument]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ImplicitConceptSpecializationDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ImplicitConceptSpecializationDecl]:
    ...

  def nth_template_argument(self, n: int) -> Optional[multiplier.ast.TemplateArgument]:
    ...

class FriendTemplateDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.FriendTemplateDecl
  definition: Optional[multiplier.ast.FriendTemplateDecl]
  redeclarations: Generator[multiplier.ast.FriendTemplateDecl]
  friend_declaration: multiplier.ast.NamedDecl
  friend_token: multiplier.frontend.Token
  friend_type: multiplier.ast.Type
  num_template_parameter_lists: int
  template_parameter_lists: Generator[multiplier.ast.TemplateParameterList]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.FriendTemplateDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.FriendTemplateDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FriendTemplateDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FriendTemplateDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.FriendTemplateDecl]:
    ...

  def nth_template_parameter_list(self, n: int) -> Optional[multiplier.ast.TemplateParameterList]:
    ...

class FriendDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.FriendDecl
  definition: Optional[multiplier.ast.FriendDecl]
  redeclarations: Generator[multiplier.ast.FriendDecl]
  friend_declaration: Optional[multiplier.ast.NamedDecl]
  friend_token: multiplier.frontend.Token
  friend_type: Optional[multiplier.ast.Type]
  is_unsupported_friend: bool
  num_friend_type_template_parameter_lists: int
  friend_type_template_parameter_lists: Generator[multiplier.ast.TemplateParameterList]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.FriendDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.FriendDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FriendDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FriendDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.FriendDecl]:
    ...

  def nth_friend_type_template_parameter_list(self, n: int) -> Optional[multiplier.ast.TemplateParameterList]:
    ...

class FileScopeAsmDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.FileScopeAsmDecl
  definition: Optional[multiplier.ast.FileScopeAsmDecl]
  redeclarations: Generator[multiplier.ast.FileScopeAsmDecl]
  assembly_token: multiplier.frontend.Token
  assembly_string: multiplier.ast.StringLiteral
  r_paren_token: multiplier.frontend.Token

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.FileScopeAsmDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.FileScopeAsmDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.FileScopeAsmDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.FileScopeAsmDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.FileScopeAsmDecl]:
    ...

class ExternCContextDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.ExternCContextDecl
  definition: Optional[multiplier.ast.ExternCContextDecl]
  redeclarations: Generator[multiplier.ast.ExternCContextDecl]
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ExternCContextDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ExternCContextDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ExternCContextDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ExternCContextDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ExternCContextDecl]:
    ...

class ExportDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.ExportDecl
  definition: Optional[multiplier.ast.ExportDecl]
  redeclarations: Generator[multiplier.ast.ExportDecl]
  export_token: multiplier.frontend.Token
  r_brace_token: multiplier.frontend.Token
  has_braces: bool
  declarations_in_context: Generator[multiplier.ast.Decl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.ExportDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.ExportDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.ExportDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.ExportDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.ExportDecl]:
    ...

class EmptyDecl(multiplier.ast.Decl):
  canonical_declaration: multiplier.ast.EmptyDecl
  definition: Optional[multiplier.ast.EmptyDecl]
  redeclarations: Generator[multiplier.ast.EmptyDecl]

  @overload
  @staticmethod
  def IN(index: multiplier.Index) -> Generator[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def IN(frag: multiplier.Fragment) -> Generator[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def IN(file: multiplier.frontend.File) -> Generator[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def IN(tu: multiplier.frontend.Compilation) -> Generator[Tuple[multiplier.ast.EmptyDecl, multiplier.ir.Operation]]:
    ...

  @overload
  @staticmethod
  def containing(tok: multiplier.frontend.Token) -> Generator[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: multiplier.ast.Decl) -> Generator[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def containing(decl: Optional[multiplier.ast.Decl]) -> Generator[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: multiplier.ast.Stmt) -> Generator[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def containing(stmt: Optional[multiplier.ast.Stmt]) -> Generator[multiplier.ast.EmptyDecl]:
    ...

  @staticmethod
  def by_id(arg_0: multiplier.Index, arg_1: int) -> Optional[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(op: multiplier.ir.Operation) -> Optional[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(parent: Optional[multiplier.ast.Decl]) -> Optional[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(r: multiplier.Reference) -> Optional[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(e: Optional[multiplier.Fragment | multiplier.ast.Decl | multiplier.ast.Stmt | multiplier.ast.Attr | multiplier.frontend.Macro | multiplier.ast.Type | multiplier.frontend.File | multiplier.frontend.Token | multiplier.ast.TemplateArgument | multiplier.ast.TemplateParameterList | multiplier.ast.CXXBaseSpecifier | multiplier.ast.Designator | multiplier.frontend.Compilation | multiplier.ir.Operation]) -> Optional[multiplier.ast.EmptyDecl]:
    ...

  @overload
  @staticmethod
  def FROM(t: multiplier.frontend.TokenContext) -> Optional[multiplier.ast.EmptyDecl]:
    ...

  @staticmethod
  def static_kind() -> multiplier.ast.DeclKind:
    ...

  @staticmethod
  def from_base(parent: multiplier.ast.Decl) -> Optional[multiplier.ast.EmptyDecl]:
    ...
