// Copyright (c) 2022-present, Trail of Bits, Inc.
// All rights reserved.
//
// This source code is licensed in accordance with the terms specified in
// the LICENSE file found in the root directory of this source tree.

// Auto-generated file; do not modify!

#pragma once

#include <cstdint>
#include <multiplier/AST.capnp.h>
#include <optional>

namespace pasta {
class Decl;
class EmptyDecl;
class ExportDecl;
class ExternCContextDecl;
class FileScopeAsmDecl;
class FriendDecl;
class FriendTemplateDecl;
class ImplicitConceptSpecializationDecl;
class ImportDecl;
class LifetimeExtendedTemporaryDecl;
class LinkageSpecDecl;
class NamedDecl;
class NamespaceAliasDecl;
class NamespaceDecl;
class ObjCCompatibleAliasDecl;
class ObjCContainerDecl;
class ObjCImplDecl;
class ObjCImplementationDecl;
class ObjCInterfaceDecl;
class ObjCMethodDecl;
class ObjCPropertyDecl;
class ObjCPropertyImplDecl;
class ObjCProtocolDecl;
class PragmaCommentDecl;
class PragmaDetectMismatchDecl;
class RequiresExprBodyDecl;
class StaticAssertDecl;
class TemplateDecl;
class TemplateTemplateParmDecl;
class TopLevelStmtDecl;
class TranslationUnitDecl;
class TypeDecl;
class TypedefNameDecl;
class UnresolvedUsingIfExistsDecl;
class UnresolvedUsingTypenameDecl;
class UsingDirectiveDecl;
class UsingPackDecl;
class UsingShadowDecl;
class ValueDecl;
class OMPDeclarativeDirectiveDecl;
class OMPDeclarativeDirectiveValueDecl;
class AccessSpecDecl;
class BaseUsingDecl;
class BindingDecl;
class BlockDecl;
class BuiltinTemplateDecl;
class CapturedDecl;
class ClassScopeFunctionSpecializationDecl;
class ConceptDecl;
class ConstructorUsingShadowDecl;
class DeclaratorDecl;
class EnumConstantDecl;
class FieldDecl;
class FunctionDecl;
class HLSLBufferDecl;
class IndirectFieldDecl;
class LabelDecl;
class MSGuidDecl;
class MSPropertyDecl;
class NonTypeTemplateParmDecl;
class OMPAllocateDecl;
class OMPDeclareMapperDecl;
class OMPDeclareReductionDecl;
class OMPRequiresDecl;
class OMPThreadPrivateDecl;
class ObjCAtDefsFieldDecl;
class ObjCCategoryDecl;
class ObjCCategoryImplDecl;
class ObjCIvarDecl;
class ObjCTypeParamDecl;
class RedeclarableTemplateDecl;
class TagDecl;
class TemplateParamObjectDecl;
class TemplateTypeParmDecl;
class TypeAliasDecl;
class TypeAliasTemplateDecl;
class TypedefDecl;
class UnnamedGlobalConstantDecl;
class UnresolvedUsingValueDecl;
class UsingDecl;
class UsingEnumDecl;
class VarDecl;
class VarTemplateDecl;
class VarTemplateSpecializationDecl;
class CXXDeductionGuideDecl;
class CXXMethodDecl;
class ClassTemplateDecl;
class DecompositionDecl;
class EnumDecl;
class FunctionTemplateDecl;
class ImplicitParamDecl;
class OMPCapturedExprDecl;
class ParmVarDecl;
class RecordDecl;
class VarTemplatePartialSpecializationDecl;
class CXXConstructorDecl;
class CXXConversionDecl;
class CXXDestructorDecl;
class CXXRecordDecl;
class ClassTemplateSpecializationDecl;
class ClassTemplatePartialSpecializationDecl;
class Stmt;
class SwitchCase;
class SwitchStmt;
class ValueStmt;
class WhileStmt;
class AsmStmt;
class AttributedStmt;
class BreakStmt;
class CXXCatchStmt;
class CXXForRangeStmt;
class CXXTryStmt;
class CapturedStmt;
class CaseStmt;
class CompoundStmt;
class ContinueStmt;
class CoreturnStmt;
class CoroutineBodyStmt;
class DeclStmt;
class DefaultStmt;
class DoStmt;
class Expr;
class ExpressionTraitExpr;
class ExtVectorElementExpr;
class FixedPointLiteral;
class FloatingLiteral;
class ForStmt;
class FullExpr;
class FunctionParmPackExpr;
class GCCAsmStmt;
class GNUNullExpr;
class GenericSelectionExpr;
class GotoStmt;
class IfStmt;
class ImaginaryLiteral;
class ImplicitValueInitExpr;
class IndirectGotoStmt;
class InitListExpr;
class IntegerLiteral;
class LabelStmt;
class LambdaExpr;
class MSAsmStmt;
class MSDependentExistsStmt;
class MSPropertyRefExpr;
class MSPropertySubscriptExpr;
class MaterializeTemporaryExpr;
class MatrixSubscriptExpr;
class MemberExpr;
class NoInitExpr;
class NullStmt;
class OMPArraySectionExpr;
class OMPArrayShapingExpr;
class OMPCanonicalLoop;
class OMPExecutableDirective;
class OMPFlushDirective;
class OMPInteropDirective;
class OMPIteratorExpr;
class OMPLoopBasedDirective;
class OMPLoopDirective;
class OMPLoopTransformationDirective;
class OMPMaskedDirective;
class OMPMaskedTaskLoopDirective;
class OMPMaskedTaskLoopSimdDirective;
class OMPMasterDirective;
class OMPMasterTaskLoopDirective;
class OMPMasterTaskLoopSimdDirective;
class OMPMetaDirective;
class OMPOrderedDirective;
class OMPParallelDirective;
class OMPParallelForDirective;
class OMPParallelForSimdDirective;
class OMPParallelGenericLoopDirective;
class OMPParallelMaskedDirective;
class OMPParallelMaskedTaskLoopDirective;
class OMPParallelMaskedTaskLoopSimdDirective;
class OMPParallelMasterDirective;
class OMPParallelMasterTaskLoopDirective;
class OMPParallelMasterTaskLoopSimdDirective;
class OMPParallelSectionsDirective;
class OMPScanDirective;
class OMPSectionDirective;
class OMPSectionsDirective;
class OMPSimdDirective;
class OMPSingleDirective;
class OMPTargetDataDirective;
class OMPTargetDirective;
class OMPTargetEnterDataDirective;
class OMPTargetExitDataDirective;
class OMPTargetParallelDirective;
class OMPTargetParallelForDirective;
class OMPTargetParallelForSimdDirective;
class OMPTargetParallelGenericLoopDirective;
class OMPTargetSimdDirective;
class OMPTargetTeamsDirective;
class OMPTargetTeamsDistributeDirective;
class OMPTargetTeamsDistributeParallelForDirective;
class OMPTargetTeamsDistributeParallelForSimdDirective;
class OMPTargetTeamsDistributeSimdDirective;
class OMPTargetTeamsGenericLoopDirective;
class OMPTargetUpdateDirective;
class OMPTaskDirective;
class OMPTaskLoopDirective;
class OMPTaskLoopSimdDirective;
class OMPTaskgroupDirective;
class OMPTaskwaitDirective;
class OMPTaskyieldDirective;
class OMPTeamsDirective;
class OMPTeamsDistributeDirective;
class OMPTeamsDistributeParallelForDirective;
class OMPTeamsDistributeParallelForSimdDirective;
class OMPTeamsDistributeSimdDirective;
class OMPTeamsGenericLoopDirective;
class OMPTileDirective;
class OMPUnrollDirective;
class ObjCArrayLiteral;
class ObjCAtCatchStmt;
class ObjCAtFinallyStmt;
class ObjCAtSynchronizedStmt;
class ObjCAtThrowStmt;
class ObjCAtTryStmt;
class ObjCAutoreleasePoolStmt;
class ObjCAvailabilityCheckExpr;
class ObjCBoolLiteralExpr;
class ObjCBoxedExpr;
class ObjCDictionaryLiteral;
class ObjCEncodeExpr;
class ObjCForCollectionStmt;
class ObjCIndirectCopyRestoreExpr;
class ObjCIsaExpr;
class ObjCIvarRefExpr;
class ObjCMessageExpr;
class ObjCPropertyRefExpr;
class ObjCProtocolExpr;
class ObjCSelectorExpr;
class ObjCStringLiteral;
class ObjCSubscriptRefExpr;
class OffsetOfExpr;
class OpaqueValueExpr;
class OverloadExpr;
class PackExpansionExpr;
class ParenExpr;
class ParenListExpr;
class PredefinedExpr;
class PseudoObjectExpr;
class RecoveryExpr;
class RequiresExpr;
class ReturnStmt;
class SEHExceptStmt;
class SEHFinallyStmt;
class SEHLeaveStmt;
class SEHTryStmt;
class SYCLUniqueStableNameExpr;
class ShuffleVectorExpr;
class SizeOfPackExpr;
class SourceLocExpr;
class StmtExpr;
class StringLiteral;
class SubstNonTypeTemplateParmExpr;
class SubstNonTypeTemplateParmPackExpr;
class TypeTraitExpr;
class TypoExpr;
class UnaryExprOrTypeTraitExpr;
class UnaryOperator;
class UnresolvedLookupExpr;
class UnresolvedMemberExpr;
class VAArgExpr;
class AbstractConditionalOperator;
class AddrLabelExpr;
class ArrayInitIndexExpr;
class ArrayInitLoopExpr;
class ArraySubscriptExpr;
class ArrayTypeTraitExpr;
class AsTypeExpr;
class AtomicExpr;
class BinaryConditionalOperator;
class BinaryOperator;
class BlockExpr;
class CXXBindTemporaryExpr;
class CXXBoolLiteralExpr;
class CXXConstructExpr;
class CXXDefaultArgExpr;
class CXXDefaultInitExpr;
class CXXDeleteExpr;
class CXXDependentScopeMemberExpr;
class CXXFoldExpr;
class CXXInheritedCtorInitExpr;
class CXXNewExpr;
class CXXNoexceptExpr;
class CXXNullPtrLiteralExpr;
class CXXParenListInitExpr;
class CXXPseudoDestructorExpr;
class CXXRewrittenBinaryOperator;
class CXXScalarValueInitExpr;
class CXXStdInitializerListExpr;
class CXXTemporaryObjectExpr;
class CXXThisExpr;
class CXXThrowExpr;
class CXXTypeidExpr;
class CXXUnresolvedConstructExpr;
class CXXUuidofExpr;
class CallExpr;
class CastExpr;
class CharacterLiteral;
class ChooseExpr;
class CompoundAssignOperator;
class CompoundLiteralExpr;
class ConceptSpecializationExpr;
class ConditionalOperator;
class ConstantExpr;
class ConvertVectorExpr;
class CoroutineSuspendExpr;
class CoyieldExpr;
class DeclRefExpr;
class DependentCoawaitExpr;
class DependentScopeDeclRefExpr;
class DesignatedInitExpr;
class DesignatedInitUpdateExpr;
class ExplicitCastExpr;
class ExprWithCleanups;
class ImplicitCastExpr;
class OMPAtomicDirective;
class OMPBarrierDirective;
class OMPCancelDirective;
class OMPCancellationPointDirective;
class OMPCriticalDirective;
class OMPDepobjDirective;
class OMPDispatchDirective;
class OMPDistributeDirective;
class OMPDistributeParallelForDirective;
class OMPDistributeParallelForSimdDirective;
class OMPDistributeSimdDirective;
class OMPErrorDirective;
class OMPForDirective;
class OMPForSimdDirective;
class OMPGenericLoopDirective;
class ObjCBridgedCastExpr;
class UserDefinedLiteral;
class BuiltinBitCastExpr;
class CStyleCastExpr;
class CUDAKernelCallExpr;
class CXXFunctionalCastExpr;
class CXXMemberCallExpr;
class CXXNamedCastExpr;
class CXXOperatorCallExpr;
class CXXReinterpretCastExpr;
class CXXStaticCastExpr;
class CoawaitExpr;
class CXXAddrspaceCastExpr;
class CXXConstCastExpr;
class CXXDynamicCastExpr;
class Type;
class TypeOfExprType;
class TypeOfType;
class TypedefType;
class UnaryTransformType;
class UnresolvedUsingType;
class UsingType;
class VectorType;
class TypeWithKeyword;
class AdjustedType;
class ArrayType;
class AtomicType;
class AttributedType;
class BTFTagAttributedType;
class BitIntType;
class BlockPointerType;
class BuiltinType;
class ComplexType;
class ConstantArrayType;
class DecayedType;
class DecltypeType;
class DeducedType;
class DependentAddressSpaceType;
class DependentBitIntType;
class DependentNameType;
class DependentSizedArrayType;
class DependentSizedExtVectorType;
class DependentTemplateSpecializationType;
class DependentVectorType;
class ElaboratedType;
class ExtVectorType;
class FunctionType;
class IncompleteArrayType;
class InjectedClassNameType;
class MacroQualifiedType;
class MatrixType;
class MemberPointerType;
class ObjCObjectPointerType;
class ObjCObjectType;
class ObjCTypeParamType;
class PackExpansionType;
class ParenType;
class PipeType;
class PointerType;
class QualifiedType;
class ReferenceType;
class SubstTemplateTypeParmPackType;
class SubstTemplateTypeParmType;
class TagType;
class TemplateSpecializationType;
class TemplateTypeParmType;
class VariableArrayType;
class AutoType;
class ConstantMatrixType;
class DeducedTemplateSpecializationType;
class DependentSizedMatrixType;
class EnumType;
class FunctionNoProtoType;
class FunctionProtoType;
class LValueReferenceType;
class ObjCInterfaceType;
class RValueReferenceType;
class RecordType;
class Attr;
class BuiltinAliasAttr;
class CalledOnceAttr;
class IFuncAttr;
class InheritableAttr;
class InheritableParamAttr;
class InitPriorityAttr;
class InitSegAttr;
class IntelOclBiccAttr;
class InternalLinkageAttr;
class LTOVisibilityPublicAttr;
class LayoutVersionAttr;
class LeafAttr;
class LifetimeBoundAttr;
class LoaderUninitializedAttr;
class LockReturnedAttr;
class LocksExcludedAttr;
class LoopHintAttr;
class M68kInterruptAttr;
class MIGServerRoutineAttr;
class MSABIAttr;
class MSAllocatorAttr;
class MSInheritanceAttr;
class MSNoVTableAttr;
class MSP430InterruptAttr;
class MSStructAttr;
class MSVtorDispAttr;
class MaxFieldAlignmentAttr;
class MayAliasAttr;
class MaybeUndefAttr;
class MicroMipsAttr;
class MinSizeAttr;
class MinVectorWidthAttr;
class Mips16Attr;
class MipsInterruptAttr;
class MipsLongCallAttr;
class MipsShortCallAttr;
class ModeAttr;
class NSConsumedAttr;
class NSConsumesSelfAttr;
class NSErrorDomainAttr;
class NSReturnsAutoreleasedAttr;
class NSReturnsNotRetainedAttr;
class NSReturnsRetainedAttr;
class NVPTXKernelAttr;
class NakedAttr;
class NoAliasAttr;
class NoBuiltinAttr;
class NoCommonAttr;
class NoDebugAttr;
class NoDestroyAttr;
class NoDuplicateAttr;
class NoEscapeAttr;
class NoInstrumentFunctionAttr;
class NoMicroMipsAttr;
class NoMips16Attr;
class NoProfileFunctionAttr;
class NoRandomizeLayoutAttr;
class NoReturnAttr;
class NoSanitizeAttr;
class NoSpeculativeLoadHardeningAttr;
class NoSplitStackAttr;
class NoStackProtectorAttr;
class NoThreadSafetyAnalysisAttr;
class NoThrowAttr;
class NoUniqueAddressAttr;
class NoUwtableAttr;
class NonNullAttr;
class NotTailCalledAttr;
class OMPAllocateDeclAttr;
class OMPCaptureKindAttr;
class OMPCaptureNoInitAttr;
class OMPDeclareSimdDeclAttr;
class OMPDeclareTargetDeclAttr;
class OMPDeclareVariantAttr;
class OMPReferencedVarAttr;
class OMPThreadPrivateDeclAttr;
class OSConsumedAttr;
class OSConsumesThisAttr;
class OSReturnsNotRetainedAttr;
class OSReturnsRetainedAttr;
class OSReturnsRetainedOnNonZeroAttr;
class OSReturnsRetainedOnZeroAttr;
class ObjCBoxableAttr;
class ObjCBridgeAttr;
class ObjCBridgeMutableAttr;
class ObjCBridgeRelatedAttr;
class ObjCClassStubAttr;
class ObjCDesignatedInitializerAttr;
class ObjCDirectAttr;
class ObjCDirectMembersAttr;
class ObjCExceptionAttr;
class ObjCExplicitProtocolImplAttr;
class ObjCExternallyRetainedAttr;
class ObjCIndependentClassAttr;
class ObjCMethodFamilyAttr;
class ObjCNSObjectAttr;
class ObjCNonLazyClassAttr;
class ObjCNonRuntimeProtocolAttr;
class ObjCOwnershipAttr;
class ObjCPreciseLifetimeAttr;
class ObjCRequiresPropertyDefsAttr;
class ObjCRequiresSuperAttr;
class ObjCReturnsInnerPointerAttr;
class ObjCRootClassAttr;
class ObjCRuntimeNameAttr;
class ObjCRuntimeVisibleAttr;
class ObjCSubclassingRestrictedAttr;
class OpenCLAccessAttr;
class OpenCLIntelReqdSubGroupSizeAttr;
class OpenCLKernelAttr;
class OptimizeNoneAttr;
class OverloadableAttr;
class OverrideAttr;
class OwnerAttr;
class OwnershipAttr;
class PackedAttr;
class ParamTypestateAttr;
class ParameterABIAttr;
class PascalAttr;
class PassObjectSizeAttr;
class PatchableFunctionEntryAttr;
class PcsAttr;
class PointerAttr;
class PragmaClangBSSSectionAttr;
class PragmaClangDataSectionAttr;
class PragmaClangRelroSectionAttr;
class PragmaClangRodataSectionAttr;
class PragmaClangTextSectionAttr;
class PreferredNameAttr;
class PreserveAllAttr;
class PreserveMostAttr;
class PtGuardedByAttr;
class PtGuardedVarAttr;
class PureAttr;
class RISCVInterruptAttr;
class RandomizeLayoutAttr;
class ReadOnlyPlacementAttr;
class RegCallAttr;
class ReinitializesAttr;
class ReleaseCapabilityAttr;
class ReleaseHandleAttr;
class RenderScriptKernelAttr;
class ReqdWorkGroupSizeAttr;
class RequiresCapabilityAttr;
class RestrictAttr;
class RetainAttr;
class ReturnTypestateAttr;
class ReturnsNonNullAttr;
class ReturnsTwiceAttr;
class SYCLKernelAttr;
class SYCLSpecialClassAttr;
class ScopedLockableAttr;
class SectionAttr;
class SelectAnyAttr;
class SentinelAttr;
class SetTypestateAttr;
class SharedTrylockFunctionAttr;
class SpeculativeLoadHardeningAttr;
class StandaloneDebugAttr;
class StdCallAttr;
class StmtAttr;
class StrictFPAttr;
class StrictGuardStackCheckAttr;
class SuppressAttr;
class SwiftAsyncAttr;
class SwiftAsyncCallAttr;
class SwiftAsyncContextAttr;
class SwiftAsyncErrorAttr;
class SwiftAsyncNameAttr;
class SwiftAttrAttr;
class SwiftBridgeAttr;
class SwiftBridgedTypedefAttr;
class SwiftCallAttr;
class SwiftContextAttr;
class SwiftErrorAttr;
class SwiftErrorResultAttr;
class SwiftIndirectResultAttr;
class SwiftNameAttr;
class SwiftNewTypeAttr;
class SwiftObjCMembersAttr;
class SwiftPrivateAttr;
class SysVABIAttr;
class TLSModelAttr;
class TargetAttr;
class TargetClonesAttr;
class TargetVersionAttr;
class TestTypestateAttr;
class ThisCallAttr;
class ThreadAttr;
class TransparentUnionAttr;
class TrivialABIAttr;
class TryAcquireCapabilityAttr;
class TypeAttr;
class TypeNonNullAttr;
class TypeNullUnspecifiedAttr;
class TypeNullableAttr;
class TypeNullableResultAttr;
class TypeTagForDatatypeAttr;
class TypeVisibilityAttr;
class UPtrAttr;
class UnavailableAttr;
class UninitializedAttr;
class UnlikelyAttr;
class UnsafeBufferUsageAttr;
class UnusedAttr;
class UseHandleAttr;
class UsedAttr;
class UsingIfExistsAttr;
class UuidAttr;
class VecReturnAttr;
class VecTypeHintAttr;
class VectorCallAttr;
class VisibilityAttr;
class WarnUnusedAttr;
class WarnUnusedResultAttr;
class WeakAttr;
class WeakImportAttr;
class WeakRefAttr;
class WebAssemblyExportNameAttr;
class WebAssemblyFuncrefAttr;
class WebAssemblyImportModuleAttr;
class WebAssemblyImportNameAttr;
class WorkGroupSizeHintAttr;
class X86ForceAlignArgPointerAttr;
class XRayInstrumentAttr;
class XRayLogArgsAttr;
class ZeroCallUsedRegsAttr;
class AArch64SVEPcsAttr;
class AArch64VectorPcsAttr;
class AMDGPUFlatWorkGroupSizeAttr;
class AMDGPUKernelCallAttr;
class AMDGPUNumSGPRAttr;
class AMDGPUNumVGPRAttr;
class AMDGPUWavesPerEUAttr;
class ARMInterruptAttr;
class AVRInterruptAttr;
class AVRSignalAttr;
class AbiTagAttr;
class AcquireCapabilityAttr;
class AcquireHandleAttr;
class AcquiredAfterAttr;
class AcquiredBeforeAttr;
class AddressSpaceAttr;
class AliasAttr;
class AlignMac68kAttr;
class AlignNaturalAttr;
class AlignValueAttr;
class AlignedAttr;
class AllocAlignAttr;
class AllocSizeAttr;
class AlwaysDestroyAttr;
class AnalyzerNoReturnAttr;
class AnnotateAttr;
class AnnotateTypeAttr;
class AnyX86InterruptAttr;
class AnyX86NoCallerSavedRegistersAttr;
class AnyX86NoCfCheckAttr;
class ArcWeakrefUnavailableAttr;
class ArgumentWithTypeTagAttr;
class ArmBuiltinAliasAttr;
class ArmMveStrictPolymorphismAttr;
class ArmStreamingAttr;
class ArtificialAttr;
class AsmLabelAttr;
class AssertCapabilityAttr;
class AssertExclusiveLockAttr;
class AssertSharedLockAttr;
class AssumeAlignedAttr;
class AssumptionAttr;
class AvailabilityAttr;
class AvailableOnlyInDefaultEvalMethodAttr;
class BPFPreserveAccessIndexAttr;
class BTFDeclTagAttr;
class BTFTypeTagAttr;
class BlocksAttr;
class BuiltinAttr;
class C11NoReturnAttr;
class CDeclAttr;
class CFAuditedTransferAttr;
class CFConsumedAttr;
class CFGuardAttr;
class CFICanonicalJumpTableAttr;
class CFReturnsNotRetainedAttr;
class CFReturnsRetainedAttr;
class CFUnknownTransferAttr;
class CPUDispatchAttr;
class CPUSpecificAttr;
class CUDAConstantAttr;
class CUDADeviceAttr;
class CUDADeviceBuiltinSurfaceTypeAttr;
class CUDADeviceBuiltinTextureTypeAttr;
class CUDAGlobalAttr;
class CUDAHostAttr;
class CUDAInvalidTargetAttr;
class CUDALaunchBoundsAttr;
class CUDASharedAttr;
class CXX11NoReturnAttr;
class CallableWhenAttr;
class CallbackAttr;
class CapabilityAttr;
class CapturedRecordAttr;
class CarriesDependencyAttr;
class CleanupAttr;
class CmseNSCallAttr;
class CmseNSEntryAttr;
class CodeSegAttr;
class ColdAttr;
class CommonAttr;
class ConstAttr;
class ConstInitAttr;
class ConstructorAttr;
class ConsumableAttr;
class ConsumableAutoCastAttr;
class ConsumableSetOnReadAttr;
class ConvergentAttr;
class DLLExportAttr;
class DLLExportStaticLocalAttr;
class DLLImportAttr;
class DLLImportStaticLocalAttr;
class DeclOrStmtAttr;
class DeprecatedAttr;
class DestructorAttr;
class DiagnoseAsBuiltinAttr;
class DiagnoseIfAttr;
class DisableSanitizerInstrumentationAttr;
class DisableTailCallsAttr;
class EmptyBasesAttr;
class EnableIfAttr;
class EnforceTCBAttr;
class EnforceTCBLeafAttr;
class EnumExtensibilityAttr;
class ErrorAttr;
class ExcludeFromExplicitInstantiationAttr;
class ExclusiveTrylockFunctionAttr;
class ExternalSourceSymbolAttr;
class FallThroughAttr;
class FastCallAttr;
class FinalAttr;
class FlagEnumAttr;
class FlattenAttr;
class FormatArgAttr;
class FormatAttr;
class FunctionReturnThunksAttr;
class GNUInlineAttr;
class GuardedByAttr;
class GuardedVarAttr;
class HIPManagedAttr;
class HLSLAnnotationAttr;
class HLSLGroupSharedAddressSpaceAttr;
class HLSLNumThreadsAttr;
class HLSLResourceAttr;
class HLSLResourceBindingAttr;
class HLSLSV_DispatchThreadIDAttr;
class HLSLSV_GroupIndexAttr;
class HLSLShaderAttr;
class HotAttr;
class IBActionAttr;
class IBOutletAttr;
class IBOutletCollectionAttr;
class LikelyAttr;
class MustTailAttr;
class NoDerefAttr;
class NoInlineAttr;
class NoMergeAttr;
class ObjCGCAttr;
class ObjCInertUnsafeUnretainedAttr;
class ObjCKindOfAttr;
class OpenCLConstantAddressSpaceAttr;
class OpenCLGenericAddressSpaceAttr;
class OpenCLGlobalAddressSpaceAttr;
class OpenCLGlobalDeviceAddressSpaceAttr;
class OpenCLGlobalHostAddressSpaceAttr;
class OpenCLLocalAddressSpaceAttr;
class OpenCLPrivateAddressSpaceAttr;
class OpenCLUnrollHintAttr;
class Ptr32Attr;
class Ptr64Attr;
class SPtrAttr;
class AlwaysInlineAttr;
class Macro;
class MacroDirective;
class IncludeLikeMacroDirective;
class ConditionalMacroDirective;
class OtherMacroDirective;
class IfMacroDirective;
class IfDefinedMacroDirective;
class IfNotDefinedMacroDirective;
class ElseIfMacroDirective;
class ElseIfDefinedMacroDirective;
class ElseIfNotDefinedMacroDirective;
class ElseMacroDirective;
class EndIfMacroDirective;
class UndefineMacroDirective;
class PragmaMacroDirective;
class IncludeMacroDirective;
class IncludeNextMacroDirective;
class IncludeMacrosMacroDirective;
class ImportMacroDirective;
class MacroParameter;
class DefineMacroDirective;
class MacroArgument;
class MacroSubstitution;
class MacroParameterSubstitution;
class MacroExpansion;
class MacroStringify;
class MacroConcatenate;
class MacroVAOpt;
class MacroVAOptArgument;
class TemplateArgument;
class TemplateParameterList;
class CXXBaseSpecifier;
class Designator;
enum class TokenRole : unsigned char;
enum class DeclKind : unsigned int;
enum class AttrKind : unsigned int;
enum class AArch64SVEPcsAttrSpelling : unsigned int;
enum class AArch64VectorPcsAttrSpelling : unsigned int;
enum class AMDGPUFlatWorkGroupSizeAttrSpelling : unsigned int;
enum class AMDGPUKernelCallAttrSpelling : unsigned int;
enum class AMDGPUNumSGPRAttrSpelling : unsigned int;
enum class AMDGPUNumVGPRAttrSpelling : unsigned int;
enum class AMDGPUWavesPerEUAttrSpelling : unsigned int;
enum class ARMInterruptAttrInterruptType : unsigned int;
enum class ARMInterruptAttrSpelling : unsigned int;
enum class AVRInterruptAttrSpelling : unsigned int;
enum class AVRSignalAttrSpelling : unsigned int;
enum class AbiTagAttrSpelling : unsigned int;
enum class AcquireCapabilityAttrSpelling : unsigned int;
enum class AcquireHandleAttrSpelling : unsigned int;
enum class AddressSpaceAttrSpelling : unsigned int;
enum class AliasAttrSpelling : unsigned int;
enum class AlignedAttrSpelling : unsigned int;
enum class AllocAlignAttrSpelling : unsigned int;
enum class AllocSizeAttrSpelling : unsigned int;
enum class AlwaysDestroyAttrSpelling : unsigned int;
enum class AlwaysInlineAttrSpelling : unsigned int;
enum class AnnotateAttrSpelling : unsigned int;
enum class AnnotateTypeAttrSpelling : unsigned int;
enum class AnyX86InterruptAttrSpelling : unsigned int;
enum class AnyX86NoCallerSavedRegistersAttrSpelling : unsigned int;
enum class AnyX86NoCfCheckAttrSpelling : unsigned int;
enum class ArcWeakrefUnavailableAttrSpelling : unsigned int;
enum class ArgumentWithTypeTagAttrSpelling : unsigned int;
enum class ArmBuiltinAliasAttrSpelling : unsigned int;
enum class ArmMveStrictPolymorphismAttrSpelling : unsigned int;
enum class ArrayTypeArraySizeModifier : unsigned int;
enum class ArtificialAttrSpelling : unsigned int;
enum class AsmLabelAttrSpelling : unsigned int;
enum class AssertCapabilityAttrSpelling : unsigned int;
enum class AssumeAlignedAttrSpelling : unsigned int;
enum class AssumptionAttrSpelling : unsigned int;
enum class AtomicExprAtomicOp : unsigned int;
enum class AvailabilityAttrSpelling : unsigned int;
enum class AvailableOnlyInDefaultEvalMethodAttrSpelling : unsigned int;
enum class BPFPreserveAccessIndexAttrSpelling : unsigned int;
enum class BTFDeclTagAttrSpelling : unsigned int;
enum class BTFTypeTagAttrSpelling : unsigned int;
enum class BlocksAttrBlockType : unsigned int;
enum class BlocksAttrSpelling : unsigned int;
enum class BuiltinAliasAttrSpelling : unsigned int;
enum class BuiltinTypeKind : unsigned int;
enum class CDeclAttrSpelling : unsigned int;
enum class CFAuditedTransferAttrSpelling : unsigned int;
enum class CFConsumedAttrSpelling : unsigned int;
enum class CFGuardAttrGuardArg : unsigned int;
enum class CFGuardAttrSpelling : unsigned int;
enum class CFICanonicalJumpTableAttrSpelling : unsigned int;
enum class CFReturnsNotRetainedAttrSpelling : unsigned int;
enum class CFReturnsRetainedAttrSpelling : unsigned int;
enum class CFUnknownTransferAttrSpelling : unsigned int;
enum class CPUDispatchAttrSpelling : unsigned int;
enum class CPUSpecificAttrSpelling : unsigned int;
enum class CUDAConstantAttrSpelling : unsigned int;
enum class CUDADeviceAttrSpelling : unsigned int;
enum class CUDADeviceBuiltinSurfaceTypeAttrSpelling : unsigned int;
enum class CUDADeviceBuiltinTextureTypeAttrSpelling : unsigned int;
enum class CUDAGlobalAttrSpelling : unsigned int;
enum class CUDAHostAttrSpelling : unsigned int;
enum class CUDALaunchBoundsAttrSpelling : unsigned int;
enum class CUDASharedAttrSpelling : unsigned int;
enum class CXX11NoReturnAttrSpelling : unsigned int;
enum class CXXConstructExprConstructionKind : unsigned int;
enum class CXXNewExprInitializationStyle : unsigned int;
enum class CXXRecordDeclLambdaDependencyKind : unsigned int;
enum class CallExprADLCallKind : bool;
enum class CallableWhenAttrConsumedState : unsigned int;
enum class CallableWhenAttrSpelling : unsigned int;
enum class CallbackAttrSpelling : unsigned int;
enum class CalledOnceAttrSpelling : unsigned int;
enum class CapabilityAttrSpelling : unsigned int;
enum class CapturedStmtVariableCaptureKind : unsigned int;
enum class CarriesDependencyAttrSpelling : unsigned int;
enum class CharacterLiteralCharacterKind : unsigned int;
enum class CleanupAttrSpelling : unsigned int;
enum class ColdAttrSpelling : unsigned int;
enum class CommonAttrSpelling : unsigned int;
enum class ConstAttrSpelling : unsigned int;
enum class ConstInitAttrSpelling : unsigned int;
enum class ConstantExprResultStorageKind : unsigned int;
enum class ConstructorAttrSpelling : unsigned int;
enum class ConsumableAttrConsumedState : unsigned int;
enum class ConsumableAttrSpelling : unsigned int;
enum class ConsumableAutoCastAttrSpelling : unsigned int;
enum class ConsumableSetOnReadAttrSpelling : unsigned int;
enum class ConvergentAttrSpelling : unsigned int;
enum class DLLExportAttrSpelling : unsigned int;
enum class DLLImportAttrSpelling : unsigned int;
enum class DeclFriendObjectKind : unsigned int;
enum class DeclIdentifierNamespace : unsigned int;
enum class DeclModuleOwnershipKind : unsigned int;
enum class DeclObjCDeclQualifier : unsigned int;
enum class DeprecatedAttrSpelling : unsigned int;
enum class DestructorAttrSpelling : unsigned int;
enum class DiagnoseAsBuiltinAttrSpelling : unsigned int;
enum class DiagnoseIfAttrDiagnosticType : unsigned int;
enum class DisableSanitizerInstrumentationAttrSpelling : unsigned int;
enum class DisableTailCallsAttrSpelling : unsigned int;
enum class EnforceTCBAttrSpelling : unsigned int;
enum class EnforceTCBLeafAttrSpelling : unsigned int;
enum class EnumExtensibilityAttrKind : unsigned int;
enum class EnumExtensibilityAttrSpelling : unsigned int;
enum class ErrorAttrSpelling : unsigned int;
enum class ExcludeFromExplicitInstantiationAttrSpelling : unsigned int;
enum class ExprConstantExprKind : int;
enum class ExprLValueClassification : unsigned int;
enum class ExprNullPointerConstantKind : unsigned int;
enum class ExprNullPointerConstantValueDependence : unsigned int;
enum class ExprSideEffectsKind : unsigned int;
enum class ExprisModifiableLvalueResult : unsigned int;
enum class ExternalSourceSymbolAttrSpelling : unsigned int;
enum class FallThroughAttrSpelling : unsigned int;
enum class FastCallAttrSpelling : unsigned int;
enum class FinalAttrSpelling : unsigned int;
enum class FlagEnumAttrSpelling : unsigned int;
enum class FlattenAttrSpelling : unsigned int;
enum class FormatArgAttrSpelling : unsigned int;
enum class FormatAttrSpelling : unsigned int;
enum class FunctionDeclTemplatedKind : unsigned int;
enum class FunctionReturnThunksAttrKind : unsigned int;
enum class FunctionReturnThunksAttrSpelling : unsigned int;
enum class GNUInlineAttrSpelling : unsigned int;
enum class GuardedVarAttrSpelling : unsigned int;
enum class HIPManagedAttrSpelling : unsigned int;
enum class HLSLResourceAttrResourceClass : unsigned int;
enum class HLSLResourceAttrResourceKind : unsigned int;
enum class HLSLShaderAttrShaderType : unsigned int;
enum class HotAttrSpelling : unsigned int;
enum class IBActionAttrSpelling : unsigned int;
enum class IBOutletAttrSpelling : unsigned int;
enum class IBOutletCollectionAttrSpelling : unsigned int;
enum class IFuncAttrSpelling : unsigned int;
enum class ImplicitCastExprOnStack : unsigned int;
enum class ImplicitParamDeclImplicitParamKind : unsigned int;
enum class InitPriorityAttrSpelling : unsigned int;
enum class IntelOclBiccAttrSpelling : unsigned int;
enum class InternalLinkageAttrSpelling : unsigned int;
enum class LTOVisibilityPublicAttrSpelling : unsigned int;
enum class LeafAttrSpelling : unsigned int;
enum class LifetimeBoundAttrSpelling : unsigned int;
enum class LikelyAttrSpelling : unsigned int;
enum class LinkageSpecDeclLanguageIDs : unsigned int;
enum class LoaderUninitializedAttrSpelling : unsigned int;
enum class LoopHintAttrLoopHintState : unsigned int;
enum class LoopHintAttrOptionType : unsigned int;
enum class LoopHintAttrSpelling : unsigned int;
enum class MIGServerRoutineAttrSpelling : unsigned int;
enum class MSABIAttrSpelling : unsigned int;
enum class MSInheritanceAttrSpelling : unsigned int;
enum class MSP430InterruptAttrSpelling : unsigned int;
enum class MSStructAttrSpelling : unsigned int;
enum class MayAliasAttrSpelling : unsigned int;
enum class MaybeUndefAttrSpelling : unsigned int;
enum class MicroMipsAttrSpelling : unsigned int;
enum class MinSizeAttrSpelling : unsigned int;
enum class MinVectorWidthAttrSpelling : unsigned int;
enum class Mips16AttrSpelling : unsigned int;
enum class MipsInterruptAttrInterruptType : unsigned int;
enum class MipsInterruptAttrSpelling : unsigned int;
enum class MipsLongCallAttrSpelling : unsigned int;
enum class MipsShortCallAttrSpelling : unsigned int;
enum class ModeAttrSpelling : unsigned int;
enum class MustTailAttrSpelling : unsigned int;
enum class NSConsumedAttrSpelling : unsigned int;
enum class NSConsumesSelfAttrSpelling : unsigned int;
enum class NSReturnsAutoreleasedAttrSpelling : unsigned int;
enum class NSReturnsNotRetainedAttrSpelling : unsigned int;
enum class NSReturnsRetainedAttrSpelling : unsigned int;
enum class NVPTXKernelAttrSpelling : unsigned int;
enum class NakedAttrSpelling : unsigned int;
enum class NamedDeclExplicitVisibilityKind : unsigned int;
enum class NoBuiltinAttrSpelling : unsigned int;
enum class NoCommonAttrSpelling : unsigned int;
enum class NoDebugAttrSpelling : unsigned int;
enum class NoDerefAttrSpelling : unsigned int;
enum class NoDestroyAttrSpelling : unsigned int;
enum class NoDuplicateAttrSpelling : unsigned int;
enum class NoEscapeAttrSpelling : unsigned int;
enum class NoInlineAttrSpelling : unsigned int;
enum class NoInstrumentFunctionAttrSpelling : unsigned int;
enum class NoMergeAttrSpelling : unsigned int;
enum class NoMicroMipsAttrSpelling : unsigned int;
enum class NoMips16AttrSpelling : unsigned int;
enum class NoProfileFunctionAttrSpelling : unsigned int;
enum class NoRandomizeLayoutAttrSpelling : unsigned int;
enum class NoReturnAttrSpelling : unsigned int;
enum class NoSanitizeAttrSpelling : unsigned int;
enum class NoSpeculativeLoadHardeningAttrSpelling : unsigned int;
enum class NoSplitStackAttrSpelling : unsigned int;
enum class NoStackProtectorAttrSpelling : unsigned int;
enum class NoThreadSafetyAnalysisAttrSpelling : unsigned int;
enum class NoThrowAttrSpelling : unsigned int;
enum class NoUwtableAttrSpelling : unsigned int;
enum class NonNullAttrSpelling : unsigned int;
enum class NotTailCalledAttrSpelling : unsigned int;
enum class OMPAllocateDeclAttrAllocatorTypeTy : unsigned int;
enum class OMPDeclareReductionDeclInitKind : unsigned int;
enum class OMPDeclareSimdDeclAttrBranchStateTy : unsigned int;
enum class OMPDeclareTargetDeclAttrDevTypeTy : unsigned int;
enum class OMPDeclareTargetDeclAttrMapTypeTy : unsigned int;
enum class OSConsumedAttrSpelling : unsigned int;
enum class OSConsumesThisAttrSpelling : unsigned int;
enum class OSReturnsNotRetainedAttrSpelling : unsigned int;
enum class OSReturnsRetainedAttrSpelling : unsigned int;
enum class OSReturnsRetainedOnNonZeroAttrSpelling : unsigned int;
enum class OSReturnsRetainedOnZeroAttrSpelling : unsigned int;
enum class ObjCBoxableAttrSpelling : unsigned int;
enum class ObjCBridgeAttrSpelling : unsigned int;
enum class ObjCBridgeMutableAttrSpelling : unsigned int;
enum class ObjCBridgeRelatedAttrSpelling : unsigned int;
enum class ObjCClassStubAttrSpelling : unsigned int;
enum class ObjCDesignatedInitializerAttrSpelling : unsigned int;
enum class ObjCDirectAttrSpelling : unsigned int;
enum class ObjCDirectMembersAttrSpelling : unsigned int;
enum class ObjCExceptionAttrSpelling : unsigned int;
enum class ObjCExplicitProtocolImplAttrSpelling : unsigned int;
enum class ObjCExternallyRetainedAttrSpelling : unsigned int;
enum class ObjCGCAttrSpelling : unsigned int;
enum class ObjCIndependentClassAttrSpelling : unsigned int;
enum class ObjCIvarDeclAccessControl : unsigned int;
enum class ObjCMessageExprReceiverKind : unsigned int;
enum class ObjCMethodDeclImplementationControl : unsigned int;
enum class ObjCMethodFamilyAttrFamilyKind : unsigned int;
enum class ObjCMethodFamilyAttrSpelling : unsigned int;
enum class ObjCNSObjectAttrSpelling : unsigned int;
enum class ObjCNonLazyClassAttrSpelling : unsigned int;
enum class ObjCNonRuntimeProtocolAttrSpelling : unsigned int;
enum class ObjCOwnershipAttrSpelling : unsigned int;
enum class ObjCPreciseLifetimeAttrSpelling : unsigned int;
enum class ObjCPropertyDeclPropertyControl : unsigned int;
enum class ObjCPropertyDeclSetterKind : unsigned int;
enum class ObjCPropertyImplDeclKind : unsigned int;
enum class ObjCRequiresPropertyDefsAttrSpelling : unsigned int;
enum class ObjCRequiresSuperAttrSpelling : unsigned int;
enum class ObjCReturnsInnerPointerAttrSpelling : unsigned int;
enum class ObjCRootClassAttrSpelling : unsigned int;
enum class ObjCRuntimeNameAttrSpelling : unsigned int;
enum class ObjCRuntimeVisibleAttrSpelling : unsigned int;
enum class ObjCSubclassingRestrictedAttrSpelling : unsigned int;
enum class OpenCLAccessAttrSpelling : unsigned int;
enum class OpenCLConstantAddressSpaceAttrSpelling : unsigned int;
enum class OpenCLGenericAddressSpaceAttrSpelling : unsigned int;
enum class OpenCLGlobalAddressSpaceAttrSpelling : unsigned int;
enum class OpenCLGlobalDeviceAddressSpaceAttrSpelling : unsigned int;
enum class OpenCLGlobalHostAddressSpaceAttrSpelling : unsigned int;
enum class OpenCLKernelAttrSpelling : unsigned int;
enum class OpenCLLocalAddressSpaceAttrSpelling : unsigned int;
enum class OpenCLPrivateAddressSpaceAttrSpelling : unsigned int;
enum class OptimizeNoneAttrSpelling : unsigned int;
enum class OverloadableAttrSpelling : unsigned int;
enum class OwnershipAttrOwnershipKind : unsigned int;
enum class OwnershipAttrSpelling : unsigned int;
enum class PackedAttrSpelling : unsigned int;
enum class ParamTypestateAttrConsumedState : unsigned int;
enum class ParamTypestateAttrSpelling : unsigned int;
enum class PascalAttrSpelling : unsigned int;
enum class PassObjectSizeAttrSpelling : unsigned int;
enum class PatchableFunctionEntryAttrSpelling : unsigned int;
enum class PcsAttrPCSType : unsigned int;
enum class PcsAttrSpelling : unsigned int;
enum class PredefinedExprIdentKind : unsigned int;
enum class PreferredNameAttrSpelling : unsigned int;
enum class PreserveAllAttrSpelling : unsigned int;
enum class PreserveMostAttrSpelling : unsigned int;
enum class PtGuardedVarAttrSpelling : unsigned int;
enum class PureAttrSpelling : unsigned int;
enum class QualifiedTypeDestructionKind : unsigned int;
enum class QualifiedTypePrimitiveCopyKind : unsigned int;
enum class QualifiedTypePrimitiveDefaultInitializeKind : unsigned int;
enum class RISCVInterruptAttrInterruptType : unsigned int;
enum class RISCVInterruptAttrSpelling : unsigned int;
enum class RandomizeLayoutAttrSpelling : unsigned int;
enum class ReadOnlyPlacementAttrSpelling : unsigned int;
enum class RecordDeclArgPassingKind : unsigned int;
enum class RegCallAttrSpelling : unsigned int;
enum class ReinitializesAttrSpelling : unsigned int;
enum class ReleaseCapabilityAttrSpelling : unsigned int;
enum class ReleaseHandleAttrSpelling : unsigned int;
enum class RequiresCapabilityAttrSpelling : unsigned int;
enum class RestrictAttrSpelling : unsigned int;
enum class RetainAttrSpelling : unsigned int;
enum class ReturnTypestateAttrConsumedState : unsigned int;
enum class ReturnTypestateAttrSpelling : unsigned int;
enum class ReturnsNonNullAttrSpelling : unsigned int;
enum class ReturnsTwiceAttrSpelling : unsigned int;
enum class SYCLKernelAttrSpelling : unsigned int;
enum class SYCLSpecialClassAttrSpelling : unsigned int;
enum class ScopedLockableAttrSpelling : unsigned int;
enum class SectionAttrSpelling : unsigned int;
enum class SelectAnyAttrSpelling : unsigned int;
enum class SentinelAttrSpelling : unsigned int;
enum class SetTypestateAttrConsumedState : unsigned int;
enum class SetTypestateAttrSpelling : unsigned int;
enum class SourceLocExprIdentKind : unsigned int;
enum class SpeculativeLoadHardeningAttrSpelling : unsigned int;
enum class StandaloneDebugAttrSpelling : unsigned int;
enum class StdCallAttrSpelling : unsigned int;
enum class StmtLikelihood : int;
enum class StmtKind : unsigned int;
enum class StringLiteralStringKind : unsigned int;
enum class SwiftAsyncAttrKind : unsigned int;
enum class SwiftAsyncAttrSpelling : unsigned int;
enum class SwiftAsyncCallAttrSpelling : unsigned int;
enum class SwiftAsyncContextAttrSpelling : unsigned int;
enum class SwiftAsyncErrorAttrConventionKind : unsigned int;
enum class SwiftAsyncErrorAttrSpelling : unsigned int;
enum class SwiftCallAttrSpelling : unsigned int;
enum class SwiftContextAttrSpelling : unsigned int;
enum class SwiftErrorAttrConventionKind : unsigned int;
enum class SwiftErrorResultAttrSpelling : unsigned int;
enum class SwiftIndirectResultAttrSpelling : unsigned int;
enum class SwiftNewTypeAttrNewtypeKind : unsigned int;
enum class SwiftNewTypeAttrSpelling : unsigned int;
enum class SysVABIAttrSpelling : unsigned int;
enum class TLSModelAttrSpelling : unsigned int;
enum class TargetAttrSpelling : unsigned int;
enum class TargetClonesAttrSpelling : unsigned int;
enum class TargetVersionAttrSpelling : unsigned int;
enum class TemplateArgumentKind : unsigned int;
enum class TestTypestateAttrConsumedState : unsigned int;
enum class TestTypestateAttrSpelling : unsigned int;
enum class ThisCallAttrSpelling : unsigned int;
enum class TransparentUnionAttrSpelling : unsigned int;
enum class TrivialABIAttrSpelling : unsigned int;
enum class TryAcquireCapabilityAttrSpelling : unsigned int;
enum class TypeScalarTypeKind : unsigned int;
enum class TypeKind : unsigned int;
enum class TypeTagForDatatypeAttrSpelling : unsigned int;
enum class TypeVisibilityAttrSpelling : unsigned int;
enum class TypeVisibilityAttrVisibilityType : unsigned int;
enum class UnaryTransformTypeUTTKind : unsigned int;
enum class UnavailableAttrImplicitReason : unsigned int;
enum class UnavailableAttrSpelling : unsigned int;
enum class UninitializedAttrSpelling : unsigned int;
enum class UnlikelyAttrSpelling : unsigned int;
enum class UnsafeBufferUsageAttrSpelling : unsigned int;
enum class UnusedAttrSpelling : unsigned int;
enum class UseHandleAttrSpelling : unsigned int;
enum class UsedAttrSpelling : unsigned int;
enum class UserDefinedLiteralLiteralOperatorKind : unsigned int;
enum class UsingIfExistsAttrSpelling : unsigned int;
enum class UuidAttrSpelling : unsigned int;
enum class VarDeclDefinitionKind : unsigned int;
enum class VarDeclInitializationStyle : unsigned int;
enum class VarDeclTLSKind : unsigned int;
enum class VecReturnAttrSpelling : unsigned int;
enum class VectorCallAttrSpelling : unsigned int;
enum class VectorTypeVectorKind : unsigned int;
enum class VisibilityAttrSpelling : unsigned int;
enum class VisibilityAttrVisibilityType : unsigned int;
enum class WarnUnusedAttrSpelling : unsigned int;
enum class WarnUnusedResultAttrSpelling : unsigned int;
enum class WeakAttrSpelling : unsigned int;
enum class WeakImportAttrSpelling : unsigned int;
enum class WeakRefAttrSpelling : unsigned int;
enum class WebAssemblyExportNameAttrSpelling : unsigned int;
enum class WebAssemblyImportModuleAttrSpelling : unsigned int;
enum class WebAssemblyImportNameAttrSpelling : unsigned int;
enum class X86ForceAlignArgPointerAttrSpelling : unsigned int;
enum class XRayInstrumentAttrSpelling : unsigned int;
enum class XRayLogArgsAttrSpelling : unsigned int;
enum class ZeroCallUsedRegsAttrSpelling : unsigned int;
enum class ZeroCallUsedRegsAttrZeroCallUsedRegsKind : unsigned int;
enum class ASTDumpOutputFormat : unsigned int;
enum class AccessSpecifier : unsigned int;
enum class AddrSpaceMapMangling : unsigned int;
enum class AlignRequirementKind : int;
enum class AltivecSrcCompatKind : int;
enum class ArgumentKind : unsigned int;
enum class ArrayTypeTrait : unsigned int;
enum class AssignmentTrackingOpts : unsigned int;
enum class AtomicScopeModelKind : int;
enum class AutoTypeKeyword : int;
enum class AvailabilityResult : unsigned int;
enum class BinaryOperatorKind : unsigned int;
enum class Bits : unsigned char;
enum class CallingConv : unsigned int;
enum class CanThrowResult : unsigned int;
enum class CapturedRegionKind : unsigned int;
enum class CastKind : unsigned int;
enum class ClangABI : int;
enum class CommentKind : unsigned int;
enum class ComparisonCategoryResult : unsigned char;
enum class ComparisonCategoryType : unsigned char;
enum class CompilingModuleKind : unsigned int;
enum class ConstexprSpecKind : int;
enum class CoreFoundationABI : int;
enum class DataPositionTy : unsigned long;
enum class DebugSrcHashKind : unsigned int;
enum class DeductionCandidate : unsigned char;
enum class DefaultArgKind : unsigned int;
enum class DefaultCallingConvention : unsigned int;
enum class DefaultVisiblityExportMapping : int;
enum class DesignatorKind : unsigned int;
enum class DiagnosticLevelMask : unsigned int;
enum class ElaboratedTypeKeyword : unsigned int;
enum class EmbedBitcodeKind : unsigned int;
enum class EscapeChar : int;
enum class ExceptionHandlingKind : int;
enum class ExceptionSpecificationType : unsigned int;
enum class ExcessPrecisionKind : unsigned int;
enum class ExclusionType : unsigned int;
enum class ExplicitSpecKind : unsigned int;
enum class ExprDependence : unsigned char;
enum class ExprObjectKind : unsigned int;
enum class ExprOffsets : int;
enum class ExprValueKind : unsigned int;
enum class ExpressionTrait : unsigned int;
enum class ExtKind : unsigned int;
enum class ExtendArgsKind : int;
enum class FPEvalMethodKind : int;
enum class FPExceptionModeKind : unsigned int;
enum class FPModeKind : unsigned int;
enum class FiniteLoopsKind : unsigned int;
enum class Flags : unsigned int;
enum class FramePointerKind : int;
enum class GC : unsigned int;
enum class GCMode : unsigned int;
enum class GPUDefaultStreamKind : int;
enum class GVALinkage : unsigned int;
enum class GetBuiltinTypeError : unsigned int;
enum class HLSLLangStd : unsigned int;
enum class ID : unsigned int;
enum class IdentifierInfoFlag : unsigned int;
enum class IfStatementKind : unsigned int;
enum class ImbueAttribute : int;
enum class InClassInitStyle : unsigned int;
enum class InheritedDesignatedInitializersState : unsigned int;
enum class InitStorageKind : unsigned int;
enum class InlineAsmDialectKind : unsigned int;
enum class InlineVariableDefinitionKind : int;
enum class InliningMethod : unsigned int;
enum class InterestingIdentifierKind : unsigned int;
enum class Kinds : unsigned int;
enum class LambdaCaptureDefault : unsigned int;
enum class LambdaCaptureKind : unsigned int;
enum class LangAS : unsigned int;
enum class LangFeatures : unsigned int;
enum class Language : unsigned char;
enum class LanguageLinkage : unsigned int;
enum class LaxVectorConversionKind : int;
enum class Level : unsigned int;
enum class Linkage : unsigned char;
enum class MSInheritanceModel : int;
enum class MSVCMajorVersion : unsigned int;
enum class MSVtorDispMode : int;
enum class MethodRefFlags : unsigned int;
enum class ModifiableType : unsigned int;
enum class MultiVersionKind : int;
enum class NameKind : unsigned int;
enum class NeedExtraManglingDecl : unsigned int;
enum class NestedNameSpecifierDependence : unsigned char;
enum class NonOdrUseReason : unsigned int;
enum class NonceObjCInterface : unsigned int;
enum class NullabilityKind : unsigned char;
enum class ObjCBridgeCastKind : unsigned int;
enum class ObjCDispatchMethodKind : unsigned int;
enum class ObjCInstanceTypeFamily : unsigned int;
enum class ObjCKeywordKind : unsigned int;
enum class ObjCLifetime : unsigned int;
enum class ObjCMethodFamily : unsigned int;
enum class ObjCPropertyQueryKind : unsigned char;
enum class ObjCStringFormatFamily : unsigned int;
enum class ObjCSubstitutionContext : int;
enum class ObjCTypeParamVariance : unsigned char;
enum class OnOffSwitch : unsigned int;
enum class OnStackType : unsigned int;
enum class OpenMPAdjustArgsOpKind : unsigned int;
enum class OpenMPAtClauseKind : unsigned int;
enum class OpenMPAtomicDefaultMemOrderClauseKind : unsigned int;
enum class OpenMPBindClauseKind : unsigned int;
enum class OpenMPDefaultmapClauseKind : unsigned int;
enum class OpenMPDefaultmapClauseModifier : unsigned int;
enum class OpenMPDependClauseKind : unsigned int;
enum class OpenMPDeviceClauseModifier : unsigned int;
enum class OpenMPDeviceType : unsigned int;
enum class OpenMPDistScheduleClauseKind : unsigned int;
enum class OpenMPDoacrossClauseModifier : unsigned int;
enum class OpenMPGrainsizeClauseModifier : unsigned int;
enum class OpenMPLastprivateModifier : unsigned int;
enum class OpenMPLinearClauseKind : unsigned int;
enum class OpenMPMapClauseKind : unsigned int;
enum class OpenMPMapModifierKind : unsigned int;
enum class OpenMPMotionModifierKind : unsigned int;
enum class OpenMPNumTasksClauseModifier : unsigned int;
enum class OpenMPOrderClauseKind : unsigned int;
enum class OpenMPOrderClauseModifier : unsigned int;
enum class OpenMPReductionClauseModifier : unsigned int;
enum class OpenMPScheduleClauseKind : unsigned int;
enum class OpenMPScheduleClauseModifier : unsigned int;
enum class OpenMPSeverityClauseKind : unsigned int;
enum class OverloadedOperatorKind : int;
enum class OverloadsShown : unsigned int;
enum class PPKeywordKind : unsigned int;
enum class ParameterABI : int;
enum class ParenLocsOffsets : int;
enum class PragmaFloatControlKind : unsigned int;
enum class PragmaMSCommentKind : unsigned int;
enum class PragmaMSPointersToMembersKind : unsigned int;
enum class PragmaMSStructKind : unsigned int;
enum class PragmaSectionFlag : unsigned int;
enum class ProfileInstrKind : unsigned int;
enum class Qualified : int;
enum class RangeExprOffset : int;
enum class RangeLocOffset : int;
enum class RefQualifierKind : unsigned int;
enum class RemarkKind : unsigned int;
enum class ReservedIdentifierStatus : int;
enum class ReservedLiteralSuffixIdStatus : int;
enum class SFINAEResponse : unsigned int;
enum class SYCLMajorVersion : unsigned int;
enum class SanitizerOrdinal : unsigned long long;
enum class SelectorLocationsKind : unsigned int;
enum class ShaderStage : int;
enum class SignReturnAddressKeyKind : int;
enum class SignReturnAddressScopeKind : int;
enum class SignedOverflowBehaviorTy : unsigned int;
enum class SpecialMemberFlags : unsigned int;
enum class SpecifierKind : unsigned int;
enum class StackProtectorMode : unsigned int;
enum class StorageClass : unsigned int;
enum class StorageDuration : unsigned int;
enum class StoredNameKind : unsigned int;
enum class StoredSpecifierKind : unsigned int;
enum class StrictFlexArraysLevelKind : int;
enum class StructReturnConventionKind : unsigned int;
enum class SubExpr : unsigned int;
enum class SubStmt : unsigned int;
enum class SwiftAsyncFramePointerKind : int;
enum class SyncScope : int;
enum class Syntax : unsigned int;
enum class TLSModel : unsigned int;
enum class TQ : unsigned int;
enum class TagTypeKind : unsigned int;
enum class TailPaddingUseRules : unsigned int;
enum class TemplateArgumentDependence : unsigned char;
enum class TemplateNameDependence : unsigned char;
enum class TemplateSpecializationKind : unsigned int;
enum class TextDiagnosticFormat : unsigned int;
enum class ThreadModelKind : int;
enum class ThreadStorageClassSpecifier : unsigned int;
enum class TokenKind : unsigned short;
enum class TrailingAllocKind : unsigned int;
enum class TranslationUnitKind : unsigned int;
enum class TrivialAutoVarInitKind : int;
enum class TypeDependence : unsigned char;
enum class TypeLocClass : unsigned int;
enum class TypeOfKind : unsigned char;
enum class TypeSpecifierSign : int;
enum class TypeSpecifierType : unsigned int;
enum class TypeSpecifierWidth : int;
enum class TypeSpecifiersPipe : int;
enum class TypeTrait : unsigned int;
enum class UnaryExprOrTypeTrait : unsigned int;
enum class UnaryOperatorKind : unsigned int;
enum class APValueKind : unsigned int;
enum class VectorLibrary : unsigned int;
enum class Visibility : unsigned int;
enum class AttributeSyntax : unsigned int;
enum class DeclCategory : unsigned int;
enum class MacroKind : unsigned char;
enum class PathKind : signed char;
enum class FileType : signed char;
enum class CompilerName : unsigned int;
enum class IncludePathLocation : unsigned int;
enum class TargetLanguage : unsigned int;
enum class PseudoKind : unsigned char;
enum class TokenCategory : unsigned char;
}  // namespace pasta
namespace indexer {
class EntityMapper;
class PendingFragment;
class TokenTree;
void SerializeDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::Decl &, const TokenTree *);
void SerializeEmptyDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::EmptyDecl &, const TokenTree *);
void SerializeExportDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ExportDecl &, const TokenTree *);
void SerializeExternCContextDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ExternCContextDecl &, const TokenTree *);
void SerializeFileScopeAsmDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::FileScopeAsmDecl &, const TokenTree *);
void SerializeFriendDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::FriendDecl &, const TokenTree *);
void SerializeFriendTemplateDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::FriendTemplateDecl &, const TokenTree *);
void SerializeImplicitConceptSpecializationDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ImplicitConceptSpecializationDecl &, const TokenTree *);
void SerializeImportDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ImportDecl &, const TokenTree *);
void SerializeLifetimeExtendedTemporaryDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::LifetimeExtendedTemporaryDecl &, const TokenTree *);
void SerializeLinkageSpecDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::LinkageSpecDecl &, const TokenTree *);
void SerializeNamedDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::NamedDecl &, const TokenTree *);
void SerializeNamespaceAliasDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::NamespaceAliasDecl &, const TokenTree *);
void SerializeNamespaceDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::NamespaceDecl &, const TokenTree *);
void SerializeObjCCompatibleAliasDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCCompatibleAliasDecl &, const TokenTree *);
void SerializeObjCContainerDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCContainerDecl &, const TokenTree *);
void SerializeObjCImplDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCImplDecl &, const TokenTree *);
void SerializeObjCImplementationDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCImplementationDecl &, const TokenTree *);
void SerializeObjCInterfaceDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCInterfaceDecl &, const TokenTree *);
void SerializeObjCMethodDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCMethodDecl &, const TokenTree *);
void SerializeObjCPropertyDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCPropertyDecl &, const TokenTree *);
void SerializeObjCPropertyImplDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCPropertyImplDecl &, const TokenTree *);
void SerializeObjCProtocolDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCProtocolDecl &, const TokenTree *);
void SerializePragmaCommentDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::PragmaCommentDecl &, const TokenTree *);
void SerializePragmaDetectMismatchDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::PragmaDetectMismatchDecl &, const TokenTree *);
void SerializeRequiresExprBodyDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::RequiresExprBodyDecl &, const TokenTree *);
void SerializeStaticAssertDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::StaticAssertDecl &, const TokenTree *);
void SerializeTemplateDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::TemplateDecl &, const TokenTree *);
void SerializeTemplateTemplateParmDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::TemplateTemplateParmDecl &, const TokenTree *);
void SerializeTopLevelStmtDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::TopLevelStmtDecl &, const TokenTree *);
void SerializeTranslationUnitDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::TranslationUnitDecl &, const TokenTree *);
void SerializeTypeDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::TypeDecl &, const TokenTree *);
void SerializeTypedefNameDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::TypedefNameDecl &, const TokenTree *);
void SerializeUnresolvedUsingIfExistsDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::UnresolvedUsingIfExistsDecl &, const TokenTree *);
void SerializeUnresolvedUsingTypenameDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::UnresolvedUsingTypenameDecl &, const TokenTree *);
void SerializeUsingDirectiveDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::UsingDirectiveDecl &, const TokenTree *);
void SerializeUsingPackDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::UsingPackDecl &, const TokenTree *);
void SerializeUsingShadowDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::UsingShadowDecl &, const TokenTree *);
void SerializeValueDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ValueDecl &, const TokenTree *);
void SerializeOMPDeclarativeDirectiveDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::OMPDeclarativeDirectiveDecl &, const TokenTree *);
void SerializeOMPDeclarativeDirectiveValueDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::OMPDeclarativeDirectiveValueDecl &, const TokenTree *);
void SerializeAccessSpecDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::AccessSpecDecl &, const TokenTree *);
void SerializeBaseUsingDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::BaseUsingDecl &, const TokenTree *);
void SerializeBindingDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::BindingDecl &, const TokenTree *);
void SerializeBlockDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::BlockDecl &, const TokenTree *);
void SerializeBuiltinTemplateDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::BuiltinTemplateDecl &, const TokenTree *);
void SerializeCapturedDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::CapturedDecl &, const TokenTree *);
void SerializeClassScopeFunctionSpecializationDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ClassScopeFunctionSpecializationDecl &, const TokenTree *);
void SerializeConceptDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ConceptDecl &, const TokenTree *);
void SerializeConstructorUsingShadowDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ConstructorUsingShadowDecl &, const TokenTree *);
void SerializeDeclaratorDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::DeclaratorDecl &, const TokenTree *);
void SerializeEnumConstantDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::EnumConstantDecl &, const TokenTree *);
void SerializeFieldDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::FieldDecl &, const TokenTree *);
void SerializeFunctionDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::FunctionDecl &, const TokenTree *);
void SerializeHLSLBufferDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::HLSLBufferDecl &, const TokenTree *);
void SerializeIndirectFieldDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::IndirectFieldDecl &, const TokenTree *);
void SerializeLabelDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::LabelDecl &, const TokenTree *);
void SerializeMSGuidDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::MSGuidDecl &, const TokenTree *);
void SerializeMSPropertyDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::MSPropertyDecl &, const TokenTree *);
void SerializeNonTypeTemplateParmDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::NonTypeTemplateParmDecl &, const TokenTree *);
void SerializeOMPAllocateDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::OMPAllocateDecl &, const TokenTree *);
void SerializeOMPDeclareMapperDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::OMPDeclareMapperDecl &, const TokenTree *);
void SerializeOMPDeclareReductionDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::OMPDeclareReductionDecl &, const TokenTree *);
void SerializeOMPRequiresDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::OMPRequiresDecl &, const TokenTree *);
void SerializeOMPThreadPrivateDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::OMPThreadPrivateDecl &, const TokenTree *);
void SerializeObjCAtDefsFieldDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCAtDefsFieldDecl &, const TokenTree *);
void SerializeObjCCategoryDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCCategoryDecl &, const TokenTree *);
void SerializeObjCCategoryImplDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCCategoryImplDecl &, const TokenTree *);
void SerializeObjCIvarDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCIvarDecl &, const TokenTree *);
void SerializeObjCTypeParamDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ObjCTypeParamDecl &, const TokenTree *);
void SerializeRedeclarableTemplateDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::RedeclarableTemplateDecl &, const TokenTree *);
void SerializeTagDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::TagDecl &, const TokenTree *);
void SerializeTemplateParamObjectDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::TemplateParamObjectDecl &, const TokenTree *);
void SerializeTemplateTypeParmDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::TemplateTypeParmDecl &, const TokenTree *);
void SerializeTypeAliasDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::TypeAliasDecl &, const TokenTree *);
void SerializeTypeAliasTemplateDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::TypeAliasTemplateDecl &, const TokenTree *);
void SerializeTypedefDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::TypedefDecl &, const TokenTree *);
void SerializeUnnamedGlobalConstantDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::UnnamedGlobalConstantDecl &, const TokenTree *);
void SerializeUnresolvedUsingValueDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::UnresolvedUsingValueDecl &, const TokenTree *);
void SerializeUsingDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::UsingDecl &, const TokenTree *);
void SerializeUsingEnumDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::UsingEnumDecl &, const TokenTree *);
void SerializeVarDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::VarDecl &, const TokenTree *);
void SerializeVarTemplateDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::VarTemplateDecl &, const TokenTree *);
void SerializeVarTemplateSpecializationDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::VarTemplateSpecializationDecl &, const TokenTree *);
void SerializeCXXDeductionGuideDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::CXXDeductionGuideDecl &, const TokenTree *);
void SerializeCXXMethodDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::CXXMethodDecl &, const TokenTree *);
void SerializeClassTemplateDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ClassTemplateDecl &, const TokenTree *);
void SerializeDecompositionDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::DecompositionDecl &, const TokenTree *);
void SerializeEnumDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::EnumDecl &, const TokenTree *);
void SerializeFunctionTemplateDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::FunctionTemplateDecl &, const TokenTree *);
void SerializeImplicitParamDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ImplicitParamDecl &, const TokenTree *);
void SerializeOMPCapturedExprDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::OMPCapturedExprDecl &, const TokenTree *);
void SerializeParmVarDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ParmVarDecl &, const TokenTree *);
void SerializeRecordDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::RecordDecl &, const TokenTree *);
void SerializeVarTemplatePartialSpecializationDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::VarTemplatePartialSpecializationDecl &, const TokenTree *);
void SerializeCXXConstructorDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::CXXConstructorDecl &, const TokenTree *);
void SerializeCXXConversionDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::CXXConversionDecl &, const TokenTree *);
void SerializeCXXDestructorDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::CXXDestructorDecl &, const TokenTree *);
void SerializeCXXRecordDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::CXXRecordDecl &, const TokenTree *);
void SerializeClassTemplateSpecializationDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ClassTemplateSpecializationDecl &, const TokenTree *);
void SerializeClassTemplatePartialSpecializationDecl(const PendingFragment &, const EntityMapper &, mx::ast::Decl::Builder, const pasta::ClassTemplatePartialSpecializationDecl &, const TokenTree *);
void SerializeStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::Stmt &, const TokenTree *);
void SerializeSwitchCase(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::SwitchCase &, const TokenTree *);
void SerializeSwitchStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::SwitchStmt &, const TokenTree *);
void SerializeValueStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ValueStmt &, const TokenTree *);
void SerializeWhileStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::WhileStmt &, const TokenTree *);
void SerializeAsmStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::AsmStmt &, const TokenTree *);
void SerializeAttributedStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::AttributedStmt &, const TokenTree *);
void SerializeBreakStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::BreakStmt &, const TokenTree *);
void SerializeCXXCatchStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXCatchStmt &, const TokenTree *);
void SerializeCXXForRangeStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXForRangeStmt &, const TokenTree *);
void SerializeCXXTryStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXTryStmt &, const TokenTree *);
void SerializeCapturedStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CapturedStmt &, const TokenTree *);
void SerializeCaseStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CaseStmt &, const TokenTree *);
void SerializeCompoundStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CompoundStmt &, const TokenTree *);
void SerializeContinueStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ContinueStmt &, const TokenTree *);
void SerializeCoreturnStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CoreturnStmt &, const TokenTree *);
void SerializeCoroutineBodyStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CoroutineBodyStmt &, const TokenTree *);
void SerializeDeclStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::DeclStmt &, const TokenTree *);
void SerializeDefaultStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::DefaultStmt &, const TokenTree *);
void SerializeDoStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::DoStmt &, const TokenTree *);
void SerializeExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::Expr &, const TokenTree *);
void SerializeExpressionTraitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ExpressionTraitExpr &, const TokenTree *);
void SerializeExtVectorElementExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ExtVectorElementExpr &, const TokenTree *);
void SerializeFixedPointLiteral(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::FixedPointLiteral &, const TokenTree *);
void SerializeFloatingLiteral(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::FloatingLiteral &, const TokenTree *);
void SerializeForStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ForStmt &, const TokenTree *);
void SerializeFullExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::FullExpr &, const TokenTree *);
void SerializeFunctionParmPackExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::FunctionParmPackExpr &, const TokenTree *);
void SerializeGCCAsmStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::GCCAsmStmt &, const TokenTree *);
void SerializeGNUNullExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::GNUNullExpr &, const TokenTree *);
void SerializeGenericSelectionExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::GenericSelectionExpr &, const TokenTree *);
void SerializeGotoStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::GotoStmt &, const TokenTree *);
void SerializeIfStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::IfStmt &, const TokenTree *);
void SerializeImaginaryLiteral(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ImaginaryLiteral &, const TokenTree *);
void SerializeImplicitValueInitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ImplicitValueInitExpr &, const TokenTree *);
void SerializeIndirectGotoStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::IndirectGotoStmt &, const TokenTree *);
void SerializeInitListExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::InitListExpr &, const TokenTree *);
void SerializeIntegerLiteral(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::IntegerLiteral &, const TokenTree *);
void SerializeLabelStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::LabelStmt &, const TokenTree *);
void SerializeLambdaExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::LambdaExpr &, const TokenTree *);
void SerializeMSAsmStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::MSAsmStmt &, const TokenTree *);
void SerializeMSDependentExistsStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::MSDependentExistsStmt &, const TokenTree *);
void SerializeMSPropertyRefExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::MSPropertyRefExpr &, const TokenTree *);
void SerializeMSPropertySubscriptExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::MSPropertySubscriptExpr &, const TokenTree *);
void SerializeMaterializeTemporaryExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::MaterializeTemporaryExpr &, const TokenTree *);
void SerializeMatrixSubscriptExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::MatrixSubscriptExpr &, const TokenTree *);
void SerializeMemberExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::MemberExpr &, const TokenTree *);
void SerializeNoInitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::NoInitExpr &, const TokenTree *);
void SerializeNullStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::NullStmt &, const TokenTree *);
void SerializeOMPArraySectionExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPArraySectionExpr &, const TokenTree *);
void SerializeOMPArrayShapingExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPArrayShapingExpr &, const TokenTree *);
void SerializeOMPCanonicalLoop(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPCanonicalLoop &, const TokenTree *);
void SerializeOMPExecutableDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPExecutableDirective &, const TokenTree *);
void SerializeOMPFlushDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPFlushDirective &, const TokenTree *);
void SerializeOMPInteropDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPInteropDirective &, const TokenTree *);
void SerializeOMPIteratorExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPIteratorExpr &, const TokenTree *);
void SerializeOMPLoopBasedDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPLoopBasedDirective &, const TokenTree *);
void SerializeOMPLoopDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPLoopDirective &, const TokenTree *);
void SerializeOMPLoopTransformationDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPLoopTransformationDirective &, const TokenTree *);
void SerializeOMPMaskedDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPMaskedDirective &, const TokenTree *);
void SerializeOMPMaskedTaskLoopDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPMaskedTaskLoopDirective &, const TokenTree *);
void SerializeOMPMaskedTaskLoopSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPMaskedTaskLoopSimdDirective &, const TokenTree *);
void SerializeOMPMasterDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPMasterDirective &, const TokenTree *);
void SerializeOMPMasterTaskLoopDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPMasterTaskLoopDirective &, const TokenTree *);
void SerializeOMPMasterTaskLoopSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPMasterTaskLoopSimdDirective &, const TokenTree *);
void SerializeOMPMetaDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPMetaDirective &, const TokenTree *);
void SerializeOMPOrderedDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPOrderedDirective &, const TokenTree *);
void SerializeOMPParallelDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPParallelDirective &, const TokenTree *);
void SerializeOMPParallelForDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPParallelForDirective &, const TokenTree *);
void SerializeOMPParallelForSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPParallelForSimdDirective &, const TokenTree *);
void SerializeOMPParallelGenericLoopDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPParallelGenericLoopDirective &, const TokenTree *);
void SerializeOMPParallelMaskedDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPParallelMaskedDirective &, const TokenTree *);
void SerializeOMPParallelMaskedTaskLoopDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPParallelMaskedTaskLoopDirective &, const TokenTree *);
void SerializeOMPParallelMaskedTaskLoopSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPParallelMaskedTaskLoopSimdDirective &, const TokenTree *);
void SerializeOMPParallelMasterDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPParallelMasterDirective &, const TokenTree *);
void SerializeOMPParallelMasterTaskLoopDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPParallelMasterTaskLoopDirective &, const TokenTree *);
void SerializeOMPParallelMasterTaskLoopSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPParallelMasterTaskLoopSimdDirective &, const TokenTree *);
void SerializeOMPParallelSectionsDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPParallelSectionsDirective &, const TokenTree *);
void SerializeOMPScanDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPScanDirective &, const TokenTree *);
void SerializeOMPSectionDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPSectionDirective &, const TokenTree *);
void SerializeOMPSectionsDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPSectionsDirective &, const TokenTree *);
void SerializeOMPSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPSimdDirective &, const TokenTree *);
void SerializeOMPSingleDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPSingleDirective &, const TokenTree *);
void SerializeOMPTargetDataDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetDataDirective &, const TokenTree *);
void SerializeOMPTargetDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetDirective &, const TokenTree *);
void SerializeOMPTargetEnterDataDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetEnterDataDirective &, const TokenTree *);
void SerializeOMPTargetExitDataDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetExitDataDirective &, const TokenTree *);
void SerializeOMPTargetParallelDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetParallelDirective &, const TokenTree *);
void SerializeOMPTargetParallelForDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetParallelForDirective &, const TokenTree *);
void SerializeOMPTargetParallelForSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetParallelForSimdDirective &, const TokenTree *);
void SerializeOMPTargetParallelGenericLoopDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetParallelGenericLoopDirective &, const TokenTree *);
void SerializeOMPTargetSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetSimdDirective &, const TokenTree *);
void SerializeOMPTargetTeamsDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetTeamsDirective &, const TokenTree *);
void SerializeOMPTargetTeamsDistributeDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetTeamsDistributeDirective &, const TokenTree *);
void SerializeOMPTargetTeamsDistributeParallelForDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetTeamsDistributeParallelForDirective &, const TokenTree *);
void SerializeOMPTargetTeamsDistributeParallelForSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetTeamsDistributeParallelForSimdDirective &, const TokenTree *);
void SerializeOMPTargetTeamsDistributeSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetTeamsDistributeSimdDirective &, const TokenTree *);
void SerializeOMPTargetTeamsGenericLoopDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetTeamsGenericLoopDirective &, const TokenTree *);
void SerializeOMPTargetUpdateDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTargetUpdateDirective &, const TokenTree *);
void SerializeOMPTaskDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTaskDirective &, const TokenTree *);
void SerializeOMPTaskLoopDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTaskLoopDirective &, const TokenTree *);
void SerializeOMPTaskLoopSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTaskLoopSimdDirective &, const TokenTree *);
void SerializeOMPTaskgroupDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTaskgroupDirective &, const TokenTree *);
void SerializeOMPTaskwaitDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTaskwaitDirective &, const TokenTree *);
void SerializeOMPTaskyieldDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTaskyieldDirective &, const TokenTree *);
void SerializeOMPTeamsDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTeamsDirective &, const TokenTree *);
void SerializeOMPTeamsDistributeDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTeamsDistributeDirective &, const TokenTree *);
void SerializeOMPTeamsDistributeParallelForDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTeamsDistributeParallelForDirective &, const TokenTree *);
void SerializeOMPTeamsDistributeParallelForSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTeamsDistributeParallelForSimdDirective &, const TokenTree *);
void SerializeOMPTeamsDistributeSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTeamsDistributeSimdDirective &, const TokenTree *);
void SerializeOMPTeamsGenericLoopDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTeamsGenericLoopDirective &, const TokenTree *);
void SerializeOMPTileDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPTileDirective &, const TokenTree *);
void SerializeOMPUnrollDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPUnrollDirective &, const TokenTree *);
void SerializeObjCArrayLiteral(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCArrayLiteral &, const TokenTree *);
void SerializeObjCAtCatchStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCAtCatchStmt &, const TokenTree *);
void SerializeObjCAtFinallyStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCAtFinallyStmt &, const TokenTree *);
void SerializeObjCAtSynchronizedStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCAtSynchronizedStmt &, const TokenTree *);
void SerializeObjCAtThrowStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCAtThrowStmt &, const TokenTree *);
void SerializeObjCAtTryStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCAtTryStmt &, const TokenTree *);
void SerializeObjCAutoreleasePoolStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCAutoreleasePoolStmt &, const TokenTree *);
void SerializeObjCAvailabilityCheckExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCAvailabilityCheckExpr &, const TokenTree *);
void SerializeObjCBoolLiteralExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCBoolLiteralExpr &, const TokenTree *);
void SerializeObjCBoxedExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCBoxedExpr &, const TokenTree *);
void SerializeObjCDictionaryLiteral(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCDictionaryLiteral &, const TokenTree *);
void SerializeObjCEncodeExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCEncodeExpr &, const TokenTree *);
void SerializeObjCForCollectionStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCForCollectionStmt &, const TokenTree *);
void SerializeObjCIndirectCopyRestoreExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCIndirectCopyRestoreExpr &, const TokenTree *);
void SerializeObjCIsaExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCIsaExpr &, const TokenTree *);
void SerializeObjCIvarRefExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCIvarRefExpr &, const TokenTree *);
void SerializeObjCMessageExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCMessageExpr &, const TokenTree *);
void SerializeObjCPropertyRefExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCPropertyRefExpr &, const TokenTree *);
void SerializeObjCProtocolExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCProtocolExpr &, const TokenTree *);
void SerializeObjCSelectorExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCSelectorExpr &, const TokenTree *);
void SerializeObjCStringLiteral(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCStringLiteral &, const TokenTree *);
void SerializeObjCSubscriptRefExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCSubscriptRefExpr &, const TokenTree *);
void SerializeOffsetOfExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OffsetOfExpr &, const TokenTree *);
void SerializeOpaqueValueExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OpaqueValueExpr &, const TokenTree *);
void SerializeOverloadExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OverloadExpr &, const TokenTree *);
void SerializePackExpansionExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::PackExpansionExpr &, const TokenTree *);
void SerializeParenExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ParenExpr &, const TokenTree *);
void SerializeParenListExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ParenListExpr &, const TokenTree *);
void SerializePredefinedExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::PredefinedExpr &, const TokenTree *);
void SerializePseudoObjectExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::PseudoObjectExpr &, const TokenTree *);
void SerializeRecoveryExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::RecoveryExpr &, const TokenTree *);
void SerializeRequiresExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::RequiresExpr &, const TokenTree *);
void SerializeReturnStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ReturnStmt &, const TokenTree *);
void SerializeSEHExceptStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::SEHExceptStmt &, const TokenTree *);
void SerializeSEHFinallyStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::SEHFinallyStmt &, const TokenTree *);
void SerializeSEHLeaveStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::SEHLeaveStmt &, const TokenTree *);
void SerializeSEHTryStmt(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::SEHTryStmt &, const TokenTree *);
void SerializeSYCLUniqueStableNameExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::SYCLUniqueStableNameExpr &, const TokenTree *);
void SerializeShuffleVectorExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ShuffleVectorExpr &, const TokenTree *);
void SerializeSizeOfPackExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::SizeOfPackExpr &, const TokenTree *);
void SerializeSourceLocExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::SourceLocExpr &, const TokenTree *);
void SerializeStmtExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::StmtExpr &, const TokenTree *);
void SerializeStringLiteral(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::StringLiteral &, const TokenTree *);
void SerializeSubstNonTypeTemplateParmExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::SubstNonTypeTemplateParmExpr &, const TokenTree *);
void SerializeSubstNonTypeTemplateParmPackExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::SubstNonTypeTemplateParmPackExpr &, const TokenTree *);
void SerializeTypeTraitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::TypeTraitExpr &, const TokenTree *);
void SerializeTypoExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::TypoExpr &, const TokenTree *);
void SerializeUnaryExprOrTypeTraitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::UnaryExprOrTypeTraitExpr &, const TokenTree *);
void SerializeUnaryOperator(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::UnaryOperator &, const TokenTree *);
void SerializeUnresolvedLookupExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::UnresolvedLookupExpr &, const TokenTree *);
void SerializeUnresolvedMemberExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::UnresolvedMemberExpr &, const TokenTree *);
void SerializeVAArgExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::VAArgExpr &, const TokenTree *);
void SerializeAbstractConditionalOperator(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::AbstractConditionalOperator &, const TokenTree *);
void SerializeAddrLabelExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::AddrLabelExpr &, const TokenTree *);
void SerializeArrayInitIndexExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ArrayInitIndexExpr &, const TokenTree *);
void SerializeArrayInitLoopExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ArrayInitLoopExpr &, const TokenTree *);
void SerializeArraySubscriptExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ArraySubscriptExpr &, const TokenTree *);
void SerializeArrayTypeTraitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ArrayTypeTraitExpr &, const TokenTree *);
void SerializeAsTypeExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::AsTypeExpr &, const TokenTree *);
void SerializeAtomicExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::AtomicExpr &, const TokenTree *);
void SerializeBinaryConditionalOperator(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::BinaryConditionalOperator &, const TokenTree *);
void SerializeBinaryOperator(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::BinaryOperator &, const TokenTree *);
void SerializeBlockExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::BlockExpr &, const TokenTree *);
void SerializeCXXBindTemporaryExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXBindTemporaryExpr &, const TokenTree *);
void SerializeCXXBoolLiteralExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXBoolLiteralExpr &, const TokenTree *);
void SerializeCXXConstructExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXConstructExpr &, const TokenTree *);
void SerializeCXXDefaultArgExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXDefaultArgExpr &, const TokenTree *);
void SerializeCXXDefaultInitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXDefaultInitExpr &, const TokenTree *);
void SerializeCXXDeleteExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXDeleteExpr &, const TokenTree *);
void SerializeCXXDependentScopeMemberExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXDependentScopeMemberExpr &, const TokenTree *);
void SerializeCXXFoldExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXFoldExpr &, const TokenTree *);
void SerializeCXXInheritedCtorInitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXInheritedCtorInitExpr &, const TokenTree *);
void SerializeCXXNewExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXNewExpr &, const TokenTree *);
void SerializeCXXNoexceptExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXNoexceptExpr &, const TokenTree *);
void SerializeCXXNullPtrLiteralExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXNullPtrLiteralExpr &, const TokenTree *);
void SerializeCXXParenListInitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXParenListInitExpr &, const TokenTree *);
void SerializeCXXPseudoDestructorExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXPseudoDestructorExpr &, const TokenTree *);
void SerializeCXXRewrittenBinaryOperator(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXRewrittenBinaryOperator &, const TokenTree *);
void SerializeCXXScalarValueInitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXScalarValueInitExpr &, const TokenTree *);
void SerializeCXXStdInitializerListExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXStdInitializerListExpr &, const TokenTree *);
void SerializeCXXTemporaryObjectExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXTemporaryObjectExpr &, const TokenTree *);
void SerializeCXXThisExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXThisExpr &, const TokenTree *);
void SerializeCXXThrowExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXThrowExpr &, const TokenTree *);
void SerializeCXXTypeidExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXTypeidExpr &, const TokenTree *);
void SerializeCXXUnresolvedConstructExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXUnresolvedConstructExpr &, const TokenTree *);
void SerializeCXXUuidofExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXUuidofExpr &, const TokenTree *);
void SerializeCallExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CallExpr &, const TokenTree *);
void SerializeCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CastExpr &, const TokenTree *);
void SerializeCharacterLiteral(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CharacterLiteral &, const TokenTree *);
void SerializeChooseExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ChooseExpr &, const TokenTree *);
void SerializeCompoundAssignOperator(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CompoundAssignOperator &, const TokenTree *);
void SerializeCompoundLiteralExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CompoundLiteralExpr &, const TokenTree *);
void SerializeConceptSpecializationExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ConceptSpecializationExpr &, const TokenTree *);
void SerializeConditionalOperator(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ConditionalOperator &, const TokenTree *);
void SerializeConstantExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ConstantExpr &, const TokenTree *);
void SerializeConvertVectorExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ConvertVectorExpr &, const TokenTree *);
void SerializeCoroutineSuspendExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CoroutineSuspendExpr &, const TokenTree *);
void SerializeCoyieldExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CoyieldExpr &, const TokenTree *);
void SerializeDeclRefExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::DeclRefExpr &, const TokenTree *);
void SerializeDependentCoawaitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::DependentCoawaitExpr &, const TokenTree *);
void SerializeDependentScopeDeclRefExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::DependentScopeDeclRefExpr &, const TokenTree *);
void SerializeDesignatedInitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::DesignatedInitExpr &, const TokenTree *);
void SerializeDesignatedInitUpdateExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::DesignatedInitUpdateExpr &, const TokenTree *);
void SerializeExplicitCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ExplicitCastExpr &, const TokenTree *);
void SerializeExprWithCleanups(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ExprWithCleanups &, const TokenTree *);
void SerializeImplicitCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ImplicitCastExpr &, const TokenTree *);
void SerializeOMPAtomicDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPAtomicDirective &, const TokenTree *);
void SerializeOMPBarrierDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPBarrierDirective &, const TokenTree *);
void SerializeOMPCancelDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPCancelDirective &, const TokenTree *);
void SerializeOMPCancellationPointDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPCancellationPointDirective &, const TokenTree *);
void SerializeOMPCriticalDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPCriticalDirective &, const TokenTree *);
void SerializeOMPDepobjDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPDepobjDirective &, const TokenTree *);
void SerializeOMPDispatchDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPDispatchDirective &, const TokenTree *);
void SerializeOMPDistributeDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPDistributeDirective &, const TokenTree *);
void SerializeOMPDistributeParallelForDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPDistributeParallelForDirective &, const TokenTree *);
void SerializeOMPDistributeParallelForSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPDistributeParallelForSimdDirective &, const TokenTree *);
void SerializeOMPDistributeSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPDistributeSimdDirective &, const TokenTree *);
void SerializeOMPErrorDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPErrorDirective &, const TokenTree *);
void SerializeOMPForDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPForDirective &, const TokenTree *);
void SerializeOMPForSimdDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPForSimdDirective &, const TokenTree *);
void SerializeOMPGenericLoopDirective(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::OMPGenericLoopDirective &, const TokenTree *);
void SerializeObjCBridgedCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::ObjCBridgedCastExpr &, const TokenTree *);
void SerializeUserDefinedLiteral(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::UserDefinedLiteral &, const TokenTree *);
void SerializeBuiltinBitCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::BuiltinBitCastExpr &, const TokenTree *);
void SerializeCStyleCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CStyleCastExpr &, const TokenTree *);
void SerializeCUDAKernelCallExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CUDAKernelCallExpr &, const TokenTree *);
void SerializeCXXFunctionalCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXFunctionalCastExpr &, const TokenTree *);
void SerializeCXXMemberCallExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXMemberCallExpr &, const TokenTree *);
void SerializeCXXNamedCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXNamedCastExpr &, const TokenTree *);
void SerializeCXXOperatorCallExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXOperatorCallExpr &, const TokenTree *);
void SerializeCXXReinterpretCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXReinterpretCastExpr &, const TokenTree *);
void SerializeCXXStaticCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXStaticCastExpr &, const TokenTree *);
void SerializeCoawaitExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CoawaitExpr &, const TokenTree *);
void SerializeCXXAddrspaceCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXAddrspaceCastExpr &, const TokenTree *);
void SerializeCXXConstCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXConstCastExpr &, const TokenTree *);
void SerializeCXXDynamicCastExpr(const PendingFragment &, const EntityMapper &, mx::ast::Stmt::Builder, const pasta::CXXDynamicCastExpr &, const TokenTree *);
void SerializeType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::Type &, const TokenTree *);
void SerializeTypeOfExprType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::TypeOfExprType &, const TokenTree *);
void SerializeTypeOfType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::TypeOfType &, const TokenTree *);
void SerializeTypedefType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::TypedefType &, const TokenTree *);
void SerializeUnaryTransformType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::UnaryTransformType &, const TokenTree *);
void SerializeUnresolvedUsingType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::UnresolvedUsingType &, const TokenTree *);
void SerializeUsingType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::UsingType &, const TokenTree *);
void SerializeVectorType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::VectorType &, const TokenTree *);
void SerializeTypeWithKeyword(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::TypeWithKeyword &, const TokenTree *);
void SerializeAdjustedType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::AdjustedType &, const TokenTree *);
void SerializeArrayType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::ArrayType &, const TokenTree *);
void SerializeAtomicType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::AtomicType &, const TokenTree *);
void SerializeAttributedType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::AttributedType &, const TokenTree *);
void SerializeBTFTagAttributedType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::BTFTagAttributedType &, const TokenTree *);
void SerializeBitIntType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::BitIntType &, const TokenTree *);
void SerializeBlockPointerType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::BlockPointerType &, const TokenTree *);
void SerializeBuiltinType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::BuiltinType &, const TokenTree *);
void SerializeComplexType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::ComplexType &, const TokenTree *);
void SerializeConstantArrayType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::ConstantArrayType &, const TokenTree *);
void SerializeDecayedType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::DecayedType &, const TokenTree *);
void SerializeDecltypeType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::DecltypeType &, const TokenTree *);
void SerializeDeducedType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::DeducedType &, const TokenTree *);
void SerializeDependentAddressSpaceType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::DependentAddressSpaceType &, const TokenTree *);
void SerializeDependentBitIntType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::DependentBitIntType &, const TokenTree *);
void SerializeDependentNameType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::DependentNameType &, const TokenTree *);
void SerializeDependentSizedArrayType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::DependentSizedArrayType &, const TokenTree *);
void SerializeDependentSizedExtVectorType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::DependentSizedExtVectorType &, const TokenTree *);
void SerializeDependentTemplateSpecializationType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::DependentTemplateSpecializationType &, const TokenTree *);
void SerializeDependentVectorType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::DependentVectorType &, const TokenTree *);
void SerializeElaboratedType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::ElaboratedType &, const TokenTree *);
void SerializeExtVectorType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::ExtVectorType &, const TokenTree *);
void SerializeFunctionType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::FunctionType &, const TokenTree *);
void SerializeIncompleteArrayType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::IncompleteArrayType &, const TokenTree *);
void SerializeInjectedClassNameType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::InjectedClassNameType &, const TokenTree *);
void SerializeMacroQualifiedType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::MacroQualifiedType &, const TokenTree *);
void SerializeMatrixType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::MatrixType &, const TokenTree *);
void SerializeMemberPointerType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::MemberPointerType &, const TokenTree *);
void SerializeObjCObjectPointerType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::ObjCObjectPointerType &, const TokenTree *);
void SerializeObjCObjectType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::ObjCObjectType &, const TokenTree *);
void SerializeObjCTypeParamType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::ObjCTypeParamType &, const TokenTree *);
void SerializePackExpansionType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::PackExpansionType &, const TokenTree *);
void SerializeParenType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::ParenType &, const TokenTree *);
void SerializePipeType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::PipeType &, const TokenTree *);
void SerializePointerType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::PointerType &, const TokenTree *);
void SerializeQualifiedType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::QualifiedType &, const TokenTree *);
void SerializeReferenceType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::ReferenceType &, const TokenTree *);
void SerializeSubstTemplateTypeParmPackType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::SubstTemplateTypeParmPackType &, const TokenTree *);
void SerializeSubstTemplateTypeParmType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::SubstTemplateTypeParmType &, const TokenTree *);
void SerializeTagType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::TagType &, const TokenTree *);
void SerializeTemplateSpecializationType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::TemplateSpecializationType &, const TokenTree *);
void SerializeTemplateTypeParmType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::TemplateTypeParmType &, const TokenTree *);
void SerializeVariableArrayType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::VariableArrayType &, const TokenTree *);
void SerializeAutoType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::AutoType &, const TokenTree *);
void SerializeConstantMatrixType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::ConstantMatrixType &, const TokenTree *);
void SerializeDeducedTemplateSpecializationType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::DeducedTemplateSpecializationType &, const TokenTree *);
void SerializeDependentSizedMatrixType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::DependentSizedMatrixType &, const TokenTree *);
void SerializeEnumType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::EnumType &, const TokenTree *);
void SerializeFunctionNoProtoType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::FunctionNoProtoType &, const TokenTree *);
void SerializeFunctionProtoType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::FunctionProtoType &, const TokenTree *);
void SerializeLValueReferenceType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::LValueReferenceType &, const TokenTree *);
void SerializeObjCInterfaceType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::ObjCInterfaceType &, const TokenTree *);
void SerializeRValueReferenceType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::RValueReferenceType &, const TokenTree *);
void SerializeRecordType(const PendingFragment &, const EntityMapper &, mx::ast::Type::Builder, const pasta::RecordType &, const TokenTree *);
void SerializeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::Attr &, const TokenTree *);
void SerializeBuiltinAliasAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::BuiltinAliasAttr &, const TokenTree *);
void SerializeCalledOnceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CalledOnceAttr &, const TokenTree *);
void SerializeIFuncAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::IFuncAttr &, const TokenTree *);
void SerializeInheritableAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::InheritableAttr &, const TokenTree *);
void SerializeInheritableParamAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::InheritableParamAttr &, const TokenTree *);
void SerializeInitPriorityAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::InitPriorityAttr &, const TokenTree *);
void SerializeInitSegAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::InitSegAttr &, const TokenTree *);
void SerializeIntelOclBiccAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::IntelOclBiccAttr &, const TokenTree *);
void SerializeInternalLinkageAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::InternalLinkageAttr &, const TokenTree *);
void SerializeLTOVisibilityPublicAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::LTOVisibilityPublicAttr &, const TokenTree *);
void SerializeLayoutVersionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::LayoutVersionAttr &, const TokenTree *);
void SerializeLeafAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::LeafAttr &, const TokenTree *);
void SerializeLifetimeBoundAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::LifetimeBoundAttr &, const TokenTree *);
void SerializeLoaderUninitializedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::LoaderUninitializedAttr &, const TokenTree *);
void SerializeLockReturnedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::LockReturnedAttr &, const TokenTree *);
void SerializeLocksExcludedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::LocksExcludedAttr &, const TokenTree *);
void SerializeLoopHintAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::LoopHintAttr &, const TokenTree *);
void SerializeM68kInterruptAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::M68kInterruptAttr &, const TokenTree *);
void SerializeMIGServerRoutineAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MIGServerRoutineAttr &, const TokenTree *);
void SerializeMSABIAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MSABIAttr &, const TokenTree *);
void SerializeMSAllocatorAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MSAllocatorAttr &, const TokenTree *);
void SerializeMSInheritanceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MSInheritanceAttr &, const TokenTree *);
void SerializeMSNoVTableAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MSNoVTableAttr &, const TokenTree *);
void SerializeMSP430InterruptAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MSP430InterruptAttr &, const TokenTree *);
void SerializeMSStructAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MSStructAttr &, const TokenTree *);
void SerializeMSVtorDispAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MSVtorDispAttr &, const TokenTree *);
void SerializeMaxFieldAlignmentAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MaxFieldAlignmentAttr &, const TokenTree *);
void SerializeMayAliasAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MayAliasAttr &, const TokenTree *);
void SerializeMaybeUndefAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MaybeUndefAttr &, const TokenTree *);
void SerializeMicroMipsAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MicroMipsAttr &, const TokenTree *);
void SerializeMinSizeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MinSizeAttr &, const TokenTree *);
void SerializeMinVectorWidthAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MinVectorWidthAttr &, const TokenTree *);
void SerializeMips16Attr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::Mips16Attr &, const TokenTree *);
void SerializeMipsInterruptAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MipsInterruptAttr &, const TokenTree *);
void SerializeMipsLongCallAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MipsLongCallAttr &, const TokenTree *);
void SerializeMipsShortCallAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MipsShortCallAttr &, const TokenTree *);
void SerializeModeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ModeAttr &, const TokenTree *);
void SerializeNSConsumedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NSConsumedAttr &, const TokenTree *);
void SerializeNSConsumesSelfAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NSConsumesSelfAttr &, const TokenTree *);
void SerializeNSErrorDomainAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NSErrorDomainAttr &, const TokenTree *);
void SerializeNSReturnsAutoreleasedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NSReturnsAutoreleasedAttr &, const TokenTree *);
void SerializeNSReturnsNotRetainedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NSReturnsNotRetainedAttr &, const TokenTree *);
void SerializeNSReturnsRetainedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NSReturnsRetainedAttr &, const TokenTree *);
void SerializeNVPTXKernelAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NVPTXKernelAttr &, const TokenTree *);
void SerializeNakedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NakedAttr &, const TokenTree *);
void SerializeNoAliasAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoAliasAttr &, const TokenTree *);
void SerializeNoBuiltinAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoBuiltinAttr &, const TokenTree *);
void SerializeNoCommonAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoCommonAttr &, const TokenTree *);
void SerializeNoDebugAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoDebugAttr &, const TokenTree *);
void SerializeNoDestroyAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoDestroyAttr &, const TokenTree *);
void SerializeNoDuplicateAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoDuplicateAttr &, const TokenTree *);
void SerializeNoEscapeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoEscapeAttr &, const TokenTree *);
void SerializeNoInstrumentFunctionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoInstrumentFunctionAttr &, const TokenTree *);
void SerializeNoMicroMipsAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoMicroMipsAttr &, const TokenTree *);
void SerializeNoMips16Attr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoMips16Attr &, const TokenTree *);
void SerializeNoProfileFunctionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoProfileFunctionAttr &, const TokenTree *);
void SerializeNoRandomizeLayoutAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoRandomizeLayoutAttr &, const TokenTree *);
void SerializeNoReturnAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoReturnAttr &, const TokenTree *);
void SerializeNoSanitizeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoSanitizeAttr &, const TokenTree *);
void SerializeNoSpeculativeLoadHardeningAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoSpeculativeLoadHardeningAttr &, const TokenTree *);
void SerializeNoSplitStackAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoSplitStackAttr &, const TokenTree *);
void SerializeNoStackProtectorAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoStackProtectorAttr &, const TokenTree *);
void SerializeNoThreadSafetyAnalysisAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoThreadSafetyAnalysisAttr &, const TokenTree *);
void SerializeNoThrowAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoThrowAttr &, const TokenTree *);
void SerializeNoUniqueAddressAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoUniqueAddressAttr &, const TokenTree *);
void SerializeNoUwtableAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoUwtableAttr &, const TokenTree *);
void SerializeNonNullAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NonNullAttr &, const TokenTree *);
void SerializeNotTailCalledAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NotTailCalledAttr &, const TokenTree *);
void SerializeOMPAllocateDeclAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OMPAllocateDeclAttr &, const TokenTree *);
void SerializeOMPCaptureKindAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OMPCaptureKindAttr &, const TokenTree *);
void SerializeOMPCaptureNoInitAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OMPCaptureNoInitAttr &, const TokenTree *);
void SerializeOMPDeclareSimdDeclAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OMPDeclareSimdDeclAttr &, const TokenTree *);
void SerializeOMPDeclareTargetDeclAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OMPDeclareTargetDeclAttr &, const TokenTree *);
void SerializeOMPDeclareVariantAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OMPDeclareVariantAttr &, const TokenTree *);
void SerializeOMPReferencedVarAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OMPReferencedVarAttr &, const TokenTree *);
void SerializeOMPThreadPrivateDeclAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OMPThreadPrivateDeclAttr &, const TokenTree *);
void SerializeOSConsumedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OSConsumedAttr &, const TokenTree *);
void SerializeOSConsumesThisAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OSConsumesThisAttr &, const TokenTree *);
void SerializeOSReturnsNotRetainedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OSReturnsNotRetainedAttr &, const TokenTree *);
void SerializeOSReturnsRetainedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OSReturnsRetainedAttr &, const TokenTree *);
void SerializeOSReturnsRetainedOnNonZeroAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OSReturnsRetainedOnNonZeroAttr &, const TokenTree *);
void SerializeOSReturnsRetainedOnZeroAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OSReturnsRetainedOnZeroAttr &, const TokenTree *);
void SerializeObjCBoxableAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCBoxableAttr &, const TokenTree *);
void SerializeObjCBridgeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCBridgeAttr &, const TokenTree *);
void SerializeObjCBridgeMutableAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCBridgeMutableAttr &, const TokenTree *);
void SerializeObjCBridgeRelatedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCBridgeRelatedAttr &, const TokenTree *);
void SerializeObjCClassStubAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCClassStubAttr &, const TokenTree *);
void SerializeObjCDesignatedInitializerAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCDesignatedInitializerAttr &, const TokenTree *);
void SerializeObjCDirectAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCDirectAttr &, const TokenTree *);
void SerializeObjCDirectMembersAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCDirectMembersAttr &, const TokenTree *);
void SerializeObjCExceptionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCExceptionAttr &, const TokenTree *);
void SerializeObjCExplicitProtocolImplAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCExplicitProtocolImplAttr &, const TokenTree *);
void SerializeObjCExternallyRetainedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCExternallyRetainedAttr &, const TokenTree *);
void SerializeObjCIndependentClassAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCIndependentClassAttr &, const TokenTree *);
void SerializeObjCMethodFamilyAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCMethodFamilyAttr &, const TokenTree *);
void SerializeObjCNSObjectAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCNSObjectAttr &, const TokenTree *);
void SerializeObjCNonLazyClassAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCNonLazyClassAttr &, const TokenTree *);
void SerializeObjCNonRuntimeProtocolAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCNonRuntimeProtocolAttr &, const TokenTree *);
void SerializeObjCOwnershipAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCOwnershipAttr &, const TokenTree *);
void SerializeObjCPreciseLifetimeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCPreciseLifetimeAttr &, const TokenTree *);
void SerializeObjCRequiresPropertyDefsAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCRequiresPropertyDefsAttr &, const TokenTree *);
void SerializeObjCRequiresSuperAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCRequiresSuperAttr &, const TokenTree *);
void SerializeObjCReturnsInnerPointerAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCReturnsInnerPointerAttr &, const TokenTree *);
void SerializeObjCRootClassAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCRootClassAttr &, const TokenTree *);
void SerializeObjCRuntimeNameAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCRuntimeNameAttr &, const TokenTree *);
void SerializeObjCRuntimeVisibleAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCRuntimeVisibleAttr &, const TokenTree *);
void SerializeObjCSubclassingRestrictedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCSubclassingRestrictedAttr &, const TokenTree *);
void SerializeOpenCLAccessAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OpenCLAccessAttr &, const TokenTree *);
void SerializeOpenCLIntelReqdSubGroupSizeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OpenCLIntelReqdSubGroupSizeAttr &, const TokenTree *);
void SerializeOpenCLKernelAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OpenCLKernelAttr &, const TokenTree *);
void SerializeOptimizeNoneAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OptimizeNoneAttr &, const TokenTree *);
void SerializeOverloadableAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OverloadableAttr &, const TokenTree *);
void SerializeOverrideAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OverrideAttr &, const TokenTree *);
void SerializeOwnerAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OwnerAttr &, const TokenTree *);
void SerializeOwnershipAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OwnershipAttr &, const TokenTree *);
void SerializePackedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PackedAttr &, const TokenTree *);
void SerializeParamTypestateAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ParamTypestateAttr &, const TokenTree *);
void SerializeParameterABIAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ParameterABIAttr &, const TokenTree *);
void SerializePascalAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PascalAttr &, const TokenTree *);
void SerializePassObjectSizeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PassObjectSizeAttr &, const TokenTree *);
void SerializePatchableFunctionEntryAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PatchableFunctionEntryAttr &, const TokenTree *);
void SerializePcsAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PcsAttr &, const TokenTree *);
void SerializePointerAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PointerAttr &, const TokenTree *);
void SerializePragmaClangBSSSectionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PragmaClangBSSSectionAttr &, const TokenTree *);
void SerializePragmaClangDataSectionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PragmaClangDataSectionAttr &, const TokenTree *);
void SerializePragmaClangRelroSectionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PragmaClangRelroSectionAttr &, const TokenTree *);
void SerializePragmaClangRodataSectionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PragmaClangRodataSectionAttr &, const TokenTree *);
void SerializePragmaClangTextSectionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PragmaClangTextSectionAttr &, const TokenTree *);
void SerializePreferredNameAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PreferredNameAttr &, const TokenTree *);
void SerializePreserveAllAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PreserveAllAttr &, const TokenTree *);
void SerializePreserveMostAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PreserveMostAttr &, const TokenTree *);
void SerializePtGuardedByAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PtGuardedByAttr &, const TokenTree *);
void SerializePtGuardedVarAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PtGuardedVarAttr &, const TokenTree *);
void SerializePureAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::PureAttr &, const TokenTree *);
void SerializeRISCVInterruptAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::RISCVInterruptAttr &, const TokenTree *);
void SerializeRandomizeLayoutAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::RandomizeLayoutAttr &, const TokenTree *);
void SerializeReadOnlyPlacementAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ReadOnlyPlacementAttr &, const TokenTree *);
void SerializeRegCallAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::RegCallAttr &, const TokenTree *);
void SerializeReinitializesAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ReinitializesAttr &, const TokenTree *);
void SerializeReleaseCapabilityAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ReleaseCapabilityAttr &, const TokenTree *);
void SerializeReleaseHandleAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ReleaseHandleAttr &, const TokenTree *);
void SerializeRenderScriptKernelAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::RenderScriptKernelAttr &, const TokenTree *);
void SerializeReqdWorkGroupSizeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ReqdWorkGroupSizeAttr &, const TokenTree *);
void SerializeRequiresCapabilityAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::RequiresCapabilityAttr &, const TokenTree *);
void SerializeRestrictAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::RestrictAttr &, const TokenTree *);
void SerializeRetainAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::RetainAttr &, const TokenTree *);
void SerializeReturnTypestateAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ReturnTypestateAttr &, const TokenTree *);
void SerializeReturnsNonNullAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ReturnsNonNullAttr &, const TokenTree *);
void SerializeReturnsTwiceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ReturnsTwiceAttr &, const TokenTree *);
void SerializeSYCLKernelAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SYCLKernelAttr &, const TokenTree *);
void SerializeSYCLSpecialClassAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SYCLSpecialClassAttr &, const TokenTree *);
void SerializeScopedLockableAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ScopedLockableAttr &, const TokenTree *);
void SerializeSectionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SectionAttr &, const TokenTree *);
void SerializeSelectAnyAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SelectAnyAttr &, const TokenTree *);
void SerializeSentinelAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SentinelAttr &, const TokenTree *);
void SerializeSetTypestateAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SetTypestateAttr &, const TokenTree *);
void SerializeSharedTrylockFunctionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SharedTrylockFunctionAttr &, const TokenTree *);
void SerializeSpeculativeLoadHardeningAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SpeculativeLoadHardeningAttr &, const TokenTree *);
void SerializeStandaloneDebugAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::StandaloneDebugAttr &, const TokenTree *);
void SerializeStdCallAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::StdCallAttr &, const TokenTree *);
void SerializeStmtAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::StmtAttr &, const TokenTree *);
void SerializeStrictFPAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::StrictFPAttr &, const TokenTree *);
void SerializeStrictGuardStackCheckAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::StrictGuardStackCheckAttr &, const TokenTree *);
void SerializeSuppressAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SuppressAttr &, const TokenTree *);
void SerializeSwiftAsyncAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftAsyncAttr &, const TokenTree *);
void SerializeSwiftAsyncCallAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftAsyncCallAttr &, const TokenTree *);
void SerializeSwiftAsyncContextAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftAsyncContextAttr &, const TokenTree *);
void SerializeSwiftAsyncErrorAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftAsyncErrorAttr &, const TokenTree *);
void SerializeSwiftAsyncNameAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftAsyncNameAttr &, const TokenTree *);
void SerializeSwiftAttrAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftAttrAttr &, const TokenTree *);
void SerializeSwiftBridgeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftBridgeAttr &, const TokenTree *);
void SerializeSwiftBridgedTypedefAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftBridgedTypedefAttr &, const TokenTree *);
void SerializeSwiftCallAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftCallAttr &, const TokenTree *);
void SerializeSwiftContextAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftContextAttr &, const TokenTree *);
void SerializeSwiftErrorAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftErrorAttr &, const TokenTree *);
void SerializeSwiftErrorResultAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftErrorResultAttr &, const TokenTree *);
void SerializeSwiftIndirectResultAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftIndirectResultAttr &, const TokenTree *);
void SerializeSwiftNameAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftNameAttr &, const TokenTree *);
void SerializeSwiftNewTypeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftNewTypeAttr &, const TokenTree *);
void SerializeSwiftObjCMembersAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftObjCMembersAttr &, const TokenTree *);
void SerializeSwiftPrivateAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SwiftPrivateAttr &, const TokenTree *);
void SerializeSysVABIAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SysVABIAttr &, const TokenTree *);
void SerializeTLSModelAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TLSModelAttr &, const TokenTree *);
void SerializeTargetAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TargetAttr &, const TokenTree *);
void SerializeTargetClonesAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TargetClonesAttr &, const TokenTree *);
void SerializeTargetVersionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TargetVersionAttr &, const TokenTree *);
void SerializeTestTypestateAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TestTypestateAttr &, const TokenTree *);
void SerializeThisCallAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ThisCallAttr &, const TokenTree *);
void SerializeThreadAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ThreadAttr &, const TokenTree *);
void SerializeTransparentUnionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TransparentUnionAttr &, const TokenTree *);
void SerializeTrivialABIAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TrivialABIAttr &, const TokenTree *);
void SerializeTryAcquireCapabilityAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TryAcquireCapabilityAttr &, const TokenTree *);
void SerializeTypeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TypeAttr &, const TokenTree *);
void SerializeTypeNonNullAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TypeNonNullAttr &, const TokenTree *);
void SerializeTypeNullUnspecifiedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TypeNullUnspecifiedAttr &, const TokenTree *);
void SerializeTypeNullableAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TypeNullableAttr &, const TokenTree *);
void SerializeTypeNullableResultAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TypeNullableResultAttr &, const TokenTree *);
void SerializeTypeTagForDatatypeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TypeTagForDatatypeAttr &, const TokenTree *);
void SerializeTypeVisibilityAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::TypeVisibilityAttr &, const TokenTree *);
void SerializeUPtrAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::UPtrAttr &, const TokenTree *);
void SerializeUnavailableAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::UnavailableAttr &, const TokenTree *);
void SerializeUninitializedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::UninitializedAttr &, const TokenTree *);
void SerializeUnlikelyAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::UnlikelyAttr &, const TokenTree *);
void SerializeUnsafeBufferUsageAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::UnsafeBufferUsageAttr &, const TokenTree *);
void SerializeUnusedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::UnusedAttr &, const TokenTree *);
void SerializeUseHandleAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::UseHandleAttr &, const TokenTree *);
void SerializeUsedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::UsedAttr &, const TokenTree *);
void SerializeUsingIfExistsAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::UsingIfExistsAttr &, const TokenTree *);
void SerializeUuidAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::UuidAttr &, const TokenTree *);
void SerializeVecReturnAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::VecReturnAttr &, const TokenTree *);
void SerializeVecTypeHintAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::VecTypeHintAttr &, const TokenTree *);
void SerializeVectorCallAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::VectorCallAttr &, const TokenTree *);
void SerializeVisibilityAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::VisibilityAttr &, const TokenTree *);
void SerializeWarnUnusedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::WarnUnusedAttr &, const TokenTree *);
void SerializeWarnUnusedResultAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::WarnUnusedResultAttr &, const TokenTree *);
void SerializeWeakAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::WeakAttr &, const TokenTree *);
void SerializeWeakImportAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::WeakImportAttr &, const TokenTree *);
void SerializeWeakRefAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::WeakRefAttr &, const TokenTree *);
void SerializeWebAssemblyExportNameAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::WebAssemblyExportNameAttr &, const TokenTree *);
void SerializeWebAssemblyFuncrefAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::WebAssemblyFuncrefAttr &, const TokenTree *);
void SerializeWebAssemblyImportModuleAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::WebAssemblyImportModuleAttr &, const TokenTree *);
void SerializeWebAssemblyImportNameAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::WebAssemblyImportNameAttr &, const TokenTree *);
void SerializeWorkGroupSizeHintAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::WorkGroupSizeHintAttr &, const TokenTree *);
void SerializeX86ForceAlignArgPointerAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::X86ForceAlignArgPointerAttr &, const TokenTree *);
void SerializeXRayInstrumentAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::XRayInstrumentAttr &, const TokenTree *);
void SerializeXRayLogArgsAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::XRayLogArgsAttr &, const TokenTree *);
void SerializeZeroCallUsedRegsAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ZeroCallUsedRegsAttr &, const TokenTree *);
void SerializeAArch64SVEPcsAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AArch64SVEPcsAttr &, const TokenTree *);
void SerializeAArch64VectorPcsAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AArch64VectorPcsAttr &, const TokenTree *);
void SerializeAMDGPUFlatWorkGroupSizeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AMDGPUFlatWorkGroupSizeAttr &, const TokenTree *);
void SerializeAMDGPUKernelCallAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AMDGPUKernelCallAttr &, const TokenTree *);
void SerializeAMDGPUNumSGPRAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AMDGPUNumSGPRAttr &, const TokenTree *);
void SerializeAMDGPUNumVGPRAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AMDGPUNumVGPRAttr &, const TokenTree *);
void SerializeAMDGPUWavesPerEUAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AMDGPUWavesPerEUAttr &, const TokenTree *);
void SerializeARMInterruptAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ARMInterruptAttr &, const TokenTree *);
void SerializeAVRInterruptAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AVRInterruptAttr &, const TokenTree *);
void SerializeAVRSignalAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AVRSignalAttr &, const TokenTree *);
void SerializeAbiTagAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AbiTagAttr &, const TokenTree *);
void SerializeAcquireCapabilityAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AcquireCapabilityAttr &, const TokenTree *);
void SerializeAcquireHandleAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AcquireHandleAttr &, const TokenTree *);
void SerializeAcquiredAfterAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AcquiredAfterAttr &, const TokenTree *);
void SerializeAcquiredBeforeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AcquiredBeforeAttr &, const TokenTree *);
void SerializeAddressSpaceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AddressSpaceAttr &, const TokenTree *);
void SerializeAliasAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AliasAttr &, const TokenTree *);
void SerializeAlignMac68kAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AlignMac68kAttr &, const TokenTree *);
void SerializeAlignNaturalAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AlignNaturalAttr &, const TokenTree *);
void SerializeAlignValueAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AlignValueAttr &, const TokenTree *);
void SerializeAlignedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AlignedAttr &, const TokenTree *);
void SerializeAllocAlignAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AllocAlignAttr &, const TokenTree *);
void SerializeAllocSizeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AllocSizeAttr &, const TokenTree *);
void SerializeAlwaysDestroyAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AlwaysDestroyAttr &, const TokenTree *);
void SerializeAnalyzerNoReturnAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AnalyzerNoReturnAttr &, const TokenTree *);
void SerializeAnnotateAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AnnotateAttr &, const TokenTree *);
void SerializeAnnotateTypeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AnnotateTypeAttr &, const TokenTree *);
void SerializeAnyX86InterruptAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AnyX86InterruptAttr &, const TokenTree *);
void SerializeAnyX86NoCallerSavedRegistersAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AnyX86NoCallerSavedRegistersAttr &, const TokenTree *);
void SerializeAnyX86NoCfCheckAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AnyX86NoCfCheckAttr &, const TokenTree *);
void SerializeArcWeakrefUnavailableAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ArcWeakrefUnavailableAttr &, const TokenTree *);
void SerializeArgumentWithTypeTagAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ArgumentWithTypeTagAttr &, const TokenTree *);
void SerializeArmBuiltinAliasAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ArmBuiltinAliasAttr &, const TokenTree *);
void SerializeArmMveStrictPolymorphismAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ArmMveStrictPolymorphismAttr &, const TokenTree *);
void SerializeArmStreamingAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ArmStreamingAttr &, const TokenTree *);
void SerializeArtificialAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ArtificialAttr &, const TokenTree *);
void SerializeAsmLabelAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AsmLabelAttr &, const TokenTree *);
void SerializeAssertCapabilityAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AssertCapabilityAttr &, const TokenTree *);
void SerializeAssertExclusiveLockAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AssertExclusiveLockAttr &, const TokenTree *);
void SerializeAssertSharedLockAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AssertSharedLockAttr &, const TokenTree *);
void SerializeAssumeAlignedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AssumeAlignedAttr &, const TokenTree *);
void SerializeAssumptionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AssumptionAttr &, const TokenTree *);
void SerializeAvailabilityAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AvailabilityAttr &, const TokenTree *);
void SerializeAvailableOnlyInDefaultEvalMethodAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AvailableOnlyInDefaultEvalMethodAttr &, const TokenTree *);
void SerializeBPFPreserveAccessIndexAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::BPFPreserveAccessIndexAttr &, const TokenTree *);
void SerializeBTFDeclTagAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::BTFDeclTagAttr &, const TokenTree *);
void SerializeBTFTypeTagAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::BTFTypeTagAttr &, const TokenTree *);
void SerializeBlocksAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::BlocksAttr &, const TokenTree *);
void SerializeBuiltinAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::BuiltinAttr &, const TokenTree *);
void SerializeC11NoReturnAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::C11NoReturnAttr &, const TokenTree *);
void SerializeCDeclAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CDeclAttr &, const TokenTree *);
void SerializeCFAuditedTransferAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CFAuditedTransferAttr &, const TokenTree *);
void SerializeCFConsumedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CFConsumedAttr &, const TokenTree *);
void SerializeCFGuardAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CFGuardAttr &, const TokenTree *);
void SerializeCFICanonicalJumpTableAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CFICanonicalJumpTableAttr &, const TokenTree *);
void SerializeCFReturnsNotRetainedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CFReturnsNotRetainedAttr &, const TokenTree *);
void SerializeCFReturnsRetainedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CFReturnsRetainedAttr &, const TokenTree *);
void SerializeCFUnknownTransferAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CFUnknownTransferAttr &, const TokenTree *);
void SerializeCPUDispatchAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CPUDispatchAttr &, const TokenTree *);
void SerializeCPUSpecificAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CPUSpecificAttr &, const TokenTree *);
void SerializeCUDAConstantAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CUDAConstantAttr &, const TokenTree *);
void SerializeCUDADeviceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CUDADeviceAttr &, const TokenTree *);
void SerializeCUDADeviceBuiltinSurfaceTypeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CUDADeviceBuiltinSurfaceTypeAttr &, const TokenTree *);
void SerializeCUDADeviceBuiltinTextureTypeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CUDADeviceBuiltinTextureTypeAttr &, const TokenTree *);
void SerializeCUDAGlobalAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CUDAGlobalAttr &, const TokenTree *);
void SerializeCUDAHostAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CUDAHostAttr &, const TokenTree *);
void SerializeCUDAInvalidTargetAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CUDAInvalidTargetAttr &, const TokenTree *);
void SerializeCUDALaunchBoundsAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CUDALaunchBoundsAttr &, const TokenTree *);
void SerializeCUDASharedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CUDASharedAttr &, const TokenTree *);
void SerializeCXX11NoReturnAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CXX11NoReturnAttr &, const TokenTree *);
void SerializeCallableWhenAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CallableWhenAttr &, const TokenTree *);
void SerializeCallbackAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CallbackAttr &, const TokenTree *);
void SerializeCapabilityAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CapabilityAttr &, const TokenTree *);
void SerializeCapturedRecordAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CapturedRecordAttr &, const TokenTree *);
void SerializeCarriesDependencyAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CarriesDependencyAttr &, const TokenTree *);
void SerializeCleanupAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CleanupAttr &, const TokenTree *);
void SerializeCmseNSCallAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CmseNSCallAttr &, const TokenTree *);
void SerializeCmseNSEntryAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CmseNSEntryAttr &, const TokenTree *);
void SerializeCodeSegAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CodeSegAttr &, const TokenTree *);
void SerializeColdAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ColdAttr &, const TokenTree *);
void SerializeCommonAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::CommonAttr &, const TokenTree *);
void SerializeConstAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ConstAttr &, const TokenTree *);
void SerializeConstInitAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ConstInitAttr &, const TokenTree *);
void SerializeConstructorAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ConstructorAttr &, const TokenTree *);
void SerializeConsumableAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ConsumableAttr &, const TokenTree *);
void SerializeConsumableAutoCastAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ConsumableAutoCastAttr &, const TokenTree *);
void SerializeConsumableSetOnReadAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ConsumableSetOnReadAttr &, const TokenTree *);
void SerializeConvergentAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ConvergentAttr &, const TokenTree *);
void SerializeDLLExportAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::DLLExportAttr &, const TokenTree *);
void SerializeDLLExportStaticLocalAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::DLLExportStaticLocalAttr &, const TokenTree *);
void SerializeDLLImportAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::DLLImportAttr &, const TokenTree *);
void SerializeDLLImportStaticLocalAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::DLLImportStaticLocalAttr &, const TokenTree *);
void SerializeDeclOrStmtAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::DeclOrStmtAttr &, const TokenTree *);
void SerializeDeprecatedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::DeprecatedAttr &, const TokenTree *);
void SerializeDestructorAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::DestructorAttr &, const TokenTree *);
void SerializeDiagnoseAsBuiltinAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::DiagnoseAsBuiltinAttr &, const TokenTree *);
void SerializeDiagnoseIfAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::DiagnoseIfAttr &, const TokenTree *);
void SerializeDisableSanitizerInstrumentationAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::DisableSanitizerInstrumentationAttr &, const TokenTree *);
void SerializeDisableTailCallsAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::DisableTailCallsAttr &, const TokenTree *);
void SerializeEmptyBasesAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::EmptyBasesAttr &, const TokenTree *);
void SerializeEnableIfAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::EnableIfAttr &, const TokenTree *);
void SerializeEnforceTCBAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::EnforceTCBAttr &, const TokenTree *);
void SerializeEnforceTCBLeafAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::EnforceTCBLeafAttr &, const TokenTree *);
void SerializeEnumExtensibilityAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::EnumExtensibilityAttr &, const TokenTree *);
void SerializeErrorAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ErrorAttr &, const TokenTree *);
void SerializeExcludeFromExplicitInstantiationAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ExcludeFromExplicitInstantiationAttr &, const TokenTree *);
void SerializeExclusiveTrylockFunctionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ExclusiveTrylockFunctionAttr &, const TokenTree *);
void SerializeExternalSourceSymbolAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ExternalSourceSymbolAttr &, const TokenTree *);
void SerializeFallThroughAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::FallThroughAttr &, const TokenTree *);
void SerializeFastCallAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::FastCallAttr &, const TokenTree *);
void SerializeFinalAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::FinalAttr &, const TokenTree *);
void SerializeFlagEnumAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::FlagEnumAttr &, const TokenTree *);
void SerializeFlattenAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::FlattenAttr &, const TokenTree *);
void SerializeFormatArgAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::FormatArgAttr &, const TokenTree *);
void SerializeFormatAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::FormatAttr &, const TokenTree *);
void SerializeFunctionReturnThunksAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::FunctionReturnThunksAttr &, const TokenTree *);
void SerializeGNUInlineAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::GNUInlineAttr &, const TokenTree *);
void SerializeGuardedByAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::GuardedByAttr &, const TokenTree *);
void SerializeGuardedVarAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::GuardedVarAttr &, const TokenTree *);
void SerializeHIPManagedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::HIPManagedAttr &, const TokenTree *);
void SerializeHLSLAnnotationAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::HLSLAnnotationAttr &, const TokenTree *);
void SerializeHLSLGroupSharedAddressSpaceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::HLSLGroupSharedAddressSpaceAttr &, const TokenTree *);
void SerializeHLSLNumThreadsAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::HLSLNumThreadsAttr &, const TokenTree *);
void SerializeHLSLResourceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::HLSLResourceAttr &, const TokenTree *);
void SerializeHLSLResourceBindingAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::HLSLResourceBindingAttr &, const TokenTree *);
void SerializeHLSLSV_DispatchThreadIDAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::HLSLSV_DispatchThreadIDAttr &, const TokenTree *);
void SerializeHLSLSV_GroupIndexAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::HLSLSV_GroupIndexAttr &, const TokenTree *);
void SerializeHLSLShaderAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::HLSLShaderAttr &, const TokenTree *);
void SerializeHotAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::HotAttr &, const TokenTree *);
void SerializeIBActionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::IBActionAttr &, const TokenTree *);
void SerializeIBOutletAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::IBOutletAttr &, const TokenTree *);
void SerializeIBOutletCollectionAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::IBOutletCollectionAttr &, const TokenTree *);
void SerializeLikelyAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::LikelyAttr &, const TokenTree *);
void SerializeMustTailAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::MustTailAttr &, const TokenTree *);
void SerializeNoDerefAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoDerefAttr &, const TokenTree *);
void SerializeNoInlineAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoInlineAttr &, const TokenTree *);
void SerializeNoMergeAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::NoMergeAttr &, const TokenTree *);
void SerializeObjCGCAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCGCAttr &, const TokenTree *);
void SerializeObjCInertUnsafeUnretainedAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCInertUnsafeUnretainedAttr &, const TokenTree *);
void SerializeObjCKindOfAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::ObjCKindOfAttr &, const TokenTree *);
void SerializeOpenCLConstantAddressSpaceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OpenCLConstantAddressSpaceAttr &, const TokenTree *);
void SerializeOpenCLGenericAddressSpaceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OpenCLGenericAddressSpaceAttr &, const TokenTree *);
void SerializeOpenCLGlobalAddressSpaceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OpenCLGlobalAddressSpaceAttr &, const TokenTree *);
void SerializeOpenCLGlobalDeviceAddressSpaceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OpenCLGlobalDeviceAddressSpaceAttr &, const TokenTree *);
void SerializeOpenCLGlobalHostAddressSpaceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OpenCLGlobalHostAddressSpaceAttr &, const TokenTree *);
void SerializeOpenCLLocalAddressSpaceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OpenCLLocalAddressSpaceAttr &, const TokenTree *);
void SerializeOpenCLPrivateAddressSpaceAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OpenCLPrivateAddressSpaceAttr &, const TokenTree *);
void SerializeOpenCLUnrollHintAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::OpenCLUnrollHintAttr &, const TokenTree *);
void SerializePtr32Attr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::Ptr32Attr &, const TokenTree *);
void SerializePtr64Attr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::Ptr64Attr &, const TokenTree *);
void SerializeSPtrAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::SPtrAttr &, const TokenTree *);
void SerializeAlwaysInlineAttr(const PendingFragment &, const EntityMapper &, mx::ast::Attr::Builder, const pasta::AlwaysInlineAttr &, const TokenTree *);
void SerializeMacro(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::Macro &, const TokenTree *);
void SerializeMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::MacroDirective &, const TokenTree *);
void SerializeIncludeLikeMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::IncludeLikeMacroDirective &, const TokenTree *);
void SerializeConditionalMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::ConditionalMacroDirective &, const TokenTree *);
void SerializeOtherMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::OtherMacroDirective &, const TokenTree *);
void SerializeIfMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::IfMacroDirective &, const TokenTree *);
void SerializeIfDefinedMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::IfDefinedMacroDirective &, const TokenTree *);
void SerializeIfNotDefinedMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::IfNotDefinedMacroDirective &, const TokenTree *);
void SerializeElseIfMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::ElseIfMacroDirective &, const TokenTree *);
void SerializeElseIfDefinedMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::ElseIfDefinedMacroDirective &, const TokenTree *);
void SerializeElseIfNotDefinedMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::ElseIfNotDefinedMacroDirective &, const TokenTree *);
void SerializeElseMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::ElseMacroDirective &, const TokenTree *);
void SerializeEndIfMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::EndIfMacroDirective &, const TokenTree *);
void SerializeUndefineMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::UndefineMacroDirective &, const TokenTree *);
void SerializePragmaMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::PragmaMacroDirective &, const TokenTree *);
void SerializeIncludeMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::IncludeMacroDirective &, const TokenTree *);
void SerializeIncludeNextMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::IncludeNextMacroDirective &, const TokenTree *);
void SerializeIncludeMacrosMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::IncludeMacrosMacroDirective &, const TokenTree *);
void SerializeImportMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::ImportMacroDirective &, const TokenTree *);
void SerializeMacroParameter(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::MacroParameter &, const TokenTree *);
void SerializeDefineMacroDirective(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::DefineMacroDirective &, const TokenTree *);
void SerializeMacroArgument(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::MacroArgument &, const TokenTree *);
void SerializeMacroSubstitution(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::MacroSubstitution &, const TokenTree *);
void SerializeMacroParameterSubstitution(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::MacroParameterSubstitution &, const TokenTree *);
void SerializeMacroExpansion(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::MacroExpansion &, const TokenTree *);
void SerializeMacroStringify(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::MacroStringify &, const TokenTree *);
void SerializeMacroConcatenate(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::MacroConcatenate &, const TokenTree *);
void SerializeMacroVAOpt(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::MacroVAOpt &, const TokenTree *);
void SerializeMacroVAOptArgument(const PendingFragment &, const EntityMapper &, mx::ast::Macro::Builder, const pasta::MacroVAOptArgument &, const TokenTree *);
void SerializeTemplateArgument(const PendingFragment &, const EntityMapper &, mx::ast::TemplateArgument::Builder, const pasta::TemplateArgument &, const TokenTree *);
void SerializeTemplateParameterList(const PendingFragment &, const EntityMapper &, mx::ast::TemplateParameterList::Builder, const pasta::TemplateParameterList &, const TokenTree *);
void SerializeCXXBaseSpecifier(const PendingFragment &, const EntityMapper &, mx::ast::CXXBaseSpecifier::Builder, const pasta::CXXBaseSpecifier &, const TokenTree *);
void SerializeDesignator(const PendingFragment &, const EntityMapper &, mx::ast::Designator::Builder, const pasta::Designator &, const TokenTree *);
}  // namespace indexer
