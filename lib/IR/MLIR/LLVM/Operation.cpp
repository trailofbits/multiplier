// Copyright (c) 2023-present, Trail of Bits, Inc.
// All rights reserved.
//
// This source code is licensed in accordance with the terms specified in
// the LICENSE file found in the root directory of this source tree.

// Auto-generated file; do not modify!

#include <multiplier/IR/MLIR/LLVM/Operation.h>

namespace mx::ir::llvm {
std::optional<Operation> Operation::from(const ::mx::ir::Operation &that) {
  switch (that.kind()) {
    default: return std::nullopt;
    case mx::ir::OperationKind::LLVM_ASHR:
    case mx::ir::OperationKind::LLVM_ACCESS_GROUP:
    case mx::ir::OperationKind::LLVM_ADD:
    case mx::ir::OperationKind::LLVM_ADDRSPACECAST:
    case mx::ir::OperationKind::LLVM_MLIR_ADDRESSOF:
    case mx::ir::OperationKind::LLVM_ALIAS_SCOPE_DOMAIN:
    case mx::ir::OperationKind::LLVM_ALIAS_SCOPE:
    case mx::ir::OperationKind::LLVM_ALLOCA:
    case mx::ir::OperationKind::LLVM_AND:
    case mx::ir::OperationKind::LLVM_CMPXCHG:
    case mx::ir::OperationKind::LLVM_ATOMICRMW:
    case mx::ir::OperationKind::LLVM_BITCAST:
    case mx::ir::OperationKind::LLVM_BR:
    case mx::ir::OperationKind::LLVM_CALL:
    case mx::ir::OperationKind::LLVM_COND_BR:
    case mx::ir::OperationKind::LLVM_MLIR_CONSTANT:
    case mx::ir::OperationKind::LLVM_EXTRACTELEMENT:
    case mx::ir::OperationKind::LLVM_EXTRACTVALUE:
    case mx::ir::OperationKind::LLVM_FADD:
    case mx::ir::OperationKind::LLVM_FCMP:
    case mx::ir::OperationKind::LLVM_FDIV:
    case mx::ir::OperationKind::LLVM_FMUL:
    case mx::ir::OperationKind::LLVM_FNEG:
    case mx::ir::OperationKind::LLVM_FPEXT:
    case mx::ir::OperationKind::LLVM_FPTOSI:
    case mx::ir::OperationKind::LLVM_FPTOUI:
    case mx::ir::OperationKind::LLVM_FPTRUNC:
    case mx::ir::OperationKind::LLVM_FREM:
    case mx::ir::OperationKind::LLVM_FSUB:
    case mx::ir::OperationKind::LLVM_FENCE:
    case mx::ir::OperationKind::LLVM_FREEZE:
    case mx::ir::OperationKind::LLVM_GETELEMENTPTR:
    case mx::ir::OperationKind::LLVM_MLIR_GLOBAL_CTORS:
    case mx::ir::OperationKind::LLVM_MLIR_GLOBAL_DTORS:
    case mx::ir::OperationKind::LLVM_MLIR_GLOBAL:
    case mx::ir::OperationKind::LLVM_ICMP:
    case mx::ir::OperationKind::LLVM_INLINE_ASM:
    case mx::ir::OperationKind::LLVM_INSERTELEMENT:
    case mx::ir::OperationKind::LLVM_INSERTVALUE:
    case mx::ir::OperationKind::LLVM_INTTOPTR:
    case mx::ir::OperationKind::LLVM_INVOKE:
    case mx::ir::OperationKind::LLVM_FUNC:
    case mx::ir::OperationKind::LLVM_LSHR:
    case mx::ir::OperationKind::LLVM_LANDINGPAD:
    case mx::ir::OperationKind::LLVM_LOAD:
    case mx::ir::OperationKind::LLVM_METADATA:
    case mx::ir::OperationKind::LLVM_MUL:
    case mx::ir::OperationKind::LLVM_MLIR_NULL:
    case mx::ir::OperationKind::LLVM_OR:
    case mx::ir::OperationKind::LLVM_PTRTOINT:
    case mx::ir::OperationKind::LLVM_RESUME:
    case mx::ir::OperationKind::LLVM_RETURN:
    case mx::ir::OperationKind::LLVM_SDIV:
    case mx::ir::OperationKind::LLVM_SEXT:
    case mx::ir::OperationKind::LLVM_SITOFP:
    case mx::ir::OperationKind::LLVM_SREM:
    case mx::ir::OperationKind::LLVM_SELECT:
    case mx::ir::OperationKind::LLVM_SHL:
    case mx::ir::OperationKind::LLVM_SHUFFLEVECTOR:
    case mx::ir::OperationKind::LLVM_STORE:
    case mx::ir::OperationKind::LLVM_SUB:
    case mx::ir::OperationKind::LLVM_SWITCH:
    case mx::ir::OperationKind::LLVM_TBAA_ROOT:
    case mx::ir::OperationKind::LLVM_TBAA_TAG:
    case mx::ir::OperationKind::LLVM_TBAA_TYPE_DESC:
    case mx::ir::OperationKind::LLVM_TRUNC:
    case mx::ir::OperationKind::LLVM_UDIV:
    case mx::ir::OperationKind::LLVM_UITOFP:
    case mx::ir::OperationKind::LLVM_UREM:
    case mx::ir::OperationKind::LLVM_MLIR_UNDEF:
    case mx::ir::OperationKind::LLVM_UNREACHABLE:
    case mx::ir::OperationKind::LLVM_XOR:
    case mx::ir::OperationKind::LLVM_ZEXT:
    case mx::ir::OperationKind::LLVM_INTR_ABS:
    case mx::ir::OperationKind::LLVM_INTR_ASSUME:
    case mx::ir::OperationKind::LLVM_INTR_BITREVERSE:
    case mx::ir::OperationKind::LLVM_CALL_INTRINSIC:
    case mx::ir::OperationKind::LLVM_INTR_COPYSIGN:
    case mx::ir::OperationKind::LLVM_INTR_CORO_ALIGN:
    case mx::ir::OperationKind::LLVM_INTR_CORO_BEGIN:
    case mx::ir::OperationKind::LLVM_INTR_CORO_END:
    case mx::ir::OperationKind::LLVM_INTR_CORO_FREE:
    case mx::ir::OperationKind::LLVM_INTR_CORO_ID:
    case mx::ir::OperationKind::LLVM_INTR_CORO_RESUME:
    case mx::ir::OperationKind::LLVM_INTR_CORO_SAVE:
    case mx::ir::OperationKind::LLVM_INTR_CORO_SIZE:
    case mx::ir::OperationKind::LLVM_INTR_CORO_SUSPEND:
    case mx::ir::OperationKind::LLVM_INTR_COS:
    case mx::ir::OperationKind::LLVM_INTR_CTLZ:
    case mx::ir::OperationKind::LLVM_INTR_CTTZ:
    case mx::ir::OperationKind::LLVM_INTR_CTPOP:
    case mx::ir::OperationKind::LLVM_INTR_DBG_ADDR:
    case mx::ir::OperationKind::LLVM_INTR_DBG_DECLARE:
    case mx::ir::OperationKind::LLVM_INTR_DBG_VALUE:
    case mx::ir::OperationKind::LLVM_INTR_EH_TYPEID_FOR:
    case mx::ir::OperationKind::LLVM_INTR_EXP2:
    case mx::ir::OperationKind::LLVM_INTR_EXP:
    case mx::ir::OperationKind::LLVM_INTR_FABS:
    case mx::ir::OperationKind::LLVM_INTR_CEIL:
    case mx::ir::OperationKind::LLVM_INTR_FLOOR:
    case mx::ir::OperationKind::LLVM_INTR_FMA:
    case mx::ir::OperationKind::LLVM_INTR_FMULADD:
    case mx::ir::OperationKind::LLVM_INTR_TRUNC:
    case mx::ir::OperationKind::LLVM_INTR_GET_ACTIVE_LANE_MASK:
    case mx::ir::OperationKind::LLVM_INTR_IS_FPCLASS:
    case mx::ir::OperationKind::LLVM_INTR_LIFETIME_END:
    case mx::ir::OperationKind::LLVM_INTR_LIFETIME_START:
    case mx::ir::OperationKind::LLVM_INTR_LOG10:
    case mx::ir::OperationKind::LLVM_INTR_LOG2:
    case mx::ir::OperationKind::LLVM_INTR_LOG:
    case mx::ir::OperationKind::LLVM_INTR_MASKED_LOAD:
    case mx::ir::OperationKind::LLVM_INTR_MASKED_STORE:
    case mx::ir::OperationKind::LLVM_INTR_MATRIX_COLUMN_MAJOR_LOAD:
    case mx::ir::OperationKind::LLVM_INTR_MATRIX_COLUMN_MAJOR_STORE:
    case mx::ir::OperationKind::LLVM_INTR_MATRIX_MULTIPLY:
    case mx::ir::OperationKind::LLVM_INTR_MATRIX_TRANSPOSE:
    case mx::ir::OperationKind::LLVM_INTR_MAXNUM:
    case mx::ir::OperationKind::LLVM_INTR_MAXIMUM:
    case mx::ir::OperationKind::LLVM_INTR_MEMCPY_INLINE:
    case mx::ir::OperationKind::LLVM_INTR_MEMCPY:
    case mx::ir::OperationKind::LLVM_INTR_MEMMOVE:
    case mx::ir::OperationKind::LLVM_INTR_MEMSET:
    case mx::ir::OperationKind::LLVM_INTR_MINNUM:
    case mx::ir::OperationKind::LLVM_INTR_MINIMUM:
    case mx::ir::OperationKind::LLVM_INTR_POWI:
    case mx::ir::OperationKind::LLVM_INTR_POW:
    case mx::ir::OperationKind::LLVM_INTR_PREFETCH:
    case mx::ir::OperationKind::LLVM_INTR_ROUNDEVEN:
    case mx::ir::OperationKind::LLVM_INTR_ROUND:
    case mx::ir::OperationKind::LLVM_INTR_SADD_WITH_OVERFLOW:
    case mx::ir::OperationKind::LLVM_INTR_SMAX:
    case mx::ir::OperationKind::LLVM_INTR_SMIN:
    case mx::ir::OperationKind::LLVM_INTR_SMUL_WITH_OVERFLOW:
    case mx::ir::OperationKind::LLVM_INTR_SSUB_WITH_OVERFLOW:
    case mx::ir::OperationKind::LLVM_INTR_SIN:
    case mx::ir::OperationKind::LLVM_INTR_SQRT:
    case mx::ir::OperationKind::LLVM_INTR_STACKRESTORE:
    case mx::ir::OperationKind::LLVM_INTR_STACKSAVE:
    case mx::ir::OperationKind::LLVM_INTR_EXPERIMENTAL_STEPVECTOR:
    case mx::ir::OperationKind::LLVM_INTR_UADD_WITH_OVERFLOW:
    case mx::ir::OperationKind::LLVM_INTR_UMAX:
    case mx::ir::OperationKind::LLVM_INTR_UMIN:
    case mx::ir::OperationKind::LLVM_INTR_UMUL_WITH_OVERFLOW:
    case mx::ir::OperationKind::LLVM_INTR_USUB_WITH_OVERFLOW:
    case mx::ir::OperationKind::LLVM_INTR_VP_ASHR:
    case mx::ir::OperationKind::LLVM_INTR_VP_ADD:
    case mx::ir::OperationKind::LLVM_INTR_VP_AND:
    case mx::ir::OperationKind::LLVM_INTR_VP_FADD:
    case mx::ir::OperationKind::LLVM_INTR_VP_FDIV:
    case mx::ir::OperationKind::LLVM_INTR_VP_FMUL:
    case mx::ir::OperationKind::LLVM_INTR_VP_FNEG:
    case mx::ir::OperationKind::LLVM_INTR_VP_FPEXT:
    case mx::ir::OperationKind::LLVM_INTR_VP_FPTOSI:
    case mx::ir::OperationKind::LLVM_INTR_VP_FPTOUI:
    case mx::ir::OperationKind::LLVM_INTR_VP_FPTRUNC:
    case mx::ir::OperationKind::LLVM_INTR_VP_FREM:
    case mx::ir::OperationKind::LLVM_INTR_VP_FSUB:
    case mx::ir::OperationKind::LLVM_INTR_VP_FMA:
    case mx::ir::OperationKind::LLVM_INTR_VP_INTTOPTR:
    case mx::ir::OperationKind::LLVM_INTR_VP_LSHR:
    case mx::ir::OperationKind::LLVM_INTR_VP_LOAD:
    case mx::ir::OperationKind::LLVM_INTR_VP_MERGE:
    case mx::ir::OperationKind::LLVM_INTR_VP_MUL:
    case mx::ir::OperationKind::LLVM_INTR_VP_OR:
    case mx::ir::OperationKind::LLVM_INTR_VP_PTRTOINT:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_ADD:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_AND:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_FADD:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_FMAX:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_FMIN:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_FMUL:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_MUL:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_OR:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_SMAX:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_SMIN:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_UMAX:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_UMIN:
    case mx::ir::OperationKind::LLVM_INTR_VP_REDUCE_XOR:
    case mx::ir::OperationKind::LLVM_INTR_VP_SDIV:
    case mx::ir::OperationKind::LLVM_INTR_VP_SEXT:
    case mx::ir::OperationKind::LLVM_INTR_VP_SITOFP:
    case mx::ir::OperationKind::LLVM_INTR_VP_SREM:
    case mx::ir::OperationKind::LLVM_INTR_VP_SELECT:
    case mx::ir::OperationKind::LLVM_INTR_VP_SHL:
    case mx::ir::OperationKind::LLVM_INTR_VP_STORE:
    case mx::ir::OperationKind::LLVM_INTR_EXPERIMENTAL_VP_STRIDED_LOAD:
    case mx::ir::OperationKind::LLVM_INTR_EXPERIMENTAL_VP_STRIDED_STORE:
    case mx::ir::OperationKind::LLVM_INTR_VP_SUB:
    case mx::ir::OperationKind::LLVM_INTR_VP_TRUNC:
    case mx::ir::OperationKind::LLVM_INTR_VP_UDIV:
    case mx::ir::OperationKind::LLVM_INTR_VP_UITOFP:
    case mx::ir::OperationKind::LLVM_INTR_VP_UREM:
    case mx::ir::OperationKind::LLVM_INTR_VP_XOR:
    case mx::ir::OperationKind::LLVM_INTR_VP_ZEXT:
    case mx::ir::OperationKind::LLVM_INTR_VACOPY:
    case mx::ir::OperationKind::LLVM_INTR_VAEND:
    case mx::ir::OperationKind::LLVM_INTR_VASTART:
    case mx::ir::OperationKind::LLVM_INTR_MASKED_COMPRESSSTORE:
    case mx::ir::OperationKind::LLVM_INTR_MASKED_EXPANDLOAD:
    case mx::ir::OperationKind::LLVM_INTR_MASKED_GATHER:
    case mx::ir::OperationKind::LLVM_INTR_MASKED_SCATTER:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_EXTRACT:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_INSERT:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_ADD:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_AND:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_FADD:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_FMAX:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_FMIN:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_FMUL:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_MUL:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_OR:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_SMAX:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_SMIN:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_UMAX:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_UMIN:
    case mx::ir::OperationKind::LLVM_INTR_VECTOR_REDUCE_XOR:
    case mx::ir::OperationKind::LLVM_INTR_VSCALE:
      return reinterpret_cast<const Operation &>(that);
  }
}

}  // namespace mx::ir::llvm
