// Copyright (c) 2022-present, Trail of Bits, Inc.
// All rights reserved.
//
// This source code is licensed in accordance with the terms specified in
// the LICENSE file found in the root directory of this source tree.

// Auto-generated file; do not modify!

#include "Fragment.h"
#include <multiplier/AST.h>

namespace mx {
const char *EnumeratorName(DeclKind e) {
  switch (e) {
    case DeclKind::ACCESS_SPEC: return "ACCESS_SPEC";
    case DeclKind::BASE_USING: return "BASE_USING";
    case DeclKind::BINDING: return "BINDING";
    case DeclKind::BLOCK: return "BLOCK";
    case DeclKind::BUILTIN_TEMPLATE: return "BUILTIN_TEMPLATE";
    case DeclKind::CXX_CONSTRUCTOR: return "CXX_CONSTRUCTOR";
    case DeclKind::CXX_CONVERSION: return "CXX_CONVERSION";
    case DeclKind::CXX_DEDUCTION_GUIDE: return "CXX_DEDUCTION_GUIDE";
    case DeclKind::CXX_DESTRUCTOR: return "CXX_DESTRUCTOR";
    case DeclKind::CXX_METHOD: return "CXX_METHOD";
    case DeclKind::CXX_RECORD: return "CXX_RECORD";
    case DeclKind::CAPTURED: return "CAPTURED";
    case DeclKind::CLASS_SCOPE_FUNCTION_SPECIALIZATION: return "CLASS_SCOPE_FUNCTION_SPECIALIZATION";
    case DeclKind::CLASS_TEMPLATE: return "CLASS_TEMPLATE";
    case DeclKind::CLASS_TEMPLATE_PARTIAL_SPECIALIZATION: return "CLASS_TEMPLATE_PARTIAL_SPECIALIZATION";
    case DeclKind::CLASS_TEMPLATE_SPECIALIZATION: return "CLASS_TEMPLATE_SPECIALIZATION";
    case DeclKind::CONCEPT: return "CONCEPT";
    case DeclKind::CONSTRUCTOR_USING_SHADOW: return "CONSTRUCTOR_USING_SHADOW";
    case DeclKind::DECLARATOR: return "DECLARATOR";
    case DeclKind::DECOMPOSITION: return "DECOMPOSITION";
    case DeclKind::EMPTY: return "EMPTY";
    case DeclKind::ENUM_CONSTANT: return "ENUM_CONSTANT";
    case DeclKind::ENUM: return "ENUM";
    case DeclKind::EXPORT: return "EXPORT";
    case DeclKind::EXTERN_C_CONTEXT: return "EXTERN_C_CONTEXT";
    case DeclKind::FIELD: return "FIELD";
    case DeclKind::FILE_SCOPE_ASM: return "FILE_SCOPE_ASM";
    case DeclKind::FRIEND: return "FRIEND";
    case DeclKind::FRIEND_TEMPLATE: return "FRIEND_TEMPLATE";
    case DeclKind::FUNCTION: return "FUNCTION";
    case DeclKind::FUNCTION_TEMPLATE: return "FUNCTION_TEMPLATE";
    case DeclKind::IMPLICIT_PARAM: return "IMPLICIT_PARAM";
    case DeclKind::IMPORT: return "IMPORT";
    case DeclKind::INDIRECT_FIELD: return "INDIRECT_FIELD";
    case DeclKind::LABEL: return "LABEL";
    case DeclKind::LIFETIME_EXTENDED_TEMPORARY: return "LIFETIME_EXTENDED_TEMPORARY";
    case DeclKind::LINKAGE_SPEC: return "LINKAGE_SPEC";
    case DeclKind::MS_GUID: return "MS_GUID";
    case DeclKind::MS_PROPERTY: return "MS_PROPERTY";
    case DeclKind::NAMED: return "NAMED";
    case DeclKind::NAMESPACE_ALIAS: return "NAMESPACE_ALIAS";
    case DeclKind::NAMESPACE: return "NAMESPACE";
    case DeclKind::NON_TYPE_TEMPLATE_PARM: return "NON_TYPE_TEMPLATE_PARM";
    case DeclKind::OMP_ALLOCATE: return "OMP_ALLOCATE";
    case DeclKind::OMP_CAPTURED_EXPR: return "OMP_CAPTURED_EXPR";
    case DeclKind::OMP_DECLARE_MAPPER: return "OMP_DECLARE_MAPPER";
    case DeclKind::OMP_DECLARE_REDUCTION: return "OMP_DECLARE_REDUCTION";
    case DeclKind::OMP_REQUIRES: return "OMP_REQUIRES";
    case DeclKind::OMP_THREAD_PRIVATE: return "OMP_THREAD_PRIVATE";
    case DeclKind::OBJ_C_AT_DEFS_FIELD: return "OBJ_C_AT_DEFS_FIELD";
    case DeclKind::OBJ_C_CATEGORY: return "OBJ_C_CATEGORY";
    case DeclKind::OBJ_C_CATEGORY_IMPL: return "OBJ_C_CATEGORY_IMPL";
    case DeclKind::OBJ_C_COMPATIBLE_ALIAS: return "OBJ_C_COMPATIBLE_ALIAS";
    case DeclKind::OBJ_C_CONTAINER: return "OBJ_C_CONTAINER";
    case DeclKind::OBJ_C_IMPL: return "OBJ_C_IMPL";
    case DeclKind::OBJ_C_IMPLEMENTATION: return "OBJ_C_IMPLEMENTATION";
    case DeclKind::OBJ_C_INTERFACE: return "OBJ_C_INTERFACE";
    case DeclKind::OBJ_C_IVAR: return "OBJ_C_IVAR";
    case DeclKind::OBJ_C_METHOD: return "OBJ_C_METHOD";
    case DeclKind::OBJ_C_PROPERTY: return "OBJ_C_PROPERTY";
    case DeclKind::OBJ_C_PROPERTY_IMPL: return "OBJ_C_PROPERTY_IMPL";
    case DeclKind::OBJ_C_PROTOCOL: return "OBJ_C_PROTOCOL";
    case DeclKind::OBJ_C_TYPE_PARAM: return "OBJ_C_TYPE_PARAM";
    case DeclKind::PARM_VAR: return "PARM_VAR";
    case DeclKind::PRAGMA_COMMENT: return "PRAGMA_COMMENT";
    case DeclKind::PRAGMA_DETECT_MISMATCH: return "PRAGMA_DETECT_MISMATCH";
    case DeclKind::RECORD: return "RECORD";
    case DeclKind::REDECLARABLE_TEMPLATE: return "REDECLARABLE_TEMPLATE";
    case DeclKind::REQUIRES_EXPR_BODY: return "REQUIRES_EXPR_BODY";
    case DeclKind::STATIC_ASSERT: return "STATIC_ASSERT";
    case DeclKind::TAG: return "TAG";
    case DeclKind::TEMPLATE: return "TEMPLATE";
    case DeclKind::TEMPLATE_PARAM_OBJECT: return "TEMPLATE_PARAM_OBJECT";
    case DeclKind::TEMPLATE_TEMPLATE_PARM: return "TEMPLATE_TEMPLATE_PARM";
    case DeclKind::TEMPLATE_TYPE_PARM: return "TEMPLATE_TYPE_PARM";
    case DeclKind::TRANSLATION_UNIT: return "TRANSLATION_UNIT";
    case DeclKind::TYPE_ALIAS: return "TYPE_ALIAS";
    case DeclKind::TYPE_ALIAS_TEMPLATE: return "TYPE_ALIAS_TEMPLATE";
    case DeclKind::TYPE: return "TYPE";
    case DeclKind::TYPEDEF: return "TYPEDEF";
    case DeclKind::TYPEDEF_NAME: return "TYPEDEF_NAME";
    case DeclKind::UNRESOLVED_USING_IF_EXISTS: return "UNRESOLVED_USING_IF_EXISTS";
    case DeclKind::UNRESOLVED_USING_TYPENAME: return "UNRESOLVED_USING_TYPENAME";
    case DeclKind::UNRESOLVED_USING_VALUE: return "UNRESOLVED_USING_VALUE";
    case DeclKind::USING: return "USING";
    case DeclKind::USING_DIRECTIVE: return "USING_DIRECTIVE";
    case DeclKind::USING_ENUM: return "USING_ENUM";
    case DeclKind::USING_PACK: return "USING_PACK";
    case DeclKind::USING_SHADOW: return "USING_SHADOW";
    case DeclKind::VALUE: return "VALUE";
    case DeclKind::VAR: return "VAR";
    case DeclKind::VAR_TEMPLATE: return "VAR_TEMPLATE";
    case DeclKind::VAR_TEMPLATE_PARTIAL_SPECIALIZATION: return "VAR_TEMPLATE_PARTIAL_SPECIALIZATION";
    case DeclKind::VAR_TEMPLATE_SPECIALIZATION: return "VAR_TEMPLATE_SPECIALIZATION";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AttrKind e) {
  switch (e) {
    case AttrKind::A_ARCH64_VECTOR_PCS: return "A_ARCH64_VECTOR_PCS";
    case AttrKind::AMDGPU_FLAT_WORK_GROUP_SIZE: return "AMDGPU_FLAT_WORK_GROUP_SIZE";
    case AttrKind::AMDGPU_NUM_SGPR: return "AMDGPU_NUM_SGPR";
    case AttrKind::AMDGPU_NUM_VGPR: return "AMDGPU_NUM_VGPR";
    case AttrKind::AMDGPU_WAVES_PER_EU: return "AMDGPU_WAVES_PER_EU";
    case AttrKind::ARM_INTERRUPT: return "ARM_INTERRUPT";
    case AttrKind::AVR_INTERRUPT: return "AVR_INTERRUPT";
    case AttrKind::AVR_SIGNAL: return "AVR_SIGNAL";
    case AttrKind::ABI_TAG: return "ABI_TAG";
    case AttrKind::ACQUIRE_CAPABILITY: return "ACQUIRE_CAPABILITY";
    case AttrKind::ACQUIRE_HANDLE: return "ACQUIRE_HANDLE";
    case AttrKind::ACQUIRED_AFTER: return "ACQUIRED_AFTER";
    case AttrKind::ACQUIRED_BEFORE: return "ACQUIRED_BEFORE";
    case AttrKind::ADDRESS_SPACE: return "ADDRESS_SPACE";
    case AttrKind::ALIAS: return "ALIAS";
    case AttrKind::ALIGN_MAC68K: return "ALIGN_MAC68K";
    case AttrKind::ALIGN_NATURAL: return "ALIGN_NATURAL";
    case AttrKind::ALIGN_VALUE: return "ALIGN_VALUE";
    case AttrKind::ALIGNED: return "ALIGNED";
    case AttrKind::ALLOC_ALIGN: return "ALLOC_ALIGN";
    case AttrKind::ALLOC_SIZE: return "ALLOC_SIZE";
    case AttrKind::ALWAYS_DESTROY: return "ALWAYS_DESTROY";
    case AttrKind::ALWAYS_INLINE: return "ALWAYS_INLINE";
    case AttrKind::ANALYZER_NO_RETURN: return "ANALYZER_NO_RETURN";
    case AttrKind::ANNOTATE: return "ANNOTATE";
    case AttrKind::ANY_X86_INTERRUPT: return "ANY_X86_INTERRUPT";
    case AttrKind::ANY_X86_NO_CALLER_SAVED_REGISTERS: return "ANY_X86_NO_CALLER_SAVED_REGISTERS";
    case AttrKind::ANY_X86_NO_CF_CHECK: return "ANY_X86_NO_CF_CHECK";
    case AttrKind::ARC_WEAKREF_UNAVAILABLE: return "ARC_WEAKREF_UNAVAILABLE";
    case AttrKind::ARGUMENT_WITH_TYPE_TAG: return "ARGUMENT_WITH_TYPE_TAG";
    case AttrKind::ARM_BUILTIN_ALIAS: return "ARM_BUILTIN_ALIAS";
    case AttrKind::ARM_MVE_STRICT_POLYMORPHISM: return "ARM_MVE_STRICT_POLYMORPHISM";
    case AttrKind::ARTIFICIAL: return "ARTIFICIAL";
    case AttrKind::ASM_LABEL: return "ASM_LABEL";
    case AttrKind::ASSERT_CAPABILITY: return "ASSERT_CAPABILITY";
    case AttrKind::ASSERT_EXCLUSIVE_LOCK: return "ASSERT_EXCLUSIVE_LOCK";
    case AttrKind::ASSERT_SHARED_LOCK: return "ASSERT_SHARED_LOCK";
    case AttrKind::ASSUME_ALIGNED: return "ASSUME_ALIGNED";
    case AttrKind::ASSUMPTION: return "ASSUMPTION";
    case AttrKind::AVAILABILITY: return "AVAILABILITY";
    case AttrKind::BPF_PRESERVE_ACCESS_INDEX: return "BPF_PRESERVE_ACCESS_INDEX";
    case AttrKind::BTF_DECL_TAG: return "BTF_DECL_TAG";
    case AttrKind::BTF_TYPE_TAG: return "BTF_TYPE_TAG";
    case AttrKind::BLOCKS: return "BLOCKS";
    case AttrKind::BUILTIN_ALIAS: return "BUILTIN_ALIAS";
    case AttrKind::BUILTIN: return "BUILTIN";
    case AttrKind::C11_NO_RETURN: return "C11_NO_RETURN";
    case AttrKind::C_DECL: return "C_DECL";
    case AttrKind::CF_AUDITED_TRANSFER: return "CF_AUDITED_TRANSFER";
    case AttrKind::CF_CONSUMED: return "CF_CONSUMED";
    case AttrKind::CF_GUARD: return "CF_GUARD";
    case AttrKind::CFI_CANONICAL_JUMP_TABLE: return "CFI_CANONICAL_JUMP_TABLE";
    case AttrKind::CF_RETURNS_NOT_RETAINED: return "CF_RETURNS_NOT_RETAINED";
    case AttrKind::CF_RETURNS_RETAINED: return "CF_RETURNS_RETAINED";
    case AttrKind::CF_UNKNOWN_TRANSFER: return "CF_UNKNOWN_TRANSFER";
    case AttrKind::CPU_DISPATCH: return "CPU_DISPATCH";
    case AttrKind::CPU_SPECIFIC: return "CPU_SPECIFIC";
    case AttrKind::CUDA_CONSTANT: return "CUDA_CONSTANT";
    case AttrKind::CUDA_DEVICE: return "CUDA_DEVICE";
    case AttrKind::CUDA_DEVICE_BUILTIN_SURFACE_TYPE: return "CUDA_DEVICE_BUILTIN_SURFACE_TYPE";
    case AttrKind::CUDA_DEVICE_BUILTIN_TEXTURE_TYPE: return "CUDA_DEVICE_BUILTIN_TEXTURE_TYPE";
    case AttrKind::CUDA_GLOBAL: return "CUDA_GLOBAL";
    case AttrKind::CUDA_HOST: return "CUDA_HOST";
    case AttrKind::CUDA_INVALID_TARGET: return "CUDA_INVALID_TARGET";
    case AttrKind::CUDA_LAUNCH_BOUNDS: return "CUDA_LAUNCH_BOUNDS";
    case AttrKind::CUDA_SHARED: return "CUDA_SHARED";
    case AttrKind::CXX11_NO_RETURN: return "CXX11_NO_RETURN";
    case AttrKind::CALLABLE_WHEN: return "CALLABLE_WHEN";
    case AttrKind::CALLBACK: return "CALLBACK";
    case AttrKind::CALLED_ONCE: return "CALLED_ONCE";
    case AttrKind::CAPABILITY: return "CAPABILITY";
    case AttrKind::CAPTURED_RECORD: return "CAPTURED_RECORD";
    case AttrKind::CARRIES_DEPENDENCY: return "CARRIES_DEPENDENCY";
    case AttrKind::CLEANUP: return "CLEANUP";
    case AttrKind::CMSE_NS_CALL: return "CMSE_NS_CALL";
    case AttrKind::CMSE_NS_ENTRY: return "CMSE_NS_ENTRY";
    case AttrKind::CODE_SEG: return "CODE_SEG";
    case AttrKind::COLD: return "COLD";
    case AttrKind::COMMON: return "COMMON";
    case AttrKind::CONST: return "CONST";
    case AttrKind::CONST_INIT: return "CONST_INIT";
    case AttrKind::CONSTRUCTOR: return "CONSTRUCTOR";
    case AttrKind::CONSUMABLE: return "CONSUMABLE";
    case AttrKind::CONSUMABLE_AUTO_CAST: return "CONSUMABLE_AUTO_CAST";
    case AttrKind::CONSUMABLE_SET_ON_READ: return "CONSUMABLE_SET_ON_READ";
    case AttrKind::CONVERGENT: return "CONVERGENT";
    case AttrKind::DLL_EXPORT: return "DLL_EXPORT";
    case AttrKind::DLL_EXPORT_STATIC_LOCAL: return "DLL_EXPORT_STATIC_LOCAL";
    case AttrKind::DLL_IMPORT: return "DLL_IMPORT";
    case AttrKind::DLL_IMPORT_STATIC_LOCAL: return "DLL_IMPORT_STATIC_LOCAL";
    case AttrKind::DEPRECATED: return "DEPRECATED";
    case AttrKind::DESTRUCTOR: return "DESTRUCTOR";
    case AttrKind::DIAGNOSE_AS_BUILTIN: return "DIAGNOSE_AS_BUILTIN";
    case AttrKind::DIAGNOSE_IF: return "DIAGNOSE_IF";
    case AttrKind::DISABLE_SANITIZER_INSTRUMENTATION: return "DISABLE_SANITIZER_INSTRUMENTATION";
    case AttrKind::DISABLE_TAIL_CALLS: return "DISABLE_TAIL_CALLS";
    case AttrKind::EMPTY_BASES: return "EMPTY_BASES";
    case AttrKind::ENABLE_IF: return "ENABLE_IF";
    case AttrKind::ENFORCE_TCB: return "ENFORCE_TCB";
    case AttrKind::ENFORCE_TCB_LEAF: return "ENFORCE_TCB_LEAF";
    case AttrKind::ENUM_EXTENSIBILITY: return "ENUM_EXTENSIBILITY";
    case AttrKind::ERROR: return "ERROR";
    case AttrKind::EXCLUDE_FROM_EXPLICIT_INSTANTIATION: return "EXCLUDE_FROM_EXPLICIT_INSTANTIATION";
    case AttrKind::EXCLUSIVE_TRYLOCK_FUNCTION: return "EXCLUSIVE_TRYLOCK_FUNCTION";
    case AttrKind::EXTERNAL_SOURCE_SYMBOL: return "EXTERNAL_SOURCE_SYMBOL";
    case AttrKind::FALL_THROUGH: return "FALL_THROUGH";
    case AttrKind::FAST_CALL: return "FAST_CALL";
    case AttrKind::FINAL: return "FINAL";
    case AttrKind::FLAG_ENUM: return "FLAG_ENUM";
    case AttrKind::FLATTEN: return "FLATTEN";
    case AttrKind::FORMAT_ARG: return "FORMAT_ARG";
    case AttrKind::FORMAT: return "FORMAT";
    case AttrKind::GNU_INLINE: return "GNU_INLINE";
    case AttrKind::GUARDED_BY: return "GUARDED_BY";
    case AttrKind::GUARDED_VAR: return "GUARDED_VAR";
    case AttrKind::HIP_MANAGED: return "HIP_MANAGED";
    case AttrKind::HOT: return "HOT";
    case AttrKind::IB_ACTION: return "IB_ACTION";
    case AttrKind::IB_OUTLET: return "IB_OUTLET";
    case AttrKind::IB_OUTLET_COLLECTION: return "IB_OUTLET_COLLECTION";
    case AttrKind::I_FUNC: return "I_FUNC";
    case AttrKind::INIT_PRIORITY: return "INIT_PRIORITY";
    case AttrKind::INIT_SEG: return "INIT_SEG";
    case AttrKind::INTEL_OCL_BICC: return "INTEL_OCL_BICC";
    case AttrKind::INTERNAL_LINKAGE: return "INTERNAL_LINKAGE";
    case AttrKind::LTO_VISIBILITY_PUBLIC: return "LTO_VISIBILITY_PUBLIC";
    case AttrKind::LAYOUT_VERSION: return "LAYOUT_VERSION";
    case AttrKind::LEAF: return "LEAF";
    case AttrKind::LIFETIME_BOUND: return "LIFETIME_BOUND";
    case AttrKind::LIKELY: return "LIKELY";
    case AttrKind::LOADER_UNINITIALIZED: return "LOADER_UNINITIALIZED";
    case AttrKind::LOCK_RETURNED: return "LOCK_RETURNED";
    case AttrKind::LOCKS_EXCLUDED: return "LOCKS_EXCLUDED";
    case AttrKind::LOOP_HINT: return "LOOP_HINT";
    case AttrKind::M68K_INTERRUPT: return "M68K_INTERRUPT";
    case AttrKind::MIG_SERVER_ROUTINE_: return "MIG_SERVER_ROUTINE_";
    case AttrKind::MSABI: return "MSABI";
    case AttrKind::MS_ALLOCATOR: return "MS_ALLOCATOR";
    case AttrKind::MS_INHERITANCE: return "MS_INHERITANCE";
    case AttrKind::MS_NO_V_TABLE: return "MS_NO_V_TABLE";
    case AttrKind::MSP430_INTERRUPT: return "MSP430_INTERRUPT";
    case AttrKind::MS_STRUCT: return "MS_STRUCT";
    case AttrKind::MS_VTOR_DISP: return "MS_VTOR_DISP";
    case AttrKind::MAX_FIELD_ALIGNMENT: return "MAX_FIELD_ALIGNMENT";
    case AttrKind::MAY_ALIAS: return "MAY_ALIAS";
    case AttrKind::MICRO_MIPS: return "MICRO_MIPS";
    case AttrKind::MIN_SIZE: return "MIN_SIZE";
    case AttrKind::MIN_VECTOR_WIDTH: return "MIN_VECTOR_WIDTH";
    case AttrKind::MIPS16: return "MIPS16";
    case AttrKind::MIPS_INTERRUPT: return "MIPS_INTERRUPT";
    case AttrKind::MIPS_LONG_CALL: return "MIPS_LONG_CALL";
    case AttrKind::MIPS_SHORT_CALL: return "MIPS_SHORT_CALL";
    case AttrKind::MODE: return "MODE";
    case AttrKind::MUST_TAIL: return "MUST_TAIL";
    case AttrKind::NS_CONSUMED: return "NS_CONSUMED";
    case AttrKind::NS_CONSUMES_SELF: return "NS_CONSUMES_SELF";
    case AttrKind::NS_ERROR_DOMAIN: return "NS_ERROR_DOMAIN";
    case AttrKind::NS_RETURNS_AUTORELEASED: return "NS_RETURNS_AUTORELEASED";
    case AttrKind::NS_RETURNS_NOT_RETAINED: return "NS_RETURNS_NOT_RETAINED";
    case AttrKind::NS_RETURNS_RETAINED: return "NS_RETURNS_RETAINED";
    case AttrKind::NAKED: return "NAKED";
    case AttrKind::NO_ALIAS: return "NO_ALIAS";
    case AttrKind::NO_BUILTIN: return "NO_BUILTIN";
    case AttrKind::NO_COMMON: return "NO_COMMON";
    case AttrKind::NO_DEBUG: return "NO_DEBUG";
    case AttrKind::NO_DEREF: return "NO_DEREF";
    case AttrKind::NO_DESTROY: return "NO_DESTROY";
    case AttrKind::NO_DUPLICATE: return "NO_DUPLICATE";
    case AttrKind::NO_ESCAPE: return "NO_ESCAPE";
    case AttrKind::NO_INLINE: return "NO_INLINE";
    case AttrKind::NO_INSTRUMENT_FUNCTION: return "NO_INSTRUMENT_FUNCTION";
    case AttrKind::NO_MERGE: return "NO_MERGE";
    case AttrKind::NO_MICRO_MIPS: return "NO_MICRO_MIPS";
    case AttrKind::NO_MIPS16: return "NO_MIPS16";
    case AttrKind::NO_PROFILE_FUNCTION: return "NO_PROFILE_FUNCTION";
    case AttrKind::NO_RETURN: return "NO_RETURN";
    case AttrKind::NO_SANITIZE: return "NO_SANITIZE";
    case AttrKind::NO_SPECULATIVE_LOAD_HARDENING: return "NO_SPECULATIVE_LOAD_HARDENING";
    case AttrKind::NO_SPLIT_STACK: return "NO_SPLIT_STACK";
    case AttrKind::NO_STACK_PROTECTOR: return "NO_STACK_PROTECTOR";
    case AttrKind::NO_THREAD_SAFETY_ANALYSIS: return "NO_THREAD_SAFETY_ANALYSIS";
    case AttrKind::NO_THROW: return "NO_THROW";
    case AttrKind::NO_UNIQUE_ADDRESS: return "NO_UNIQUE_ADDRESS";
    case AttrKind::NON_NULL: return "NON_NULL";
    case AttrKind::NOT_TAIL_CALLED: return "NOT_TAIL_CALLED";
    case AttrKind::OMP_ALLOCATE_DECL: return "OMP_ALLOCATE_DECL";
    case AttrKind::OMP_CAPTURE_KIND: return "OMP_CAPTURE_KIND";
    case AttrKind::OMP_CAPTURE_NO_INIT: return "OMP_CAPTURE_NO_INIT";
    case AttrKind::OMP_DECLARE_SIMD_DECL: return "OMP_DECLARE_SIMD_DECL";
    case AttrKind::OMP_DECLARE_TARGET_DECL: return "OMP_DECLARE_TARGET_DECL";
    case AttrKind::OMP_DECLARE_VARIANT: return "OMP_DECLARE_VARIANT";
    case AttrKind::OMP_REFERENCED_VAR: return "OMP_REFERENCED_VAR";
    case AttrKind::OMP_THREAD_PRIVATE_DECL: return "OMP_THREAD_PRIVATE_DECL";
    case AttrKind::OS_CONSUMED: return "OS_CONSUMED";
    case AttrKind::OS_CONSUMES_THIS: return "OS_CONSUMES_THIS";
    case AttrKind::OS_RETURNS_NOT_RETAINED: return "OS_RETURNS_NOT_RETAINED";
    case AttrKind::OS_RETURNS_RETAINED: return "OS_RETURNS_RETAINED";
    case AttrKind::OS_RETURNS_RETAINED_ON_NON_ZERO: return "OS_RETURNS_RETAINED_ON_NON_ZERO";
    case AttrKind::OS_RETURNS_RETAINED_ON_ZERO: return "OS_RETURNS_RETAINED_ON_ZERO";
    case AttrKind::OBJ_C_BOXABLE: return "OBJ_C_BOXABLE";
    case AttrKind::OBJ_C_BRIDGE: return "OBJ_C_BRIDGE";
    case AttrKind::OBJ_C_BRIDGE_MUTABLE: return "OBJ_C_BRIDGE_MUTABLE";
    case AttrKind::OBJ_C_BRIDGE_RELATED: return "OBJ_C_BRIDGE_RELATED";
    case AttrKind::OBJ_C_CLASS_STUB: return "OBJ_C_CLASS_STUB";
    case AttrKind::OBJ_C_DESIGNATED_INITIALIZER: return "OBJ_C_DESIGNATED_INITIALIZER";
    case AttrKind::OBJ_C_DIRECT: return "OBJ_C_DIRECT";
    case AttrKind::OBJ_C_DIRECT_MEMBERS: return "OBJ_C_DIRECT_MEMBERS";
    case AttrKind::OBJ_C_EXCEPTION: return "OBJ_C_EXCEPTION";
    case AttrKind::OBJ_C_EXPLICIT_PROTOCOL_IMPL: return "OBJ_C_EXPLICIT_PROTOCOL_IMPL";
    case AttrKind::OBJ_C_EXTERNALLY_RETAINED: return "OBJ_C_EXTERNALLY_RETAINED";
    case AttrKind::OBJ_CGC: return "OBJ_CGC";
    case AttrKind::OBJ_C_INDEPENDENT_CLASS: return "OBJ_C_INDEPENDENT_CLASS";
    case AttrKind::OBJ_C_INERT_UNSAFE_UNRETAINED: return "OBJ_C_INERT_UNSAFE_UNRETAINED";
    case AttrKind::OBJ_C_KIND_OF: return "OBJ_C_KIND_OF";
    case AttrKind::OBJ_C_METHOD_FAMILY: return "OBJ_C_METHOD_FAMILY";
    case AttrKind::OBJ_CNS_OBJECT: return "OBJ_CNS_OBJECT";
    case AttrKind::OBJ_C_NON_LAZY_CLASS: return "OBJ_C_NON_LAZY_CLASS";
    case AttrKind::OBJ_C_NON_RUNTIME_PROTOCOL: return "OBJ_C_NON_RUNTIME_PROTOCOL";
    case AttrKind::OBJ_C_OWNERSHIP: return "OBJ_C_OWNERSHIP";
    case AttrKind::OBJ_C_PRECISE_LIFETIME: return "OBJ_C_PRECISE_LIFETIME";
    case AttrKind::OBJ_C_REQUIRES_PROPERTY_DEFS: return "OBJ_C_REQUIRES_PROPERTY_DEFS";
    case AttrKind::OBJ_C_REQUIRES_SUPER: return "OBJ_C_REQUIRES_SUPER";
    case AttrKind::OBJ_C_RETURNS_INNER_POINTER: return "OBJ_C_RETURNS_INNER_POINTER";
    case AttrKind::OBJ_C_ROOT_CLASS: return "OBJ_C_ROOT_CLASS";
    case AttrKind::OBJ_C_RUNTIME_NAME: return "OBJ_C_RUNTIME_NAME";
    case AttrKind::OBJ_C_RUNTIME_VISIBLE: return "OBJ_C_RUNTIME_VISIBLE";
    case AttrKind::OBJ_C_SUBCLASSING_RESTRICTED: return "OBJ_C_SUBCLASSING_RESTRICTED";
    case AttrKind::OPEN_CL_ACCESS: return "OPEN_CL_ACCESS";
    case AttrKind::OPEN_CL_CONSTANT_ADDRESS_SPACE: return "OPEN_CL_CONSTANT_ADDRESS_SPACE";
    case AttrKind::OPEN_CL_GENERIC_ADDRESS_SPACE: return "OPEN_CL_GENERIC_ADDRESS_SPACE";
    case AttrKind::OPEN_CL_GLOBAL_ADDRESS_SPACE: return "OPEN_CL_GLOBAL_ADDRESS_SPACE";
    case AttrKind::OPEN_CL_GLOBAL_DEVICE_ADDRESS_SPACE: return "OPEN_CL_GLOBAL_DEVICE_ADDRESS_SPACE";
    case AttrKind::OPEN_CL_GLOBAL_HOST_ADDRESS_SPACE: return "OPEN_CL_GLOBAL_HOST_ADDRESS_SPACE";
    case AttrKind::OPEN_CL_INTEL_REQD_SUB_GROUP_SIZE: return "OPEN_CL_INTEL_REQD_SUB_GROUP_SIZE";
    case AttrKind::OPEN_CL_KERNEL: return "OPEN_CL_KERNEL";
    case AttrKind::OPEN_CL_LOCAL_ADDRESS_SPACE: return "OPEN_CL_LOCAL_ADDRESS_SPACE";
    case AttrKind::OPEN_CL_PRIVATE_ADDRESS_SPACE: return "OPEN_CL_PRIVATE_ADDRESS_SPACE";
    case AttrKind::OPEN_CL_UNROLL_HINT: return "OPEN_CL_UNROLL_HINT";
    case AttrKind::OPTIMIZE_NONE: return "OPTIMIZE_NONE";
    case AttrKind::OVERLOADABLE: return "OVERLOADABLE";
    case AttrKind::OVERRIDE: return "OVERRIDE";
    case AttrKind::OWNER: return "OWNER";
    case AttrKind::OWNERSHIP: return "OWNERSHIP";
    case AttrKind::PACKED: return "PACKED";
    case AttrKind::PARAM_TYPESTATE: return "PARAM_TYPESTATE";
    case AttrKind::PASCAL: return "PASCAL";
    case AttrKind::PASS_OBJECT_SIZE: return "PASS_OBJECT_SIZE";
    case AttrKind::PATCHABLE_FUNCTION_ENTRY: return "PATCHABLE_FUNCTION_ENTRY";
    case AttrKind::PCS: return "PCS";
    case AttrKind::POINTER: return "POINTER";
    case AttrKind::PRAGMA_CLANG_BSS_SECTION: return "PRAGMA_CLANG_BSS_SECTION";
    case AttrKind::PRAGMA_CLANG_DATA_SECTION: return "PRAGMA_CLANG_DATA_SECTION";
    case AttrKind::PRAGMA_CLANG_RELRO_SECTION: return "PRAGMA_CLANG_RELRO_SECTION";
    case AttrKind::PRAGMA_CLANG_RODATA_SECTION: return "PRAGMA_CLANG_RODATA_SECTION";
    case AttrKind::PRAGMA_CLANG_TEXT_SECTION: return "PRAGMA_CLANG_TEXT_SECTION";
    case AttrKind::PREFERRED_NAME: return "PREFERRED_NAME";
    case AttrKind::PRESERVE_ALL: return "PRESERVE_ALL";
    case AttrKind::PRESERVE_MOST: return "PRESERVE_MOST";
    case AttrKind::PT_GUARDED_BY: return "PT_GUARDED_BY";
    case AttrKind::PT_GUARDED_VAR: return "PT_GUARDED_VAR";
    case AttrKind::PTR32: return "PTR32";
    case AttrKind::PTR64: return "PTR64";
    case AttrKind::PURE: return "PURE";
    case AttrKind::RISCV_INTERRUPT: return "RISCV_INTERRUPT";
    case AttrKind::REG_CALL: return "REG_CALL";
    case AttrKind::REINITIALIZES: return "REINITIALIZES";
    case AttrKind::RELEASE_CAPABILITY: return "RELEASE_CAPABILITY";
    case AttrKind::RELEASE_HANDLE: return "RELEASE_HANDLE";
    case AttrKind::RENDER_SCRIPT_KERNEL: return "RENDER_SCRIPT_KERNEL";
    case AttrKind::REQD_WORK_GROUP_SIZE: return "REQD_WORK_GROUP_SIZE";
    case AttrKind::REQUIRES_CAPABILITY: return "REQUIRES_CAPABILITY";
    case AttrKind::RESTRICT: return "RESTRICT";
    case AttrKind::RETAIN: return "RETAIN";
    case AttrKind::RETURN_TYPESTATE: return "RETURN_TYPESTATE";
    case AttrKind::RETURNS_NON_NULL: return "RETURNS_NON_NULL";
    case AttrKind::RETURNS_TWICE: return "RETURNS_TWICE";
    case AttrKind::S_PTR: return "S_PTR";
    case AttrKind::SYCL_KERNEL: return "SYCL_KERNEL";
    case AttrKind::SYCL_SPECIAL_CLASS: return "SYCL_SPECIAL_CLASS";
    case AttrKind::SCOPED_LOCKABLE: return "SCOPED_LOCKABLE";
    case AttrKind::SECTION: return "SECTION";
    case AttrKind::SELECT_ANY: return "SELECT_ANY";
    case AttrKind::SENTINEL: return "SENTINEL";
    case AttrKind::SET_TYPESTATE: return "SET_TYPESTATE";
    case AttrKind::SHARED_TRYLOCK_FUNCTION: return "SHARED_TRYLOCK_FUNCTION";
    case AttrKind::SPECULATIVE_LOAD_HARDENING: return "SPECULATIVE_LOAD_HARDENING";
    case AttrKind::STANDALONE_DEBUG: return "STANDALONE_DEBUG";
    case AttrKind::STD_CALL: return "STD_CALL";
    case AttrKind::STRICT_FP: return "STRICT_FP";
    case AttrKind::SUPPRESS: return "SUPPRESS";
    case AttrKind::SWIFT_ASYNC: return "SWIFT_ASYNC";
    case AttrKind::SWIFT_ASYNC_CALL: return "SWIFT_ASYNC_CALL";
    case AttrKind::SWIFT_ASYNC_CONTEXT: return "SWIFT_ASYNC_CONTEXT";
    case AttrKind::SWIFT_ASYNC_ERROR: return "SWIFT_ASYNC_ERROR";
    case AttrKind::SWIFT_ASYNC_NAME: return "SWIFT_ASYNC_NAME";
    case AttrKind::SWIFT_ATTR: return "SWIFT_ATTR";
    case AttrKind::SWIFT_BRIDGE: return "SWIFT_BRIDGE";
    case AttrKind::SWIFT_BRIDGED_TYPEDEF: return "SWIFT_BRIDGED_TYPEDEF";
    case AttrKind::SWIFT_CALL: return "SWIFT_CALL";
    case AttrKind::SWIFT_CONTEXT: return "SWIFT_CONTEXT";
    case AttrKind::SWIFT_ERROR: return "SWIFT_ERROR";
    case AttrKind::SWIFT_ERROR_RESULT: return "SWIFT_ERROR_RESULT";
    case AttrKind::SWIFT_INDIRECT_RESULT: return "SWIFT_INDIRECT_RESULT";
    case AttrKind::SWIFT_NAME: return "SWIFT_NAME";
    case AttrKind::SWIFT_NEW_TYPE: return "SWIFT_NEW_TYPE";
    case AttrKind::SWIFT_OBJ_C_MEMBERS: return "SWIFT_OBJ_C_MEMBERS";
    case AttrKind::SWIFT_PRIVATE: return "SWIFT_PRIVATE";
    case AttrKind::SYS_VABI: return "SYS_VABI";
    case AttrKind::TLS_MODEL: return "TLS_MODEL";
    case AttrKind::TARGET: return "TARGET";
    case AttrKind::TARGET_CLONES: return "TARGET_CLONES";
    case AttrKind::TEST_TYPESTATE: return "TEST_TYPESTATE";
    case AttrKind::THIS_CALL: return "THIS_CALL";
    case AttrKind::THREAD: return "THREAD";
    case AttrKind::TRANSPARENT_UNION: return "TRANSPARENT_UNION";
    case AttrKind::TRIVIAL_ABI: return "TRIVIAL_ABI";
    case AttrKind::TRY_ACQUIRE_CAPABILITY: return "TRY_ACQUIRE_CAPABILITY";
    case AttrKind::TYPE_NON_NULL: return "TYPE_NON_NULL";
    case AttrKind::TYPE_NULL_UNSPECIFIED: return "TYPE_NULL_UNSPECIFIED";
    case AttrKind::TYPE_NULLABLE: return "TYPE_NULLABLE";
    case AttrKind::TYPE_NULLABLE_RESULT: return "TYPE_NULLABLE_RESULT";
    case AttrKind::TYPE_TAG_FOR_DATATYPE: return "TYPE_TAG_FOR_DATATYPE";
    case AttrKind::TYPE_VISIBILITY: return "TYPE_VISIBILITY";
    case AttrKind::U_PTR: return "U_PTR";
    case AttrKind::UNAVAILABLE: return "UNAVAILABLE";
    case AttrKind::UNINITIALIZED: return "UNINITIALIZED";
    case AttrKind::UNLIKELY: return "UNLIKELY";
    case AttrKind::UNUSED: return "UNUSED";
    case AttrKind::USE_HANDLE: return "USE_HANDLE";
    case AttrKind::USED: return "USED";
    case AttrKind::USING_IF_EXISTS: return "USING_IF_EXISTS";
    case AttrKind::UUID: return "UUID";
    case AttrKind::VEC_RETURN: return "VEC_RETURN";
    case AttrKind::VEC_TYPE_HINT: return "VEC_TYPE_HINT";
    case AttrKind::VECTOR_CALL: return "VECTOR_CALL";
    case AttrKind::VISIBILITY: return "VISIBILITY";
    case AttrKind::WARN_UNUSED: return "WARN_UNUSED";
    case AttrKind::WARN_UNUSED_RESULT: return "WARN_UNUSED_RESULT";
    case AttrKind::WEAK: return "WEAK";
    case AttrKind::WEAK_IMPORT: return "WEAK_IMPORT";
    case AttrKind::WEAK_REF: return "WEAK_REF";
    case AttrKind::WEB_ASSEMBLY_EXPORT_NAME: return "WEB_ASSEMBLY_EXPORT_NAME";
    case AttrKind::WEB_ASSEMBLY_IMPORT_MODULE: return "WEB_ASSEMBLY_IMPORT_MODULE";
    case AttrKind::WEB_ASSEMBLY_IMPORT_NAME: return "WEB_ASSEMBLY_IMPORT_NAME";
    case AttrKind::WORK_GROUP_SIZE_HINT: return "WORK_GROUP_SIZE_HINT";
    case AttrKind::X86_FORCE_ALIGN_ARG_POINTER: return "X86_FORCE_ALIGN_ARG_POINTER";
    case AttrKind::X_RAY_INSTRUMENT: return "X_RAY_INSTRUMENT";
    case AttrKind::X_RAY_LOG_ARGS: return "X_RAY_LOG_ARGS";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AArch64VectorPcsAttrSpelling e) {
  switch (e) {
    case AArch64VectorPcsAttrSpelling::GNU_AARCH64_VECTOR_PCS: return "GNU_AARCH64_VECTOR_PCS";
    case AArch64VectorPcsAttrSpelling::CXX11_CLANG_AARCH64_VECTOR_PCS: return "CXX11_CLANG_AARCH64_VECTOR_PCS";
    case AArch64VectorPcsAttrSpelling::C2X_CLANG_AARCH64_VECTOR_PCS: return "C2X_CLANG_AARCH64_VECTOR_PCS";
    case AArch64VectorPcsAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AMDGPUFlatWorkGroupSizeAttrSpelling e) {
  switch (e) {
    case AMDGPUFlatWorkGroupSizeAttrSpelling::GNU_AMDGPU_FLAT_WORK_GROUP_SIZE: return "GNU_AMDGPU_FLAT_WORK_GROUP_SIZE";
    case AMDGPUFlatWorkGroupSizeAttrSpelling::CXX11_CLANG_AMDGPU_FLAT_WORK_GROUP_SIZE: return "CXX11_CLANG_AMDGPU_FLAT_WORK_GROUP_SIZE";
    case AMDGPUFlatWorkGroupSizeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AMDGPUNumSGPRAttrSpelling e) {
  switch (e) {
    case AMDGPUNumSGPRAttrSpelling::GNU_AMDGPU_NUM_SGPR: return "GNU_AMDGPU_NUM_SGPR";
    case AMDGPUNumSGPRAttrSpelling::CXX11_CLANG_AMDGPU_NUM_SGPR: return "CXX11_CLANG_AMDGPU_NUM_SGPR";
    case AMDGPUNumSGPRAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AMDGPUNumVGPRAttrSpelling e) {
  switch (e) {
    case AMDGPUNumVGPRAttrSpelling::GNU_AMDGPU_NUM_VGPR: return "GNU_AMDGPU_NUM_VGPR";
    case AMDGPUNumVGPRAttrSpelling::CXX11_CLANG_AMDGPU_NUM_VGPR: return "CXX11_CLANG_AMDGPU_NUM_VGPR";
    case AMDGPUNumVGPRAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AMDGPUWavesPerEUAttrSpelling e) {
  switch (e) {
    case AMDGPUWavesPerEUAttrSpelling::GNU_AMDGPU_WAVES_PER_EU: return "GNU_AMDGPU_WAVES_PER_EU";
    case AMDGPUWavesPerEUAttrSpelling::CXX11_CLANG_AMDGPU_WAVES_PER_EU: return "CXX11_CLANG_AMDGPU_WAVES_PER_EU";
    case AMDGPUWavesPerEUAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ARMInterruptAttrInterruptType e) {
  switch (e) {
    case ARMInterruptAttrInterruptType::IRQ: return "IRQ";
    case ARMInterruptAttrInterruptType::FIQ: return "FIQ";
    case ARMInterruptAttrInterruptType::SWI: return "SWI";
    case ARMInterruptAttrInterruptType::ABORT: return "ABORT";
    case ARMInterruptAttrInterruptType::UNDEF: return "UNDEF";
    case ARMInterruptAttrInterruptType::GENERIC: return "GENERIC";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ARMInterruptAttrSpelling e) {
  switch (e) {
    case ARMInterruptAttrSpelling::GNU_INTERRUPT: return "GNU_INTERRUPT";
    case ARMInterruptAttrSpelling::CXX11_GNU_INTERRUPT: return "CXX11_GNU_INTERRUPT";
    case ARMInterruptAttrSpelling::C2X_GNU_INTERRUPT: return "C2X_GNU_INTERRUPT";
    case ARMInterruptAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AVRInterruptAttrSpelling e) {
  switch (e) {
    case AVRInterruptAttrSpelling::GNU_INTERRUPT: return "GNU_INTERRUPT";
    case AVRInterruptAttrSpelling::CXX11_GNU_INTERRUPT: return "CXX11_GNU_INTERRUPT";
    case AVRInterruptAttrSpelling::C2X_GNU_INTERRUPT: return "C2X_GNU_INTERRUPT";
    case AVRInterruptAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AVRSignalAttrSpelling e) {
  switch (e) {
    case AVRSignalAttrSpelling::GNU_SIGNAL: return "GNU_SIGNAL";
    case AVRSignalAttrSpelling::CXX11_GNU_SIGNAL: return "CXX11_GNU_SIGNAL";
    case AVRSignalAttrSpelling::C2X_GNU_SIGNAL: return "C2X_GNU_SIGNAL";
    case AVRSignalAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AbiTagAttrSpelling e) {
  switch (e) {
    case AbiTagAttrSpelling::GNU_ABI_TAG: return "GNU_ABI_TAG";
    case AbiTagAttrSpelling::CXX11_GNU_ABI_TAG: return "CXX11_GNU_ABI_TAG";
    case AbiTagAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AcquireCapabilityAttrSpelling e) {
  switch (e) {
    case AcquireCapabilityAttrSpelling::GNU_ACQUIRE_CAPABILITY: return "GNU_ACQUIRE_CAPABILITY";
    case AcquireCapabilityAttrSpelling::CXX11_CLANG_ACQUIRE_CAPABILITY: return "CXX11_CLANG_ACQUIRE_CAPABILITY";
    case AcquireCapabilityAttrSpelling::GNU_ACQUIRE_SHARED_CAPABILITY: return "GNU_ACQUIRE_SHARED_CAPABILITY";
    case AcquireCapabilityAttrSpelling::CXX11_CLANG_ACQUIRE_SHARED_CAPABILITY: return "CXX11_CLANG_ACQUIRE_SHARED_CAPABILITY";
    case AcquireCapabilityAttrSpelling::GNU_EXCLUSIVE_LOCK_FUNCTION: return "GNU_EXCLUSIVE_LOCK_FUNCTION";
    case AcquireCapabilityAttrSpelling::GNU_SHARED_LOCK_FUNCTION: return "GNU_SHARED_LOCK_FUNCTION";
    case AcquireCapabilityAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AcquireHandleAttrSpelling e) {
  switch (e) {
    case AcquireHandleAttrSpelling::GNU_ACQUIRE_HANDLE: return "GNU_ACQUIRE_HANDLE";
    case AcquireHandleAttrSpelling::CXX11_CLANG_ACQUIRE_HANDLE: return "CXX11_CLANG_ACQUIRE_HANDLE";
    case AcquireHandleAttrSpelling::C2X_CLANG_ACQUIRE_HANDLE: return "C2X_CLANG_ACQUIRE_HANDLE";
    case AcquireHandleAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AddressSpaceAttrSpelling e) {
  switch (e) {
    case AddressSpaceAttrSpelling::GNU_ADDRESS_SPACE: return "GNU_ADDRESS_SPACE";
    case AddressSpaceAttrSpelling::CXX11_CLANG_ADDRESS_SPACE: return "CXX11_CLANG_ADDRESS_SPACE";
    case AddressSpaceAttrSpelling::C2X_CLANG_ADDRESS_SPACE: return "C2X_CLANG_ADDRESS_SPACE";
    case AddressSpaceAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AliasAttrSpelling e) {
  switch (e) {
    case AliasAttrSpelling::GNU_ALIAS: return "GNU_ALIAS";
    case AliasAttrSpelling::CXX11_GNU_ALIAS: return "CXX11_GNU_ALIAS";
    case AliasAttrSpelling::C2X_GNU_ALIAS: return "C2X_GNU_ALIAS";
    case AliasAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AlignedAttrSpelling e) {
  switch (e) {
    case AlignedAttrSpelling::GNU_ALIGNED: return "GNU_ALIGNED";
    case AlignedAttrSpelling::CXX11_GNU_ALIGNED: return "CXX11_GNU_ALIGNED";
    case AlignedAttrSpelling::C2X_GNU_ALIGNED: return "C2X_GNU_ALIGNED";
    case AlignedAttrSpelling::DECLSPEC_ALIGN: return "DECLSPEC_ALIGN";
    case AlignedAttrSpelling::KEYWORD_ALIGNAS: return "KEYWORD_ALIGNAS";
    case AlignedAttrSpelling::KEYWORD__ALIGNAS: return "KEYWORD__ALIGNAS";
    case AlignedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AllocAlignAttrSpelling e) {
  switch (e) {
    case AllocAlignAttrSpelling::GNU_ALLOC_ALIGN: return "GNU_ALLOC_ALIGN";
    case AllocAlignAttrSpelling::CXX11_GNU_ALLOC_ALIGN: return "CXX11_GNU_ALLOC_ALIGN";
    case AllocAlignAttrSpelling::C2X_GNU_ALLOC_ALIGN: return "C2X_GNU_ALLOC_ALIGN";
    case AllocAlignAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AllocSizeAttrSpelling e) {
  switch (e) {
    case AllocSizeAttrSpelling::GNU_ALLOC_SIZE: return "GNU_ALLOC_SIZE";
    case AllocSizeAttrSpelling::CXX11_GNU_ALLOC_SIZE: return "CXX11_GNU_ALLOC_SIZE";
    case AllocSizeAttrSpelling::C2X_GNU_ALLOC_SIZE: return "C2X_GNU_ALLOC_SIZE";
    case AllocSizeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AlwaysDestroyAttrSpelling e) {
  switch (e) {
    case AlwaysDestroyAttrSpelling::GNU_ALWAYS_DESTROY: return "GNU_ALWAYS_DESTROY";
    case AlwaysDestroyAttrSpelling::CXX11_CLANG_ALWAYS_DESTROY: return "CXX11_CLANG_ALWAYS_DESTROY";
    case AlwaysDestroyAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AlwaysInlineAttrSpelling e) {
  switch (e) {
    case AlwaysInlineAttrSpelling::GNU_ALWAYS_INLINE: return "GNU_ALWAYS_INLINE";
    case AlwaysInlineAttrSpelling::CXX11_GNU_ALWAYS_INLINE: return "CXX11_GNU_ALWAYS_INLINE";
    case AlwaysInlineAttrSpelling::C2X_GNU_ALWAYS_INLINE: return "C2X_GNU_ALWAYS_INLINE";
    case AlwaysInlineAttrSpelling::KEYWORD_FORCEINLINE: return "KEYWORD_FORCEINLINE";
    case AlwaysInlineAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AnnotateAttrSpelling e) {
  switch (e) {
    case AnnotateAttrSpelling::GNU_ANNOTATE: return "GNU_ANNOTATE";
    case AnnotateAttrSpelling::CXX11_CLANG_ANNOTATE: return "CXX11_CLANG_ANNOTATE";
    case AnnotateAttrSpelling::C2X_CLANG_ANNOTATE: return "C2X_CLANG_ANNOTATE";
    case AnnotateAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AnyX86InterruptAttrSpelling e) {
  switch (e) {
    case AnyX86InterruptAttrSpelling::GNU_INTERRUPT: return "GNU_INTERRUPT";
    case AnyX86InterruptAttrSpelling::CXX11_GNU_INTERRUPT: return "CXX11_GNU_INTERRUPT";
    case AnyX86InterruptAttrSpelling::C2X_GNU_INTERRUPT: return "C2X_GNU_INTERRUPT";
    case AnyX86InterruptAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AnyX86NoCallerSavedRegistersAttrSpelling e) {
  switch (e) {
    case AnyX86NoCallerSavedRegistersAttrSpelling::GNU_NO_CALLER_SAVED_REGISTERS: return "GNU_NO_CALLER_SAVED_REGISTERS";
    case AnyX86NoCallerSavedRegistersAttrSpelling::CXX11_GNU_NO_CALLER_SAVED_REGISTERS: return "CXX11_GNU_NO_CALLER_SAVED_REGISTERS";
    case AnyX86NoCallerSavedRegistersAttrSpelling::C2X_GNU_NO_CALLER_SAVED_REGISTERS: return "C2X_GNU_NO_CALLER_SAVED_REGISTERS";
    case AnyX86NoCallerSavedRegistersAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AnyX86NoCfCheckAttrSpelling e) {
  switch (e) {
    case AnyX86NoCfCheckAttrSpelling::GNU_NOCF_CHECK: return "GNU_NOCF_CHECK";
    case AnyX86NoCfCheckAttrSpelling::CXX11_GNU_NOCF_CHECK: return "CXX11_GNU_NOCF_CHECK";
    case AnyX86NoCfCheckAttrSpelling::C2X_GNU_NOCF_CHECK: return "C2X_GNU_NOCF_CHECK";
    case AnyX86NoCfCheckAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ArcWeakrefUnavailableAttrSpelling e) {
  switch (e) {
    case ArcWeakrefUnavailableAttrSpelling::GNU_OBJC_ARC_WEAK_REFERENCE_UNAVAILABLE: return "GNU_OBJC_ARC_WEAK_REFERENCE_UNAVAILABLE";
    case ArcWeakrefUnavailableAttrSpelling::CXX11_CLANG_OBJC_ARC_WEAK_REFERENCE_UNAVAILABLE: return "CXX11_CLANG_OBJC_ARC_WEAK_REFERENCE_UNAVAILABLE";
    case ArcWeakrefUnavailableAttrSpelling::C2X_CLANG_OBJC_ARC_WEAK_REFERENCE_UNAVAILABLE: return "C2X_CLANG_OBJC_ARC_WEAK_REFERENCE_UNAVAILABLE";
    case ArcWeakrefUnavailableAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ArgumentWithTypeTagAttrSpelling e) {
  switch (e) {
    case ArgumentWithTypeTagAttrSpelling::GNU_ARGUMENT_WITH_TYPE_TAG: return "GNU_ARGUMENT_WITH_TYPE_TAG";
    case ArgumentWithTypeTagAttrSpelling::CXX11_CLANG_ARGUMENT_WITH_TYPE_TAG: return "CXX11_CLANG_ARGUMENT_WITH_TYPE_TAG";
    case ArgumentWithTypeTagAttrSpelling::C2X_CLANG_ARGUMENT_WITH_TYPE_TAG: return "C2X_CLANG_ARGUMENT_WITH_TYPE_TAG";
    case ArgumentWithTypeTagAttrSpelling::GNU_POINTER_WITH_TYPE_TAG: return "GNU_POINTER_WITH_TYPE_TAG";
    case ArgumentWithTypeTagAttrSpelling::CXX11_CLANG_POINTER_WITH_TYPE_TAG: return "CXX11_CLANG_POINTER_WITH_TYPE_TAG";
    case ArgumentWithTypeTagAttrSpelling::C2X_CLANG_POINTER_WITH_TYPE_TAG: return "C2X_CLANG_POINTER_WITH_TYPE_TAG";
    case ArgumentWithTypeTagAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ArmBuiltinAliasAttrSpelling e) {
  switch (e) {
    case ArmBuiltinAliasAttrSpelling::GNU_CLANG_ARM_BUILTIN_ALIAS: return "GNU_CLANG_ARM_BUILTIN_ALIAS";
    case ArmBuiltinAliasAttrSpelling::CXX11_CLANG_CLANG_ARM_BUILTIN_ALIAS: return "CXX11_CLANG_CLANG_ARM_BUILTIN_ALIAS";
    case ArmBuiltinAliasAttrSpelling::C2X_CLANG_CLANG_ARM_BUILTIN_ALIAS: return "C2X_CLANG_CLANG_ARM_BUILTIN_ALIAS";
    case ArmBuiltinAliasAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ArmMveStrictPolymorphismAttrSpelling e) {
  switch (e) {
    case ArmMveStrictPolymorphismAttrSpelling::GNU_CLANG_ARM_MVE_STRICT_POLYMORPHISM: return "GNU_CLANG_ARM_MVE_STRICT_POLYMORPHISM";
    case ArmMveStrictPolymorphismAttrSpelling::CXX11_CLANG_CLANG_ARM_MVE_STRICT_POLYMORPHISM: return "CXX11_CLANG_CLANG_ARM_MVE_STRICT_POLYMORPHISM";
    case ArmMveStrictPolymorphismAttrSpelling::C2X_CLANG_CLANG_ARM_MVE_STRICT_POLYMORPHISM: return "C2X_CLANG_CLANG_ARM_MVE_STRICT_POLYMORPHISM";
    case ArmMveStrictPolymorphismAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ArrayTypeArraySizeModifier e) {
  switch (e) {
    case ArrayTypeArraySizeModifier::NORMAL: return "NORMAL";
    case ArrayTypeArraySizeModifier::STATIC: return "STATIC";
    case ArrayTypeArraySizeModifier::STAR: return "STAR";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ArtificialAttrSpelling e) {
  switch (e) {
    case ArtificialAttrSpelling::GNU_ARTIFICIAL: return "GNU_ARTIFICIAL";
    case ArtificialAttrSpelling::CXX11_GNU_ARTIFICIAL: return "CXX11_GNU_ARTIFICIAL";
    case ArtificialAttrSpelling::C2X_GNU_ARTIFICIAL: return "C2X_GNU_ARTIFICIAL";
    case ArtificialAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AsmLabelAttrSpelling e) {
  switch (e) {
    case AsmLabelAttrSpelling::KEYWORD_ASSEMBLY: return "KEYWORD_ASSEMBLY";
    case AsmLabelAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AssertCapabilityAttrSpelling e) {
  switch (e) {
    case AssertCapabilityAttrSpelling::GNU_ASSERT_CAPABILITY: return "GNU_ASSERT_CAPABILITY";
    case AssertCapabilityAttrSpelling::CXX11_CLANG_ASSERT_CAPABILITY: return "CXX11_CLANG_ASSERT_CAPABILITY";
    case AssertCapabilityAttrSpelling::GNU_ASSERT_SHARED_CAPABILITY: return "GNU_ASSERT_SHARED_CAPABILITY";
    case AssertCapabilityAttrSpelling::CXX11_CLANG_ASSERT_SHARED_CAPABILITY: return "CXX11_CLANG_ASSERT_SHARED_CAPABILITY";
    case AssertCapabilityAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AssumeAlignedAttrSpelling e) {
  switch (e) {
    case AssumeAlignedAttrSpelling::GNU_ASSUME_ALIGNED: return "GNU_ASSUME_ALIGNED";
    case AssumeAlignedAttrSpelling::CXX11_GNU_ASSUME_ALIGNED: return "CXX11_GNU_ASSUME_ALIGNED";
    case AssumeAlignedAttrSpelling::C2X_GNU_ASSUME_ALIGNED: return "C2X_GNU_ASSUME_ALIGNED";
    case AssumeAlignedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AssumptionAttrSpelling e) {
  switch (e) {
    case AssumptionAttrSpelling::GNU_ASSUME: return "GNU_ASSUME";
    case AssumptionAttrSpelling::CXX11_CLANG_ASSUME: return "CXX11_CLANG_ASSUME";
    case AssumptionAttrSpelling::C2X_CLANG_ASSUME: return "C2X_CLANG_ASSUME";
    case AssumptionAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AtomicExprAtomicOp e) {
  switch (e) {
    case AtomicExprAtomicOp::C11_ATOMIC_INITIALIZER: return "C11_ATOMIC_INITIALIZER";
    case AtomicExprAtomicOp::C11_ATOMIC_LOAD: return "C11_ATOMIC_LOAD";
    case AtomicExprAtomicOp::C11_ATOMIC_STORE: return "C11_ATOMIC_STORE";
    case AtomicExprAtomicOp::C11_ATOMIC_EXCHANGE: return "C11_ATOMIC_EXCHANGE";
    case AtomicExprAtomicOp::C11_ATOMIC_COMPARE_EXCHANGE_STRONG: return "C11_ATOMIC_COMPARE_EXCHANGE_STRONG";
    case AtomicExprAtomicOp::C11_ATOMIC_COMPARE_EXCHANGE_WEAK: return "C11_ATOMIC_COMPARE_EXCHANGE_WEAK";
    case AtomicExprAtomicOp::C11_ATOMIC_FETCH_ADD: return "C11_ATOMIC_FETCH_ADD";
    case AtomicExprAtomicOp::C11_ATOMIC_FETCH_SUB: return "C11_ATOMIC_FETCH_SUB";
    case AtomicExprAtomicOp::C11_ATOMIC_FETCH_AND: return "C11_ATOMIC_FETCH_AND";
    case AtomicExprAtomicOp::C11_ATOMIC_FETCH_OR: return "C11_ATOMIC_FETCH_OR";
    case AtomicExprAtomicOp::C11_ATOMIC_FETCH_XOR: return "C11_ATOMIC_FETCH_XOR";
    case AtomicExprAtomicOp::C11_ATOMIC_FETCH_NAND: return "C11_ATOMIC_FETCH_NAND";
    case AtomicExprAtomicOp::C11_ATOMIC_FETCH_MAX: return "C11_ATOMIC_FETCH_MAX";
    case AtomicExprAtomicOp::C11_ATOMIC_FETCH_MIN: return "C11_ATOMIC_FETCH_MIN";
    case AtomicExprAtomicOp::ATOMIC_LOAD: return "ATOMIC_LOAD";
    case AtomicExprAtomicOp::ATOMIC_LOAD_N: return "ATOMIC_LOAD_N";
    case AtomicExprAtomicOp::ATOMIC_STORE: return "ATOMIC_STORE";
    case AtomicExprAtomicOp::ATOMIC_STORE_N: return "ATOMIC_STORE_N";
    case AtomicExprAtomicOp::ATOMIC_EXCHANGE: return "ATOMIC_EXCHANGE";
    case AtomicExprAtomicOp::ATOMIC_EXCHANGE_N: return "ATOMIC_EXCHANGE_N";
    case AtomicExprAtomicOp::ATOMIC_COMPARE_EXCHANGE: return "ATOMIC_COMPARE_EXCHANGE";
    case AtomicExprAtomicOp::ATOMIC_COMPARE_EXCHANGE_N: return "ATOMIC_COMPARE_EXCHANGE_N";
    case AtomicExprAtomicOp::ATOMIC_FETCH_ADD: return "ATOMIC_FETCH_ADD";
    case AtomicExprAtomicOp::ATOMIC_FETCH_SUB: return "ATOMIC_FETCH_SUB";
    case AtomicExprAtomicOp::ATOMIC_FETCH_AND: return "ATOMIC_FETCH_AND";
    case AtomicExprAtomicOp::ATOMIC_FETCH_OR: return "ATOMIC_FETCH_OR";
    case AtomicExprAtomicOp::ATOMIC_FETCH_XOR: return "ATOMIC_FETCH_XOR";
    case AtomicExprAtomicOp::ATOMIC_FETCH_NAND: return "ATOMIC_FETCH_NAND";
    case AtomicExprAtomicOp::ATOMIC_ADD_FETCH: return "ATOMIC_ADD_FETCH";
    case AtomicExprAtomicOp::ATOMIC_SUB_FETCH: return "ATOMIC_SUB_FETCH";
    case AtomicExprAtomicOp::ATOMIC_AND_FETCH: return "ATOMIC_AND_FETCH";
    case AtomicExprAtomicOp::ATOMIC_OR_FETCH: return "ATOMIC_OR_FETCH";
    case AtomicExprAtomicOp::ATOMIC_XOR_FETCH: return "ATOMIC_XOR_FETCH";
    case AtomicExprAtomicOp::ATOMIC_MAX_FETCH: return "ATOMIC_MAX_FETCH";
    case AtomicExprAtomicOp::ATOMIC_MIN_FETCH: return "ATOMIC_MIN_FETCH";
    case AtomicExprAtomicOp::ATOMIC_NAND_FETCH: return "ATOMIC_NAND_FETCH";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_INITIALIZER: return "OPENCL_ATOMIC_INITIALIZER";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_LOAD: return "OPENCL_ATOMIC_LOAD";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_STORE: return "OPENCL_ATOMIC_STORE";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_EXCHANGE: return "OPENCL_ATOMIC_EXCHANGE";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_COMPARE_EXCHANGE_STRONG: return "OPENCL_ATOMIC_COMPARE_EXCHANGE_STRONG";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_COMPARE_EXCHANGE_WEAK: return "OPENCL_ATOMIC_COMPARE_EXCHANGE_WEAK";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_FETCH_ADD: return "OPENCL_ATOMIC_FETCH_ADD";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_FETCH_SUB: return "OPENCL_ATOMIC_FETCH_SUB";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_FETCH_AND: return "OPENCL_ATOMIC_FETCH_AND";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_FETCH_OR: return "OPENCL_ATOMIC_FETCH_OR";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_FETCH_XOR: return "OPENCL_ATOMIC_FETCH_XOR";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_FETCH_MIN: return "OPENCL_ATOMIC_FETCH_MIN";
    case AtomicExprAtomicOp::OPENCL_ATOMIC_FETCH_MAX: return "OPENCL_ATOMIC_FETCH_MAX";
    case AtomicExprAtomicOp::ATOMIC_FETCH_MIN: return "ATOMIC_FETCH_MIN";
    case AtomicExprAtomicOp::ATOMIC_FETCH_MAX: return "ATOMIC_FETCH_MAX";
    case AtomicExprAtomicOp::HIP_ATOMIC_LOAD: return "HIP_ATOMIC_LOAD";
    case AtomicExprAtomicOp::HIP_ATOMIC_STORE: return "HIP_ATOMIC_STORE";
    case AtomicExprAtomicOp::HIP_ATOMIC_COMPARE_EXCHANGE_WEAK: return "HIP_ATOMIC_COMPARE_EXCHANGE_WEAK";
    case AtomicExprAtomicOp::HIP_ATOMIC_COMPARE_EXCHANGE_STRONG: return "HIP_ATOMIC_COMPARE_EXCHANGE_STRONG";
    case AtomicExprAtomicOp::HIP_ATOMIC_EXCHANGE: return "HIP_ATOMIC_EXCHANGE";
    case AtomicExprAtomicOp::HIP_ATOMIC_FETCH_ADD: return "HIP_ATOMIC_FETCH_ADD";
    case AtomicExprAtomicOp::HIP_ATOMIC_FETCH_AND: return "HIP_ATOMIC_FETCH_AND";
    case AtomicExprAtomicOp::HIP_ATOMIC_FETCH_OR: return "HIP_ATOMIC_FETCH_OR";
    case AtomicExprAtomicOp::HIP_ATOMIC_FETCH_XOR: return "HIP_ATOMIC_FETCH_XOR";
    case AtomicExprAtomicOp::HIP_ATOMIC_FETCH_MIN: return "HIP_ATOMIC_FETCH_MIN";
    case AtomicExprAtomicOp::HIP_ATOMIC_FETCH_MAX: return "HIP_ATOMIC_FETCH_MAX";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AvailabilityAttrSpelling e) {
  switch (e) {
    case AvailabilityAttrSpelling::GNU_AVAILABILITY: return "GNU_AVAILABILITY";
    case AvailabilityAttrSpelling::CXX11_CLANG_AVAILABILITY: return "CXX11_CLANG_AVAILABILITY";
    case AvailabilityAttrSpelling::C2X_CLANG_AVAILABILITY: return "C2X_CLANG_AVAILABILITY";
    case AvailabilityAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(BPFPreserveAccessIndexAttrSpelling e) {
  switch (e) {
    case BPFPreserveAccessIndexAttrSpelling::GNU_PRESERVE_ACCESS_INDEX: return "GNU_PRESERVE_ACCESS_INDEX";
    case BPFPreserveAccessIndexAttrSpelling::CXX11_CLANG_PRESERVE_ACCESS_INDEX: return "CXX11_CLANG_PRESERVE_ACCESS_INDEX";
    case BPFPreserveAccessIndexAttrSpelling::C2X_CLANG_PRESERVE_ACCESS_INDEX: return "C2X_CLANG_PRESERVE_ACCESS_INDEX";
    case BPFPreserveAccessIndexAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(BTFDeclTagAttrSpelling e) {
  switch (e) {
    case BTFDeclTagAttrSpelling::GNU_BTF_DECLARATION_TAG: return "GNU_BTF_DECLARATION_TAG";
    case BTFDeclTagAttrSpelling::CXX11_CLANG_BTF_DECLARATION_TAG: return "CXX11_CLANG_BTF_DECLARATION_TAG";
    case BTFDeclTagAttrSpelling::C2X_CLANG_BTF_DECLARATION_TAG: return "C2X_CLANG_BTF_DECLARATION_TAG";
    case BTFDeclTagAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(BTFTypeTagAttrSpelling e) {
  switch (e) {
    case BTFTypeTagAttrSpelling::GNU_BTF_TYPE_TAG: return "GNU_BTF_TYPE_TAG";
    case BTFTypeTagAttrSpelling::CXX11_CLANG_BTF_TYPE_TAG: return "CXX11_CLANG_BTF_TYPE_TAG";
    case BTFTypeTagAttrSpelling::C2X_CLANG_BTF_TYPE_TAG: return "C2X_CLANG_BTF_TYPE_TAG";
    case BTFTypeTagAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(BlocksAttrBlockType e) {
  switch (e) {
    case BlocksAttrBlockType::BY_REFERENCE: return "BY_REFERENCE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(BlocksAttrSpelling e) {
  switch (e) {
    case BlocksAttrSpelling::GNU_BLOCKS: return "GNU_BLOCKS";
    case BlocksAttrSpelling::CXX11_CLANG_BLOCKS: return "CXX11_CLANG_BLOCKS";
    case BlocksAttrSpelling::C2X_CLANG_BLOCKS: return "C2X_CLANG_BLOCKS";
    case BlocksAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(BuiltinAliasAttrSpelling e) {
  switch (e) {
    case BuiltinAliasAttrSpelling::CXX11_CLANG_BUILTIN_ALIAS: return "CXX11_CLANG_BUILTIN_ALIAS";
    case BuiltinAliasAttrSpelling::C2X_CLANG_BUILTIN_ALIAS: return "C2X_CLANG_BUILTIN_ALIAS";
    case BuiltinAliasAttrSpelling::GNU_CLANG_BUILTIN_ALIAS: return "GNU_CLANG_BUILTIN_ALIAS";
    case BuiltinAliasAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(BuiltinTypeKind e) {
  switch (e) {
    case BuiltinTypeKind::OCL_IMAGE_1D_RO: return "OCL_IMAGE_1D_RO";
    case BuiltinTypeKind::OCL_IMAGE_1D_ARRAY_RO: return "OCL_IMAGE_1D_ARRAY_RO";
    case BuiltinTypeKind::OCL_IMAGE_1D_BUFFER_RO: return "OCL_IMAGE_1D_BUFFER_RO";
    case BuiltinTypeKind::OCL_IMAGE_2D_RO: return "OCL_IMAGE_2D_RO";
    case BuiltinTypeKind::OCL_IMAGE_2D_ARRAY_RO: return "OCL_IMAGE_2D_ARRAY_RO";
    case BuiltinTypeKind::OCL_IMAGE_2D_DEPTH_RO: return "OCL_IMAGE_2D_DEPTH_RO";
    case BuiltinTypeKind::OCL_IMAGE_2D_ARRAY_DEPTH_RO: return "OCL_IMAGE_2D_ARRAY_DEPTH_RO";
    case BuiltinTypeKind::OCL_IMAGE_2D_MSAARO: return "OCL_IMAGE_2D_MSAARO";
    case BuiltinTypeKind::OCL_IMAGE_2D_ARRAY_MSAARO: return "OCL_IMAGE_2D_ARRAY_MSAARO";
    case BuiltinTypeKind::OCL_IMAGE_2D_MSAA_DEPTH_RO: return "OCL_IMAGE_2D_MSAA_DEPTH_RO";
    case BuiltinTypeKind::OCL_IMAGE_2D_ARRAY_MSAA_DEPTH_RO: return "OCL_IMAGE_2D_ARRAY_MSAA_DEPTH_RO";
    case BuiltinTypeKind::OCL_IMAGE_3D_RO: return "OCL_IMAGE_3D_RO";
    case BuiltinTypeKind::OCL_IMAGE_1D_WO: return "OCL_IMAGE_1D_WO";
    case BuiltinTypeKind::OCL_IMAGE_1D_ARRAY_WO: return "OCL_IMAGE_1D_ARRAY_WO";
    case BuiltinTypeKind::OCL_IMAGE_1D_BUFFER_WO: return "OCL_IMAGE_1D_BUFFER_WO";
    case BuiltinTypeKind::OCL_IMAGE_2D_WO: return "OCL_IMAGE_2D_WO";
    case BuiltinTypeKind::OCL_IMAGE_2D_ARRAY_WO: return "OCL_IMAGE_2D_ARRAY_WO";
    case BuiltinTypeKind::OCL_IMAGE_2D_DEPTH_WO: return "OCL_IMAGE_2D_DEPTH_WO";
    case BuiltinTypeKind::OCL_IMAGE_2D_ARRAY_DEPTH_WO: return "OCL_IMAGE_2D_ARRAY_DEPTH_WO";
    case BuiltinTypeKind::OCL_IMAGE_2D_MSAAWO: return "OCL_IMAGE_2D_MSAAWO";
    case BuiltinTypeKind::OCL_IMAGE_2D_ARRAY_MSAAWO: return "OCL_IMAGE_2D_ARRAY_MSAAWO";
    case BuiltinTypeKind::OCL_IMAGE_2D_MSAA_DEPTH_WO: return "OCL_IMAGE_2D_MSAA_DEPTH_WO";
    case BuiltinTypeKind::OCL_IMAGE_2D_ARRAY_MSAA_DEPTH_WO: return "OCL_IMAGE_2D_ARRAY_MSAA_DEPTH_WO";
    case BuiltinTypeKind::OCL_IMAGE_3D_WO: return "OCL_IMAGE_3D_WO";
    case BuiltinTypeKind::OCL_IMAGE_1D_RW: return "OCL_IMAGE_1D_RW";
    case BuiltinTypeKind::OCL_IMAGE_1D_ARRAY_RW: return "OCL_IMAGE_1D_ARRAY_RW";
    case BuiltinTypeKind::OCL_IMAGE_1D_BUFFER_RW: return "OCL_IMAGE_1D_BUFFER_RW";
    case BuiltinTypeKind::OCL_IMAGE_2D_RW: return "OCL_IMAGE_2D_RW";
    case BuiltinTypeKind::OCL_IMAGE_2D_ARRAY_RW: return "OCL_IMAGE_2D_ARRAY_RW";
    case BuiltinTypeKind::OCL_IMAGE_2D_DEPTH_RW: return "OCL_IMAGE_2D_DEPTH_RW";
    case BuiltinTypeKind::OCL_IMAGE_2D_ARRAY_DEPTH_RW: return "OCL_IMAGE_2D_ARRAY_DEPTH_RW";
    case BuiltinTypeKind::OCL_IMAGE_2D_MSAARW: return "OCL_IMAGE_2D_MSAARW";
    case BuiltinTypeKind::OCL_IMAGE_2D_ARRAY_MSAARW: return "OCL_IMAGE_2D_ARRAY_MSAARW";
    case BuiltinTypeKind::OCL_IMAGE_2D_MSAA_DEPTH_RW: return "OCL_IMAGE_2D_MSAA_DEPTH_RW";
    case BuiltinTypeKind::OCL_IMAGE_2D_ARRAY_MSAA_DEPTH_RW: return "OCL_IMAGE_2D_ARRAY_MSAA_DEPTH_RW";
    case BuiltinTypeKind::OCL_IMAGE_3D_RW: return "OCL_IMAGE_3D_RW";
    case BuiltinTypeKind::OCL_INTEL_SUBGROUP_AVC_MCE_PAYLOAD: return "OCL_INTEL_SUBGROUP_AVC_MCE_PAYLOAD";
    case BuiltinTypeKind::OCL_INTEL_SUBGROUP_AVC_IME_PAYLOAD: return "OCL_INTEL_SUBGROUP_AVC_IME_PAYLOAD";
    case BuiltinTypeKind::OCL_INTEL_SUBGROUP_AVC_REF_PAYLOAD: return "OCL_INTEL_SUBGROUP_AVC_REF_PAYLOAD";
    case BuiltinTypeKind::OCL_INTEL_SUBGROUP_AVC_SIC_PAYLOAD: return "OCL_INTEL_SUBGROUP_AVC_SIC_PAYLOAD";
    case BuiltinTypeKind::OCL_INTEL_SUBGROUP_AVC_MCE_RESULT: return "OCL_INTEL_SUBGROUP_AVC_MCE_RESULT";
    case BuiltinTypeKind::OCL_INTEL_SUBGROUP_AVC_IME_RESULT: return "OCL_INTEL_SUBGROUP_AVC_IME_RESULT";
    case BuiltinTypeKind::OCL_INTEL_SUBGROUP_AVC_REF_RESULT: return "OCL_INTEL_SUBGROUP_AVC_REF_RESULT";
    case BuiltinTypeKind::OCL_INTEL_SUBGROUP_AVC_SIC_RESULT: return "OCL_INTEL_SUBGROUP_AVC_SIC_RESULT";
    case BuiltinTypeKind::OCL_INTEL_SUBGROUP_AVC_IME_RESULT_SINGLE_REFERENCE_STREAMOUT: return "OCL_INTEL_SUBGROUP_AVC_IME_RESULT_SINGLE_REFERENCE_STREAMOUT";
    case BuiltinTypeKind::OCL_INTEL_SUBGROUP_AVC_IME_RESULT_DUAL_REFERENCE_STREAMOUT: return "OCL_INTEL_SUBGROUP_AVC_IME_RESULT_DUAL_REFERENCE_STREAMOUT";
    case BuiltinTypeKind::OCL_INTEL_SUBGROUP_AVC_IME_SINGLE_REFERENCE_STREAMIN: return "OCL_INTEL_SUBGROUP_AVC_IME_SINGLE_REFERENCE_STREAMIN";
    case BuiltinTypeKind::OCL_INTEL_SUBGROUP_AVC_IME_DUAL_REFERENCE_STREAMIN: return "OCL_INTEL_SUBGROUP_AVC_IME_DUAL_REFERENCE_STREAMIN";
    case BuiltinTypeKind::SVE_INT8: return "SVE_INT8";
    case BuiltinTypeKind::SVE_INT16: return "SVE_INT16";
    case BuiltinTypeKind::SVE_INT32: return "SVE_INT32";
    case BuiltinTypeKind::SVE_INT64: return "SVE_INT64";
    case BuiltinTypeKind::SVE_UINT8: return "SVE_UINT8";
    case BuiltinTypeKind::SVE_UINT16: return "SVE_UINT16";
    case BuiltinTypeKind::SVE_UINT32: return "SVE_UINT32";
    case BuiltinTypeKind::SVE_UINT64: return "SVE_UINT64";
    case BuiltinTypeKind::SVE_FLOAT16: return "SVE_FLOAT16";
    case BuiltinTypeKind::SVE_FLOAT32: return "SVE_FLOAT32";
    case BuiltinTypeKind::SVE_FLOAT64: return "SVE_FLOAT64";
    case BuiltinTypeKind::SVE_B_FLOAT16: return "SVE_B_FLOAT16";
    case BuiltinTypeKind::SVE_INT8X2: return "SVE_INT8X2";
    case BuiltinTypeKind::SVE_INT16X2: return "SVE_INT16X2";
    case BuiltinTypeKind::SVE_INT32X2: return "SVE_INT32X2";
    case BuiltinTypeKind::SVE_INT64X2: return "SVE_INT64X2";
    case BuiltinTypeKind::SVE_UINT8X2: return "SVE_UINT8X2";
    case BuiltinTypeKind::SVE_UINT16X2: return "SVE_UINT16X2";
    case BuiltinTypeKind::SVE_UINT32X2: return "SVE_UINT32X2";
    case BuiltinTypeKind::SVE_UINT64X2: return "SVE_UINT64X2";
    case BuiltinTypeKind::SVE_FLOAT16X2: return "SVE_FLOAT16X2";
    case BuiltinTypeKind::SVE_FLOAT32X2: return "SVE_FLOAT32X2";
    case BuiltinTypeKind::SVE_FLOAT64X2: return "SVE_FLOAT64X2";
    case BuiltinTypeKind::SVE_B_FLOAT16X2: return "SVE_B_FLOAT16X2";
    case BuiltinTypeKind::SVE_INT8X3: return "SVE_INT8X3";
    case BuiltinTypeKind::SVE_INT16X3: return "SVE_INT16X3";
    case BuiltinTypeKind::SVE_INT32X3: return "SVE_INT32X3";
    case BuiltinTypeKind::SVE_INT64X3: return "SVE_INT64X3";
    case BuiltinTypeKind::SVE_UINT8X3: return "SVE_UINT8X3";
    case BuiltinTypeKind::SVE_UINT16X3: return "SVE_UINT16X3";
    case BuiltinTypeKind::SVE_UINT32X3: return "SVE_UINT32X3";
    case BuiltinTypeKind::SVE_UINT64X3: return "SVE_UINT64X3";
    case BuiltinTypeKind::SVE_FLOAT16X3: return "SVE_FLOAT16X3";
    case BuiltinTypeKind::SVE_FLOAT32X3: return "SVE_FLOAT32X3";
    case BuiltinTypeKind::SVE_FLOAT64X3: return "SVE_FLOAT64X3";
    case BuiltinTypeKind::SVE_B_FLOAT16X3: return "SVE_B_FLOAT16X3";
    case BuiltinTypeKind::SVE_INT8X4: return "SVE_INT8X4";
    case BuiltinTypeKind::SVE_INT16X4: return "SVE_INT16X4";
    case BuiltinTypeKind::SVE_INT32X4: return "SVE_INT32X4";
    case BuiltinTypeKind::SVE_INT64X4: return "SVE_INT64X4";
    case BuiltinTypeKind::SVE_UINT8X4: return "SVE_UINT8X4";
    case BuiltinTypeKind::SVE_UINT16X4: return "SVE_UINT16X4";
    case BuiltinTypeKind::SVE_UINT32X4: return "SVE_UINT32X4";
    case BuiltinTypeKind::SVE_UINT64X4: return "SVE_UINT64X4";
    case BuiltinTypeKind::SVE_FLOAT16X4: return "SVE_FLOAT16X4";
    case BuiltinTypeKind::SVE_FLOAT32X4: return "SVE_FLOAT32X4";
    case BuiltinTypeKind::SVE_FLOAT64X4: return "SVE_FLOAT64X4";
    case BuiltinTypeKind::SVE_B_FLOAT16X4: return "SVE_B_FLOAT16X4";
    case BuiltinTypeKind::SVE_BOOLEAN: return "SVE_BOOLEAN";
    case BuiltinTypeKind::VECTOR_QUAD: return "VECTOR_QUAD";
    case BuiltinTypeKind::VECTOR_PAIR: return "VECTOR_PAIR";
    case BuiltinTypeKind::RVV_INT8MF8: return "RVV_INT8MF8";
    case BuiltinTypeKind::RVV_INT8MF4: return "RVV_INT8MF4";
    case BuiltinTypeKind::RVV_INT8MF2: return "RVV_INT8MF2";
    case BuiltinTypeKind::RVV_INT8M1: return "RVV_INT8M1";
    case BuiltinTypeKind::RVV_INT8M2: return "RVV_INT8M2";
    case BuiltinTypeKind::RVV_INT8M4: return "RVV_INT8M4";
    case BuiltinTypeKind::RVV_INT8M8: return "RVV_INT8M8";
    case BuiltinTypeKind::RVV_UINT8MF8: return "RVV_UINT8MF8";
    case BuiltinTypeKind::RVV_UINT8MF4: return "RVV_UINT8MF4";
    case BuiltinTypeKind::RVV_UINT8MF2: return "RVV_UINT8MF2";
    case BuiltinTypeKind::RVV_UINT8M1: return "RVV_UINT8M1";
    case BuiltinTypeKind::RVV_UINT8M2: return "RVV_UINT8M2";
    case BuiltinTypeKind::RVV_UINT8M4: return "RVV_UINT8M4";
    case BuiltinTypeKind::RVV_UINT8M8: return "RVV_UINT8M8";
    case BuiltinTypeKind::RVV_INT16MF4: return "RVV_INT16MF4";
    case BuiltinTypeKind::RVV_INT16MF2: return "RVV_INT16MF2";
    case BuiltinTypeKind::RVV_INT16M1: return "RVV_INT16M1";
    case BuiltinTypeKind::RVV_INT16M2: return "RVV_INT16M2";
    case BuiltinTypeKind::RVV_INT16M4: return "RVV_INT16M4";
    case BuiltinTypeKind::RVV_INT16M8: return "RVV_INT16M8";
    case BuiltinTypeKind::RVV_UINT16MF4: return "RVV_UINT16MF4";
    case BuiltinTypeKind::RVV_UINT16MF2: return "RVV_UINT16MF2";
    case BuiltinTypeKind::RVV_UINT16M1: return "RVV_UINT16M1";
    case BuiltinTypeKind::RVV_UINT16M2: return "RVV_UINT16M2";
    case BuiltinTypeKind::RVV_UINT16M4: return "RVV_UINT16M4";
    case BuiltinTypeKind::RVV_UINT16M8: return "RVV_UINT16M8";
    case BuiltinTypeKind::RVV_INT32MF2: return "RVV_INT32MF2";
    case BuiltinTypeKind::RVV_INT32M1: return "RVV_INT32M1";
    case BuiltinTypeKind::RVV_INT32M2: return "RVV_INT32M2";
    case BuiltinTypeKind::RVV_INT32M4: return "RVV_INT32M4";
    case BuiltinTypeKind::RVV_INT32M8: return "RVV_INT32M8";
    case BuiltinTypeKind::RVV_UINT32MF2: return "RVV_UINT32MF2";
    case BuiltinTypeKind::RVV_UINT32M1: return "RVV_UINT32M1";
    case BuiltinTypeKind::RVV_UINT32M2: return "RVV_UINT32M2";
    case BuiltinTypeKind::RVV_UINT32M4: return "RVV_UINT32M4";
    case BuiltinTypeKind::RVV_UINT32M8: return "RVV_UINT32M8";
    case BuiltinTypeKind::RVV_INT64M1: return "RVV_INT64M1";
    case BuiltinTypeKind::RVV_INT64M2: return "RVV_INT64M2";
    case BuiltinTypeKind::RVV_INT64M4: return "RVV_INT64M4";
    case BuiltinTypeKind::RVV_INT64M8: return "RVV_INT64M8";
    case BuiltinTypeKind::RVV_UINT64M1: return "RVV_UINT64M1";
    case BuiltinTypeKind::RVV_UINT64M2: return "RVV_UINT64M2";
    case BuiltinTypeKind::RVV_UINT64M4: return "RVV_UINT64M4";
    case BuiltinTypeKind::RVV_UINT64M8: return "RVV_UINT64M8";
    case BuiltinTypeKind::RVV_FLOAT16MF4: return "RVV_FLOAT16MF4";
    case BuiltinTypeKind::RVV_FLOAT16MF2: return "RVV_FLOAT16MF2";
    case BuiltinTypeKind::RVV_FLOAT16M1: return "RVV_FLOAT16M1";
    case BuiltinTypeKind::RVV_FLOAT16M2: return "RVV_FLOAT16M2";
    case BuiltinTypeKind::RVV_FLOAT16M4: return "RVV_FLOAT16M4";
    case BuiltinTypeKind::RVV_FLOAT16M8: return "RVV_FLOAT16M8";
    case BuiltinTypeKind::RVV_FLOAT32MF2: return "RVV_FLOAT32MF2";
    case BuiltinTypeKind::RVV_FLOAT32M1: return "RVV_FLOAT32M1";
    case BuiltinTypeKind::RVV_FLOAT32M2: return "RVV_FLOAT32M2";
    case BuiltinTypeKind::RVV_FLOAT32M4: return "RVV_FLOAT32M4";
    case BuiltinTypeKind::RVV_FLOAT32M8: return "RVV_FLOAT32M8";
    case BuiltinTypeKind::RVV_FLOAT64M1: return "RVV_FLOAT64M1";
    case BuiltinTypeKind::RVV_FLOAT64M2: return "RVV_FLOAT64M2";
    case BuiltinTypeKind::RVV_FLOAT64M4: return "RVV_FLOAT64M4";
    case BuiltinTypeKind::RVV_FLOAT64M8: return "RVV_FLOAT64M8";
    case BuiltinTypeKind::RVV_BOOL1: return "RVV_BOOL1";
    case BuiltinTypeKind::RVV_BOOL2: return "RVV_BOOL2";
    case BuiltinTypeKind::RVV_BOOL4: return "RVV_BOOL4";
    case BuiltinTypeKind::RVV_BOOL8: return "RVV_BOOL8";
    case BuiltinTypeKind::RVV_BOOL16: return "RVV_BOOL16";
    case BuiltinTypeKind::RVV_BOOL32: return "RVV_BOOL32";
    case BuiltinTypeKind::RVV_BOOL64: return "RVV_BOOL64";
    case BuiltinTypeKind::VOID: return "VOID";
    case BuiltinTypeKind::BOOLEAN: return "BOOLEAN";
    case BuiltinTypeKind::CHARACTER_U: return "CHARACTER_U";
    case BuiltinTypeKind::U_CHAR: return "U_CHAR";
    case BuiltinTypeKind::W_CHAR_U: return "W_CHAR_U";
    case BuiltinTypeKind::CHAR8: return "CHAR8";
    case BuiltinTypeKind::CHAR16: return "CHAR16";
    case BuiltinTypeKind::CHAR32: return "CHAR32";
    case BuiltinTypeKind::U_SHORT: return "U_SHORT";
    case BuiltinTypeKind::U_INT: return "U_INT";
    case BuiltinTypeKind::U_LONG: return "U_LONG";
    case BuiltinTypeKind::U_LONG_LONG: return "U_LONG_LONG";
    case BuiltinTypeKind::U_INT128: return "U_INT128";
    case BuiltinTypeKind::CHARACTER_S: return "CHARACTER_S";
    case BuiltinTypeKind::S_CHAR: return "S_CHAR";
    case BuiltinTypeKind::W_CHAR_S: return "W_CHAR_S";
    case BuiltinTypeKind::SHORT: return "SHORT";
    case BuiltinTypeKind::INT: return "INT";
    case BuiltinTypeKind::LONG: return "LONG";
    case BuiltinTypeKind::LONG_LONG: return "LONG_LONG";
    case BuiltinTypeKind::INT128: return "INT128";
    case BuiltinTypeKind::SHORT_ACCUM: return "SHORT_ACCUM";
    case BuiltinTypeKind::ACCUM: return "ACCUM";
    case BuiltinTypeKind::LONG_ACCUM: return "LONG_ACCUM";
    case BuiltinTypeKind::U_SHORT_ACCUM: return "U_SHORT_ACCUM";
    case BuiltinTypeKind::U_ACCUM: return "U_ACCUM";
    case BuiltinTypeKind::U_LONG_ACCUM: return "U_LONG_ACCUM";
    case BuiltinTypeKind::SHORT_FRACT: return "SHORT_FRACT";
    case BuiltinTypeKind::FRACT: return "FRACT";
    case BuiltinTypeKind::LONG_FRACT: return "LONG_FRACT";
    case BuiltinTypeKind::U_SHORT_FRACT: return "U_SHORT_FRACT";
    case BuiltinTypeKind::U_FRACT: return "U_FRACT";
    case BuiltinTypeKind::U_LONG_FRACT: return "U_LONG_FRACT";
    case BuiltinTypeKind::SAT_SHORT_ACCUM: return "SAT_SHORT_ACCUM";
    case BuiltinTypeKind::SAT_ACCUM: return "SAT_ACCUM";
    case BuiltinTypeKind::SAT_LONG_ACCUM: return "SAT_LONG_ACCUM";
    case BuiltinTypeKind::SAT_U_SHORT_ACCUM: return "SAT_U_SHORT_ACCUM";
    case BuiltinTypeKind::SAT_U_ACCUM: return "SAT_U_ACCUM";
    case BuiltinTypeKind::SAT_U_LONG_ACCUM: return "SAT_U_LONG_ACCUM";
    case BuiltinTypeKind::SAT_SHORT_FRACT: return "SAT_SHORT_FRACT";
    case BuiltinTypeKind::SAT_FRACT: return "SAT_FRACT";
    case BuiltinTypeKind::SAT_LONG_FRACT: return "SAT_LONG_FRACT";
    case BuiltinTypeKind::SAT_U_SHORT_FRACT: return "SAT_U_SHORT_FRACT";
    case BuiltinTypeKind::SAT_U_FRACT: return "SAT_U_FRACT";
    case BuiltinTypeKind::SAT_U_LONG_FRACT: return "SAT_U_LONG_FRACT";
    case BuiltinTypeKind::HALF: return "HALF";
    case BuiltinTypeKind::FLOAT: return "FLOAT";
    case BuiltinTypeKind::DOUBLE: return "DOUBLE";
    case BuiltinTypeKind::LONG_DOUBLE: return "LONG_DOUBLE";
    case BuiltinTypeKind::FLOAT16: return "FLOAT16";
    case BuiltinTypeKind::B_FLOAT16: return "B_FLOAT16";
    case BuiltinTypeKind::FLOAT128: return "FLOAT128";
    case BuiltinTypeKind::IBM128: return "IBM128";
    case BuiltinTypeKind::NULL_POINTER: return "NULL_POINTER";
    case BuiltinTypeKind::OBJ_C_ID: return "OBJ_C_ID";
    case BuiltinTypeKind::OBJ_C_CLASS: return "OBJ_C_CLASS";
    case BuiltinTypeKind::OBJ_C_SEL: return "OBJ_C_SEL";
    case BuiltinTypeKind::OCL_SAMPLER: return "OCL_SAMPLER";
    case BuiltinTypeKind::OCL_EVENT: return "OCL_EVENT";
    case BuiltinTypeKind::OCL_CLK_EVENT: return "OCL_CLK_EVENT";
    case BuiltinTypeKind::OCL_QUEUE: return "OCL_QUEUE";
    case BuiltinTypeKind::OCL_RESERVE_ID: return "OCL_RESERVE_ID";
    case BuiltinTypeKind::DEPENDENT: return "DEPENDENT";
    case BuiltinTypeKind::OVERLOAD: return "OVERLOAD";
    case BuiltinTypeKind::BOUND_MEMBER: return "BOUND_MEMBER";
    case BuiltinTypeKind::PSEUDO_OBJECT: return "PSEUDO_OBJECT";
    case BuiltinTypeKind::UNKNOWN_ANY: return "UNKNOWN_ANY";
    case BuiltinTypeKind::BUILTIN_FN: return "BUILTIN_FN";
    case BuiltinTypeKind::ARC_UNBRIDGED_CAST: return "ARC_UNBRIDGED_CAST";
    case BuiltinTypeKind::INCOMPLETE_MATRIX_INDEX: return "INCOMPLETE_MATRIX_INDEX";
    case BuiltinTypeKind::OMP_ARRAY_SECTION: return "OMP_ARRAY_SECTION";
    case BuiltinTypeKind::OMP_ARRAY_SHAPING: return "OMP_ARRAY_SHAPING";
    case BuiltinTypeKind::OMP_ITERATOR: return "OMP_ITERATOR";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CDeclAttrSpelling e) {
  switch (e) {
    case CDeclAttrSpelling::GNU_CDECL: return "GNU_CDECL";
    case CDeclAttrSpelling::CXX11_GNU_CDECL: return "CXX11_GNU_CDECL";
    case CDeclAttrSpelling::C2X_GNU_CDECL: return "C2X_GNU_CDECL";
    case CDeclAttrSpelling::KEYWORD_CDECL: return "KEYWORD_CDECL";
    case CDeclAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CFAuditedTransferAttrSpelling e) {
  switch (e) {
    case CFAuditedTransferAttrSpelling::GNU_CF_AUDITED_TRANSFER: return "GNU_CF_AUDITED_TRANSFER";
    case CFAuditedTransferAttrSpelling::CXX11_CLANG_CF_AUDITED_TRANSFER: return "CXX11_CLANG_CF_AUDITED_TRANSFER";
    case CFAuditedTransferAttrSpelling::C2X_CLANG_CF_AUDITED_TRANSFER: return "C2X_CLANG_CF_AUDITED_TRANSFER";
    case CFAuditedTransferAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CFConsumedAttrSpelling e) {
  switch (e) {
    case CFConsumedAttrSpelling::GNU_CF_CONSUMED: return "GNU_CF_CONSUMED";
    case CFConsumedAttrSpelling::CXX11_CLANG_CF_CONSUMED: return "CXX11_CLANG_CF_CONSUMED";
    case CFConsumedAttrSpelling::C2X_CLANG_CF_CONSUMED: return "C2X_CLANG_CF_CONSUMED";
    case CFConsumedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CFGuardAttrGuardArg e) {
  switch (e) {
    case CFGuardAttrGuardArg::NOCF: return "NOCF";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CFICanonicalJumpTableAttrSpelling e) {
  switch (e) {
    case CFICanonicalJumpTableAttrSpelling::GNU_CFI_CANONICAL_JUMP_TABLE: return "GNU_CFI_CANONICAL_JUMP_TABLE";
    case CFICanonicalJumpTableAttrSpelling::CXX11_CLANG_CFI_CANONICAL_JUMP_TABLE: return "CXX11_CLANG_CFI_CANONICAL_JUMP_TABLE";
    case CFICanonicalJumpTableAttrSpelling::C2X_CLANG_CFI_CANONICAL_JUMP_TABLE: return "C2X_CLANG_CFI_CANONICAL_JUMP_TABLE";
    case CFICanonicalJumpTableAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CFReturnsNotRetainedAttrSpelling e) {
  switch (e) {
    case CFReturnsNotRetainedAttrSpelling::GNU_CF_RETURNS_NOT_RETAINED: return "GNU_CF_RETURNS_NOT_RETAINED";
    case CFReturnsNotRetainedAttrSpelling::CXX11_CLANG_CF_RETURNS_NOT_RETAINED: return "CXX11_CLANG_CF_RETURNS_NOT_RETAINED";
    case CFReturnsNotRetainedAttrSpelling::C2X_CLANG_CF_RETURNS_NOT_RETAINED: return "C2X_CLANG_CF_RETURNS_NOT_RETAINED";
    case CFReturnsNotRetainedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CFReturnsRetainedAttrSpelling e) {
  switch (e) {
    case CFReturnsRetainedAttrSpelling::GNU_CF_RETURNS_RETAINED: return "GNU_CF_RETURNS_RETAINED";
    case CFReturnsRetainedAttrSpelling::CXX11_CLANG_CF_RETURNS_RETAINED: return "CXX11_CLANG_CF_RETURNS_RETAINED";
    case CFReturnsRetainedAttrSpelling::C2X_CLANG_CF_RETURNS_RETAINED: return "C2X_CLANG_CF_RETURNS_RETAINED";
    case CFReturnsRetainedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CFUnknownTransferAttrSpelling e) {
  switch (e) {
    case CFUnknownTransferAttrSpelling::GNU_CF_UNKNOWN_TRANSFER: return "GNU_CF_UNKNOWN_TRANSFER";
    case CFUnknownTransferAttrSpelling::CXX11_CLANG_CF_UNKNOWN_TRANSFER: return "CXX11_CLANG_CF_UNKNOWN_TRANSFER";
    case CFUnknownTransferAttrSpelling::C2X_CLANG_CF_UNKNOWN_TRANSFER: return "C2X_CLANG_CF_UNKNOWN_TRANSFER";
    case CFUnknownTransferAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CPUDispatchAttrSpelling e) {
  switch (e) {
    case CPUDispatchAttrSpelling::GNU_CPU_DISPATCH: return "GNU_CPU_DISPATCH";
    case CPUDispatchAttrSpelling::CXX11_CLANG_CPU_DISPATCH: return "CXX11_CLANG_CPU_DISPATCH";
    case CPUDispatchAttrSpelling::C2X_CLANG_CPU_DISPATCH: return "C2X_CLANG_CPU_DISPATCH";
    case CPUDispatchAttrSpelling::DECLSPEC_CPU_DISPATCH: return "DECLSPEC_CPU_DISPATCH";
    case CPUDispatchAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CPUSpecificAttrSpelling e) {
  switch (e) {
    case CPUSpecificAttrSpelling::GNU_CPU_SPECIFIC: return "GNU_CPU_SPECIFIC";
    case CPUSpecificAttrSpelling::CXX11_CLANG_CPU_SPECIFIC: return "CXX11_CLANG_CPU_SPECIFIC";
    case CPUSpecificAttrSpelling::C2X_CLANG_CPU_SPECIFIC: return "C2X_CLANG_CPU_SPECIFIC";
    case CPUSpecificAttrSpelling::DECLSPEC_CPU_SPECIFIC: return "DECLSPEC_CPU_SPECIFIC";
    case CPUSpecificAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CUDAConstantAttrSpelling e) {
  switch (e) {
    case CUDAConstantAttrSpelling::GNU_CONSTANT: return "GNU_CONSTANT";
    case CUDAConstantAttrSpelling::DECLSPEC_CONSTANT: return "DECLSPEC_CONSTANT";
    case CUDAConstantAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CUDADeviceAttrSpelling e) {
  switch (e) {
    case CUDADeviceAttrSpelling::GNU_DEVICE: return "GNU_DEVICE";
    case CUDADeviceAttrSpelling::DECLSPEC_DEVICE: return "DECLSPEC_DEVICE";
    case CUDADeviceAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CUDADeviceBuiltinSurfaceTypeAttrSpelling e) {
  switch (e) {
    case CUDADeviceBuiltinSurfaceTypeAttrSpelling::GNU_DEVICE_BUILTIN_SURFACE_TYPE: return "GNU_DEVICE_BUILTIN_SURFACE_TYPE";
    case CUDADeviceBuiltinSurfaceTypeAttrSpelling::DECLSPEC_DEVICE_BUILTIN_SURFACE_TYPE: return "DECLSPEC_DEVICE_BUILTIN_SURFACE_TYPE";
    case CUDADeviceBuiltinSurfaceTypeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CUDADeviceBuiltinTextureTypeAttrSpelling e) {
  switch (e) {
    case CUDADeviceBuiltinTextureTypeAttrSpelling::GNU_DEVICE_BUILTIN_TEXTURE_TYPE: return "GNU_DEVICE_BUILTIN_TEXTURE_TYPE";
    case CUDADeviceBuiltinTextureTypeAttrSpelling::DECLSPEC_DEVICE_BUILTIN_TEXTURE_TYPE: return "DECLSPEC_DEVICE_BUILTIN_TEXTURE_TYPE";
    case CUDADeviceBuiltinTextureTypeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CUDAGlobalAttrSpelling e) {
  switch (e) {
    case CUDAGlobalAttrSpelling::GNU_GLOBAL: return "GNU_GLOBAL";
    case CUDAGlobalAttrSpelling::DECLSPEC_GLOBAL: return "DECLSPEC_GLOBAL";
    case CUDAGlobalAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CUDAHostAttrSpelling e) {
  switch (e) {
    case CUDAHostAttrSpelling::GNU_HOST: return "GNU_HOST";
    case CUDAHostAttrSpelling::DECLSPEC_HOST: return "DECLSPEC_HOST";
    case CUDAHostAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CUDALaunchBoundsAttrSpelling e) {
  switch (e) {
    case CUDALaunchBoundsAttrSpelling::GNU_LAUNCH_BOUNDS: return "GNU_LAUNCH_BOUNDS";
    case CUDALaunchBoundsAttrSpelling::DECLSPEC_LAUNCH_BOUNDS: return "DECLSPEC_LAUNCH_BOUNDS";
    case CUDALaunchBoundsAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CUDASharedAttrSpelling e) {
  switch (e) {
    case CUDASharedAttrSpelling::GNU_SHARED: return "GNU_SHARED";
    case CUDASharedAttrSpelling::DECLSPEC_SHARED: return "DECLSPEC_SHARED";
    case CUDASharedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CXXConstructExprConstructionKind e) {
  switch (e) {
    case CXXConstructExprConstructionKind::COMPLETE: return "COMPLETE";
    case CXXConstructExprConstructionKind::NON_VIRTUAL_BASE: return "NON_VIRTUAL_BASE";
    case CXXConstructExprConstructionKind::VIRTUAL_BASE: return "VIRTUAL_BASE";
    case CXXConstructExprConstructionKind::DELEGATING: return "DELEGATING";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CXXNewExprInitializationStyle e) {
  switch (e) {
    case CXXNewExprInitializationStyle::NO_INITIALIZER: return "NO_INITIALIZER";
    case CXXNewExprInitializationStyle::CALL_INITIALIZER: return "CALL_INITIALIZER";
    case CXXNewExprInitializationStyle::LIST_INITIALIZER: return "LIST_INITIALIZER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CallExprADLCallKind e) {
  switch (e) {
    case CallExprADLCallKind::NOT_ADL: return "NOT_ADL";
    case CallExprADLCallKind::USES_ADL: return "USES_ADL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CallableWhenAttrConsumedState e) {
  switch (e) {
    case CallableWhenAttrConsumedState::UNKNOWN: return "UNKNOWN";
    case CallableWhenAttrConsumedState::CONSUMED: return "CONSUMED";
    case CallableWhenAttrConsumedState::UNCONSUMED: return "UNCONSUMED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CallableWhenAttrSpelling e) {
  switch (e) {
    case CallableWhenAttrSpelling::GNU_CALLABLE_WHEN: return "GNU_CALLABLE_WHEN";
    case CallableWhenAttrSpelling::CXX11_CLANG_CALLABLE_WHEN: return "CXX11_CLANG_CALLABLE_WHEN";
    case CallableWhenAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CallbackAttrSpelling e) {
  switch (e) {
    case CallbackAttrSpelling::GNU_CALLBACK: return "GNU_CALLBACK";
    case CallbackAttrSpelling::CXX11_CLANG_CALLBACK: return "CXX11_CLANG_CALLBACK";
    case CallbackAttrSpelling::C2X_CLANG_CALLBACK: return "C2X_CLANG_CALLBACK";
    case CallbackAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CalledOnceAttrSpelling e) {
  switch (e) {
    case CalledOnceAttrSpelling::GNU_CALLED_ONCE: return "GNU_CALLED_ONCE";
    case CalledOnceAttrSpelling::CXX11_CLANG_CALLED_ONCE: return "CXX11_CLANG_CALLED_ONCE";
    case CalledOnceAttrSpelling::C2X_CLANG_CALLED_ONCE: return "C2X_CLANG_CALLED_ONCE";
    case CalledOnceAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CapabilityAttrSpelling e) {
  switch (e) {
    case CapabilityAttrSpelling::GNU_CAPABILITY: return "GNU_CAPABILITY";
    case CapabilityAttrSpelling::CXX11_CLANG_CAPABILITY: return "CXX11_CLANG_CAPABILITY";
    case CapabilityAttrSpelling::GNU_SHARED_CAPABILITY: return "GNU_SHARED_CAPABILITY";
    case CapabilityAttrSpelling::CXX11_CLANG_SHARED_CAPABILITY: return "CXX11_CLANG_SHARED_CAPABILITY";
    case CapabilityAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CapturedStmtVariableCaptureKind e) {
  switch (e) {
    case CapturedStmtVariableCaptureKind::THIS: return "THIS";
    case CapturedStmtVariableCaptureKind::BY_REFERENCE: return "BY_REFERENCE";
    case CapturedStmtVariableCaptureKind::BY_COPY: return "BY_COPY";
    case CapturedStmtVariableCaptureKind::VLA_TYPE: return "VLA_TYPE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CarriesDependencyAttrSpelling e) {
  switch (e) {
    case CarriesDependencyAttrSpelling::GNU_CARRIES_DEPENDENCY: return "GNU_CARRIES_DEPENDENCY";
    case CarriesDependencyAttrSpelling::CXX11_CARRIES_DEPENDENCY: return "CXX11_CARRIES_DEPENDENCY";
    case CarriesDependencyAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CharacterLiteralCharacterKind e) {
  switch (e) {
    case CharacterLiteralCharacterKind::ASCII: return "ASCII";
    case CharacterLiteralCharacterKind::WIDE: return "WIDE";
    case CharacterLiteralCharacterKind::UTF8: return "UTF8";
    case CharacterLiteralCharacterKind::UTF16: return "UTF16";
    case CharacterLiteralCharacterKind::UTF32: return "UTF32";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CleanupAttrSpelling e) {
  switch (e) {
    case CleanupAttrSpelling::GNU_CLEANUP: return "GNU_CLEANUP";
    case CleanupAttrSpelling::CXX11_GNU_CLEANUP: return "CXX11_GNU_CLEANUP";
    case CleanupAttrSpelling::C2X_GNU_CLEANUP: return "C2X_GNU_CLEANUP";
    case CleanupAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ColdAttrSpelling e) {
  switch (e) {
    case ColdAttrSpelling::GNU_COLD: return "GNU_COLD";
    case ColdAttrSpelling::CXX11_GNU_COLD: return "CXX11_GNU_COLD";
    case ColdAttrSpelling::C2X_GNU_COLD: return "C2X_GNU_COLD";
    case ColdAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CommonAttrSpelling e) {
  switch (e) {
    case CommonAttrSpelling::GNU_COMMON: return "GNU_COMMON";
    case CommonAttrSpelling::CXX11_GNU_COMMON: return "CXX11_GNU_COMMON";
    case CommonAttrSpelling::C2X_GNU_COMMON: return "C2X_GNU_COMMON";
    case CommonAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ConstAttrSpelling e) {
  switch (e) {
    case ConstAttrSpelling::GNU_CONST: return "GNU_CONST";
    case ConstAttrSpelling::CXX11_GNU_CONST: return "CXX11_GNU_CONST";
    case ConstAttrSpelling::C2X_GNU_CONST: return "C2X_GNU_CONST";
    case ConstAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ConstInitAttrSpelling e) {
  switch (e) {
    case ConstInitAttrSpelling::KEYWORD_CONSTINIT: return "KEYWORD_CONSTINIT";
    case ConstInitAttrSpelling::GNU_REQUIRE_CONSTANT_INITIALIZATION: return "GNU_REQUIRE_CONSTANT_INITIALIZATION";
    case ConstInitAttrSpelling::CXX11_CLANG_REQUIRE_CONSTANT_INITIALIZATION: return "CXX11_CLANG_REQUIRE_CONSTANT_INITIALIZATION";
    case ConstInitAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ConstantExprResultStorageKind e) {
  switch (e) {
    case ConstantExprResultStorageKind::NONE: return "NONE";
    case ConstantExprResultStorageKind::INT64: return "INT64";
    case ConstantExprResultStorageKind::AP_VALUE: return "AP_VALUE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ConstructorAttrSpelling e) {
  switch (e) {
    case ConstructorAttrSpelling::GNU_CONSTRUCTOR: return "GNU_CONSTRUCTOR";
    case ConstructorAttrSpelling::CXX11_GNU_CONSTRUCTOR: return "CXX11_GNU_CONSTRUCTOR";
    case ConstructorAttrSpelling::C2X_GNU_CONSTRUCTOR: return "C2X_GNU_CONSTRUCTOR";
    case ConstructorAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ConsumableAttrConsumedState e) {
  switch (e) {
    case ConsumableAttrConsumedState::UNKNOWN: return "UNKNOWN";
    case ConsumableAttrConsumedState::CONSUMED: return "CONSUMED";
    case ConsumableAttrConsumedState::UNCONSUMED: return "UNCONSUMED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ConsumableAttrSpelling e) {
  switch (e) {
    case ConsumableAttrSpelling::GNU_CONSUMABLE: return "GNU_CONSUMABLE";
    case ConsumableAttrSpelling::CXX11_CLANG_CONSUMABLE: return "CXX11_CLANG_CONSUMABLE";
    case ConsumableAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ConsumableAutoCastAttrSpelling e) {
  switch (e) {
    case ConsumableAutoCastAttrSpelling::GNU_CONSUMABLE_AUTO_CAST_STATE: return "GNU_CONSUMABLE_AUTO_CAST_STATE";
    case ConsumableAutoCastAttrSpelling::CXX11_CLANG_CONSUMABLE_AUTO_CAST_STATE: return "CXX11_CLANG_CONSUMABLE_AUTO_CAST_STATE";
    case ConsumableAutoCastAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ConsumableSetOnReadAttrSpelling e) {
  switch (e) {
    case ConsumableSetOnReadAttrSpelling::GNU_CONSUMABLE_STATE_ON_READ: return "GNU_CONSUMABLE_STATE_ON_READ";
    case ConsumableSetOnReadAttrSpelling::CXX11_CLANG_CONSUMABLE_STATE_ON_READ: return "CXX11_CLANG_CONSUMABLE_STATE_ON_READ";
    case ConsumableSetOnReadAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ConvergentAttrSpelling e) {
  switch (e) {
    case ConvergentAttrSpelling::GNU_CONVERGENT: return "GNU_CONVERGENT";
    case ConvergentAttrSpelling::CXX11_CLANG_CONVERGENT: return "CXX11_CLANG_CONVERGENT";
    case ConvergentAttrSpelling::C2X_CLANG_CONVERGENT: return "C2X_CLANG_CONVERGENT";
    case ConvergentAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DLLExportAttrSpelling e) {
  switch (e) {
    case DLLExportAttrSpelling::DECLSPEC_DLLEXPORT: return "DECLSPEC_DLLEXPORT";
    case DLLExportAttrSpelling::GNU_DLLEXPORT: return "GNU_DLLEXPORT";
    case DLLExportAttrSpelling::CXX11_GNU_DLLEXPORT: return "CXX11_GNU_DLLEXPORT";
    case DLLExportAttrSpelling::C2X_GNU_DLLEXPORT: return "C2X_GNU_DLLEXPORT";
    case DLLExportAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DLLImportAttrSpelling e) {
  switch (e) {
    case DLLImportAttrSpelling::DECLSPEC_DLLIMPORT: return "DECLSPEC_DLLIMPORT";
    case DLLImportAttrSpelling::GNU_DLLIMPORT: return "GNU_DLLIMPORT";
    case DLLImportAttrSpelling::CXX11_GNU_DLLIMPORT: return "CXX11_GNU_DLLIMPORT";
    case DLLImportAttrSpelling::C2X_GNU_DLLIMPORT: return "C2X_GNU_DLLIMPORT";
    case DLLImportAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DeclFriendObjectKind e) {
  switch (e) {
    case DeclFriendObjectKind::NONE: return "NONE";
    case DeclFriendObjectKind::DECLARED: return "DECLARED";
    case DeclFriendObjectKind::UNDECLARED: return "UNDECLARED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DeclIdentifierNamespace e) {
  switch (e) {
    case DeclIdentifierNamespace::LABEL: return "LABEL";
    case DeclIdentifierNamespace::TAG: return "TAG";
    case DeclIdentifierNamespace::TYPE: return "TYPE";
    case DeclIdentifierNamespace::MEMBER: return "MEMBER";
    case DeclIdentifierNamespace::NAMESPACE: return "NAMESPACE";
    case DeclIdentifierNamespace::ORDINARY: return "ORDINARY";
    case DeclIdentifierNamespace::OBJ_C_PROTOCOL: return "OBJ_C_PROTOCOL";
    case DeclIdentifierNamespace::ORDINARY_FRIEND: return "ORDINARY_FRIEND";
    case DeclIdentifierNamespace::TAG_FRIEND: return "TAG_FRIEND";
    case DeclIdentifierNamespace::USING: return "USING";
    case DeclIdentifierNamespace::NON_MEMBER_OPERATOR: return "NON_MEMBER_OPERATOR";
    case DeclIdentifierNamespace::LOCAL_EXTERN: return "LOCAL_EXTERN";
    case DeclIdentifierNamespace::OMP_REDUCTION: return "OMP_REDUCTION";
    case DeclIdentifierNamespace::OMP_MAPPER: return "OMP_MAPPER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DeclModuleOwnershipKind e) {
  switch (e) {
    case DeclModuleOwnershipKind::UNOWNED: return "UNOWNED";
    case DeclModuleOwnershipKind::VISIBLE: return "VISIBLE";
    case DeclModuleOwnershipKind::VISIBLE_WHEN_IMPORTED: return "VISIBLE_WHEN_IMPORTED";
    case DeclModuleOwnershipKind::MODULE_PRIVATE: return "MODULE_PRIVATE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DeclObjCDeclQualifier e) {
  switch (e) {
    case DeclObjCDeclQualifier::NONE: return "NONE";
    case DeclObjCDeclQualifier::IN: return "IN";
    case DeclObjCDeclQualifier::INOUT: return "INOUT";
    case DeclObjCDeclQualifier::OUT: return "OUT";
    case DeclObjCDeclQualifier::BYCOPY: return "BYCOPY";
    case DeclObjCDeclQualifier::BYREF: return "BYREF";
    case DeclObjCDeclQualifier::ONEWAY: return "ONEWAY";
    case DeclObjCDeclQualifier::CS_NULLABILITY: return "CS_NULLABILITY";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DeprecatedAttrSpelling e) {
  switch (e) {
    case DeprecatedAttrSpelling::GNU_DEPRECATED: return "GNU_DEPRECATED";
    case DeprecatedAttrSpelling::CXX11_GNU_DEPRECATED: return "CXX11_GNU_DEPRECATED";
    case DeprecatedAttrSpelling::C2X_GNU_DEPRECATED: return "C2X_GNU_DEPRECATED";
    case DeprecatedAttrSpelling::DECLSPEC_DEPRECATED: return "DECLSPEC_DEPRECATED";
    case DeprecatedAttrSpelling::CXX11_DEPRECATED: return "CXX11_DEPRECATED";
    case DeprecatedAttrSpelling::C2X_DEPRECATED: return "C2X_DEPRECATED";
    case DeprecatedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DestructorAttrSpelling e) {
  switch (e) {
    case DestructorAttrSpelling::GNU_DESTRUCTOR: return "GNU_DESTRUCTOR";
    case DestructorAttrSpelling::CXX11_GNU_DESTRUCTOR: return "CXX11_GNU_DESTRUCTOR";
    case DestructorAttrSpelling::C2X_GNU_DESTRUCTOR: return "C2X_GNU_DESTRUCTOR";
    case DestructorAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DiagnoseAsBuiltinAttrSpelling e) {
  switch (e) {
    case DiagnoseAsBuiltinAttrSpelling::GNU_DIAGNOSE_AS_BUILTIN: return "GNU_DIAGNOSE_AS_BUILTIN";
    case DiagnoseAsBuiltinAttrSpelling::CXX11_CLANG_DIAGNOSE_AS_BUILTIN: return "CXX11_CLANG_DIAGNOSE_AS_BUILTIN";
    case DiagnoseAsBuiltinAttrSpelling::C2X_CLANG_DIAGNOSE_AS_BUILTIN: return "C2X_CLANG_DIAGNOSE_AS_BUILTIN";
    case DiagnoseAsBuiltinAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DiagnoseIfAttrDiagnosticType e) {
  switch (e) {
    case DiagnoseIfAttrDiagnosticType::ERROR: return "ERROR";
    case DiagnoseIfAttrDiagnosticType::WARNING: return "WARNING";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DisableSanitizerInstrumentationAttrSpelling e) {
  switch (e) {
    case DisableSanitizerInstrumentationAttrSpelling::GNU_DISABLE_SANITIZER_INSTRUMENTATION: return "GNU_DISABLE_SANITIZER_INSTRUMENTATION";
    case DisableSanitizerInstrumentationAttrSpelling::CXX11_CLANG_DISABLE_SANITIZER_INSTRUMENTATION: return "CXX11_CLANG_DISABLE_SANITIZER_INSTRUMENTATION";
    case DisableSanitizerInstrumentationAttrSpelling::C2X_CLANG_DISABLE_SANITIZER_INSTRUMENTATION: return "C2X_CLANG_DISABLE_SANITIZER_INSTRUMENTATION";
    case DisableSanitizerInstrumentationAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DisableTailCallsAttrSpelling e) {
  switch (e) {
    case DisableTailCallsAttrSpelling::GNU_DISABLE_TAIL_CALLS: return "GNU_DISABLE_TAIL_CALLS";
    case DisableTailCallsAttrSpelling::CXX11_CLANG_DISABLE_TAIL_CALLS: return "CXX11_CLANG_DISABLE_TAIL_CALLS";
    case DisableTailCallsAttrSpelling::C2X_CLANG_DISABLE_TAIL_CALLS: return "C2X_CLANG_DISABLE_TAIL_CALLS";
    case DisableTailCallsAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(EnforceTCBAttrSpelling e) {
  switch (e) {
    case EnforceTCBAttrSpelling::GNU_ENFORCE_TCB: return "GNU_ENFORCE_TCB";
    case EnforceTCBAttrSpelling::CXX11_CLANG_ENFORCE_TCB: return "CXX11_CLANG_ENFORCE_TCB";
    case EnforceTCBAttrSpelling::C2X_CLANG_ENFORCE_TCB: return "C2X_CLANG_ENFORCE_TCB";
    case EnforceTCBAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(EnforceTCBLeafAttrSpelling e) {
  switch (e) {
    case EnforceTCBLeafAttrSpelling::GNU_ENFORCE_TCB_LEAF: return "GNU_ENFORCE_TCB_LEAF";
    case EnforceTCBLeafAttrSpelling::CXX11_CLANG_ENFORCE_TCB_LEAF: return "CXX11_CLANG_ENFORCE_TCB_LEAF";
    case EnforceTCBLeafAttrSpelling::C2X_CLANG_ENFORCE_TCB_LEAF: return "C2X_CLANG_ENFORCE_TCB_LEAF";
    case EnforceTCBLeafAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(EnumExtensibilityAttrKind e) {
  switch (e) {
    case EnumExtensibilityAttrKind::CLOSED: return "CLOSED";
    case EnumExtensibilityAttrKind::OPEN: return "OPEN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(EnumExtensibilityAttrSpelling e) {
  switch (e) {
    case EnumExtensibilityAttrSpelling::GNU_ENUM_EXTENSIBILITY: return "GNU_ENUM_EXTENSIBILITY";
    case EnumExtensibilityAttrSpelling::CXX11_CLANG_ENUM_EXTENSIBILITY: return "CXX11_CLANG_ENUM_EXTENSIBILITY";
    case EnumExtensibilityAttrSpelling::C2X_CLANG_ENUM_EXTENSIBILITY: return "C2X_CLANG_ENUM_EXTENSIBILITY";
    case EnumExtensibilityAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ErrorAttrSpelling e) {
  switch (e) {
    case ErrorAttrSpelling::GNU_ERROR: return "GNU_ERROR";
    case ErrorAttrSpelling::CXX11_GNU_ERROR: return "CXX11_GNU_ERROR";
    case ErrorAttrSpelling::C2X_GNU_ERROR: return "C2X_GNU_ERROR";
    case ErrorAttrSpelling::GNU_WARNING: return "GNU_WARNING";
    case ErrorAttrSpelling::CXX11_GNU_WARNING: return "CXX11_GNU_WARNING";
    case ErrorAttrSpelling::C2X_GNU_WARNING: return "C2X_GNU_WARNING";
    case ErrorAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExcludeFromExplicitInstantiationAttrSpelling e) {
  switch (e) {
    case ExcludeFromExplicitInstantiationAttrSpelling::GNU_EXCLUDE_FROM_EXPLICIT_INSTANTIATION: return "GNU_EXCLUDE_FROM_EXPLICIT_INSTANTIATION";
    case ExcludeFromExplicitInstantiationAttrSpelling::CXX11_CLANG_EXCLUDE_FROM_EXPLICIT_INSTANTIATION: return "CXX11_CLANG_EXCLUDE_FROM_EXPLICIT_INSTANTIATION";
    case ExcludeFromExplicitInstantiationAttrSpelling::C2X_CLANG_EXCLUDE_FROM_EXPLICIT_INSTANTIATION: return "C2X_CLANG_EXCLUDE_FROM_EXPLICIT_INSTANTIATION";
    case ExcludeFromExplicitInstantiationAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExprConstantExprKind e) {
  switch (e) {
    case ExprConstantExprKind::NORMAL: return "NORMAL";
    case ExprConstantExprKind::NON_CLASS_TEMPLATE_ARGUMENT: return "NON_CLASS_TEMPLATE_ARGUMENT";
    case ExprConstantExprKind::CLASS_TEMPLATE_ARGUMENT: return "CLASS_TEMPLATE_ARGUMENT";
    case ExprConstantExprKind::IMMEDIATE_INVOCATION: return "IMMEDIATE_INVOCATION";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExprLValueClassification e) {
  switch (e) {
    case ExprLValueClassification::VALID: return "VALID";
    case ExprLValueClassification::NOT_OBJECT_TYPE: return "NOT_OBJECT_TYPE";
    case ExprLValueClassification::INCOMPLETE_VOID_TYPE: return "INCOMPLETE_VOID_TYPE";
    case ExprLValueClassification::DUPLICATE_VECTOR_COMPONENTS: return "DUPLICATE_VECTOR_COMPONENTS";
    case ExprLValueClassification::INVALID_EXPRESSION: return "INVALID_EXPRESSION";
    case ExprLValueClassification::INVALID_MESSAGE_EXPRESSION: return "INVALID_MESSAGE_EXPRESSION";
    case ExprLValueClassification::MEMBER_FUNCTION: return "MEMBER_FUNCTION";
    case ExprLValueClassification::SUB_OBJ_C_PROPERTY_SETTING: return "SUB_OBJ_C_PROPERTY_SETTING";
    case ExprLValueClassification::CLASS_TEMPORARY: return "CLASS_TEMPORARY";
    case ExprLValueClassification::ARRAY_TEMPORARY: return "ARRAY_TEMPORARY";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExprNullPointerConstantKind e) {
  switch (e) {
    case ExprNullPointerConstantKind::NOT_NULL: return "NOT_NULL";
    case ExprNullPointerConstantKind::ZERO_EXPRESSION: return "ZERO_EXPRESSION";
    case ExprNullPointerConstantKind::ZERO_LITERAL: return "ZERO_LITERAL";
    case ExprNullPointerConstantKind::CXX11_NULLPTR: return "CXX11_NULLPTR";
    case ExprNullPointerConstantKind::GNU_NULL: return "GNU_NULL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExprNullPointerConstantValueDependence e) {
  switch (e) {
    case ExprNullPointerConstantValueDependence::NEVER_VALUE_DEPENDENT: return "NEVER_VALUE_DEPENDENT";
    case ExprNullPointerConstantValueDependence::VALUE_DEPENDENT_IS_NULL: return "VALUE_DEPENDENT_IS_NULL";
    case ExprNullPointerConstantValueDependence::VALUE_DEPENDENT_IS_NOT_NULL: return "VALUE_DEPENDENT_IS_NOT_NULL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExprSideEffectsKind e) {
  switch (e) {
    case ExprSideEffectsKind::NO_SIDE_EFFECTS: return "NO_SIDE_EFFECTS";
    case ExprSideEffectsKind::ALLOW_UNDEFINED_BEHAVIOR: return "ALLOW_UNDEFINED_BEHAVIOR";
    case ExprSideEffectsKind::ALLOW_SIDE_EFFECTS: return "ALLOW_SIDE_EFFECTS";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExprisModifiableLvalueResult e) {
  switch (e) {
    case ExprisModifiableLvalueResult::VALID: return "VALID";
    case ExprisModifiableLvalueResult::NOT_OBJECT_TYPE: return "NOT_OBJECT_TYPE";
    case ExprisModifiableLvalueResult::INCOMPLETE_VOID_TYPE: return "INCOMPLETE_VOID_TYPE";
    case ExprisModifiableLvalueResult::DUPLICATE_VECTOR_COMPONENTS: return "DUPLICATE_VECTOR_COMPONENTS";
    case ExprisModifiableLvalueResult::INVALID_EXPRESSION: return "INVALID_EXPRESSION";
    case ExprisModifiableLvalueResult::L_VALUE_CAST: return "L_VALUE_CAST";
    case ExprisModifiableLvalueResult::INCOMPLETE_TYPE: return "INCOMPLETE_TYPE";
    case ExprisModifiableLvalueResult::CONST_QUALIFIED: return "CONST_QUALIFIED";
    case ExprisModifiableLvalueResult::CONST_QUALIFIED_FIELD: return "CONST_QUALIFIED_FIELD";
    case ExprisModifiableLvalueResult::CONST_ADDRESS_SPACE: return "CONST_ADDRESS_SPACE";
    case ExprisModifiableLvalueResult::ARRAY_TYPE: return "ARRAY_TYPE";
    case ExprisModifiableLvalueResult::NO_SETTER_PROPERTY: return "NO_SETTER_PROPERTY";
    case ExprisModifiableLvalueResult::MEMBER_FUNCTION: return "MEMBER_FUNCTION";
    case ExprisModifiableLvalueResult::SUB_OBJ_C_PROPERTY_SETTING: return "SUB_OBJ_C_PROPERTY_SETTING";
    case ExprisModifiableLvalueResult::INVALID_MESSAGE_EXPRESSION: return "INVALID_MESSAGE_EXPRESSION";
    case ExprisModifiableLvalueResult::CLASS_TEMPORARY: return "CLASS_TEMPORARY";
    case ExprisModifiableLvalueResult::ARRAY_TEMPORARY: return "ARRAY_TEMPORARY";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExternalSourceSymbolAttrSpelling e) {
  switch (e) {
    case ExternalSourceSymbolAttrSpelling::GNU_EXTERNAL_SOURCE_SYMBOL: return "GNU_EXTERNAL_SOURCE_SYMBOL";
    case ExternalSourceSymbolAttrSpelling::CXX11_CLANG_EXTERNAL_SOURCE_SYMBOL: return "CXX11_CLANG_EXTERNAL_SOURCE_SYMBOL";
    case ExternalSourceSymbolAttrSpelling::C2X_CLANG_EXTERNAL_SOURCE_SYMBOL: return "C2X_CLANG_EXTERNAL_SOURCE_SYMBOL";
    case ExternalSourceSymbolAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FallThroughAttrSpelling e) {
  switch (e) {
    case FallThroughAttrSpelling::CXX11_FALLTHROUGH: return "CXX11_FALLTHROUGH";
    case FallThroughAttrSpelling::C2X_FALLTHROUGH: return "C2X_FALLTHROUGH";
    case FallThroughAttrSpelling::CXX11_CLANG_FALLTHROUGH: return "CXX11_CLANG_FALLTHROUGH";
    case FallThroughAttrSpelling::GNU_FALLTHROUGH: return "GNU_FALLTHROUGH";
    case FallThroughAttrSpelling::CXX11_GNU_FALLTHROUGH: return "CXX11_GNU_FALLTHROUGH";
    case FallThroughAttrSpelling::C2X_GNU_FALLTHROUGH: return "C2X_GNU_FALLTHROUGH";
    case FallThroughAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FastCallAttrSpelling e) {
  switch (e) {
    case FastCallAttrSpelling::GNU_FASTCALL: return "GNU_FASTCALL";
    case FastCallAttrSpelling::CXX11_GNU_FASTCALL: return "CXX11_GNU_FASTCALL";
    case FastCallAttrSpelling::C2X_GNU_FASTCALL: return "C2X_GNU_FASTCALL";
    case FastCallAttrSpelling::KEYWORD_FASTCALL: return "KEYWORD_FASTCALL";
    case FastCallAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FinalAttrSpelling e) {
  switch (e) {
    case FinalAttrSpelling::KEYWORD_FINAL: return "KEYWORD_FINAL";
    case FinalAttrSpelling::KEYWORD_SEALED: return "KEYWORD_SEALED";
    case FinalAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FlagEnumAttrSpelling e) {
  switch (e) {
    case FlagEnumAttrSpelling::GNU_FLAG_ENUM: return "GNU_FLAG_ENUM";
    case FlagEnumAttrSpelling::CXX11_CLANG_FLAG_ENUM: return "CXX11_CLANG_FLAG_ENUM";
    case FlagEnumAttrSpelling::C2X_CLANG_FLAG_ENUM: return "C2X_CLANG_FLAG_ENUM";
    case FlagEnumAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FlattenAttrSpelling e) {
  switch (e) {
    case FlattenAttrSpelling::GNU_FLATTEN: return "GNU_FLATTEN";
    case FlattenAttrSpelling::CXX11_GNU_FLATTEN: return "CXX11_GNU_FLATTEN";
    case FlattenAttrSpelling::C2X_GNU_FLATTEN: return "C2X_GNU_FLATTEN";
    case FlattenAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FormatArgAttrSpelling e) {
  switch (e) {
    case FormatArgAttrSpelling::GNU_FORMAT_ARGUMENT: return "GNU_FORMAT_ARGUMENT";
    case FormatArgAttrSpelling::CXX11_GNU_FORMAT_ARGUMENT: return "CXX11_GNU_FORMAT_ARGUMENT";
    case FormatArgAttrSpelling::C2X_GNU_FORMAT_ARGUMENT: return "C2X_GNU_FORMAT_ARGUMENT";
    case FormatArgAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FormatAttrSpelling e) {
  switch (e) {
    case FormatAttrSpelling::GNU_FORMAT: return "GNU_FORMAT";
    case FormatAttrSpelling::CXX11_GNU_FORMAT: return "CXX11_GNU_FORMAT";
    case FormatAttrSpelling::C2X_GNU_FORMAT: return "C2X_GNU_FORMAT";
    case FormatAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FunctionDeclTemplatedKind e) {
  switch (e) {
    case FunctionDeclTemplatedKind::NON_TEMPLATE: return "NON_TEMPLATE";
    case FunctionDeclTemplatedKind::FUNCTION_TEMPLATE: return "FUNCTION_TEMPLATE";
    case FunctionDeclTemplatedKind::MEMBER_SPECIALIZATION: return "MEMBER_SPECIALIZATION";
    case FunctionDeclTemplatedKind::FUNCTION_TEMPLATE_SPECIALIZATION: return "FUNCTION_TEMPLATE_SPECIALIZATION";
    case FunctionDeclTemplatedKind::DEPENDENT_FUNCTION_TEMPLATE_SPECIALIZATION: return "DEPENDENT_FUNCTION_TEMPLATE_SPECIALIZATION";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(GNUInlineAttrSpelling e) {
  switch (e) {
    case GNUInlineAttrSpelling::GNU_GNU_INLINE: return "GNU_GNU_INLINE";
    case GNUInlineAttrSpelling::CXX11_GNU_GNU_INLINE: return "CXX11_GNU_GNU_INLINE";
    case GNUInlineAttrSpelling::C2X_GNU_GNU_INLINE: return "C2X_GNU_GNU_INLINE";
    case GNUInlineAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(GuardedVarAttrSpelling e) {
  switch (e) {
    case GuardedVarAttrSpelling::GNU_GUARDED_VARIABLE: return "GNU_GUARDED_VARIABLE";
    case GuardedVarAttrSpelling::CXX11_CLANG_GUARDED_VARIABLE: return "CXX11_CLANG_GUARDED_VARIABLE";
    case GuardedVarAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(HIPManagedAttrSpelling e) {
  switch (e) {
    case HIPManagedAttrSpelling::GNU_MANAGED: return "GNU_MANAGED";
    case HIPManagedAttrSpelling::DECLSPEC_MANAGED: return "DECLSPEC_MANAGED";
    case HIPManagedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(HotAttrSpelling e) {
  switch (e) {
    case HotAttrSpelling::GNU_HOT: return "GNU_HOT";
    case HotAttrSpelling::CXX11_GNU_HOT: return "CXX11_GNU_HOT";
    case HotAttrSpelling::C2X_GNU_HOT: return "C2X_GNU_HOT";
    case HotAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(IBActionAttrSpelling e) {
  switch (e) {
    case IBActionAttrSpelling::GNU_IBACTION: return "GNU_IBACTION";
    case IBActionAttrSpelling::CXX11_CLANG_IBACTION: return "CXX11_CLANG_IBACTION";
    case IBActionAttrSpelling::C2X_CLANG_IBACTION: return "C2X_CLANG_IBACTION";
    case IBActionAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(IBOutletAttrSpelling e) {
  switch (e) {
    case IBOutletAttrSpelling::GNU_IBOUTLET: return "GNU_IBOUTLET";
    case IBOutletAttrSpelling::CXX11_CLANG_IBOUTLET: return "CXX11_CLANG_IBOUTLET";
    case IBOutletAttrSpelling::C2X_CLANG_IBOUTLET: return "C2X_CLANG_IBOUTLET";
    case IBOutletAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(IBOutletCollectionAttrSpelling e) {
  switch (e) {
    case IBOutletCollectionAttrSpelling::GNU_IBOUTLETCOLLECTION: return "GNU_IBOUTLETCOLLECTION";
    case IBOutletCollectionAttrSpelling::CXX11_CLANG_IBOUTLETCOLLECTION: return "CXX11_CLANG_IBOUTLETCOLLECTION";
    case IBOutletCollectionAttrSpelling::C2X_CLANG_IBOUTLETCOLLECTION: return "C2X_CLANG_IBOUTLETCOLLECTION";
    case IBOutletCollectionAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(IFuncAttrSpelling e) {
  switch (e) {
    case IFuncAttrSpelling::GNU_IFUNC: return "GNU_IFUNC";
    case IFuncAttrSpelling::CXX11_GNU_IFUNC: return "CXX11_GNU_IFUNC";
    case IFuncAttrSpelling::C2X_GNU_IFUNC: return "C2X_GNU_IFUNC";
    case IFuncAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ImplicitCastExprOnStack e) {
  switch (e) {
    case ImplicitCastExprOnStack::ON_STACK: return "ON_STACK";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ImplicitParamDeclImplicitParamKind e) {
  switch (e) {
    case ImplicitParamDeclImplicitParamKind::OBJ_C_SELF: return "OBJ_C_SELF";
    case ImplicitParamDeclImplicitParamKind::OBJ_C_CMD: return "OBJ_C_CMD";
    case ImplicitParamDeclImplicitParamKind::CXX_THIS: return "CXX_THIS";
    case ImplicitParamDeclImplicitParamKind::CXXVTT: return "CXXVTT";
    case ImplicitParamDeclImplicitParamKind::CAPTURED_CONTEXT: return "CAPTURED_CONTEXT";
    case ImplicitParamDeclImplicitParamKind::OTHER: return "OTHER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(InitPriorityAttrSpelling e) {
  switch (e) {
    case InitPriorityAttrSpelling::GNU_INITIALIZER_PRIORITY: return "GNU_INITIALIZER_PRIORITY";
    case InitPriorityAttrSpelling::CXX11_GNU_INITIALIZER_PRIORITY: return "CXX11_GNU_INITIALIZER_PRIORITY";
    case InitPriorityAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(IntelOclBiccAttrSpelling e) {
  switch (e) {
    case IntelOclBiccAttrSpelling::GNU_INTEL_OCL_BICC: return "GNU_INTEL_OCL_BICC";
    case IntelOclBiccAttrSpelling::CXX11_CLANG_INTEL_OCL_BICC: return "CXX11_CLANG_INTEL_OCL_BICC";
    case IntelOclBiccAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(InternalLinkageAttrSpelling e) {
  switch (e) {
    case InternalLinkageAttrSpelling::GNU_INTERNAL_LINKAGE: return "GNU_INTERNAL_LINKAGE";
    case InternalLinkageAttrSpelling::CXX11_CLANG_INTERNAL_LINKAGE: return "CXX11_CLANG_INTERNAL_LINKAGE";
    case InternalLinkageAttrSpelling::C2X_CLANG_INTERNAL_LINKAGE: return "C2X_CLANG_INTERNAL_LINKAGE";
    case InternalLinkageAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LTOVisibilityPublicAttrSpelling e) {
  switch (e) {
    case LTOVisibilityPublicAttrSpelling::GNU_LTO_VISIBILITY_PUBLIC: return "GNU_LTO_VISIBILITY_PUBLIC";
    case LTOVisibilityPublicAttrSpelling::CXX11_CLANG_LTO_VISIBILITY_PUBLIC: return "CXX11_CLANG_LTO_VISIBILITY_PUBLIC";
    case LTOVisibilityPublicAttrSpelling::C2X_CLANG_LTO_VISIBILITY_PUBLIC: return "C2X_CLANG_LTO_VISIBILITY_PUBLIC";
    case LTOVisibilityPublicAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LeafAttrSpelling e) {
  switch (e) {
    case LeafAttrSpelling::GNU_LEAF: return "GNU_LEAF";
    case LeafAttrSpelling::CXX11_GNU_LEAF: return "CXX11_GNU_LEAF";
    case LeafAttrSpelling::C2X_GNU_LEAF: return "C2X_GNU_LEAF";
    case LeafAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LifetimeBoundAttrSpelling e) {
  switch (e) {
    case LifetimeBoundAttrSpelling::GNU_LIFETIMEBOUND: return "GNU_LIFETIMEBOUND";
    case LifetimeBoundAttrSpelling::CXX11_CLANG_LIFETIMEBOUND: return "CXX11_CLANG_LIFETIMEBOUND";
    case LifetimeBoundAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LikelyAttrSpelling e) {
  switch (e) {
    case LikelyAttrSpelling::CXX11_LIKELY: return "CXX11_LIKELY";
    case LikelyAttrSpelling::C2X_CLANG_LIKELY: return "C2X_CLANG_LIKELY";
    case LikelyAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LinkageSpecDeclLanguageIDs e) {
  switch (e) {
    case LinkageSpecDeclLanguageIDs::C: return "C";
    case LinkageSpecDeclLanguageIDs::CXX: return "CXX";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LoaderUninitializedAttrSpelling e) {
  switch (e) {
    case LoaderUninitializedAttrSpelling::GNU_LOADER_UNINITIALIZED: return "GNU_LOADER_UNINITIALIZED";
    case LoaderUninitializedAttrSpelling::CXX11_CLANG_LOADER_UNINITIALIZED: return "CXX11_CLANG_LOADER_UNINITIALIZED";
    case LoaderUninitializedAttrSpelling::C2X_CLANG_LOADER_UNINITIALIZED: return "C2X_CLANG_LOADER_UNINITIALIZED";
    case LoaderUninitializedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LoopHintAttrLoopHintState e) {
  switch (e) {
    case LoopHintAttrLoopHintState::ENABLE: return "ENABLE";
    case LoopHintAttrLoopHintState::DISABLE: return "DISABLE";
    case LoopHintAttrLoopHintState::NUMERIC: return "NUMERIC";
    case LoopHintAttrLoopHintState::FIXED_WIDTH: return "FIXED_WIDTH";
    case LoopHintAttrLoopHintState::SCALABLE_WIDTH: return "SCALABLE_WIDTH";
    case LoopHintAttrLoopHintState::ASSUME_SAFETY: return "ASSUME_SAFETY";
    case LoopHintAttrLoopHintState::FULL: return "FULL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LoopHintAttrOptionType e) {
  switch (e) {
    case LoopHintAttrOptionType::VECTORIZE: return "VECTORIZE";
    case LoopHintAttrOptionType::VECTORIZE_WIDTH: return "VECTORIZE_WIDTH";
    case LoopHintAttrOptionType::INTERLEAVE: return "INTERLEAVE";
    case LoopHintAttrOptionType::INTERLEAVE_COUNT: return "INTERLEAVE_COUNT";
    case LoopHintAttrOptionType::UNROLL: return "UNROLL";
    case LoopHintAttrOptionType::UNROLL_COUNT: return "UNROLL_COUNT";
    case LoopHintAttrOptionType::UNROLL_AND_JAM: return "UNROLL_AND_JAM";
    case LoopHintAttrOptionType::UNROLL_AND_JAM_COUNT: return "UNROLL_AND_JAM_COUNT";
    case LoopHintAttrOptionType::PIPELINE_DISABLED: return "PIPELINE_DISABLED";
    case LoopHintAttrOptionType::PIPELINE_INITIATION_INTERVAL: return "PIPELINE_INITIATION_INTERVAL";
    case LoopHintAttrOptionType::DISTRIBUTE: return "DISTRIBUTE";
    case LoopHintAttrOptionType::VECTORIZE_PREDICATE: return "VECTORIZE_PREDICATE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LoopHintAttrSpelling e) {
  switch (e) {
    case LoopHintAttrSpelling::PRAGMA_CLANG_LOOP: return "PRAGMA_CLANG_LOOP";
    case LoopHintAttrSpelling::PRAGMA_UNROLL: return "PRAGMA_UNROLL";
    case LoopHintAttrSpelling::PRAGMA_NOUNROLL: return "PRAGMA_NOUNROLL";
    case LoopHintAttrSpelling::PRAGMA_UNROLL_AND_JAM: return "PRAGMA_UNROLL_AND_JAM";
    case LoopHintAttrSpelling::PRAGMA_NOUNROLL_AND_JAM: return "PRAGMA_NOUNROLL_AND_JAM";
    case LoopHintAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MIGServerRoutineAttrSpelling e) {
  switch (e) {
    case MIGServerRoutineAttrSpelling::GNU_MIG_SERVER_ROUTINE: return "GNU_MIG_SERVER_ROUTINE";
    case MIGServerRoutineAttrSpelling::CXX11_CLANG_MIG_SERVER_ROUTINE: return "CXX11_CLANG_MIG_SERVER_ROUTINE";
    case MIGServerRoutineAttrSpelling::C2X_CLANG_MIG_SERVER_ROUTINE: return "C2X_CLANG_MIG_SERVER_ROUTINE";
    case MIGServerRoutineAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MSABIAttrSpelling e) {
  switch (e) {
    case MSABIAttrSpelling::GNU_MS_ABI: return "GNU_MS_ABI";
    case MSABIAttrSpelling::CXX11_GNU_MS_ABI: return "CXX11_GNU_MS_ABI";
    case MSABIAttrSpelling::C2X_GNU_MS_ABI: return "C2X_GNU_MS_ABI";
    case MSABIAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MSInheritanceAttrSpelling e) {
  switch (e) {
    case MSInheritanceAttrSpelling::KEYWORD_SINGLE_INHERITANCE: return "KEYWORD_SINGLE_INHERITANCE";
    case MSInheritanceAttrSpelling::KEYWORD_MULTIPLE_INHERITANCE: return "KEYWORD_MULTIPLE_INHERITANCE";
    case MSInheritanceAttrSpelling::KEYWORD_VIRTUAL_INHERITANCE: return "KEYWORD_VIRTUAL_INHERITANCE";
    case MSInheritanceAttrSpelling::KEYWORD_UNSPECIFIED_INHERITANCE: return "KEYWORD_UNSPECIFIED_INHERITANCE";
    case MSInheritanceAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MSP430InterruptAttrSpelling e) {
  switch (e) {
    case MSP430InterruptAttrSpelling::GNU_INTERRUPT: return "GNU_INTERRUPT";
    case MSP430InterruptAttrSpelling::CXX11_GNU_INTERRUPT: return "CXX11_GNU_INTERRUPT";
    case MSP430InterruptAttrSpelling::C2X_GNU_INTERRUPT: return "C2X_GNU_INTERRUPT";
    case MSP430InterruptAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MSStructAttrSpelling e) {
  switch (e) {
    case MSStructAttrSpelling::GNU_MS_STRUCT: return "GNU_MS_STRUCT";
    case MSStructAttrSpelling::CXX11_GNU_MS_STRUCT: return "CXX11_GNU_MS_STRUCT";
    case MSStructAttrSpelling::C2X_GNU_MS_STRUCT: return "C2X_GNU_MS_STRUCT";
    case MSStructAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MayAliasAttrSpelling e) {
  switch (e) {
    case MayAliasAttrSpelling::GNU_MAY_ALIAS: return "GNU_MAY_ALIAS";
    case MayAliasAttrSpelling::CXX11_GNU_MAY_ALIAS: return "CXX11_GNU_MAY_ALIAS";
    case MayAliasAttrSpelling::C2X_GNU_MAY_ALIAS: return "C2X_GNU_MAY_ALIAS";
    case MayAliasAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MicroMipsAttrSpelling e) {
  switch (e) {
    case MicroMipsAttrSpelling::GNU_MICROMIPS: return "GNU_MICROMIPS";
    case MicroMipsAttrSpelling::CXX11_GNU_MICROMIPS: return "CXX11_GNU_MICROMIPS";
    case MicroMipsAttrSpelling::C2X_GNU_MICROMIPS: return "C2X_GNU_MICROMIPS";
    case MicroMipsAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MinSizeAttrSpelling e) {
  switch (e) {
    case MinSizeAttrSpelling::GNU_MINSIZE: return "GNU_MINSIZE";
    case MinSizeAttrSpelling::CXX11_CLANG_MINSIZE: return "CXX11_CLANG_MINSIZE";
    case MinSizeAttrSpelling::C2X_CLANG_MINSIZE: return "C2X_CLANG_MINSIZE";
    case MinSizeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MinVectorWidthAttrSpelling e) {
  switch (e) {
    case MinVectorWidthAttrSpelling::GNU_MIN_VECTOR_WIDTH: return "GNU_MIN_VECTOR_WIDTH";
    case MinVectorWidthAttrSpelling::CXX11_CLANG_MIN_VECTOR_WIDTH: return "CXX11_CLANG_MIN_VECTOR_WIDTH";
    case MinVectorWidthAttrSpelling::C2X_CLANG_MIN_VECTOR_WIDTH: return "C2X_CLANG_MIN_VECTOR_WIDTH";
    case MinVectorWidthAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(Mips16AttrSpelling e) {
  switch (e) {
    case Mips16AttrSpelling::GNU_MIPS16: return "GNU_MIPS16";
    case Mips16AttrSpelling::CXX11_GNU_MIPS16: return "CXX11_GNU_MIPS16";
    case Mips16AttrSpelling::C2X_GNU_MIPS16: return "C2X_GNU_MIPS16";
    case Mips16AttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MipsInterruptAttrInterruptType e) {
  switch (e) {
    case MipsInterruptAttrInterruptType::SW0: return "SW0";
    case MipsInterruptAttrInterruptType::SW1: return "SW1";
    case MipsInterruptAttrInterruptType::HW0: return "HW0";
    case MipsInterruptAttrInterruptType::HW1: return "HW1";
    case MipsInterruptAttrInterruptType::HW2: return "HW2";
    case MipsInterruptAttrInterruptType::HW3: return "HW3";
    case MipsInterruptAttrInterruptType::HW4: return "HW4";
    case MipsInterruptAttrInterruptType::HW5: return "HW5";
    case MipsInterruptAttrInterruptType::EIC: return "EIC";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MipsInterruptAttrSpelling e) {
  switch (e) {
    case MipsInterruptAttrSpelling::GNU_INTERRUPT: return "GNU_INTERRUPT";
    case MipsInterruptAttrSpelling::CXX11_GNU_INTERRUPT: return "CXX11_GNU_INTERRUPT";
    case MipsInterruptAttrSpelling::C2X_GNU_INTERRUPT: return "C2X_GNU_INTERRUPT";
    case MipsInterruptAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MipsLongCallAttrSpelling e) {
  switch (e) {
    case MipsLongCallAttrSpelling::GNU_LONG_CALL: return "GNU_LONG_CALL";
    case MipsLongCallAttrSpelling::CXX11_GNU_LONG_CALL: return "CXX11_GNU_LONG_CALL";
    case MipsLongCallAttrSpelling::C2X_GNU_LONG_CALL: return "C2X_GNU_LONG_CALL";
    case MipsLongCallAttrSpelling::GNU_FAR: return "GNU_FAR";
    case MipsLongCallAttrSpelling::CXX11_GNU_FAR: return "CXX11_GNU_FAR";
    case MipsLongCallAttrSpelling::C2X_GNU_FAR: return "C2X_GNU_FAR";
    case MipsLongCallAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MipsShortCallAttrSpelling e) {
  switch (e) {
    case MipsShortCallAttrSpelling::GNU_SHORT_CALL: return "GNU_SHORT_CALL";
    case MipsShortCallAttrSpelling::CXX11_GNU_SHORT_CALL: return "CXX11_GNU_SHORT_CALL";
    case MipsShortCallAttrSpelling::C2X_GNU_SHORT_CALL: return "C2X_GNU_SHORT_CALL";
    case MipsShortCallAttrSpelling::GNU_NEAR: return "GNU_NEAR";
    case MipsShortCallAttrSpelling::CXX11_GNU_NEAR: return "CXX11_GNU_NEAR";
    case MipsShortCallAttrSpelling::C2X_GNU_NEAR: return "C2X_GNU_NEAR";
    case MipsShortCallAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ModeAttrSpelling e) {
  switch (e) {
    case ModeAttrSpelling::GNU_MODE: return "GNU_MODE";
    case ModeAttrSpelling::CXX11_GNU_MODE: return "CXX11_GNU_MODE";
    case ModeAttrSpelling::C2X_GNU_MODE: return "C2X_GNU_MODE";
    case ModeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MustTailAttrSpelling e) {
  switch (e) {
    case MustTailAttrSpelling::GNU_MUSTTAIL: return "GNU_MUSTTAIL";
    case MustTailAttrSpelling::CXX11_CLANG_MUSTTAIL: return "CXX11_CLANG_MUSTTAIL";
    case MustTailAttrSpelling::C2X_CLANG_MUSTTAIL: return "C2X_CLANG_MUSTTAIL";
    case MustTailAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NSConsumedAttrSpelling e) {
  switch (e) {
    case NSConsumedAttrSpelling::GNU_NS_CONSUMED: return "GNU_NS_CONSUMED";
    case NSConsumedAttrSpelling::CXX11_CLANG_NS_CONSUMED: return "CXX11_CLANG_NS_CONSUMED";
    case NSConsumedAttrSpelling::C2X_CLANG_NS_CONSUMED: return "C2X_CLANG_NS_CONSUMED";
    case NSConsumedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NSConsumesSelfAttrSpelling e) {
  switch (e) {
    case NSConsumesSelfAttrSpelling::GNU_NS_CONSUMES_SELF: return "GNU_NS_CONSUMES_SELF";
    case NSConsumesSelfAttrSpelling::CXX11_CLANG_NS_CONSUMES_SELF: return "CXX11_CLANG_NS_CONSUMES_SELF";
    case NSConsumesSelfAttrSpelling::C2X_CLANG_NS_CONSUMES_SELF: return "C2X_CLANG_NS_CONSUMES_SELF";
    case NSConsumesSelfAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NSReturnsAutoreleasedAttrSpelling e) {
  switch (e) {
    case NSReturnsAutoreleasedAttrSpelling::GNU_NS_RETURNS_AUTORELEASED: return "GNU_NS_RETURNS_AUTORELEASED";
    case NSReturnsAutoreleasedAttrSpelling::CXX11_CLANG_NS_RETURNS_AUTORELEASED: return "CXX11_CLANG_NS_RETURNS_AUTORELEASED";
    case NSReturnsAutoreleasedAttrSpelling::C2X_CLANG_NS_RETURNS_AUTORELEASED: return "C2X_CLANG_NS_RETURNS_AUTORELEASED";
    case NSReturnsAutoreleasedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NSReturnsNotRetainedAttrSpelling e) {
  switch (e) {
    case NSReturnsNotRetainedAttrSpelling::GNU_NS_RETURNS_NOT_RETAINED: return "GNU_NS_RETURNS_NOT_RETAINED";
    case NSReturnsNotRetainedAttrSpelling::CXX11_CLANG_NS_RETURNS_NOT_RETAINED: return "CXX11_CLANG_NS_RETURNS_NOT_RETAINED";
    case NSReturnsNotRetainedAttrSpelling::C2X_CLANG_NS_RETURNS_NOT_RETAINED: return "C2X_CLANG_NS_RETURNS_NOT_RETAINED";
    case NSReturnsNotRetainedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NSReturnsRetainedAttrSpelling e) {
  switch (e) {
    case NSReturnsRetainedAttrSpelling::GNU_NS_RETURNS_RETAINED: return "GNU_NS_RETURNS_RETAINED";
    case NSReturnsRetainedAttrSpelling::CXX11_CLANG_NS_RETURNS_RETAINED: return "CXX11_CLANG_NS_RETURNS_RETAINED";
    case NSReturnsRetainedAttrSpelling::C2X_CLANG_NS_RETURNS_RETAINED: return "C2X_CLANG_NS_RETURNS_RETAINED";
    case NSReturnsRetainedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NakedAttrSpelling e) {
  switch (e) {
    case NakedAttrSpelling::GNU_NAKED: return "GNU_NAKED";
    case NakedAttrSpelling::CXX11_GNU_NAKED: return "CXX11_GNU_NAKED";
    case NakedAttrSpelling::C2X_GNU_NAKED: return "C2X_GNU_NAKED";
    case NakedAttrSpelling::DECLSPEC_NAKED: return "DECLSPEC_NAKED";
    case NakedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NamedDeclExplicitVisibilityKind e) {
  switch (e) {
    case NamedDeclExplicitVisibilityKind::VISIBILITY_FOR_TYPE: return "VISIBILITY_FOR_TYPE";
    case NamedDeclExplicitVisibilityKind::VISIBILITY_FOR_VALUE: return "VISIBILITY_FOR_VALUE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoBuiltinAttrSpelling e) {
  switch (e) {
    case NoBuiltinAttrSpelling::GNU_NO_BUILTIN: return "GNU_NO_BUILTIN";
    case NoBuiltinAttrSpelling::CXX11_CLANG_NO_BUILTIN: return "CXX11_CLANG_NO_BUILTIN";
    case NoBuiltinAttrSpelling::C2X_CLANG_NO_BUILTIN: return "C2X_CLANG_NO_BUILTIN";
    case NoBuiltinAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoCommonAttrSpelling e) {
  switch (e) {
    case NoCommonAttrSpelling::GNU_NOCOMMON: return "GNU_NOCOMMON";
    case NoCommonAttrSpelling::CXX11_GNU_NOCOMMON: return "CXX11_GNU_NOCOMMON";
    case NoCommonAttrSpelling::C2X_GNU_NOCOMMON: return "C2X_GNU_NOCOMMON";
    case NoCommonAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoDebugAttrSpelling e) {
  switch (e) {
    case NoDebugAttrSpelling::GNU_NODEBUG: return "GNU_NODEBUG";
    case NoDebugAttrSpelling::CXX11_GNU_NODEBUG: return "CXX11_GNU_NODEBUG";
    case NoDebugAttrSpelling::C2X_GNU_NODEBUG: return "C2X_GNU_NODEBUG";
    case NoDebugAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoDerefAttrSpelling e) {
  switch (e) {
    case NoDerefAttrSpelling::GNU_NODEREF: return "GNU_NODEREF";
    case NoDerefAttrSpelling::CXX11_CLANG_NODEREF: return "CXX11_CLANG_NODEREF";
    case NoDerefAttrSpelling::C2X_CLANG_NODEREF: return "C2X_CLANG_NODEREF";
    case NoDerefAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoDestroyAttrSpelling e) {
  switch (e) {
    case NoDestroyAttrSpelling::GNU_NO_DESTROY: return "GNU_NO_DESTROY";
    case NoDestroyAttrSpelling::CXX11_CLANG_NO_DESTROY: return "CXX11_CLANG_NO_DESTROY";
    case NoDestroyAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoDuplicateAttrSpelling e) {
  switch (e) {
    case NoDuplicateAttrSpelling::GNU_NODUPLICATE: return "GNU_NODUPLICATE";
    case NoDuplicateAttrSpelling::CXX11_CLANG_NODUPLICATE: return "CXX11_CLANG_NODUPLICATE";
    case NoDuplicateAttrSpelling::C2X_CLANG_NODUPLICATE: return "C2X_CLANG_NODUPLICATE";
    case NoDuplicateAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoEscapeAttrSpelling e) {
  switch (e) {
    case NoEscapeAttrSpelling::GNU_NOESCAPE: return "GNU_NOESCAPE";
    case NoEscapeAttrSpelling::CXX11_CLANG_NOESCAPE: return "CXX11_CLANG_NOESCAPE";
    case NoEscapeAttrSpelling::C2X_CLANG_NOESCAPE: return "C2X_CLANG_NOESCAPE";
    case NoEscapeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoInlineAttrSpelling e) {
  switch (e) {
    case NoInlineAttrSpelling::GNU_NOINLINE: return "GNU_NOINLINE";
    case NoInlineAttrSpelling::CXX11_GNU_NOINLINE: return "CXX11_GNU_NOINLINE";
    case NoInlineAttrSpelling::C2X_GNU_NOINLINE: return "C2X_GNU_NOINLINE";
    case NoInlineAttrSpelling::DECLSPEC_NOINLINE: return "DECLSPEC_NOINLINE";
    case NoInlineAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoInstrumentFunctionAttrSpelling e) {
  switch (e) {
    case NoInstrumentFunctionAttrSpelling::GNU_NO_INSTRUMENT_FUNCTION: return "GNU_NO_INSTRUMENT_FUNCTION";
    case NoInstrumentFunctionAttrSpelling::CXX11_GNU_NO_INSTRUMENT_FUNCTION: return "CXX11_GNU_NO_INSTRUMENT_FUNCTION";
    case NoInstrumentFunctionAttrSpelling::C2X_GNU_NO_INSTRUMENT_FUNCTION: return "C2X_GNU_NO_INSTRUMENT_FUNCTION";
    case NoInstrumentFunctionAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoMergeAttrSpelling e) {
  switch (e) {
    case NoMergeAttrSpelling::GNU_NOMERGE: return "GNU_NOMERGE";
    case NoMergeAttrSpelling::CXX11_CLANG_NOMERGE: return "CXX11_CLANG_NOMERGE";
    case NoMergeAttrSpelling::C2X_CLANG_NOMERGE: return "C2X_CLANG_NOMERGE";
    case NoMergeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoMicroMipsAttrSpelling e) {
  switch (e) {
    case NoMicroMipsAttrSpelling::GNU_NOMICROMIPS: return "GNU_NOMICROMIPS";
    case NoMicroMipsAttrSpelling::CXX11_GNU_NOMICROMIPS: return "CXX11_GNU_NOMICROMIPS";
    case NoMicroMipsAttrSpelling::C2X_GNU_NOMICROMIPS: return "C2X_GNU_NOMICROMIPS";
    case NoMicroMipsAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoMips16AttrSpelling e) {
  switch (e) {
    case NoMips16AttrSpelling::GNU_NOMIPS16: return "GNU_NOMIPS16";
    case NoMips16AttrSpelling::CXX11_GNU_NOMIPS16: return "CXX11_GNU_NOMIPS16";
    case NoMips16AttrSpelling::C2X_GNU_NOMIPS16: return "C2X_GNU_NOMIPS16";
    case NoMips16AttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoProfileFunctionAttrSpelling e) {
  switch (e) {
    case NoProfileFunctionAttrSpelling::GNU_NO_PROFILE_INSTRUMENT_FUNCTION: return "GNU_NO_PROFILE_INSTRUMENT_FUNCTION";
    case NoProfileFunctionAttrSpelling::CXX11_GNU_NO_PROFILE_INSTRUMENT_FUNCTION: return "CXX11_GNU_NO_PROFILE_INSTRUMENT_FUNCTION";
    case NoProfileFunctionAttrSpelling::C2X_GNU_NO_PROFILE_INSTRUMENT_FUNCTION: return "C2X_GNU_NO_PROFILE_INSTRUMENT_FUNCTION";
    case NoProfileFunctionAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoReturnAttrSpelling e) {
  switch (e) {
    case NoReturnAttrSpelling::GNU_NORETURN: return "GNU_NORETURN";
    case NoReturnAttrSpelling::CXX11_GNU_NORETURN: return "CXX11_GNU_NORETURN";
    case NoReturnAttrSpelling::C2X_GNU_NORETURN: return "C2X_GNU_NORETURN";
    case NoReturnAttrSpelling::DECLSPEC_NORETURN: return "DECLSPEC_NORETURN";
    case NoReturnAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoSanitizeAttrSpelling e) {
  switch (e) {
    case NoSanitizeAttrSpelling::GNU_NO_SANITIZE: return "GNU_NO_SANITIZE";
    case NoSanitizeAttrSpelling::CXX11_CLANG_NO_SANITIZE: return "CXX11_CLANG_NO_SANITIZE";
    case NoSanitizeAttrSpelling::C2X_CLANG_NO_SANITIZE: return "C2X_CLANG_NO_SANITIZE";
    case NoSanitizeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoSpeculativeLoadHardeningAttrSpelling e) {
  switch (e) {
    case NoSpeculativeLoadHardeningAttrSpelling::GNU_NO_SPECULATIVE_LOAD_HARDENING: return "GNU_NO_SPECULATIVE_LOAD_HARDENING";
    case NoSpeculativeLoadHardeningAttrSpelling::CXX11_CLANG_NO_SPECULATIVE_LOAD_HARDENING: return "CXX11_CLANG_NO_SPECULATIVE_LOAD_HARDENING";
    case NoSpeculativeLoadHardeningAttrSpelling::C2X_CLANG_NO_SPECULATIVE_LOAD_HARDENING: return "C2X_CLANG_NO_SPECULATIVE_LOAD_HARDENING";
    case NoSpeculativeLoadHardeningAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoSplitStackAttrSpelling e) {
  switch (e) {
    case NoSplitStackAttrSpelling::GNU_NO_SPLIT_STACK: return "GNU_NO_SPLIT_STACK";
    case NoSplitStackAttrSpelling::CXX11_GNU_NO_SPLIT_STACK: return "CXX11_GNU_NO_SPLIT_STACK";
    case NoSplitStackAttrSpelling::C2X_GNU_NO_SPLIT_STACK: return "C2X_GNU_NO_SPLIT_STACK";
    case NoSplitStackAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoStackProtectorAttrSpelling e) {
  switch (e) {
    case NoStackProtectorAttrSpelling::GNU_NO_STACK_PROTECTOR: return "GNU_NO_STACK_PROTECTOR";
    case NoStackProtectorAttrSpelling::CXX11_CLANG_NO_STACK_PROTECTOR: return "CXX11_CLANG_NO_STACK_PROTECTOR";
    case NoStackProtectorAttrSpelling::C2X_CLANG_NO_STACK_PROTECTOR: return "C2X_CLANG_NO_STACK_PROTECTOR";
    case NoStackProtectorAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoThreadSafetyAnalysisAttrSpelling e) {
  switch (e) {
    case NoThreadSafetyAnalysisAttrSpelling::GNU_NO_THREAD_SAFETY_ANALYSIS: return "GNU_NO_THREAD_SAFETY_ANALYSIS";
    case NoThreadSafetyAnalysisAttrSpelling::CXX11_CLANG_NO_THREAD_SAFETY_ANALYSIS: return "CXX11_CLANG_NO_THREAD_SAFETY_ANALYSIS";
    case NoThreadSafetyAnalysisAttrSpelling::C2X_CLANG_NO_THREAD_SAFETY_ANALYSIS: return "C2X_CLANG_NO_THREAD_SAFETY_ANALYSIS";
    case NoThreadSafetyAnalysisAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NoThrowAttrSpelling e) {
  switch (e) {
    case NoThrowAttrSpelling::GNU_NOTHROW: return "GNU_NOTHROW";
    case NoThrowAttrSpelling::CXX11_GNU_NOTHROW: return "CXX11_GNU_NOTHROW";
    case NoThrowAttrSpelling::C2X_GNU_NOTHROW: return "C2X_GNU_NOTHROW";
    case NoThrowAttrSpelling::DECLSPEC_NOTHROW: return "DECLSPEC_NOTHROW";
    case NoThrowAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NonNullAttrSpelling e) {
  switch (e) {
    case NonNullAttrSpelling::GNU_NONNULL: return "GNU_NONNULL";
    case NonNullAttrSpelling::CXX11_GNU_NONNULL: return "CXX11_GNU_NONNULL";
    case NonNullAttrSpelling::C2X_GNU_NONNULL: return "C2X_GNU_NONNULL";
    case NonNullAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NotTailCalledAttrSpelling e) {
  switch (e) {
    case NotTailCalledAttrSpelling::GNU_NOT_TAIL_CALLED: return "GNU_NOT_TAIL_CALLED";
    case NotTailCalledAttrSpelling::CXX11_CLANG_NOT_TAIL_CALLED: return "CXX11_CLANG_NOT_TAIL_CALLED";
    case NotTailCalledAttrSpelling::C2X_CLANG_NOT_TAIL_CALLED: return "C2X_CLANG_NOT_TAIL_CALLED";
    case NotTailCalledAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OMPAllocateDeclAttrAllocatorTypeTy e) {
  switch (e) {
    case OMPAllocateDeclAttrAllocatorTypeTy::OMP_NULL_MEMORY_ALLOC: return "OMP_NULL_MEMORY_ALLOC";
    case OMPAllocateDeclAttrAllocatorTypeTy::OMP_DEFAULT_MEMORY_ALLOC: return "OMP_DEFAULT_MEMORY_ALLOC";
    case OMPAllocateDeclAttrAllocatorTypeTy::OMP_LARGE_CAP_MEMORY_ALLOC: return "OMP_LARGE_CAP_MEMORY_ALLOC";
    case OMPAllocateDeclAttrAllocatorTypeTy::OMP_CONST_MEMORY_ALLOC: return "OMP_CONST_MEMORY_ALLOC";
    case OMPAllocateDeclAttrAllocatorTypeTy::OMP_HIGH_BW_MEMORY_ALLOC: return "OMP_HIGH_BW_MEMORY_ALLOC";
    case OMPAllocateDeclAttrAllocatorTypeTy::OMP_LOW_LAT_MEMORY_ALLOC: return "OMP_LOW_LAT_MEMORY_ALLOC";
    case OMPAllocateDeclAttrAllocatorTypeTy::OMPC_GROUP_MEMORY_ALLOC: return "OMPC_GROUP_MEMORY_ALLOC";
    case OMPAllocateDeclAttrAllocatorTypeTy::OMPP_TEAM_MEMORY_ALLOC: return "OMPP_TEAM_MEMORY_ALLOC";
    case OMPAllocateDeclAttrAllocatorTypeTy::OMP_THREAD_MEMORY_ALLOC: return "OMP_THREAD_MEMORY_ALLOC";
    case OMPAllocateDeclAttrAllocatorTypeTy::OMP_USER_DEFINED_MEMORY_ALLOC: return "OMP_USER_DEFINED_MEMORY_ALLOC";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OMPDeclareReductionDeclInitKind e) {
  switch (e) {
    case OMPDeclareReductionDeclInitKind::CALL_INITIALIZER: return "CALL_INITIALIZER";
    case OMPDeclareReductionDeclInitKind::DIRECT_INITIALIZER: return "DIRECT_INITIALIZER";
    case OMPDeclareReductionDeclInitKind::COPY_INITIALIZER: return "COPY_INITIALIZER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OMPDeclareSimdDeclAttrBranchStateTy e) {
  switch (e) {
    case OMPDeclareSimdDeclAttrBranchStateTy::UNDEFINED: return "UNDEFINED";
    case OMPDeclareSimdDeclAttrBranchStateTy::INBRANCH: return "INBRANCH";
    case OMPDeclareSimdDeclAttrBranchStateTy::NOTINBRANCH: return "NOTINBRANCH";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OMPDeclareTargetDeclAttrDevTypeTy e) {
  switch (e) {
    case OMPDeclareTargetDeclAttrDevTypeTy::HOST: return "HOST";
    case OMPDeclareTargetDeclAttrDevTypeTy::NO_HOST: return "NO_HOST";
    case OMPDeclareTargetDeclAttrDevTypeTy::ANY: return "ANY";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OMPDeclareTargetDeclAttrMapTypeTy e) {
  switch (e) {
    case OMPDeclareTargetDeclAttrMapTypeTy::TO: return "TO";
    case OMPDeclareTargetDeclAttrMapTypeTy::LINK: return "LINK";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OMPDeclareVariantAttrInteropType e) {
  switch (e) {
    case OMPDeclareVariantAttrInteropType::TARGET: return "TARGET";
    case OMPDeclareVariantAttrInteropType::TARGET_SYNC: return "TARGET_SYNC";
    case OMPDeclareVariantAttrInteropType::TARGET_TARGET_SYNC: return "TARGET_TARGET_SYNC";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OSConsumedAttrSpelling e) {
  switch (e) {
    case OSConsumedAttrSpelling::GNU_OS_CONSUMED: return "GNU_OS_CONSUMED";
    case OSConsumedAttrSpelling::CXX11_CLANG_OS_CONSUMED: return "CXX11_CLANG_OS_CONSUMED";
    case OSConsumedAttrSpelling::C2X_CLANG_OS_CONSUMED: return "C2X_CLANG_OS_CONSUMED";
    case OSConsumedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OSConsumesThisAttrSpelling e) {
  switch (e) {
    case OSConsumesThisAttrSpelling::GNU_OS_CONSUMES_THIS: return "GNU_OS_CONSUMES_THIS";
    case OSConsumesThisAttrSpelling::CXX11_CLANG_OS_CONSUMES_THIS: return "CXX11_CLANG_OS_CONSUMES_THIS";
    case OSConsumesThisAttrSpelling::C2X_CLANG_OS_CONSUMES_THIS: return "C2X_CLANG_OS_CONSUMES_THIS";
    case OSConsumesThisAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OSReturnsNotRetainedAttrSpelling e) {
  switch (e) {
    case OSReturnsNotRetainedAttrSpelling::GNU_OS_RETURNS_NOT_RETAINED: return "GNU_OS_RETURNS_NOT_RETAINED";
    case OSReturnsNotRetainedAttrSpelling::CXX11_CLANG_OS_RETURNS_NOT_RETAINED: return "CXX11_CLANG_OS_RETURNS_NOT_RETAINED";
    case OSReturnsNotRetainedAttrSpelling::C2X_CLANG_OS_RETURNS_NOT_RETAINED: return "C2X_CLANG_OS_RETURNS_NOT_RETAINED";
    case OSReturnsNotRetainedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OSReturnsRetainedAttrSpelling e) {
  switch (e) {
    case OSReturnsRetainedAttrSpelling::GNU_OS_RETURNS_RETAINED: return "GNU_OS_RETURNS_RETAINED";
    case OSReturnsRetainedAttrSpelling::CXX11_CLANG_OS_RETURNS_RETAINED: return "CXX11_CLANG_OS_RETURNS_RETAINED";
    case OSReturnsRetainedAttrSpelling::C2X_CLANG_OS_RETURNS_RETAINED: return "C2X_CLANG_OS_RETURNS_RETAINED";
    case OSReturnsRetainedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OSReturnsRetainedOnNonZeroAttrSpelling e) {
  switch (e) {
    case OSReturnsRetainedOnNonZeroAttrSpelling::GNU_OS_RETURNS_RETAINED_ON_NON_ZERO: return "GNU_OS_RETURNS_RETAINED_ON_NON_ZERO";
    case OSReturnsRetainedOnNonZeroAttrSpelling::CXX11_CLANG_OS_RETURNS_RETAINED_ON_NON_ZERO: return "CXX11_CLANG_OS_RETURNS_RETAINED_ON_NON_ZERO";
    case OSReturnsRetainedOnNonZeroAttrSpelling::C2X_CLANG_OS_RETURNS_RETAINED_ON_NON_ZERO: return "C2X_CLANG_OS_RETURNS_RETAINED_ON_NON_ZERO";
    case OSReturnsRetainedOnNonZeroAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OSReturnsRetainedOnZeroAttrSpelling e) {
  switch (e) {
    case OSReturnsRetainedOnZeroAttrSpelling::GNU_OS_RETURNS_RETAINED_ON_ZERO: return "GNU_OS_RETURNS_RETAINED_ON_ZERO";
    case OSReturnsRetainedOnZeroAttrSpelling::CXX11_CLANG_OS_RETURNS_RETAINED_ON_ZERO: return "CXX11_CLANG_OS_RETURNS_RETAINED_ON_ZERO";
    case OSReturnsRetainedOnZeroAttrSpelling::C2X_CLANG_OS_RETURNS_RETAINED_ON_ZERO: return "C2X_CLANG_OS_RETURNS_RETAINED_ON_ZERO";
    case OSReturnsRetainedOnZeroAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCBoxableAttrSpelling e) {
  switch (e) {
    case ObjCBoxableAttrSpelling::GNU_OBJC_BOXABLE: return "GNU_OBJC_BOXABLE";
    case ObjCBoxableAttrSpelling::CXX11_CLANG_OBJC_BOXABLE: return "CXX11_CLANG_OBJC_BOXABLE";
    case ObjCBoxableAttrSpelling::C2X_CLANG_OBJC_BOXABLE: return "C2X_CLANG_OBJC_BOXABLE";
    case ObjCBoxableAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCBridgeAttrSpelling e) {
  switch (e) {
    case ObjCBridgeAttrSpelling::GNU_OBJC_BRIDGE: return "GNU_OBJC_BRIDGE";
    case ObjCBridgeAttrSpelling::CXX11_CLANG_OBJC_BRIDGE: return "CXX11_CLANG_OBJC_BRIDGE";
    case ObjCBridgeAttrSpelling::C2X_CLANG_OBJC_BRIDGE: return "C2X_CLANG_OBJC_BRIDGE";
    case ObjCBridgeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCBridgeMutableAttrSpelling e) {
  switch (e) {
    case ObjCBridgeMutableAttrSpelling::GNU_OBJC_BRIDGE_MUTABLE: return "GNU_OBJC_BRIDGE_MUTABLE";
    case ObjCBridgeMutableAttrSpelling::CXX11_CLANG_OBJC_BRIDGE_MUTABLE: return "CXX11_CLANG_OBJC_BRIDGE_MUTABLE";
    case ObjCBridgeMutableAttrSpelling::C2X_CLANG_OBJC_BRIDGE_MUTABLE: return "C2X_CLANG_OBJC_BRIDGE_MUTABLE";
    case ObjCBridgeMutableAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCBridgeRelatedAttrSpelling e) {
  switch (e) {
    case ObjCBridgeRelatedAttrSpelling::GNU_OBJC_BRIDGE_RELATED: return "GNU_OBJC_BRIDGE_RELATED";
    case ObjCBridgeRelatedAttrSpelling::CXX11_CLANG_OBJC_BRIDGE_RELATED: return "CXX11_CLANG_OBJC_BRIDGE_RELATED";
    case ObjCBridgeRelatedAttrSpelling::C2X_CLANG_OBJC_BRIDGE_RELATED: return "C2X_CLANG_OBJC_BRIDGE_RELATED";
    case ObjCBridgeRelatedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCClassStubAttrSpelling e) {
  switch (e) {
    case ObjCClassStubAttrSpelling::GNU_OBJC_CLASS_STUB: return "GNU_OBJC_CLASS_STUB";
    case ObjCClassStubAttrSpelling::CXX11_CLANG_OBJC_CLASS_STUB: return "CXX11_CLANG_OBJC_CLASS_STUB";
    case ObjCClassStubAttrSpelling::C2X_CLANG_OBJC_CLASS_STUB: return "C2X_CLANG_OBJC_CLASS_STUB";
    case ObjCClassStubAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCDesignatedInitializerAttrSpelling e) {
  switch (e) {
    case ObjCDesignatedInitializerAttrSpelling::GNU_OBJC_DESIGNATED_INITIALIZER: return "GNU_OBJC_DESIGNATED_INITIALIZER";
    case ObjCDesignatedInitializerAttrSpelling::CXX11_CLANG_OBJC_DESIGNATED_INITIALIZER: return "CXX11_CLANG_OBJC_DESIGNATED_INITIALIZER";
    case ObjCDesignatedInitializerAttrSpelling::C2X_CLANG_OBJC_DESIGNATED_INITIALIZER: return "C2X_CLANG_OBJC_DESIGNATED_INITIALIZER";
    case ObjCDesignatedInitializerAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCDirectAttrSpelling e) {
  switch (e) {
    case ObjCDirectAttrSpelling::GNU_OBJC_DIRECT: return "GNU_OBJC_DIRECT";
    case ObjCDirectAttrSpelling::CXX11_CLANG_OBJC_DIRECT: return "CXX11_CLANG_OBJC_DIRECT";
    case ObjCDirectAttrSpelling::C2X_CLANG_OBJC_DIRECT: return "C2X_CLANG_OBJC_DIRECT";
    case ObjCDirectAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCDirectMembersAttrSpelling e) {
  switch (e) {
    case ObjCDirectMembersAttrSpelling::GNU_OBJC_DIRECT_MEMBERS: return "GNU_OBJC_DIRECT_MEMBERS";
    case ObjCDirectMembersAttrSpelling::CXX11_CLANG_OBJC_DIRECT_MEMBERS: return "CXX11_CLANG_OBJC_DIRECT_MEMBERS";
    case ObjCDirectMembersAttrSpelling::C2X_CLANG_OBJC_DIRECT_MEMBERS: return "C2X_CLANG_OBJC_DIRECT_MEMBERS";
    case ObjCDirectMembersAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCExceptionAttrSpelling e) {
  switch (e) {
    case ObjCExceptionAttrSpelling::GNU_OBJC_EXCEPTION: return "GNU_OBJC_EXCEPTION";
    case ObjCExceptionAttrSpelling::CXX11_CLANG_OBJC_EXCEPTION: return "CXX11_CLANG_OBJC_EXCEPTION";
    case ObjCExceptionAttrSpelling::C2X_CLANG_OBJC_EXCEPTION: return "C2X_CLANG_OBJC_EXCEPTION";
    case ObjCExceptionAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCExplicitProtocolImplAttrSpelling e) {
  switch (e) {
    case ObjCExplicitProtocolImplAttrSpelling::GNU_OBJC_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION: return "GNU_OBJC_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION";
    case ObjCExplicitProtocolImplAttrSpelling::CXX11_CLANG_OBJC_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION: return "CXX11_CLANG_OBJC_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION";
    case ObjCExplicitProtocolImplAttrSpelling::C2X_CLANG_OBJC_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION: return "C2X_CLANG_OBJC_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION";
    case ObjCExplicitProtocolImplAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCExternallyRetainedAttrSpelling e) {
  switch (e) {
    case ObjCExternallyRetainedAttrSpelling::GNU_OBJC_EXTERNALLY_RETAINED: return "GNU_OBJC_EXTERNALLY_RETAINED";
    case ObjCExternallyRetainedAttrSpelling::CXX11_CLANG_OBJC_EXTERNALLY_RETAINED: return "CXX11_CLANG_OBJC_EXTERNALLY_RETAINED";
    case ObjCExternallyRetainedAttrSpelling::C2X_CLANG_OBJC_EXTERNALLY_RETAINED: return "C2X_CLANG_OBJC_EXTERNALLY_RETAINED";
    case ObjCExternallyRetainedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCGCAttrSpelling e) {
  switch (e) {
    case ObjCGCAttrSpelling::GNU_OBJC_GC: return "GNU_OBJC_GC";
    case ObjCGCAttrSpelling::CXX11_CLANG_OBJC_GC: return "CXX11_CLANG_OBJC_GC";
    case ObjCGCAttrSpelling::C2X_CLANG_OBJC_GC: return "C2X_CLANG_OBJC_GC";
    case ObjCGCAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCIndependentClassAttrSpelling e) {
  switch (e) {
    case ObjCIndependentClassAttrSpelling::GNU_OBJC_INDEPENDENT_CLASS: return "GNU_OBJC_INDEPENDENT_CLASS";
    case ObjCIndependentClassAttrSpelling::CXX11_CLANG_OBJC_INDEPENDENT_CLASS: return "CXX11_CLANG_OBJC_INDEPENDENT_CLASS";
    case ObjCIndependentClassAttrSpelling::C2X_CLANG_OBJC_INDEPENDENT_CLASS: return "C2X_CLANG_OBJC_INDEPENDENT_CLASS";
    case ObjCIndependentClassAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCIvarDeclAccessControl e) {
  switch (e) {
    case ObjCIvarDeclAccessControl::NONE: return "NONE";
    case ObjCIvarDeclAccessControl::PRIVATE: return "PRIVATE";
    case ObjCIvarDeclAccessControl::PROTECTED: return "PROTECTED";
    case ObjCIvarDeclAccessControl::PUBLIC: return "PUBLIC";
    case ObjCIvarDeclAccessControl::PACKAGE: return "PACKAGE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCMessageExprReceiverKind e) {
  switch (e) {
    case ObjCMessageExprReceiverKind::CLASS: return "CLASS";
    case ObjCMessageExprReceiverKind::INSTANCE: return "INSTANCE";
    case ObjCMessageExprReceiverKind::SUPER_CLASS: return "SUPER_CLASS";
    case ObjCMessageExprReceiverKind::SUPER_INSTANCE: return "SUPER_INSTANCE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCMethodDeclImplementationControl e) {
  switch (e) {
    case ObjCMethodDeclImplementationControl::NONE: return "NONE";
    case ObjCMethodDeclImplementationControl::REQUIRED: return "REQUIRED";
    case ObjCMethodDeclImplementationControl::OPTIONAL: return "OPTIONAL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCMethodFamilyAttrFamilyKind e) {
  switch (e) {
    case ObjCMethodFamilyAttrFamilyKind::NONE: return "NONE";
    case ObjCMethodFamilyAttrFamilyKind::ALLOC: return "ALLOC";
    case ObjCMethodFamilyAttrFamilyKind::COPY: return "COPY";
    case ObjCMethodFamilyAttrFamilyKind::INITIALIZER: return "INITIALIZER";
    case ObjCMethodFamilyAttrFamilyKind::MUTABLE_COPY: return "MUTABLE_COPY";
    case ObjCMethodFamilyAttrFamilyKind::NEW: return "NEW";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCMethodFamilyAttrSpelling e) {
  switch (e) {
    case ObjCMethodFamilyAttrSpelling::GNU_OBJC_METHOD_FAMILY: return "GNU_OBJC_METHOD_FAMILY";
    case ObjCMethodFamilyAttrSpelling::CXX11_CLANG_OBJC_METHOD_FAMILY: return "CXX11_CLANG_OBJC_METHOD_FAMILY";
    case ObjCMethodFamilyAttrSpelling::C2X_CLANG_OBJC_METHOD_FAMILY: return "C2X_CLANG_OBJC_METHOD_FAMILY";
    case ObjCMethodFamilyAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCNSObjectAttrSpelling e) {
  switch (e) {
    case ObjCNSObjectAttrSpelling::GNUNS_OBJECT: return "GNUNS_OBJECT";
    case ObjCNSObjectAttrSpelling::CXX11_CLANG_NS_OBJECT: return "CXX11_CLANG_NS_OBJECT";
    case ObjCNSObjectAttrSpelling::C2X_CLANG_NS_OBJECT: return "C2X_CLANG_NS_OBJECT";
    case ObjCNSObjectAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCNonLazyClassAttrSpelling e) {
  switch (e) {
    case ObjCNonLazyClassAttrSpelling::GNU_OBJC_NONLAZY_CLASS: return "GNU_OBJC_NONLAZY_CLASS";
    case ObjCNonLazyClassAttrSpelling::CXX11_CLANG_OBJC_NONLAZY_CLASS: return "CXX11_CLANG_OBJC_NONLAZY_CLASS";
    case ObjCNonLazyClassAttrSpelling::C2X_CLANG_OBJC_NONLAZY_CLASS: return "C2X_CLANG_OBJC_NONLAZY_CLASS";
    case ObjCNonLazyClassAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCNonRuntimeProtocolAttrSpelling e) {
  switch (e) {
    case ObjCNonRuntimeProtocolAttrSpelling::GNU_OBJC_NON_RUNTIME_PROTOCOL: return "GNU_OBJC_NON_RUNTIME_PROTOCOL";
    case ObjCNonRuntimeProtocolAttrSpelling::CXX11_CLANG_OBJC_NON_RUNTIME_PROTOCOL: return "CXX11_CLANG_OBJC_NON_RUNTIME_PROTOCOL";
    case ObjCNonRuntimeProtocolAttrSpelling::C2X_CLANG_OBJC_NON_RUNTIME_PROTOCOL: return "C2X_CLANG_OBJC_NON_RUNTIME_PROTOCOL";
    case ObjCNonRuntimeProtocolAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCOwnershipAttrSpelling e) {
  switch (e) {
    case ObjCOwnershipAttrSpelling::GNU_OBJC_OWNERSHIP: return "GNU_OBJC_OWNERSHIP";
    case ObjCOwnershipAttrSpelling::CXX11_CLANG_OBJC_OWNERSHIP: return "CXX11_CLANG_OBJC_OWNERSHIP";
    case ObjCOwnershipAttrSpelling::C2X_CLANG_OBJC_OWNERSHIP: return "C2X_CLANG_OBJC_OWNERSHIP";
    case ObjCOwnershipAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCPreciseLifetimeAttrSpelling e) {
  switch (e) {
    case ObjCPreciseLifetimeAttrSpelling::GNU_OBJC_PRECISE_LIFETIME: return "GNU_OBJC_PRECISE_LIFETIME";
    case ObjCPreciseLifetimeAttrSpelling::CXX11_CLANG_OBJC_PRECISE_LIFETIME: return "CXX11_CLANG_OBJC_PRECISE_LIFETIME";
    case ObjCPreciseLifetimeAttrSpelling::C2X_CLANG_OBJC_PRECISE_LIFETIME: return "C2X_CLANG_OBJC_PRECISE_LIFETIME";
    case ObjCPreciseLifetimeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCPropertyDeclPropertyControl e) {
  switch (e) {
    case ObjCPropertyDeclPropertyControl::NONE: return "NONE";
    case ObjCPropertyDeclPropertyControl::REQUIRED: return "REQUIRED";
    case ObjCPropertyDeclPropertyControl::OPTIONAL: return "OPTIONAL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCPropertyDeclSetterKind e) {
  switch (e) {
    case ObjCPropertyDeclSetterKind::ASSIGN: return "ASSIGN";
    case ObjCPropertyDeclSetterKind::RETAIN: return "RETAIN";
    case ObjCPropertyDeclSetterKind::COPY: return "COPY";
    case ObjCPropertyDeclSetterKind::WEAK: return "WEAK";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCPropertyImplDeclKind e) {
  switch (e) {
    case ObjCPropertyImplDeclKind::SYNTHESIZE: return "SYNTHESIZE";
    case ObjCPropertyImplDeclKind::DYNAMIC: return "DYNAMIC";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCRequiresPropertyDefsAttrSpelling e) {
  switch (e) {
    case ObjCRequiresPropertyDefsAttrSpelling::GNU_OBJC_REQUIRES_PROPERTY_DEFINITIONS: return "GNU_OBJC_REQUIRES_PROPERTY_DEFINITIONS";
    case ObjCRequiresPropertyDefsAttrSpelling::CXX11_CLANG_OBJC_REQUIRES_PROPERTY_DEFINITIONS: return "CXX11_CLANG_OBJC_REQUIRES_PROPERTY_DEFINITIONS";
    case ObjCRequiresPropertyDefsAttrSpelling::C2X_CLANG_OBJC_REQUIRES_PROPERTY_DEFINITIONS: return "C2X_CLANG_OBJC_REQUIRES_PROPERTY_DEFINITIONS";
    case ObjCRequiresPropertyDefsAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCRequiresSuperAttrSpelling e) {
  switch (e) {
    case ObjCRequiresSuperAttrSpelling::GNU_OBJC_REQUIRES_SUPER: return "GNU_OBJC_REQUIRES_SUPER";
    case ObjCRequiresSuperAttrSpelling::CXX11_CLANG_OBJC_REQUIRES_SUPER: return "CXX11_CLANG_OBJC_REQUIRES_SUPER";
    case ObjCRequiresSuperAttrSpelling::C2X_CLANG_OBJC_REQUIRES_SUPER: return "C2X_CLANG_OBJC_REQUIRES_SUPER";
    case ObjCRequiresSuperAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCReturnsInnerPointerAttrSpelling e) {
  switch (e) {
    case ObjCReturnsInnerPointerAttrSpelling::GNU_OBJC_RETURNS_INNER_POINTER: return "GNU_OBJC_RETURNS_INNER_POINTER";
    case ObjCReturnsInnerPointerAttrSpelling::CXX11_CLANG_OBJC_RETURNS_INNER_POINTER: return "CXX11_CLANG_OBJC_RETURNS_INNER_POINTER";
    case ObjCReturnsInnerPointerAttrSpelling::C2X_CLANG_OBJC_RETURNS_INNER_POINTER: return "C2X_CLANG_OBJC_RETURNS_INNER_POINTER";
    case ObjCReturnsInnerPointerAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCRootClassAttrSpelling e) {
  switch (e) {
    case ObjCRootClassAttrSpelling::GNU_OBJC_ROOT_CLASS: return "GNU_OBJC_ROOT_CLASS";
    case ObjCRootClassAttrSpelling::CXX11_CLANG_OBJC_ROOT_CLASS: return "CXX11_CLANG_OBJC_ROOT_CLASS";
    case ObjCRootClassAttrSpelling::C2X_CLANG_OBJC_ROOT_CLASS: return "C2X_CLANG_OBJC_ROOT_CLASS";
    case ObjCRootClassAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCRuntimeNameAttrSpelling e) {
  switch (e) {
    case ObjCRuntimeNameAttrSpelling::GNU_OBJC_RUNTIME_NAME: return "GNU_OBJC_RUNTIME_NAME";
    case ObjCRuntimeNameAttrSpelling::CXX11_CLANG_OBJC_RUNTIME_NAME: return "CXX11_CLANG_OBJC_RUNTIME_NAME";
    case ObjCRuntimeNameAttrSpelling::C2X_CLANG_OBJC_RUNTIME_NAME: return "C2X_CLANG_OBJC_RUNTIME_NAME";
    case ObjCRuntimeNameAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCRuntimeVisibleAttrSpelling e) {
  switch (e) {
    case ObjCRuntimeVisibleAttrSpelling::GNU_OBJC_RUNTIME_VISIBLE: return "GNU_OBJC_RUNTIME_VISIBLE";
    case ObjCRuntimeVisibleAttrSpelling::CXX11_CLANG_OBJC_RUNTIME_VISIBLE: return "CXX11_CLANG_OBJC_RUNTIME_VISIBLE";
    case ObjCRuntimeVisibleAttrSpelling::C2X_CLANG_OBJC_RUNTIME_VISIBLE: return "C2X_CLANG_OBJC_RUNTIME_VISIBLE";
    case ObjCRuntimeVisibleAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCSubclassingRestrictedAttrSpelling e) {
  switch (e) {
    case ObjCSubclassingRestrictedAttrSpelling::GNU_OBJC_SUBCLASSING_RESTRICTED: return "GNU_OBJC_SUBCLASSING_RESTRICTED";
    case ObjCSubclassingRestrictedAttrSpelling::CXX11_CLANG_OBJC_SUBCLASSING_RESTRICTED: return "CXX11_CLANG_OBJC_SUBCLASSING_RESTRICTED";
    case ObjCSubclassingRestrictedAttrSpelling::C2X_CLANG_OBJC_SUBCLASSING_RESTRICTED: return "C2X_CLANG_OBJC_SUBCLASSING_RESTRICTED";
    case ObjCSubclassingRestrictedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenCLAccessAttrSpelling e) {
  switch (e) {
    case OpenCLAccessAttrSpelling::KEYWORD_READ_ONLY: return "KEYWORD_READ_ONLY";
    case OpenCLAccessAttrSpelling::KEYWORD_WRITE_ONLY: return "KEYWORD_WRITE_ONLY";
    case OpenCLAccessAttrSpelling::KEYWORD_READ_WRITE: return "KEYWORD_READ_WRITE";
    case OpenCLAccessAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenCLConstantAddressSpaceAttrSpelling e) {
  switch (e) {
    case OpenCLConstantAddressSpaceAttrSpelling::KEYWORD_CONSTANT: return "KEYWORD_CONSTANT";
    case OpenCLConstantAddressSpaceAttrSpelling::GNU_OPENCL_CONSTANT: return "GNU_OPENCL_CONSTANT";
    case OpenCLConstantAddressSpaceAttrSpelling::CXX11_CLANG_OPENCL_CONSTANT: return "CXX11_CLANG_OPENCL_CONSTANT";
    case OpenCLConstantAddressSpaceAttrSpelling::C2X_CLANG_OPENCL_CONSTANT: return "C2X_CLANG_OPENCL_CONSTANT";
    case OpenCLConstantAddressSpaceAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenCLGenericAddressSpaceAttrSpelling e) {
  switch (e) {
    case OpenCLGenericAddressSpaceAttrSpelling::KEYWORD_GENERIC: return "KEYWORD_GENERIC";
    case OpenCLGenericAddressSpaceAttrSpelling::GNU_OPENCL_GENERIC: return "GNU_OPENCL_GENERIC";
    case OpenCLGenericAddressSpaceAttrSpelling::CXX11_CLANG_OPENCL_GENERIC: return "CXX11_CLANG_OPENCL_GENERIC";
    case OpenCLGenericAddressSpaceAttrSpelling::C2X_CLANG_OPENCL_GENERIC: return "C2X_CLANG_OPENCL_GENERIC";
    case OpenCLGenericAddressSpaceAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenCLGlobalAddressSpaceAttrSpelling e) {
  switch (e) {
    case OpenCLGlobalAddressSpaceAttrSpelling::KEYWORD_GLOBAL: return "KEYWORD_GLOBAL";
    case OpenCLGlobalAddressSpaceAttrSpelling::GNU_OPENCL_GLOBAL: return "GNU_OPENCL_GLOBAL";
    case OpenCLGlobalAddressSpaceAttrSpelling::CXX11_CLANG_OPENCL_GLOBAL: return "CXX11_CLANG_OPENCL_GLOBAL";
    case OpenCLGlobalAddressSpaceAttrSpelling::C2X_CLANG_OPENCL_GLOBAL: return "C2X_CLANG_OPENCL_GLOBAL";
    case OpenCLGlobalAddressSpaceAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenCLGlobalDeviceAddressSpaceAttrSpelling e) {
  switch (e) {
    case OpenCLGlobalDeviceAddressSpaceAttrSpelling::GNU_OPENCL_GLOBAL_DEVICE: return "GNU_OPENCL_GLOBAL_DEVICE";
    case OpenCLGlobalDeviceAddressSpaceAttrSpelling::CXX11_CLANG_OPENCL_GLOBAL_DEVICE: return "CXX11_CLANG_OPENCL_GLOBAL_DEVICE";
    case OpenCLGlobalDeviceAddressSpaceAttrSpelling::C2X_CLANG_OPENCL_GLOBAL_DEVICE: return "C2X_CLANG_OPENCL_GLOBAL_DEVICE";
    case OpenCLGlobalDeviceAddressSpaceAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenCLGlobalHostAddressSpaceAttrSpelling e) {
  switch (e) {
    case OpenCLGlobalHostAddressSpaceAttrSpelling::GNU_OPENCL_GLOBAL_HOST: return "GNU_OPENCL_GLOBAL_HOST";
    case OpenCLGlobalHostAddressSpaceAttrSpelling::CXX11_CLANG_OPENCL_GLOBAL_HOST: return "CXX11_CLANG_OPENCL_GLOBAL_HOST";
    case OpenCLGlobalHostAddressSpaceAttrSpelling::C2X_CLANG_OPENCL_GLOBAL_HOST: return "C2X_CLANG_OPENCL_GLOBAL_HOST";
    case OpenCLGlobalHostAddressSpaceAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenCLKernelAttrSpelling e) {
  switch (e) {
    case OpenCLKernelAttrSpelling::KEYWORD_KERNEL: return "KEYWORD_KERNEL";
    case OpenCLKernelAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenCLLocalAddressSpaceAttrSpelling e) {
  switch (e) {
    case OpenCLLocalAddressSpaceAttrSpelling::KEYWORD_LOCAL: return "KEYWORD_LOCAL";
    case OpenCLLocalAddressSpaceAttrSpelling::GNU_OPENCL_LOCAL: return "GNU_OPENCL_LOCAL";
    case OpenCLLocalAddressSpaceAttrSpelling::CXX11_CLANG_OPENCL_LOCAL: return "CXX11_CLANG_OPENCL_LOCAL";
    case OpenCLLocalAddressSpaceAttrSpelling::C2X_CLANG_OPENCL_LOCAL: return "C2X_CLANG_OPENCL_LOCAL";
    case OpenCLLocalAddressSpaceAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenCLPrivateAddressSpaceAttrSpelling e) {
  switch (e) {
    case OpenCLPrivateAddressSpaceAttrSpelling::KEYWORD_PRIVATE: return "KEYWORD_PRIVATE";
    case OpenCLPrivateAddressSpaceAttrSpelling::GNU_OPENCL_PRIVATE: return "GNU_OPENCL_PRIVATE";
    case OpenCLPrivateAddressSpaceAttrSpelling::CXX11_CLANG_OPENCL_PRIVATE: return "CXX11_CLANG_OPENCL_PRIVATE";
    case OpenCLPrivateAddressSpaceAttrSpelling::C2X_CLANG_OPENCL_PRIVATE: return "C2X_CLANG_OPENCL_PRIVATE";
    case OpenCLPrivateAddressSpaceAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OptimizeNoneAttrSpelling e) {
  switch (e) {
    case OptimizeNoneAttrSpelling::GNU_OPTNONE: return "GNU_OPTNONE";
    case OptimizeNoneAttrSpelling::CXX11_CLANG_OPTNONE: return "CXX11_CLANG_OPTNONE";
    case OptimizeNoneAttrSpelling::C2X_CLANG_OPTNONE: return "C2X_CLANG_OPTNONE";
    case OptimizeNoneAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OverloadableAttrSpelling e) {
  switch (e) {
    case OverloadableAttrSpelling::GNU_OVERLOADABLE: return "GNU_OVERLOADABLE";
    case OverloadableAttrSpelling::CXX11_CLANG_OVERLOADABLE: return "CXX11_CLANG_OVERLOADABLE";
    case OverloadableAttrSpelling::C2X_CLANG_OVERLOADABLE: return "C2X_CLANG_OVERLOADABLE";
    case OverloadableAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OwnershipAttrOwnershipKind e) {
  switch (e) {
    case OwnershipAttrOwnershipKind::HOLDS: return "HOLDS";
    case OwnershipAttrOwnershipKind::RETURNS: return "RETURNS";
    case OwnershipAttrOwnershipKind::TAKES: return "TAKES";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OwnershipAttrSpelling e) {
  switch (e) {
    case OwnershipAttrSpelling::GNU_OWNERSHIP_HOLDS: return "GNU_OWNERSHIP_HOLDS";
    case OwnershipAttrSpelling::CXX11_CLANG_OWNERSHIP_HOLDS: return "CXX11_CLANG_OWNERSHIP_HOLDS";
    case OwnershipAttrSpelling::C2X_CLANG_OWNERSHIP_HOLDS: return "C2X_CLANG_OWNERSHIP_HOLDS";
    case OwnershipAttrSpelling::GNU_OWNERSHIP_RETURNS: return "GNU_OWNERSHIP_RETURNS";
    case OwnershipAttrSpelling::CXX11_CLANG_OWNERSHIP_RETURNS: return "CXX11_CLANG_OWNERSHIP_RETURNS";
    case OwnershipAttrSpelling::C2X_CLANG_OWNERSHIP_RETURNS: return "C2X_CLANG_OWNERSHIP_RETURNS";
    case OwnershipAttrSpelling::GNU_OWNERSHIP_TAKES: return "GNU_OWNERSHIP_TAKES";
    case OwnershipAttrSpelling::CXX11_CLANG_OWNERSHIP_TAKES: return "CXX11_CLANG_OWNERSHIP_TAKES";
    case OwnershipAttrSpelling::C2X_CLANG_OWNERSHIP_TAKES: return "C2X_CLANG_OWNERSHIP_TAKES";
    case OwnershipAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PackedAttrSpelling e) {
  switch (e) {
    case PackedAttrSpelling::GNU_PACKED: return "GNU_PACKED";
    case PackedAttrSpelling::CXX11_GNU_PACKED: return "CXX11_GNU_PACKED";
    case PackedAttrSpelling::C2X_GNU_PACKED: return "C2X_GNU_PACKED";
    case PackedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ParamTypestateAttrConsumedState e) {
  switch (e) {
    case ParamTypestateAttrConsumedState::UNKNOWN: return "UNKNOWN";
    case ParamTypestateAttrConsumedState::CONSUMED: return "CONSUMED";
    case ParamTypestateAttrConsumedState::UNCONSUMED: return "UNCONSUMED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ParamTypestateAttrSpelling e) {
  switch (e) {
    case ParamTypestateAttrSpelling::GNU_PARAMETER_TYPESTATE: return "GNU_PARAMETER_TYPESTATE";
    case ParamTypestateAttrSpelling::CXX11_CLANG_PARAMETER_TYPESTATE: return "CXX11_CLANG_PARAMETER_TYPESTATE";
    case ParamTypestateAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PascalAttrSpelling e) {
  switch (e) {
    case PascalAttrSpelling::GNU_PASCAL: return "GNU_PASCAL";
    case PascalAttrSpelling::CXX11_CLANG_PASCAL: return "CXX11_CLANG_PASCAL";
    case PascalAttrSpelling::C2X_CLANG_PASCAL: return "C2X_CLANG_PASCAL";
    case PascalAttrSpelling::KEYWORD_PASCAL: return "KEYWORD_PASCAL";
    case PascalAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PassObjectSizeAttrSpelling e) {
  switch (e) {
    case PassObjectSizeAttrSpelling::GNU_PASS_OBJECT_SIZE: return "GNU_PASS_OBJECT_SIZE";
    case PassObjectSizeAttrSpelling::CXX11_CLANG_PASS_OBJECT_SIZE: return "CXX11_CLANG_PASS_OBJECT_SIZE";
    case PassObjectSizeAttrSpelling::C2X_CLANG_PASS_OBJECT_SIZE: return "C2X_CLANG_PASS_OBJECT_SIZE";
    case PassObjectSizeAttrSpelling::GNU_PASS_DYNAMIC_OBJECT_SIZE: return "GNU_PASS_DYNAMIC_OBJECT_SIZE";
    case PassObjectSizeAttrSpelling::CXX11_CLANG_PASS_DYNAMIC_OBJECT_SIZE: return "CXX11_CLANG_PASS_DYNAMIC_OBJECT_SIZE";
    case PassObjectSizeAttrSpelling::C2X_CLANG_PASS_DYNAMIC_OBJECT_SIZE: return "C2X_CLANG_PASS_DYNAMIC_OBJECT_SIZE";
    case PassObjectSizeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PatchableFunctionEntryAttrSpelling e) {
  switch (e) {
    case PatchableFunctionEntryAttrSpelling::GNU_PATCHABLE_FUNCTION_ENTRY: return "GNU_PATCHABLE_FUNCTION_ENTRY";
    case PatchableFunctionEntryAttrSpelling::CXX11_GNU_PATCHABLE_FUNCTION_ENTRY: return "CXX11_GNU_PATCHABLE_FUNCTION_ENTRY";
    case PatchableFunctionEntryAttrSpelling::C2X_GNU_PATCHABLE_FUNCTION_ENTRY: return "C2X_GNU_PATCHABLE_FUNCTION_ENTRY";
    case PatchableFunctionEntryAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PcsAttrPCSType e) {
  switch (e) {
    case PcsAttrPCSType::AAPCS: return "AAPCS";
    case PcsAttrPCSType::VFP: return "VFP";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PcsAttrSpelling e) {
  switch (e) {
    case PcsAttrSpelling::GNU_PCS: return "GNU_PCS";
    case PcsAttrSpelling::CXX11_GNU_PCS: return "CXX11_GNU_PCS";
    case PcsAttrSpelling::C2X_GNU_PCS: return "C2X_GNU_PCS";
    case PcsAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PredefinedExprIdentKind e) {
  switch (e) {
    case PredefinedExprIdentKind::FUNC: return "FUNC";
    case PredefinedExprIdentKind::FUNCTION: return "FUNCTION";
    case PredefinedExprIdentKind::L_FUNCTION: return "L_FUNCTION";
    case PredefinedExprIdentKind::FUNC_D_NAME: return "FUNC_D_NAME";
    case PredefinedExprIdentKind::FUNC_SIG: return "FUNC_SIG";
    case PredefinedExprIdentKind::L_FUNC_SIG: return "L_FUNC_SIG";
    case PredefinedExprIdentKind::PRETTY_FUNCTION: return "PRETTY_FUNCTION";
    case PredefinedExprIdentKind::PRETTY_FUNCTION_NO_VIRTUAL: return "PRETTY_FUNCTION_NO_VIRTUAL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PreferredNameAttrSpelling e) {
  switch (e) {
    case PreferredNameAttrSpelling::GNU_PREFERRED_NAME: return "GNU_PREFERRED_NAME";
    case PreferredNameAttrSpelling::CXX11_CLANG_PREFERRED_NAME: return "CXX11_CLANG_PREFERRED_NAME";
    case PreferredNameAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PreserveAllAttrSpelling e) {
  switch (e) {
    case PreserveAllAttrSpelling::GNU_PRESERVE_ALL: return "GNU_PRESERVE_ALL";
    case PreserveAllAttrSpelling::CXX11_CLANG_PRESERVE_ALL: return "CXX11_CLANG_PRESERVE_ALL";
    case PreserveAllAttrSpelling::C2X_CLANG_PRESERVE_ALL: return "C2X_CLANG_PRESERVE_ALL";
    case PreserveAllAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PreserveMostAttrSpelling e) {
  switch (e) {
    case PreserveMostAttrSpelling::GNU_PRESERVE_MOST: return "GNU_PRESERVE_MOST";
    case PreserveMostAttrSpelling::CXX11_CLANG_PRESERVE_MOST: return "CXX11_CLANG_PRESERVE_MOST";
    case PreserveMostAttrSpelling::C2X_CLANG_PRESERVE_MOST: return "C2X_CLANG_PRESERVE_MOST";
    case PreserveMostAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PtGuardedVarAttrSpelling e) {
  switch (e) {
    case PtGuardedVarAttrSpelling::GNU_PT_GUARDED_VARIABLE: return "GNU_PT_GUARDED_VARIABLE";
    case PtGuardedVarAttrSpelling::CXX11_CLANG_PT_GUARDED_VARIABLE: return "CXX11_CLANG_PT_GUARDED_VARIABLE";
    case PtGuardedVarAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PureAttrSpelling e) {
  switch (e) {
    case PureAttrSpelling::GNU_PURE: return "GNU_PURE";
    case PureAttrSpelling::CXX11_GNU_PURE: return "CXX11_GNU_PURE";
    case PureAttrSpelling::C2X_GNU_PURE: return "C2X_GNU_PURE";
    case PureAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(QualTypeDestructionKind e) {
  switch (e) {
    case QualTypeDestructionKind::NONE: return "NONE";
    case QualTypeDestructionKind::CXX_DESTRUCTOR: return "CXX_DESTRUCTOR";
    case QualTypeDestructionKind::OBJC_STRONG_LIFETIME: return "OBJC_STRONG_LIFETIME";
    case QualTypeDestructionKind::OBJC_WEAK_LIFETIME: return "OBJC_WEAK_LIFETIME";
    case QualTypeDestructionKind::NONTRIVIAL_C_STRUCT: return "NONTRIVIAL_C_STRUCT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(QualTypePrimitiveCopyKind e) {
  switch (e) {
    case QualTypePrimitiveCopyKind::TRIVIAL: return "TRIVIAL";
    case QualTypePrimitiveCopyKind::VOLATILE_TRIVIAL: return "VOLATILE_TRIVIAL";
    case QualTypePrimitiveCopyKind::ARC_STRONG: return "ARC_STRONG";
    case QualTypePrimitiveCopyKind::ARC_WEAK: return "ARC_WEAK";
    case QualTypePrimitiveCopyKind::STRUCT: return "STRUCT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(QualTypePrimitiveDefaultInitializeKind e) {
  switch (e) {
    case QualTypePrimitiveDefaultInitializeKind::TRIVIAL: return "TRIVIAL";
    case QualTypePrimitiveDefaultInitializeKind::ARC_STRONG: return "ARC_STRONG";
    case QualTypePrimitiveDefaultInitializeKind::ARC_WEAK: return "ARC_WEAK";
    case QualTypePrimitiveDefaultInitializeKind::STRUCT: return "STRUCT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(RISCVInterruptAttrInterruptType e) {
  switch (e) {
    case RISCVInterruptAttrInterruptType::USER: return "USER";
    case RISCVInterruptAttrInterruptType::SUPERVISOR: return "SUPERVISOR";
    case RISCVInterruptAttrInterruptType::MACHINE: return "MACHINE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(RISCVInterruptAttrSpelling e) {
  switch (e) {
    case RISCVInterruptAttrSpelling::GNU_INTERRUPT: return "GNU_INTERRUPT";
    case RISCVInterruptAttrSpelling::CXX11_GNU_INTERRUPT: return "CXX11_GNU_INTERRUPT";
    case RISCVInterruptAttrSpelling::C2X_GNU_INTERRUPT: return "C2X_GNU_INTERRUPT";
    case RISCVInterruptAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(RecordDeclArgPassingKind e) {
  switch (e) {
    case RecordDeclArgPassingKind::CAN_PASS_IN_REGS: return "CAN_PASS_IN_REGS";
    case RecordDeclArgPassingKind::CANNOT_PASS_IN_REGS: return "CANNOT_PASS_IN_REGS";
    case RecordDeclArgPassingKind::CAN_NEVER_PASS_IN_REGS: return "CAN_NEVER_PASS_IN_REGS";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(RegCallAttrSpelling e) {
  switch (e) {
    case RegCallAttrSpelling::GNU_REGCALL: return "GNU_REGCALL";
    case RegCallAttrSpelling::CXX11_GNU_REGCALL: return "CXX11_GNU_REGCALL";
    case RegCallAttrSpelling::C2X_GNU_REGCALL: return "C2X_GNU_REGCALL";
    case RegCallAttrSpelling::KEYWORD_REGCALL: return "KEYWORD_REGCALL";
    case RegCallAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ReinitializesAttrSpelling e) {
  switch (e) {
    case ReinitializesAttrSpelling::GNU_REINITIALIZES: return "GNU_REINITIALIZES";
    case ReinitializesAttrSpelling::CXX11_CLANG_REINITIALIZES: return "CXX11_CLANG_REINITIALIZES";
    case ReinitializesAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ReleaseCapabilityAttrSpelling e) {
  switch (e) {
    case ReleaseCapabilityAttrSpelling::GNU_RELEASE_CAPABILITY: return "GNU_RELEASE_CAPABILITY";
    case ReleaseCapabilityAttrSpelling::CXX11_CLANG_RELEASE_CAPABILITY: return "CXX11_CLANG_RELEASE_CAPABILITY";
    case ReleaseCapabilityAttrSpelling::GNU_RELEASE_SHARED_CAPABILITY: return "GNU_RELEASE_SHARED_CAPABILITY";
    case ReleaseCapabilityAttrSpelling::CXX11_CLANG_RELEASE_SHARED_CAPABILITY: return "CXX11_CLANG_RELEASE_SHARED_CAPABILITY";
    case ReleaseCapabilityAttrSpelling::GNU_RELEASE_GENERIC_CAPABILITY: return "GNU_RELEASE_GENERIC_CAPABILITY";
    case ReleaseCapabilityAttrSpelling::CXX11_CLANG_RELEASE_GENERIC_CAPABILITY: return "CXX11_CLANG_RELEASE_GENERIC_CAPABILITY";
    case ReleaseCapabilityAttrSpelling::GNU_UNLOCK_FUNCTION: return "GNU_UNLOCK_FUNCTION";
    case ReleaseCapabilityAttrSpelling::CXX11_CLANG_UNLOCK_FUNCTION: return "CXX11_CLANG_UNLOCK_FUNCTION";
    case ReleaseCapabilityAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ReleaseHandleAttrSpelling e) {
  switch (e) {
    case ReleaseHandleAttrSpelling::GNU_RELEASE_HANDLE: return "GNU_RELEASE_HANDLE";
    case ReleaseHandleAttrSpelling::CXX11_CLANG_RELEASE_HANDLE: return "CXX11_CLANG_RELEASE_HANDLE";
    case ReleaseHandleAttrSpelling::C2X_CLANG_RELEASE_HANDLE: return "C2X_CLANG_RELEASE_HANDLE";
    case ReleaseHandleAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(RequiresCapabilityAttrSpelling e) {
  switch (e) {
    case RequiresCapabilityAttrSpelling::GNU_REQUIRES_CAPABILITY: return "GNU_REQUIRES_CAPABILITY";
    case RequiresCapabilityAttrSpelling::CXX11_CLANG_REQUIRES_CAPABILITY: return "CXX11_CLANG_REQUIRES_CAPABILITY";
    case RequiresCapabilityAttrSpelling::GNU_EXCLUSIVE_LOCKS_REQUIRED: return "GNU_EXCLUSIVE_LOCKS_REQUIRED";
    case RequiresCapabilityAttrSpelling::CXX11_CLANG_EXCLUSIVE_LOCKS_REQUIRED: return "CXX11_CLANG_EXCLUSIVE_LOCKS_REQUIRED";
    case RequiresCapabilityAttrSpelling::GNU_REQUIRES_SHARED_CAPABILITY: return "GNU_REQUIRES_SHARED_CAPABILITY";
    case RequiresCapabilityAttrSpelling::CXX11_CLANG_REQUIRES_SHARED_CAPABILITY: return "CXX11_CLANG_REQUIRES_SHARED_CAPABILITY";
    case RequiresCapabilityAttrSpelling::GNU_SHARED_LOCKS_REQUIRED: return "GNU_SHARED_LOCKS_REQUIRED";
    case RequiresCapabilityAttrSpelling::CXX11_CLANG_SHARED_LOCKS_REQUIRED: return "CXX11_CLANG_SHARED_LOCKS_REQUIRED";
    case RequiresCapabilityAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(RestrictAttrSpelling e) {
  switch (e) {
    case RestrictAttrSpelling::DECLSPEC_RESTRICT: return "DECLSPEC_RESTRICT";
    case RestrictAttrSpelling::GNU_MALLOC: return "GNU_MALLOC";
    case RestrictAttrSpelling::CXX11_GNU_MALLOC: return "CXX11_GNU_MALLOC";
    case RestrictAttrSpelling::C2X_GNU_MALLOC: return "C2X_GNU_MALLOC";
    case RestrictAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(RetainAttrSpelling e) {
  switch (e) {
    case RetainAttrSpelling::GNU_RETAIN: return "GNU_RETAIN";
    case RetainAttrSpelling::CXX11_GNU_RETAIN: return "CXX11_GNU_RETAIN";
    case RetainAttrSpelling::C2X_GNU_RETAIN: return "C2X_GNU_RETAIN";
    case RetainAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ReturnTypestateAttrConsumedState e) {
  switch (e) {
    case ReturnTypestateAttrConsumedState::UNKNOWN: return "UNKNOWN";
    case ReturnTypestateAttrConsumedState::CONSUMED: return "CONSUMED";
    case ReturnTypestateAttrConsumedState::UNCONSUMED: return "UNCONSUMED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ReturnTypestateAttrSpelling e) {
  switch (e) {
    case ReturnTypestateAttrSpelling::GNU_RETURN_TYPESTATE: return "GNU_RETURN_TYPESTATE";
    case ReturnTypestateAttrSpelling::CXX11_CLANG_RETURN_TYPESTATE: return "CXX11_CLANG_RETURN_TYPESTATE";
    case ReturnTypestateAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ReturnsNonNullAttrSpelling e) {
  switch (e) {
    case ReturnsNonNullAttrSpelling::GNU_RETURNS_NONNULL: return "GNU_RETURNS_NONNULL";
    case ReturnsNonNullAttrSpelling::CXX11_GNU_RETURNS_NONNULL: return "CXX11_GNU_RETURNS_NONNULL";
    case ReturnsNonNullAttrSpelling::C2X_GNU_RETURNS_NONNULL: return "C2X_GNU_RETURNS_NONNULL";
    case ReturnsNonNullAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ReturnsTwiceAttrSpelling e) {
  switch (e) {
    case ReturnsTwiceAttrSpelling::GNU_RETURNS_TWICE: return "GNU_RETURNS_TWICE";
    case ReturnsTwiceAttrSpelling::CXX11_GNU_RETURNS_TWICE: return "CXX11_GNU_RETURNS_TWICE";
    case ReturnsTwiceAttrSpelling::C2X_GNU_RETURNS_TWICE: return "C2X_GNU_RETURNS_TWICE";
    case ReturnsTwiceAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SYCLKernelAttrSpelling e) {
  switch (e) {
    case SYCLKernelAttrSpelling::GNU_SYCL_KERNEL: return "GNU_SYCL_KERNEL";
    case SYCLKernelAttrSpelling::CXX11_CLANG_SYCL_KERNEL: return "CXX11_CLANG_SYCL_KERNEL";
    case SYCLKernelAttrSpelling::C2X_CLANG_SYCL_KERNEL: return "C2X_CLANG_SYCL_KERNEL";
    case SYCLKernelAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SYCLSpecialClassAttrSpelling e) {
  switch (e) {
    case SYCLSpecialClassAttrSpelling::GNU_SYCL_SPECIAL_CLASS: return "GNU_SYCL_SPECIAL_CLASS";
    case SYCLSpecialClassAttrSpelling::CXX11_CLANG_SYCL_SPECIAL_CLASS: return "CXX11_CLANG_SYCL_SPECIAL_CLASS";
    case SYCLSpecialClassAttrSpelling::C2X_CLANG_SYCL_SPECIAL_CLASS: return "C2X_CLANG_SYCL_SPECIAL_CLASS";
    case SYCLSpecialClassAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ScopedLockableAttrSpelling e) {
  switch (e) {
    case ScopedLockableAttrSpelling::GNU_SCOPED_LOCKABLE: return "GNU_SCOPED_LOCKABLE";
    case ScopedLockableAttrSpelling::CXX11_CLANG_SCOPED_LOCKABLE: return "CXX11_CLANG_SCOPED_LOCKABLE";
    case ScopedLockableAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SectionAttrSpelling e) {
  switch (e) {
    case SectionAttrSpelling::GNU_SECTION: return "GNU_SECTION";
    case SectionAttrSpelling::CXX11_GNU_SECTION: return "CXX11_GNU_SECTION";
    case SectionAttrSpelling::C2X_GNU_SECTION: return "C2X_GNU_SECTION";
    case SectionAttrSpelling::DECLSPEC_ALLOCATE: return "DECLSPEC_ALLOCATE";
    case SectionAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SelectAnyAttrSpelling e) {
  switch (e) {
    case SelectAnyAttrSpelling::DECLSPEC_SELECTANY: return "DECLSPEC_SELECTANY";
    case SelectAnyAttrSpelling::GNU_SELECTANY: return "GNU_SELECTANY";
    case SelectAnyAttrSpelling::CXX11_GNU_SELECTANY: return "CXX11_GNU_SELECTANY";
    case SelectAnyAttrSpelling::C2X_GNU_SELECTANY: return "C2X_GNU_SELECTANY";
    case SelectAnyAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SentinelAttrSpelling e) {
  switch (e) {
    case SentinelAttrSpelling::GNU_SENTINEL: return "GNU_SENTINEL";
    case SentinelAttrSpelling::CXX11_GNU_SENTINEL: return "CXX11_GNU_SENTINEL";
    case SentinelAttrSpelling::C2X_GNU_SENTINEL: return "C2X_GNU_SENTINEL";
    case SentinelAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SetTypestateAttrConsumedState e) {
  switch (e) {
    case SetTypestateAttrConsumedState::UNKNOWN: return "UNKNOWN";
    case SetTypestateAttrConsumedState::CONSUMED: return "CONSUMED";
    case SetTypestateAttrConsumedState::UNCONSUMED: return "UNCONSUMED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SetTypestateAttrSpelling e) {
  switch (e) {
    case SetTypestateAttrSpelling::GNU_TYPESTATE: return "GNU_TYPESTATE";
    case SetTypestateAttrSpelling::CXX11_CLANG_TYPESTATE: return "CXX11_CLANG_TYPESTATE";
    case SetTypestateAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SourceLocExprIdentKind e) {
  switch (e) {
    case SourceLocExprIdentKind::FUNCTION: return "FUNCTION";
    case SourceLocExprIdentKind::FILE: return "FILE";
    case SourceLocExprIdentKind::LINE: return "LINE";
    case SourceLocExprIdentKind::COLUMN: return "COLUMN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SpeculativeLoadHardeningAttrSpelling e) {
  switch (e) {
    case SpeculativeLoadHardeningAttrSpelling::GNU_SPECULATIVE_LOAD_HARDENING: return "GNU_SPECULATIVE_LOAD_HARDENING";
    case SpeculativeLoadHardeningAttrSpelling::CXX11_CLANG_SPECULATIVE_LOAD_HARDENING: return "CXX11_CLANG_SPECULATIVE_LOAD_HARDENING";
    case SpeculativeLoadHardeningAttrSpelling::C2X_CLANG_SPECULATIVE_LOAD_HARDENING: return "C2X_CLANG_SPECULATIVE_LOAD_HARDENING";
    case SpeculativeLoadHardeningAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(StandaloneDebugAttrSpelling e) {
  switch (e) {
    case StandaloneDebugAttrSpelling::GNU_STANDALONE_DEBUG: return "GNU_STANDALONE_DEBUG";
    case StandaloneDebugAttrSpelling::CXX11_CLANG_STANDALONE_DEBUG: return "CXX11_CLANG_STANDALONE_DEBUG";
    case StandaloneDebugAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(StdCallAttrSpelling e) {
  switch (e) {
    case StdCallAttrSpelling::GNU_STDCALL: return "GNU_STDCALL";
    case StdCallAttrSpelling::CXX11_GNU_STDCALL: return "CXX11_GNU_STDCALL";
    case StdCallAttrSpelling::C2X_GNU_STDCALL: return "C2X_GNU_STDCALL";
    case StdCallAttrSpelling::KEYWORD_STDCALL: return "KEYWORD_STDCALL";
    case StdCallAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(StmtLikelihood e) {
  switch (e) {
    case StmtLikelihood::UNLIKELY: return "UNLIKELY";
    case StmtLikelihood::NONE: return "NONE";
    case StmtLikelihood::LIKELY: return "LIKELY";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(StmtKind e) {
  switch (e) {
    case StmtKind::GCC_ASM_STMT: return "GCC_ASM_STMT";
    case StmtKind::MS_ASM_STMT: return "MS_ASM_STMT";
    case StmtKind::BREAK_STMT: return "BREAK_STMT";
    case StmtKind::CXX_CATCH_STMT: return "CXX_CATCH_STMT";
    case StmtKind::CXX_FOR_RANGE_STMT: return "CXX_FOR_RANGE_STMT";
    case StmtKind::CXX_TRY_STMT: return "CXX_TRY_STMT";
    case StmtKind::CAPTURED_STMT: return "CAPTURED_STMT";
    case StmtKind::COMPOUND_STMT: return "COMPOUND_STMT";
    case StmtKind::CONTINUE_STMT: return "CONTINUE_STMT";
    case StmtKind::CORETURN_STMT: return "CORETURN_STMT";
    case StmtKind::COROUTINE_BODY_STMT: return "COROUTINE_BODY_STMT";
    case StmtKind::DECL_STMT: return "DECL_STMT";
    case StmtKind::DO_STMT: return "DO_STMT";
    case StmtKind::FOR_STMT: return "FOR_STMT";
    case StmtKind::GOTO_STMT: return "GOTO_STMT";
    case StmtKind::IF_STMT: return "IF_STMT";
    case StmtKind::INDIRECT_GOTO_STMT: return "INDIRECT_GOTO_STMT";
    case StmtKind::MS_DEPENDENT_EXISTS_STMT: return "MS_DEPENDENT_EXISTS_STMT";
    case StmtKind::NULL_STMT: return "NULL_STMT";
    case StmtKind::OMP_CANONICAL_LOOP: return "OMP_CANONICAL_LOOP";
    case StmtKind::OMP_ATOMIC_DIRECTIVE: return "OMP_ATOMIC_DIRECTIVE";
    case StmtKind::OMP_BARRIER_DIRECTIVE: return "OMP_BARRIER_DIRECTIVE";
    case StmtKind::OMP_CANCEL_DIRECTIVE: return "OMP_CANCEL_DIRECTIVE";
    case StmtKind::OMP_CANCELLATION_POINT_DIRECTIVE: return "OMP_CANCELLATION_POINT_DIRECTIVE";
    case StmtKind::OMP_CRITICAL_DIRECTIVE: return "OMP_CRITICAL_DIRECTIVE";
    case StmtKind::OMP_DEPOBJ_DIRECTIVE: return "OMP_DEPOBJ_DIRECTIVE";
    case StmtKind::OMP_DISPATCH_DIRECTIVE: return "OMP_DISPATCH_DIRECTIVE";
    case StmtKind::OMP_FLUSH_DIRECTIVE: return "OMP_FLUSH_DIRECTIVE";
    case StmtKind::OMP_INTEROP_DIRECTIVE: return "OMP_INTEROP_DIRECTIVE";
    case StmtKind::OMP_DISTRIBUTE_DIRECTIVE: return "OMP_DISTRIBUTE_DIRECTIVE";
    case StmtKind::OMP_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE: return "OMP_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE";
    case StmtKind::OMP_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE: return "OMP_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE";
    case StmtKind::OMP_DISTRIBUTE_SIMD_DIRECTIVE: return "OMP_DISTRIBUTE_SIMD_DIRECTIVE";
    case StmtKind::OMP_FOR_DIRECTIVE: return "OMP_FOR_DIRECTIVE";
    case StmtKind::OMP_FOR_SIMD_DIRECTIVE: return "OMP_FOR_SIMD_DIRECTIVE";
    case StmtKind::OMP_GENERIC_LOOP_DIRECTIVE: return "OMP_GENERIC_LOOP_DIRECTIVE";
    case StmtKind::OMP_MASTER_TASK_LOOP_DIRECTIVE: return "OMP_MASTER_TASK_LOOP_DIRECTIVE";
    case StmtKind::OMP_MASTER_TASK_LOOP_SIMD_DIRECTIVE: return "OMP_MASTER_TASK_LOOP_SIMD_DIRECTIVE";
    case StmtKind::OMP_PARALLEL_FOR_DIRECTIVE: return "OMP_PARALLEL_FOR_DIRECTIVE";
    case StmtKind::OMP_PARALLEL_FOR_SIMD_DIRECTIVE: return "OMP_PARALLEL_FOR_SIMD_DIRECTIVE";
    case StmtKind::OMP_PARALLEL_MASTER_TASK_LOOP_DIRECTIVE: return "OMP_PARALLEL_MASTER_TASK_LOOP_DIRECTIVE";
    case StmtKind::OMP_PARALLEL_MASTER_TASK_LOOP_SIMD_DIRECTIVE: return "OMP_PARALLEL_MASTER_TASK_LOOP_SIMD_DIRECTIVE";
    case StmtKind::OMP_SIMD_DIRECTIVE: return "OMP_SIMD_DIRECTIVE";
    case StmtKind::OMP_TARGET_PARALLEL_FOR_SIMD_DIRECTIVE: return "OMP_TARGET_PARALLEL_FOR_SIMD_DIRECTIVE";
    case StmtKind::OMP_TARGET_SIMD_DIRECTIVE: return "OMP_TARGET_SIMD_DIRECTIVE";
    case StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_DIRECTIVE: return "OMP_TARGET_TEAMS_DISTRIBUTE_DIRECTIVE";
    case StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE: return "OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE";
    case StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE: return "OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE";
    case StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE: return "OMP_TARGET_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE";
    case StmtKind::OMP_TASK_LOOP_DIRECTIVE: return "OMP_TASK_LOOP_DIRECTIVE";
    case StmtKind::OMP_TASK_LOOP_SIMD_DIRECTIVE: return "OMP_TASK_LOOP_SIMD_DIRECTIVE";
    case StmtKind::OMP_TEAMS_DISTRIBUTE_DIRECTIVE: return "OMP_TEAMS_DISTRIBUTE_DIRECTIVE";
    case StmtKind::OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE: return "OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE";
    case StmtKind::OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE: return "OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE";
    case StmtKind::OMP_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE: return "OMP_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE";
    case StmtKind::OMP_TILE_DIRECTIVE: return "OMP_TILE_DIRECTIVE";
    case StmtKind::OMP_UNROLL_DIRECTIVE: return "OMP_UNROLL_DIRECTIVE";
    case StmtKind::OMP_MASKED_DIRECTIVE: return "OMP_MASKED_DIRECTIVE";
    case StmtKind::OMP_MASTER_DIRECTIVE: return "OMP_MASTER_DIRECTIVE";
    case StmtKind::OMP_META_DIRECTIVE: return "OMP_META_DIRECTIVE";
    case StmtKind::OMP_ORDERED_DIRECTIVE: return "OMP_ORDERED_DIRECTIVE";
    case StmtKind::OMP_PARALLEL_DIRECTIVE: return "OMP_PARALLEL_DIRECTIVE";
    case StmtKind::OMP_PARALLEL_MASTER_DIRECTIVE: return "OMP_PARALLEL_MASTER_DIRECTIVE";
    case StmtKind::OMP_PARALLEL_SECTIONS_DIRECTIVE: return "OMP_PARALLEL_SECTIONS_DIRECTIVE";
    case StmtKind::OMP_SCAN_DIRECTIVE: return "OMP_SCAN_DIRECTIVE";
    case StmtKind::OMP_SECTION_DIRECTIVE: return "OMP_SECTION_DIRECTIVE";
    case StmtKind::OMP_SECTIONS_DIRECTIVE: return "OMP_SECTIONS_DIRECTIVE";
    case StmtKind::OMP_SINGLE_DIRECTIVE: return "OMP_SINGLE_DIRECTIVE";
    case StmtKind::OMP_TARGET_DATA_DIRECTIVE: return "OMP_TARGET_DATA_DIRECTIVE";
    case StmtKind::OMP_TARGET_DIRECTIVE: return "OMP_TARGET_DIRECTIVE";
    case StmtKind::OMP_TARGET_ENTER_DATA_DIRECTIVE: return "OMP_TARGET_ENTER_DATA_DIRECTIVE";
    case StmtKind::OMP_TARGET_EXIT_DATA_DIRECTIVE: return "OMP_TARGET_EXIT_DATA_DIRECTIVE";
    case StmtKind::OMP_TARGET_PARALLEL_DIRECTIVE: return "OMP_TARGET_PARALLEL_DIRECTIVE";
    case StmtKind::OMP_TARGET_PARALLEL_FOR_DIRECTIVE: return "OMP_TARGET_PARALLEL_FOR_DIRECTIVE";
    case StmtKind::OMP_TARGET_TEAMS_DIRECTIVE: return "OMP_TARGET_TEAMS_DIRECTIVE";
    case StmtKind::OMP_TARGET_UPDATE_DIRECTIVE: return "OMP_TARGET_UPDATE_DIRECTIVE";
    case StmtKind::OMP_TASK_DIRECTIVE: return "OMP_TASK_DIRECTIVE";
    case StmtKind::OMP_TASKGROUP_DIRECTIVE: return "OMP_TASKGROUP_DIRECTIVE";
    case StmtKind::OMP_TASKWAIT_DIRECTIVE: return "OMP_TASKWAIT_DIRECTIVE";
    case StmtKind::OMP_TASKYIELD_DIRECTIVE: return "OMP_TASKYIELD_DIRECTIVE";
    case StmtKind::OMP_TEAMS_DIRECTIVE: return "OMP_TEAMS_DIRECTIVE";
    case StmtKind::OBJ_C_AT_CATCH_STMT: return "OBJ_C_AT_CATCH_STMT";
    case StmtKind::OBJ_C_AT_FINALLY_STMT: return "OBJ_C_AT_FINALLY_STMT";
    case StmtKind::OBJ_C_AT_SYNCHRONIZED_STMT: return "OBJ_C_AT_SYNCHRONIZED_STMT";
    case StmtKind::OBJ_C_AT_THROW_STMT: return "OBJ_C_AT_THROW_STMT";
    case StmtKind::OBJ_C_AT_TRY_STMT: return "OBJ_C_AT_TRY_STMT";
    case StmtKind::OBJ_C_AUTORELEASE_POOL_STMT: return "OBJ_C_AUTORELEASE_POOL_STMT";
    case StmtKind::OBJ_C_FOR_COLLECTION_STMT: return "OBJ_C_FOR_COLLECTION_STMT";
    case StmtKind::RETURN_STMT: return "RETURN_STMT";
    case StmtKind::SEH_EXCEPT_STMT: return "SEH_EXCEPT_STMT";
    case StmtKind::SEH_FINALLY_STMT: return "SEH_FINALLY_STMT";
    case StmtKind::SEH_LEAVE_STMT: return "SEH_LEAVE_STMT";
    case StmtKind::SEH_TRY_STMT: return "SEH_TRY_STMT";
    case StmtKind::CASE_STMT: return "CASE_STMT";
    case StmtKind::DEFAULT_STMT: return "DEFAULT_STMT";
    case StmtKind::SWITCH_STMT: return "SWITCH_STMT";
    case StmtKind::ATTRIBUTED_STMT: return "ATTRIBUTED_STMT";
    case StmtKind::BINARY_CONDITIONAL_OPERATOR: return "BINARY_CONDITIONAL_OPERATOR";
    case StmtKind::CONDITIONAL_OPERATOR: return "CONDITIONAL_OPERATOR";
    case StmtKind::ADDR_LABEL_EXPR: return "ADDR_LABEL_EXPR";
    case StmtKind::ARRAY_INIT_INDEX_EXPR: return "ARRAY_INIT_INDEX_EXPR";
    case StmtKind::ARRAY_INIT_LOOP_EXPR: return "ARRAY_INIT_LOOP_EXPR";
    case StmtKind::ARRAY_SUBSCRIPT_EXPR: return "ARRAY_SUBSCRIPT_EXPR";
    case StmtKind::ARRAY_TYPE_TRAIT_EXPR: return "ARRAY_TYPE_TRAIT_EXPR";
    case StmtKind::AS_TYPE_EXPR: return "AS_TYPE_EXPR";
    case StmtKind::ATOMIC_EXPR: return "ATOMIC_EXPR";
    case StmtKind::BINARY_OPERATOR: return "BINARY_OPERATOR";
    case StmtKind::COMPOUND_ASSIGN_OPERATOR: return "COMPOUND_ASSIGN_OPERATOR";
    case StmtKind::BLOCK_EXPR: return "BLOCK_EXPR";
    case StmtKind::CXX_BIND_TEMPORARY_EXPR: return "CXX_BIND_TEMPORARY_EXPR";
    case StmtKind::CXX_BOOL_LITERAL_EXPR: return "CXX_BOOL_LITERAL_EXPR";
    case StmtKind::CXX_CONSTRUCT_EXPR: return "CXX_CONSTRUCT_EXPR";
    case StmtKind::CXX_TEMPORARY_OBJECT_EXPR: return "CXX_TEMPORARY_OBJECT_EXPR";
    case StmtKind::CXX_DEFAULT_ARG_EXPR: return "CXX_DEFAULT_ARG_EXPR";
    case StmtKind::CXX_DEFAULT_INIT_EXPR: return "CXX_DEFAULT_INIT_EXPR";
    case StmtKind::CXX_DELETE_EXPR: return "CXX_DELETE_EXPR";
    case StmtKind::CXX_DEPENDENT_SCOPE_MEMBER_EXPR: return "CXX_DEPENDENT_SCOPE_MEMBER_EXPR";
    case StmtKind::CXX_FOLD_EXPR: return "CXX_FOLD_EXPR";
    case StmtKind::CXX_INHERITED_CTOR_INIT_EXPR: return "CXX_INHERITED_CTOR_INIT_EXPR";
    case StmtKind::CXX_NEW_EXPR: return "CXX_NEW_EXPR";
    case StmtKind::CXX_NOEXCEPT_EXPR: return "CXX_NOEXCEPT_EXPR";
    case StmtKind::CXX_NULL_PTR_LITERAL_EXPR: return "CXX_NULL_PTR_LITERAL_EXPR";
    case StmtKind::CXX_PSEUDO_DESTRUCTOR_EXPR: return "CXX_PSEUDO_DESTRUCTOR_EXPR";
    case StmtKind::CXX_REWRITTEN_BINARY_OPERATOR: return "CXX_REWRITTEN_BINARY_OPERATOR";
    case StmtKind::CXX_SCALAR_VALUE_INIT_EXPR: return "CXX_SCALAR_VALUE_INIT_EXPR";
    case StmtKind::CXX_STD_INITIALIZER_LIST_EXPR: return "CXX_STD_INITIALIZER_LIST_EXPR";
    case StmtKind::CXX_THIS_EXPR: return "CXX_THIS_EXPR";
    case StmtKind::CXX_THROW_EXPR: return "CXX_THROW_EXPR";
    case StmtKind::CXX_TYPEID_EXPR: return "CXX_TYPEID_EXPR";
    case StmtKind::CXX_UNRESOLVED_CONSTRUCT_EXPR: return "CXX_UNRESOLVED_CONSTRUCT_EXPR";
    case StmtKind::CXX_UUIDOF_EXPR: return "CXX_UUIDOF_EXPR";
    case StmtKind::CALL_EXPR: return "CALL_EXPR";
    case StmtKind::CUDA_KERNEL_CALL_EXPR: return "CUDA_KERNEL_CALL_EXPR";
    case StmtKind::CXX_MEMBER_CALL_EXPR: return "CXX_MEMBER_CALL_EXPR";
    case StmtKind::CXX_OPERATOR_CALL_EXPR: return "CXX_OPERATOR_CALL_EXPR";
    case StmtKind::USER_DEFINED_LITERAL: return "USER_DEFINED_LITERAL";
    case StmtKind::BUILTIN_BIT_CAST_EXPR: return "BUILTIN_BIT_CAST_EXPR";
    case StmtKind::C_STYLE_CAST_EXPR: return "C_STYLE_CAST_EXPR";
    case StmtKind::CXX_FUNCTIONAL_CAST_EXPR: return "CXX_FUNCTIONAL_CAST_EXPR";
    case StmtKind::CXX_ADDRSPACE_CAST_EXPR: return "CXX_ADDRSPACE_CAST_EXPR";
    case StmtKind::CXX_CONST_CAST_EXPR: return "CXX_CONST_CAST_EXPR";
    case StmtKind::CXX_DYNAMIC_CAST_EXPR: return "CXX_DYNAMIC_CAST_EXPR";
    case StmtKind::CXX_REINTERPRET_CAST_EXPR: return "CXX_REINTERPRET_CAST_EXPR";
    case StmtKind::CXX_STATIC_CAST_EXPR: return "CXX_STATIC_CAST_EXPR";
    case StmtKind::OBJ_C_BRIDGED_CAST_EXPR: return "OBJ_C_BRIDGED_CAST_EXPR";
    case StmtKind::IMPLICIT_CAST_EXPR: return "IMPLICIT_CAST_EXPR";
    case StmtKind::CHARACTER_LITERAL: return "CHARACTER_LITERAL";
    case StmtKind::CHOOSE_EXPR: return "CHOOSE_EXPR";
    case StmtKind::COMPOUND_LITERAL_EXPR: return "COMPOUND_LITERAL_EXPR";
    case StmtKind::CONCEPT_SPECIALIZATION_EXPR: return "CONCEPT_SPECIALIZATION_EXPR";
    case StmtKind::CONVERT_VECTOR_EXPR: return "CONVERT_VECTOR_EXPR";
    case StmtKind::COAWAIT_EXPR: return "COAWAIT_EXPR";
    case StmtKind::COYIELD_EXPR: return "COYIELD_EXPR";
    case StmtKind::DECL_REF_EXPR: return "DECL_REF_EXPR";
    case StmtKind::DEPENDENT_COAWAIT_EXPR: return "DEPENDENT_COAWAIT_EXPR";
    case StmtKind::DEPENDENT_SCOPE_DECL_REF_EXPR: return "DEPENDENT_SCOPE_DECL_REF_EXPR";
    case StmtKind::DESIGNATED_INIT_EXPR: return "DESIGNATED_INIT_EXPR";
    case StmtKind::DESIGNATED_INIT_UPDATE_EXPR: return "DESIGNATED_INIT_UPDATE_EXPR";
    case StmtKind::EXPRESSION_TRAIT_EXPR: return "EXPRESSION_TRAIT_EXPR";
    case StmtKind::EXT_VECTOR_ELEMENT_EXPR: return "EXT_VECTOR_ELEMENT_EXPR";
    case StmtKind::FIXED_POINT_LITERAL: return "FIXED_POINT_LITERAL";
    case StmtKind::FLOATING_LITERAL: return "FLOATING_LITERAL";
    case StmtKind::CONSTANT_EXPR: return "CONSTANT_EXPR";
    case StmtKind::EXPR_WITH_CLEANUPS: return "EXPR_WITH_CLEANUPS";
    case StmtKind::FUNCTION_PARM_PACK_EXPR: return "FUNCTION_PARM_PACK_EXPR";
    case StmtKind::GNU_NULL_EXPR: return "GNU_NULL_EXPR";
    case StmtKind::GENERIC_SELECTION_EXPR: return "GENERIC_SELECTION_EXPR";
    case StmtKind::IMAGINARY_LITERAL: return "IMAGINARY_LITERAL";
    case StmtKind::IMPLICIT_VALUE_INIT_EXPR: return "IMPLICIT_VALUE_INIT_EXPR";
    case StmtKind::INIT_LIST_EXPR: return "INIT_LIST_EXPR";
    case StmtKind::INTEGER_LITERAL: return "INTEGER_LITERAL";
    case StmtKind::LAMBDA_EXPR: return "LAMBDA_EXPR";
    case StmtKind::MS_PROPERTY_REF_EXPR: return "MS_PROPERTY_REF_EXPR";
    case StmtKind::MS_PROPERTY_SUBSCRIPT_EXPR: return "MS_PROPERTY_SUBSCRIPT_EXPR";
    case StmtKind::MATERIALIZE_TEMPORARY_EXPR: return "MATERIALIZE_TEMPORARY_EXPR";
    case StmtKind::MATRIX_SUBSCRIPT_EXPR: return "MATRIX_SUBSCRIPT_EXPR";
    case StmtKind::MEMBER_EXPR: return "MEMBER_EXPR";
    case StmtKind::NO_INIT_EXPR: return "NO_INIT_EXPR";
    case StmtKind::OMP_ARRAY_SECTION_EXPR: return "OMP_ARRAY_SECTION_EXPR";
    case StmtKind::OMP_ARRAY_SHAPING_EXPR: return "OMP_ARRAY_SHAPING_EXPR";
    case StmtKind::OMP_ITERATOR_EXPR: return "OMP_ITERATOR_EXPR";
    case StmtKind::OBJ_C_ARRAY_LITERAL: return "OBJ_C_ARRAY_LITERAL";
    case StmtKind::OBJ_C_AVAILABILITY_CHECK_EXPR: return "OBJ_C_AVAILABILITY_CHECK_EXPR";
    case StmtKind::OBJ_C_BOOL_LITERAL_EXPR: return "OBJ_C_BOOL_LITERAL_EXPR";
    case StmtKind::OBJ_C_BOXED_EXPR: return "OBJ_C_BOXED_EXPR";
    case StmtKind::OBJ_C_DICTIONARY_LITERAL: return "OBJ_C_DICTIONARY_LITERAL";
    case StmtKind::OBJ_C_ENCODE_EXPR: return "OBJ_C_ENCODE_EXPR";
    case StmtKind::OBJ_C_INDIRECT_COPY_RESTORE_EXPR: return "OBJ_C_INDIRECT_COPY_RESTORE_EXPR";
    case StmtKind::OBJ_C_ISA_EXPR: return "OBJ_C_ISA_EXPR";
    case StmtKind::OBJ_C_IVAR_REF_EXPR: return "OBJ_C_IVAR_REF_EXPR";
    case StmtKind::OBJ_C_MESSAGE_EXPR: return "OBJ_C_MESSAGE_EXPR";
    case StmtKind::OBJ_C_PROPERTY_REF_EXPR: return "OBJ_C_PROPERTY_REF_EXPR";
    case StmtKind::OBJ_C_PROTOCOL_EXPR: return "OBJ_C_PROTOCOL_EXPR";
    case StmtKind::OBJ_C_SELECTOR_EXPR: return "OBJ_C_SELECTOR_EXPR";
    case StmtKind::OBJ_C_STRING_LITERAL: return "OBJ_C_STRING_LITERAL";
    case StmtKind::OBJ_C_SUBSCRIPT_REF_EXPR: return "OBJ_C_SUBSCRIPT_REF_EXPR";
    case StmtKind::OFFSET_OF_EXPR: return "OFFSET_OF_EXPR";
    case StmtKind::OPAQUE_VALUE_EXPR: return "OPAQUE_VALUE_EXPR";
    case StmtKind::UNRESOLVED_LOOKUP_EXPR: return "UNRESOLVED_LOOKUP_EXPR";
    case StmtKind::UNRESOLVED_MEMBER_EXPR: return "UNRESOLVED_MEMBER_EXPR";
    case StmtKind::PACK_EXPANSION_EXPR: return "PACK_EXPANSION_EXPR";
    case StmtKind::PAREN_EXPR: return "PAREN_EXPR";
    case StmtKind::PAREN_LIST_EXPR: return "PAREN_LIST_EXPR";
    case StmtKind::PREDEFINED_EXPR: return "PREDEFINED_EXPR";
    case StmtKind::PSEUDO_OBJECT_EXPR: return "PSEUDO_OBJECT_EXPR";
    case StmtKind::RECOVERY_EXPR: return "RECOVERY_EXPR";
    case StmtKind::REQUIRES_EXPR: return "REQUIRES_EXPR";
    case StmtKind::SYCL_UNIQUE_STABLE_NAME_EXPR: return "SYCL_UNIQUE_STABLE_NAME_EXPR";
    case StmtKind::SHUFFLE_VECTOR_EXPR: return "SHUFFLE_VECTOR_EXPR";
    case StmtKind::SIZE_OF_PACK_EXPR: return "SIZE_OF_PACK_EXPR";
    case StmtKind::SOURCE_LOC_EXPR: return "SOURCE_LOC_EXPR";
    case StmtKind::STMT_EXPR: return "STMT_EXPR";
    case StmtKind::STRING_LITERAL: return "STRING_LITERAL";
    case StmtKind::SUBST_NON_TYPE_TEMPLATE_PARM_EXPR: return "SUBST_NON_TYPE_TEMPLATE_PARM_EXPR";
    case StmtKind::SUBST_NON_TYPE_TEMPLATE_PARM_PACK_EXPR: return "SUBST_NON_TYPE_TEMPLATE_PARM_PACK_EXPR";
    case StmtKind::TYPE_TRAIT_EXPR: return "TYPE_TRAIT_EXPR";
    case StmtKind::TYPO_EXPR: return "TYPO_EXPR";
    case StmtKind::UNARY_EXPR_OR_TYPE_TRAIT_EXPR: return "UNARY_EXPR_OR_TYPE_TRAIT_EXPR";
    case StmtKind::UNARY_OPERATOR: return "UNARY_OPERATOR";
    case StmtKind::VA_ARG_EXPR: return "VA_ARG_EXPR";
    case StmtKind::LABEL_STMT: return "LABEL_STMT";
    case StmtKind::WHILE_STMT: return "WHILE_STMT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(StringLiteralStringKind e) {
  switch (e) {
    case StringLiteralStringKind::ASCII: return "ASCII";
    case StringLiteralStringKind::WIDE: return "WIDE";
    case StringLiteralStringKind::UTF8: return "UTF8";
    case StringLiteralStringKind::UTF16: return "UTF16";
    case StringLiteralStringKind::UTF32: return "UTF32";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftAsyncAttrKind e) {
  switch (e) {
    case SwiftAsyncAttrKind::NONE: return "NONE";
    case SwiftAsyncAttrKind::SWIFT_PRIVATE: return "SWIFT_PRIVATE";
    case SwiftAsyncAttrKind::NOT_SWIFT_PRIVATE: return "NOT_SWIFT_PRIVATE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftAsyncAttrSpelling e) {
  switch (e) {
    case SwiftAsyncAttrSpelling::GNU_SWIFT_ASYNC: return "GNU_SWIFT_ASYNC";
    case SwiftAsyncAttrSpelling::CXX11_CLANG_SWIFT_ASYNC: return "CXX11_CLANG_SWIFT_ASYNC";
    case SwiftAsyncAttrSpelling::C2X_CLANG_SWIFT_ASYNC: return "C2X_CLANG_SWIFT_ASYNC";
    case SwiftAsyncAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftAsyncCallAttrSpelling e) {
  switch (e) {
    case SwiftAsyncCallAttrSpelling::GNU_SWIFTASYNCCALL: return "GNU_SWIFTASYNCCALL";
    case SwiftAsyncCallAttrSpelling::CXX11_CLANG_SWIFTASYNCCALL: return "CXX11_CLANG_SWIFTASYNCCALL";
    case SwiftAsyncCallAttrSpelling::C2X_CLANG_SWIFTASYNCCALL: return "C2X_CLANG_SWIFTASYNCCALL";
    case SwiftAsyncCallAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftAsyncContextAttrSpelling e) {
  switch (e) {
    case SwiftAsyncContextAttrSpelling::GNU_SWIFT_ASYNC_CONTEXT: return "GNU_SWIFT_ASYNC_CONTEXT";
    case SwiftAsyncContextAttrSpelling::CXX11_CLANG_SWIFT_ASYNC_CONTEXT: return "CXX11_CLANG_SWIFT_ASYNC_CONTEXT";
    case SwiftAsyncContextAttrSpelling::C2X_CLANG_SWIFT_ASYNC_CONTEXT: return "C2X_CLANG_SWIFT_ASYNC_CONTEXT";
    case SwiftAsyncContextAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftAsyncErrorAttrConventionKind e) {
  switch (e) {
    case SwiftAsyncErrorAttrConventionKind::NONE: return "NONE";
    case SwiftAsyncErrorAttrConventionKind::NON_NULL_ERROR: return "NON_NULL_ERROR";
    case SwiftAsyncErrorAttrConventionKind::ZERO_ARGUMENT: return "ZERO_ARGUMENT";
    case SwiftAsyncErrorAttrConventionKind::NON_ZERO_ARGUMENT: return "NON_ZERO_ARGUMENT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftAsyncErrorAttrSpelling e) {
  switch (e) {
    case SwiftAsyncErrorAttrSpelling::GNU_SWIFT_ASYNC_ERROR: return "GNU_SWIFT_ASYNC_ERROR";
    case SwiftAsyncErrorAttrSpelling::CXX11_CLANG_SWIFT_ASYNC_ERROR: return "CXX11_CLANG_SWIFT_ASYNC_ERROR";
    case SwiftAsyncErrorAttrSpelling::C2X_CLANG_SWIFT_ASYNC_ERROR: return "C2X_CLANG_SWIFT_ASYNC_ERROR";
    case SwiftAsyncErrorAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftCallAttrSpelling e) {
  switch (e) {
    case SwiftCallAttrSpelling::GNU_SWIFTCALL: return "GNU_SWIFTCALL";
    case SwiftCallAttrSpelling::CXX11_CLANG_SWIFTCALL: return "CXX11_CLANG_SWIFTCALL";
    case SwiftCallAttrSpelling::C2X_CLANG_SWIFTCALL: return "C2X_CLANG_SWIFTCALL";
    case SwiftCallAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftContextAttrSpelling e) {
  switch (e) {
    case SwiftContextAttrSpelling::GNU_SWIFT_CONTEXT: return "GNU_SWIFT_CONTEXT";
    case SwiftContextAttrSpelling::CXX11_CLANG_SWIFT_CONTEXT: return "CXX11_CLANG_SWIFT_CONTEXT";
    case SwiftContextAttrSpelling::C2X_CLANG_SWIFT_CONTEXT: return "C2X_CLANG_SWIFT_CONTEXT";
    case SwiftContextAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftErrorAttrConventionKind e) {
  switch (e) {
    case SwiftErrorAttrConventionKind::NONE: return "NONE";
    case SwiftErrorAttrConventionKind::NON_NULL_ERROR: return "NON_NULL_ERROR";
    case SwiftErrorAttrConventionKind::NULL_RESULT: return "NULL_RESULT";
    case SwiftErrorAttrConventionKind::ZERO_RESULT: return "ZERO_RESULT";
    case SwiftErrorAttrConventionKind::NON_ZERO_RESULT: return "NON_ZERO_RESULT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftErrorResultAttrSpelling e) {
  switch (e) {
    case SwiftErrorResultAttrSpelling::GNU_SWIFT_ERROR_RESULT: return "GNU_SWIFT_ERROR_RESULT";
    case SwiftErrorResultAttrSpelling::CXX11_CLANG_SWIFT_ERROR_RESULT: return "CXX11_CLANG_SWIFT_ERROR_RESULT";
    case SwiftErrorResultAttrSpelling::C2X_CLANG_SWIFT_ERROR_RESULT: return "C2X_CLANG_SWIFT_ERROR_RESULT";
    case SwiftErrorResultAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftIndirectResultAttrSpelling e) {
  switch (e) {
    case SwiftIndirectResultAttrSpelling::GNU_SWIFT_INDIRECT_RESULT: return "GNU_SWIFT_INDIRECT_RESULT";
    case SwiftIndirectResultAttrSpelling::CXX11_CLANG_SWIFT_INDIRECT_RESULT: return "CXX11_CLANG_SWIFT_INDIRECT_RESULT";
    case SwiftIndirectResultAttrSpelling::C2X_CLANG_SWIFT_INDIRECT_RESULT: return "C2X_CLANG_SWIFT_INDIRECT_RESULT";
    case SwiftIndirectResultAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftNewTypeAttrNewtypeKind e) {
  switch (e) {
    case SwiftNewTypeAttrNewtypeKind::STRUCT: return "STRUCT";
    case SwiftNewTypeAttrNewtypeKind::ENUM: return "ENUM";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftNewTypeAttrSpelling e) {
  switch (e) {
    case SwiftNewTypeAttrSpelling::GNU_SWIFT_NEWTYPE: return "GNU_SWIFT_NEWTYPE";
    case SwiftNewTypeAttrSpelling::GNU_SWIFT_WRAPPER: return "GNU_SWIFT_WRAPPER";
    case SwiftNewTypeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SysVABIAttrSpelling e) {
  switch (e) {
    case SysVABIAttrSpelling::GNU_SYSV_ABI: return "GNU_SYSV_ABI";
    case SysVABIAttrSpelling::CXX11_GNU_SYSV_ABI: return "CXX11_GNU_SYSV_ABI";
    case SysVABIAttrSpelling::C2X_GNU_SYSV_ABI: return "C2X_GNU_SYSV_ABI";
    case SysVABIAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TLSModelAttrSpelling e) {
  switch (e) {
    case TLSModelAttrSpelling::GNU_TLS_MODEL: return "GNU_TLS_MODEL";
    case TLSModelAttrSpelling::CXX11_GNU_TLS_MODEL: return "CXX11_GNU_TLS_MODEL";
    case TLSModelAttrSpelling::C2X_GNU_TLS_MODEL: return "C2X_GNU_TLS_MODEL";
    case TLSModelAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TargetAttrSpelling e) {
  switch (e) {
    case TargetAttrSpelling::GNU_TARGET: return "GNU_TARGET";
    case TargetAttrSpelling::CXX11_GNU_TARGET: return "CXX11_GNU_TARGET";
    case TargetAttrSpelling::C2X_GNU_TARGET: return "C2X_GNU_TARGET";
    case TargetAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TargetClonesAttrSpelling e) {
  switch (e) {
    case TargetClonesAttrSpelling::GNU_TARGET_CLONES: return "GNU_TARGET_CLONES";
    case TargetClonesAttrSpelling::CXX11_GNU_TARGET_CLONES: return "CXX11_GNU_TARGET_CLONES";
    case TargetClonesAttrSpelling::C2X_GNU_TARGET_CLONES: return "C2X_GNU_TARGET_CLONES";
    case TargetClonesAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TemplateArgumentKind e) {
  switch (e) {
    case TemplateArgumentKind::EMPTY: return "EMPTY";
    case TemplateArgumentKind::TYPE: return "TYPE";
    case TemplateArgumentKind::DECLARATION: return "DECLARATION";
    case TemplateArgumentKind::NULL_POINTER: return "NULL_POINTER";
    case TemplateArgumentKind::INTEGRAL: return "INTEGRAL";
    case TemplateArgumentKind::TEMPLATE: return "TEMPLATE";
    case TemplateArgumentKind::TEMPLATE_EXPANSION: return "TEMPLATE_EXPANSION";
    case TemplateArgumentKind::EXPRESSION: return "EXPRESSION";
    case TemplateArgumentKind::PACK: return "PACK";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TestTypestateAttrConsumedState e) {
  switch (e) {
    case TestTypestateAttrConsumedState::CONSUMED: return "CONSUMED";
    case TestTypestateAttrConsumedState::UNCONSUMED: return "UNCONSUMED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TestTypestateAttrSpelling e) {
  switch (e) {
    case TestTypestateAttrSpelling::GNU_TEST_TYPESTATE: return "GNU_TEST_TYPESTATE";
    case TestTypestateAttrSpelling::CXX11_CLANG_TEST_TYPESTATE: return "CXX11_CLANG_TEST_TYPESTATE";
    case TestTypestateAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ThisCallAttrSpelling e) {
  switch (e) {
    case ThisCallAttrSpelling::GNU_THISCALL: return "GNU_THISCALL";
    case ThisCallAttrSpelling::CXX11_GNU_THISCALL: return "CXX11_GNU_THISCALL";
    case ThisCallAttrSpelling::C2X_GNU_THISCALL: return "C2X_GNU_THISCALL";
    case ThisCallAttrSpelling::KEYWORD_THISCALL: return "KEYWORD_THISCALL";
    case ThisCallAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TransparentUnionAttrSpelling e) {
  switch (e) {
    case TransparentUnionAttrSpelling::GNU_TRANSPARENT_UNION: return "GNU_TRANSPARENT_UNION";
    case TransparentUnionAttrSpelling::CXX11_GNU_TRANSPARENT_UNION: return "CXX11_GNU_TRANSPARENT_UNION";
    case TransparentUnionAttrSpelling::C2X_GNU_TRANSPARENT_UNION: return "C2X_GNU_TRANSPARENT_UNION";
    case TransparentUnionAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TrivialABIAttrSpelling e) {
  switch (e) {
    case TrivialABIAttrSpelling::GNU_TRIVIAL_ABI: return "GNU_TRIVIAL_ABI";
    case TrivialABIAttrSpelling::CXX11_CLANG_TRIVIAL_ABI: return "CXX11_CLANG_TRIVIAL_ABI";
    case TrivialABIAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TryAcquireCapabilityAttrSpelling e) {
  switch (e) {
    case TryAcquireCapabilityAttrSpelling::GNU_TRY_ACQUIRE_CAPABILITY: return "GNU_TRY_ACQUIRE_CAPABILITY";
    case TryAcquireCapabilityAttrSpelling::CXX11_CLANG_TRY_ACQUIRE_CAPABILITY: return "CXX11_CLANG_TRY_ACQUIRE_CAPABILITY";
    case TryAcquireCapabilityAttrSpelling::GNU_TRY_ACQUIRE_SHARED_CAPABILITY: return "GNU_TRY_ACQUIRE_SHARED_CAPABILITY";
    case TryAcquireCapabilityAttrSpelling::CXX11_CLANG_TRY_ACQUIRE_SHARED_CAPABILITY: return "CXX11_CLANG_TRY_ACQUIRE_SHARED_CAPABILITY";
    case TryAcquireCapabilityAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TypeScalarTypeKind e) {
  switch (e) {
    case TypeScalarTypeKind::C_POINTER: return "C_POINTER";
    case TypeScalarTypeKind::BLOCK_POINTER: return "BLOCK_POINTER";
    case TypeScalarTypeKind::OBJ_C_OBJECT_POINTER: return "OBJ_C_OBJECT_POINTER";
    case TypeScalarTypeKind::MEMBER_POINTER: return "MEMBER_POINTER";
    case TypeScalarTypeKind::BOOLEAN: return "BOOLEAN";
    case TypeScalarTypeKind::INTEGRAL: return "INTEGRAL";
    case TypeScalarTypeKind::FLOATING: return "FLOATING";
    case TypeScalarTypeKind::INTEGRAL_COMPLEX: return "INTEGRAL_COMPLEX";
    case TypeScalarTypeKind::FLOATING_COMPLEX: return "FLOATING_COMPLEX";
    case TypeScalarTypeKind::FIXED_POINT: return "FIXED_POINT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TypeKind e) {
  switch (e) {
    case TypeKind::ADJUSTED: return "ADJUSTED";
    case TypeKind::DECAYED: return "DECAYED";
    case TypeKind::CONSTANT_ARRAY: return "CONSTANT_ARRAY";
    case TypeKind::DEPENDENT_SIZED_ARRAY: return "DEPENDENT_SIZED_ARRAY";
    case TypeKind::INCOMPLETE_ARRAY: return "INCOMPLETE_ARRAY";
    case TypeKind::VARIABLE_ARRAY: return "VARIABLE_ARRAY";
    case TypeKind::ATOMIC: return "ATOMIC";
    case TypeKind::ATTRIBUTED: return "ATTRIBUTED";
    case TypeKind::BIT_INT: return "BIT_INT";
    case TypeKind::BLOCK_POINTER: return "BLOCK_POINTER";
    case TypeKind::BUILTIN: return "BUILTIN";
    case TypeKind::COMPLEX: return "COMPLEX";
    case TypeKind::DECLTYPE: return "DECLTYPE";
    case TypeKind::AUTO: return "AUTO";
    case TypeKind::DEDUCED_TEMPLATE_SPECIALIZATION: return "DEDUCED_TEMPLATE_SPECIALIZATION";
    case TypeKind::DEPENDENT_ADDRESS_SPACE: return "DEPENDENT_ADDRESS_SPACE";
    case TypeKind::DEPENDENT_BIT_INT: return "DEPENDENT_BIT_INT";
    case TypeKind::DEPENDENT_NAME: return "DEPENDENT_NAME";
    case TypeKind::DEPENDENT_SIZED_EXT_VECTOR: return "DEPENDENT_SIZED_EXT_VECTOR";
    case TypeKind::DEPENDENT_TEMPLATE_SPECIALIZATION: return "DEPENDENT_TEMPLATE_SPECIALIZATION";
    case TypeKind::DEPENDENT_VECTOR: return "DEPENDENT_VECTOR";
    case TypeKind::ELABORATED: return "ELABORATED";
    case TypeKind::FUNCTION_NO_PROTO: return "FUNCTION_NO_PROTO";
    case TypeKind::FUNCTION_PROTO: return "FUNCTION_PROTO";
    case TypeKind::INJECTED_CLASS_NAME: return "INJECTED_CLASS_NAME";
    case TypeKind::MACRO_QUALIFIED: return "MACRO_QUALIFIED";
    case TypeKind::CONSTANT_MATRIX: return "CONSTANT_MATRIX";
    case TypeKind::DEPENDENT_SIZED_MATRIX: return "DEPENDENT_SIZED_MATRIX";
    case TypeKind::MEMBER_POINTER: return "MEMBER_POINTER";
    case TypeKind::OBJ_C_OBJECT_POINTER: return "OBJ_C_OBJECT_POINTER";
    case TypeKind::OBJ_C_OBJECT: return "OBJ_C_OBJECT";
    case TypeKind::OBJ_C_INTERFACE: return "OBJ_C_INTERFACE";
    case TypeKind::OBJ_C_TYPE_PARAM: return "OBJ_C_TYPE_PARAM";
    case TypeKind::PACK_EXPANSION: return "PACK_EXPANSION";
    case TypeKind::PAREN: return "PAREN";
    case TypeKind::PIPE: return "PIPE";
    case TypeKind::POINTER: return "POINTER";
    case TypeKind::L_VALUE_REFERENCE: return "L_VALUE_REFERENCE";
    case TypeKind::R_VALUE_REFERENCE: return "R_VALUE_REFERENCE";
    case TypeKind::SUBST_TEMPLATE_TYPE_PARM_PACK: return "SUBST_TEMPLATE_TYPE_PARM_PACK";
    case TypeKind::SUBST_TEMPLATE_TYPE_PARM: return "SUBST_TEMPLATE_TYPE_PARM";
    case TypeKind::ENUM: return "ENUM";
    case TypeKind::RECORD: return "RECORD";
    case TypeKind::TEMPLATE_SPECIALIZATION: return "TEMPLATE_SPECIALIZATION";
    case TypeKind::TEMPLATE_TYPE_PARM: return "TEMPLATE_TYPE_PARM";
    case TypeKind::TYPE_OF_EXPR: return "TYPE_OF_EXPR";
    case TypeKind::TYPE_OF: return "TYPE_OF";
    case TypeKind::TYPEDEF: return "TYPEDEF";
    case TypeKind::UNARY_TRANSFORM: return "UNARY_TRANSFORM";
    case TypeKind::UNRESOLVED_USING: return "UNRESOLVED_USING";
    case TypeKind::USING: return "USING";
    case TypeKind::VECTOR: return "VECTOR";
    case TypeKind::EXT_VECTOR: return "EXT_VECTOR";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TypeTagForDatatypeAttrSpelling e) {
  switch (e) {
    case TypeTagForDatatypeAttrSpelling::GNU_TYPE_TAG_FOR_DATATYPE: return "GNU_TYPE_TAG_FOR_DATATYPE";
    case TypeTagForDatatypeAttrSpelling::CXX11_CLANG_TYPE_TAG_FOR_DATATYPE: return "CXX11_CLANG_TYPE_TAG_FOR_DATATYPE";
    case TypeTagForDatatypeAttrSpelling::C2X_CLANG_TYPE_TAG_FOR_DATATYPE: return "C2X_CLANG_TYPE_TAG_FOR_DATATYPE";
    case TypeTagForDatatypeAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TypeVisibilityAttrSpelling e) {
  switch (e) {
    case TypeVisibilityAttrSpelling::GNU_TYPE_VISIBILITY: return "GNU_TYPE_VISIBILITY";
    case TypeVisibilityAttrSpelling::CXX11_CLANG_TYPE_VISIBILITY: return "CXX11_CLANG_TYPE_VISIBILITY";
    case TypeVisibilityAttrSpelling::C2X_CLANG_TYPE_VISIBILITY: return "C2X_CLANG_TYPE_VISIBILITY";
    case TypeVisibilityAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TypeVisibilityAttrVisibilityType e) {
  switch (e) {
    case TypeVisibilityAttrVisibilityType::DEFAULT: return "DEFAULT";
    case TypeVisibilityAttrVisibilityType::HIDDEN: return "HIDDEN";
    case TypeVisibilityAttrVisibilityType::PROTECTED: return "PROTECTED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UnaryTransformTypeUTTKind e) {
  switch (e) {
    case UnaryTransformTypeUTTKind::ENUM_UNDERLYING_TYPE: return "ENUM_UNDERLYING_TYPE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UnavailableAttrImplicitReason e) {
  switch (e) {
    case UnavailableAttrImplicitReason::NONE: return "NONE";
    case UnavailableAttrImplicitReason::ARC_FORBIDDEN_TYPE: return "ARC_FORBIDDEN_TYPE";
    case UnavailableAttrImplicitReason::FORBIDDEN_WEAK: return "FORBIDDEN_WEAK";
    case UnavailableAttrImplicitReason::ARC_FORBIDDEN_CONVERSION: return "ARC_FORBIDDEN_CONVERSION";
    case UnavailableAttrImplicitReason::ARC_INIT_RETURNS_UNRELATED: return "ARC_INIT_RETURNS_UNRELATED";
    case UnavailableAttrImplicitReason::ARC_FIELD_WITH_OWNERSHIP: return "ARC_FIELD_WITH_OWNERSHIP";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UnavailableAttrSpelling e) {
  switch (e) {
    case UnavailableAttrSpelling::GNU_UNAVAILABLE: return "GNU_UNAVAILABLE";
    case UnavailableAttrSpelling::CXX11_CLANG_UNAVAILABLE: return "CXX11_CLANG_UNAVAILABLE";
    case UnavailableAttrSpelling::C2X_CLANG_UNAVAILABLE: return "C2X_CLANG_UNAVAILABLE";
    case UnavailableAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UninitializedAttrSpelling e) {
  switch (e) {
    case UninitializedAttrSpelling::GNU_UNINITIALIZED: return "GNU_UNINITIALIZED";
    case UninitializedAttrSpelling::CXX11_CLANG_UNINITIALIZED: return "CXX11_CLANG_UNINITIALIZED";
    case UninitializedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UnlikelyAttrSpelling e) {
  switch (e) {
    case UnlikelyAttrSpelling::CXX11_UNLIKELY: return "CXX11_UNLIKELY";
    case UnlikelyAttrSpelling::C2X_CLANG_UNLIKELY: return "C2X_CLANG_UNLIKELY";
    case UnlikelyAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UnusedAttrSpelling e) {
  switch (e) {
    case UnusedAttrSpelling::CXX11_MAYBE_UNUSED: return "CXX11_MAYBE_UNUSED";
    case UnusedAttrSpelling::GNU_UNUSED: return "GNU_UNUSED";
    case UnusedAttrSpelling::CXX11_GNU_UNUSED: return "CXX11_GNU_UNUSED";
    case UnusedAttrSpelling::C2X_GNU_UNUSED: return "C2X_GNU_UNUSED";
    case UnusedAttrSpelling::C2X_MAYBE_UNUSED: return "C2X_MAYBE_UNUSED";
    case UnusedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UseHandleAttrSpelling e) {
  switch (e) {
    case UseHandleAttrSpelling::GNU_USE_HANDLE: return "GNU_USE_HANDLE";
    case UseHandleAttrSpelling::CXX11_CLANG_USE_HANDLE: return "CXX11_CLANG_USE_HANDLE";
    case UseHandleAttrSpelling::C2X_CLANG_USE_HANDLE: return "C2X_CLANG_USE_HANDLE";
    case UseHandleAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UsedAttrSpelling e) {
  switch (e) {
    case UsedAttrSpelling::GNU_USED: return "GNU_USED";
    case UsedAttrSpelling::CXX11_GNU_USED: return "CXX11_GNU_USED";
    case UsedAttrSpelling::C2X_GNU_USED: return "C2X_GNU_USED";
    case UsedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UserDefinedLiteralLiteralOperatorKind e) {
  switch (e) {
    case UserDefinedLiteralLiteralOperatorKind::RAW: return "RAW";
    case UserDefinedLiteralLiteralOperatorKind::TEMPLATE: return "TEMPLATE";
    case UserDefinedLiteralLiteralOperatorKind::INTEGER: return "INTEGER";
    case UserDefinedLiteralLiteralOperatorKind::FLOATING: return "FLOATING";
    case UserDefinedLiteralLiteralOperatorKind::STRING: return "STRING";
    case UserDefinedLiteralLiteralOperatorKind::CHARACTER: return "CHARACTER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UsingIfExistsAttrSpelling e) {
  switch (e) {
    case UsingIfExistsAttrSpelling::GNU_USING_IF_EXISTS: return "GNU_USING_IF_EXISTS";
    case UsingIfExistsAttrSpelling::CXX11_CLANG_USING_IF_EXISTS: return "CXX11_CLANG_USING_IF_EXISTS";
    case UsingIfExistsAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UuidAttrSpelling e) {
  switch (e) {
    case UuidAttrSpelling::DECLSPEC_UUID: return "DECLSPEC_UUID";
    case UuidAttrSpelling::MICROSOFT_UUID: return "MICROSOFT_UUID";
    case UuidAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(VarDeclDefinitionKind e) {
  switch (e) {
    case VarDeclDefinitionKind::DECLARATION_ONLY: return "DECLARATION_ONLY";
    case VarDeclDefinitionKind::TENTATIVE_DEFINITION: return "TENTATIVE_DEFINITION";
    case VarDeclDefinitionKind::DEFINITION: return "DEFINITION";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(VarDeclInitializationStyle e) {
  switch (e) {
    case VarDeclInitializationStyle::C_INIT: return "C_INIT";
    case VarDeclInitializationStyle::CALL_INITIALIZER: return "CALL_INITIALIZER";
    case VarDeclInitializationStyle::LIST_INITIALIZER: return "LIST_INITIALIZER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(VarDeclTLSKind e) {
  switch (e) {
    case VarDeclTLSKind::NONE: return "NONE";
    case VarDeclTLSKind::STATIC: return "STATIC";
    case VarDeclTLSKind::DYNAMIC: return "DYNAMIC";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(VecReturnAttrSpelling e) {
  switch (e) {
    case VecReturnAttrSpelling::GNU_VECRETURN: return "GNU_VECRETURN";
    case VecReturnAttrSpelling::CXX11_CLANG_VECRETURN: return "CXX11_CLANG_VECRETURN";
    case VecReturnAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(VectorCallAttrSpelling e) {
  switch (e) {
    case VectorCallAttrSpelling::GNU_VECTORCALL: return "GNU_VECTORCALL";
    case VectorCallAttrSpelling::CXX11_CLANG_VECTORCALL: return "CXX11_CLANG_VECTORCALL";
    case VectorCallAttrSpelling::C2X_CLANG_VECTORCALL: return "C2X_CLANG_VECTORCALL";
    case VectorCallAttrSpelling::KEYWORD_VECTORCALL: return "KEYWORD_VECTORCALL";
    case VectorCallAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(VectorTypeVectorKind e) {
  switch (e) {
    case VectorTypeVectorKind::GENERIC_VECTOR: return "GENERIC_VECTOR";
    case VectorTypeVectorKind::ALTI_VEC_VECTOR: return "ALTI_VEC_VECTOR";
    case VectorTypeVectorKind::ALTI_VEC_PIXEL: return "ALTI_VEC_PIXEL";
    case VectorTypeVectorKind::ALTI_VEC_BOOLEAN: return "ALTI_VEC_BOOLEAN";
    case VectorTypeVectorKind::NEON_VECTOR: return "NEON_VECTOR";
    case VectorTypeVectorKind::NEON_POLY_VECTOR: return "NEON_POLY_VECTOR";
    case VectorTypeVectorKind::SVE_FIXED_LENGTH_DATA_VECTOR: return "SVE_FIXED_LENGTH_DATA_VECTOR";
    case VectorTypeVectorKind::SVE_FIXED_LENGTH_PREDICATE_VECTOR: return "SVE_FIXED_LENGTH_PREDICATE_VECTOR";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(VisibilityAttrSpelling e) {
  switch (e) {
    case VisibilityAttrSpelling::GNU_VISIBILITY: return "GNU_VISIBILITY";
    case VisibilityAttrSpelling::CXX11_GNU_VISIBILITY: return "CXX11_GNU_VISIBILITY";
    case VisibilityAttrSpelling::C2X_GNU_VISIBILITY: return "C2X_GNU_VISIBILITY";
    case VisibilityAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(VisibilityAttrVisibilityType e) {
  switch (e) {
    case VisibilityAttrVisibilityType::DEFAULT: return "DEFAULT";
    case VisibilityAttrVisibilityType::HIDDEN: return "HIDDEN";
    case VisibilityAttrVisibilityType::PROTECTED: return "PROTECTED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(WarnUnusedAttrSpelling e) {
  switch (e) {
    case WarnUnusedAttrSpelling::GNU_WARN_UNUSED: return "GNU_WARN_UNUSED";
    case WarnUnusedAttrSpelling::CXX11_GNU_WARN_UNUSED: return "CXX11_GNU_WARN_UNUSED";
    case WarnUnusedAttrSpelling::C2X_GNU_WARN_UNUSED: return "C2X_GNU_WARN_UNUSED";
    case WarnUnusedAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(WarnUnusedResultAttrSpelling e) {
  switch (e) {
    case WarnUnusedResultAttrSpelling::CXX11_NODISCARD: return "CXX11_NODISCARD";
    case WarnUnusedResultAttrSpelling::C2X_NODISCARD: return "C2X_NODISCARD";
    case WarnUnusedResultAttrSpelling::CXX11_CLANG_WARN_UNUSED_RESULT: return "CXX11_CLANG_WARN_UNUSED_RESULT";
    case WarnUnusedResultAttrSpelling::GNU_WARN_UNUSED_RESULT: return "GNU_WARN_UNUSED_RESULT";
    case WarnUnusedResultAttrSpelling::CXX11_GNU_WARN_UNUSED_RESULT: return "CXX11_GNU_WARN_UNUSED_RESULT";
    case WarnUnusedResultAttrSpelling::C2X_GNU_WARN_UNUSED_RESULT: return "C2X_GNU_WARN_UNUSED_RESULT";
    case WarnUnusedResultAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(WeakAttrSpelling e) {
  switch (e) {
    case WeakAttrSpelling::GNU_WEAK: return "GNU_WEAK";
    case WeakAttrSpelling::CXX11_GNU_WEAK: return "CXX11_GNU_WEAK";
    case WeakAttrSpelling::C2X_GNU_WEAK: return "C2X_GNU_WEAK";
    case WeakAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(WeakImportAttrSpelling e) {
  switch (e) {
    case WeakImportAttrSpelling::GNU_WEAK_IMPORT: return "GNU_WEAK_IMPORT";
    case WeakImportAttrSpelling::CXX11_CLANG_WEAK_IMPORT: return "CXX11_CLANG_WEAK_IMPORT";
    case WeakImportAttrSpelling::C2X_CLANG_WEAK_IMPORT: return "C2X_CLANG_WEAK_IMPORT";
    case WeakImportAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(WeakRefAttrSpelling e) {
  switch (e) {
    case WeakRefAttrSpelling::GNU_WEAKREF: return "GNU_WEAKREF";
    case WeakRefAttrSpelling::CXX11_GNU_WEAKREF: return "CXX11_GNU_WEAKREF";
    case WeakRefAttrSpelling::C2X_GNU_WEAKREF: return "C2X_GNU_WEAKREF";
    case WeakRefAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(WebAssemblyExportNameAttrSpelling e) {
  switch (e) {
    case WebAssemblyExportNameAttrSpelling::GNU_EXPORT_NAME: return "GNU_EXPORT_NAME";
    case WebAssemblyExportNameAttrSpelling::CXX11_CLANG_EXPORT_NAME: return "CXX11_CLANG_EXPORT_NAME";
    case WebAssemblyExportNameAttrSpelling::C2X_CLANG_EXPORT_NAME: return "C2X_CLANG_EXPORT_NAME";
    case WebAssemblyExportNameAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(WebAssemblyImportModuleAttrSpelling e) {
  switch (e) {
    case WebAssemblyImportModuleAttrSpelling::GNU_IMPORT_MODULE: return "GNU_IMPORT_MODULE";
    case WebAssemblyImportModuleAttrSpelling::CXX11_CLANG_IMPORT_MODULE: return "CXX11_CLANG_IMPORT_MODULE";
    case WebAssemblyImportModuleAttrSpelling::C2X_CLANG_IMPORT_MODULE: return "C2X_CLANG_IMPORT_MODULE";
    case WebAssemblyImportModuleAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(WebAssemblyImportNameAttrSpelling e) {
  switch (e) {
    case WebAssemblyImportNameAttrSpelling::GNU_IMPORT_NAME: return "GNU_IMPORT_NAME";
    case WebAssemblyImportNameAttrSpelling::CXX11_CLANG_IMPORT_NAME: return "CXX11_CLANG_IMPORT_NAME";
    case WebAssemblyImportNameAttrSpelling::C2X_CLANG_IMPORT_NAME: return "C2X_CLANG_IMPORT_NAME";
    case WebAssemblyImportNameAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(X86ForceAlignArgPointerAttrSpelling e) {
  switch (e) {
    case X86ForceAlignArgPointerAttrSpelling::GNU_FORCE_ALIGN_ARGUMENT_POINTER: return "GNU_FORCE_ALIGN_ARGUMENT_POINTER";
    case X86ForceAlignArgPointerAttrSpelling::CXX11_GNU_FORCE_ALIGN_ARGUMENT_POINTER: return "CXX11_GNU_FORCE_ALIGN_ARGUMENT_POINTER";
    case X86ForceAlignArgPointerAttrSpelling::C2X_GNU_FORCE_ALIGN_ARGUMENT_POINTER: return "C2X_GNU_FORCE_ALIGN_ARGUMENT_POINTER";
    case X86ForceAlignArgPointerAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(XRayInstrumentAttrSpelling e) {
  switch (e) {
    case XRayInstrumentAttrSpelling::GNU_XRAY_ALWAYS_INSTRUMENT: return "GNU_XRAY_ALWAYS_INSTRUMENT";
    case XRayInstrumentAttrSpelling::CXX11_CLANG_XRAY_ALWAYS_INSTRUMENT: return "CXX11_CLANG_XRAY_ALWAYS_INSTRUMENT";
    case XRayInstrumentAttrSpelling::C2X_CLANG_XRAY_ALWAYS_INSTRUMENT: return "C2X_CLANG_XRAY_ALWAYS_INSTRUMENT";
    case XRayInstrumentAttrSpelling::GNU_XRAY_NEVER_INSTRUMENT: return "GNU_XRAY_NEVER_INSTRUMENT";
    case XRayInstrumentAttrSpelling::CXX11_CLANG_XRAY_NEVER_INSTRUMENT: return "CXX11_CLANG_XRAY_NEVER_INSTRUMENT";
    case XRayInstrumentAttrSpelling::C2X_CLANG_XRAY_NEVER_INSTRUMENT: return "C2X_CLANG_XRAY_NEVER_INSTRUMENT";
    case XRayInstrumentAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(XRayLogArgsAttrSpelling e) {
  switch (e) {
    case XRayLogArgsAttrSpelling::GNU_XRAY_LOG_ARGUMENTS: return "GNU_XRAY_LOG_ARGUMENTS";
    case XRayLogArgsAttrSpelling::CXX11_CLANG_XRAY_LOG_ARGUMENTS: return "CXX11_CLANG_XRAY_LOG_ARGUMENTS";
    case XRayLogArgsAttrSpelling::C2X_CLANG_XRAY_LOG_ARGUMENTS: return "C2X_CLANG_XRAY_LOG_ARGUMENTS";
    case XRayLogArgsAttrSpelling::SPELLING_NOT_CALCULATED: return "SPELLING_NOT_CALCULATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ASTDumpOutputFormat e) {
  switch (e) {
    case ASTDumpOutputFormat::DEFAULT: return "DEFAULT";
    case ASTDumpOutputFormat::JSON: return "JSON";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AccessSpecifier e) {
  switch (e) {
    case AccessSpecifier::PUBLIC: return "PUBLIC";
    case AccessSpecifier::PROTECTED: return "PROTECTED";
    case AccessSpecifier::PRIVATE: return "PRIVATE";
    case AccessSpecifier::NONE: return "NONE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AddrSpaceMapMangling e) {
  switch (e) {
    case AddrSpaceMapMangling::TARGET: return "TARGET";
    case AddrSpaceMapMangling::ON: return "ON";
    case AddrSpaceMapMangling::OFF: return "OFF";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AlignRequirementKind e) {
  switch (e) {
    case AlignRequirementKind::NONE: return "NONE";
    case AlignRequirementKind::REQUIRED_BY_TYPEDEF: return "REQUIRED_BY_TYPEDEF";
    case AlignRequirementKind::REQUIRED_BY_RECORD: return "REQUIRED_BY_RECORD";
    case AlignRequirementKind::REQUIRED_BY_ENUM: return "REQUIRED_BY_ENUM";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AltivecSrcCompatKind e) {
  switch (e) {
    case AltivecSrcCompatKind::MIXED: return "MIXED";
    case AltivecSrcCompatKind::GCC: return "GCC";
    case AltivecSrcCompatKind::XL: return "XL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ArgumentKind e) {
  switch (e) {
    case ArgumentKind::STD_STRING: return "STD_STRING";
    case ArgumentKind::C_STRING: return "C_STRING";
    case ArgumentKind::SINT: return "SINT";
    case ArgumentKind::UINT: return "UINT";
    case ArgumentKind::TOKENKIND: return "TOKENKIND";
    case ArgumentKind::IDENTIFIERINFO: return "IDENTIFIERINFO";
    case ArgumentKind::ADDRSPACE: return "ADDRSPACE";
    case ArgumentKind::QUALIFIED: return "QUALIFIED";
    case ArgumentKind::QUALTYPE: return "QUALTYPE";
    case ArgumentKind::DECLARATIONNAME: return "DECLARATIONNAME";
    case ArgumentKind::NAMEDDECL: return "NAMEDDECL";
    case ArgumentKind::NESTEDNAMESPEC: return "NESTEDNAMESPEC";
    case ArgumentKind::DECLCONTEXT: return "DECLCONTEXT";
    case ArgumentKind::QUALTYPE_PAIR: return "QUALTYPE_PAIR";
    case ArgumentKind::ATTRIBUTE: return "ATTRIBUTE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ArrayTypeTrait e) {
  switch (e) {
    case ArrayTypeTrait::ARRAY_RANK: return "ARRAY_RANK";
    case ArrayTypeTrait::ARRAY_EXTENT: return "ARRAY_EXTENT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AtomicScopeModelKind e) {
  switch (e) {
    case AtomicScopeModelKind::NONE: return "NONE";
    case AtomicScopeModelKind::OPEN_CL: return "OPEN_CL";
    case AtomicScopeModelKind::HIP: return "HIP";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AutoTypeKeyword e) {
  switch (e) {
    case AutoTypeKeyword::AUTO: return "AUTO";
    case AutoTypeKeyword::DECLTYPE_AUTO: return "DECLTYPE_AUTO";
    case AutoTypeKeyword::GNU_AUTO_TYPE: return "GNU_AUTO_TYPE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AvailabilityResult e) {
  switch (e) {
    case AvailabilityResult::AVAILABLE: return "AVAILABLE";
    case AvailabilityResult::NOT_YET_INTRODUCED: return "NOT_YET_INTRODUCED";
    case AvailabilityResult::DEPRECATED: return "DEPRECATED";
    case AvailabilityResult::UNAVAILABLE: return "UNAVAILABLE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(BinaryOperatorKind e) {
  switch (e) {
    case BinaryOperatorKind::POINTER_MEMORY_D: return "POINTER_MEMORY_D";
    case BinaryOperatorKind::POINTER_MEMORY_I: return "POINTER_MEMORY_I";
    case BinaryOperatorKind::MUL: return "MUL";
    case BinaryOperatorKind::DIV: return "DIV";
    case BinaryOperatorKind::REM: return "REM";
    case BinaryOperatorKind::ADD: return "ADD";
    case BinaryOperatorKind::SUB: return "SUB";
    case BinaryOperatorKind::SHL: return "SHL";
    case BinaryOperatorKind::SHR: return "SHR";
    case BinaryOperatorKind::CMP: return "CMP";
    case BinaryOperatorKind::LT: return "LT";
    case BinaryOperatorKind::GT: return "GT";
    case BinaryOperatorKind::LE: return "LE";
    case BinaryOperatorKind::GE: return "GE";
    case BinaryOperatorKind::EQ: return "EQ";
    case BinaryOperatorKind::NE: return "NE";
    case BinaryOperatorKind::AND: return "AND";
    case BinaryOperatorKind::XOR: return "XOR";
    case BinaryOperatorKind::OR: return "OR";
    case BinaryOperatorKind::L_AND: return "L_AND";
    case BinaryOperatorKind::L_OR: return "L_OR";
    case BinaryOperatorKind::ASSIGN: return "ASSIGN";
    case BinaryOperatorKind::MUL_ASSIGN: return "MUL_ASSIGN";
    case BinaryOperatorKind::DIV_ASSIGN: return "DIV_ASSIGN";
    case BinaryOperatorKind::REM_ASSIGN: return "REM_ASSIGN";
    case BinaryOperatorKind::ADD_ASSIGN: return "ADD_ASSIGN";
    case BinaryOperatorKind::SUB_ASSIGN: return "SUB_ASSIGN";
    case BinaryOperatorKind::SHL_ASSIGN: return "SHL_ASSIGN";
    case BinaryOperatorKind::SHR_ASSIGN: return "SHR_ASSIGN";
    case BinaryOperatorKind::AND_ASSIGN: return "AND_ASSIGN";
    case BinaryOperatorKind::XOR_ASSIGN: return "XOR_ASSIGN";
    case BinaryOperatorKind::OR_ASSIGN: return "OR_ASSIGN";
    case BinaryOperatorKind::COMMA: return "COMMA";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(Bits e) {
  switch (e) {
    case Bits::NONE: return "NONE";
    case Bits::UNEXPANDED_PACK: return "UNEXPANDED_PACK";
    case Bits::INSTANTIATION: return "INSTANTIATION";
    case Bits::TYPE: return "TYPE";
    case Bits::VALUE: return "VALUE";
    case Bits::DEPENDENT: return "DEPENDENT";
    case Bits::ERROR: return "ERROR";
    case Bits::VARIABLY_MODIFIED: return "VARIABLY_MODIFIED";
    case Bits::SYNTACTIC: return "SYNTACTIC";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CallingConv e) {
  switch (e) {
    case CallingConv::C: return "C";
    case CallingConv::X86_STD_CALL: return "X86_STD_CALL";
    case CallingConv::X86_FAST_CALL: return "X86_FAST_CALL";
    case CallingConv::X86_THIS_CALL: return "X86_THIS_CALL";
    case CallingConv::X86_VECTOR_CALL: return "X86_VECTOR_CALL";
    case CallingConv::X86_PASCAL: return "X86_PASCAL";
    case CallingConv::WIN64: return "WIN64";
    case CallingConv::X8664_SYS_V: return "X8664_SYS_V";
    case CallingConv::X86_REG_CALL: return "X86_REG_CALL";
    case CallingConv::AAPCS: return "AAPCS";
    case CallingConv::AAPCSVFP: return "AAPCSVFP";
    case CallingConv::INTEL_OCL_BICC: return "INTEL_OCL_BICC";
    case CallingConv::SPIR_FUNCTION: return "SPIR_FUNCTION";
    case CallingConv::OPEN_CL_KERNEL: return "OPEN_CL_KERNEL";
    case CallingConv::SWIFT: return "SWIFT";
    case CallingConv::SWIFT_ASYNC: return "SWIFT_ASYNC";
    case CallingConv::PRESERVE_MOST: return "PRESERVE_MOST";
    case CallingConv::PRESERVE_ALL: return "PRESERVE_ALL";
    case CallingConv::A_ARCH64_VECTOR_CALL: return "A_ARCH64_VECTOR_CALL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CanThrowResult e) {
  switch (e) {
    case CanThrowResult::CANNOT: return "CANNOT";
    case CanThrowResult::DEPENDENT: return "DEPENDENT";
    case CanThrowResult::CAN: return "CAN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CapturedRegionKind e) {
  switch (e) {
    case CapturedRegionKind::DEFAULT: return "DEFAULT";
    case CapturedRegionKind::OBJ_C_AT_FINALLY: return "OBJ_C_AT_FINALLY";
    case CapturedRegionKind::OPEN_MP: return "OPEN_MP";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CastKind e) {
  switch (e) {
    case CastKind::DEPENDENT: return "DEPENDENT";
    case CastKind::BIT_CAST: return "BIT_CAST";
    case CastKind::L_VALUE_BIT_CAST: return "L_VALUE_BIT_CAST";
    case CastKind::L_VALUE_TO_R_VALUE_BIT_CAST: return "L_VALUE_TO_R_VALUE_BIT_CAST";
    case CastKind::L_VALUE_TO_R_VALUE: return "L_VALUE_TO_R_VALUE";
    case CastKind::NO_OPERATION: return "NO_OPERATION";
    case CastKind::BASE_TO_DERIVED: return "BASE_TO_DERIVED";
    case CastKind::DERIVED_TO_BASE: return "DERIVED_TO_BASE";
    case CastKind::UNCHECKED_DERIVED_TO_BASE: return "UNCHECKED_DERIVED_TO_BASE";
    case CastKind::DYNAMIC: return "DYNAMIC";
    case CastKind::TO_UNION: return "TO_UNION";
    case CastKind::ARRAY_TO_POINTER_DECAY: return "ARRAY_TO_POINTER_DECAY";
    case CastKind::FUNCTION_TO_POINTER_DECAY: return "FUNCTION_TO_POINTER_DECAY";
    case CastKind::NULL_TO_POINTER: return "NULL_TO_POINTER";
    case CastKind::NULL_TO_MEMBER_POINTER: return "NULL_TO_MEMBER_POINTER";
    case CastKind::BASE_TO_DERIVED_MEMBER_POINTER: return "BASE_TO_DERIVED_MEMBER_POINTER";
    case CastKind::DERIVED_TO_BASE_MEMBER_POINTER: return "DERIVED_TO_BASE_MEMBER_POINTER";
    case CastKind::MEMBER_POINTER_TO_BOOLEAN: return "MEMBER_POINTER_TO_BOOLEAN";
    case CastKind::REINTERPRET_MEMBER_POINTER: return "REINTERPRET_MEMBER_POINTER";
    case CastKind::USER_DEFINED_CONVERSION: return "USER_DEFINED_CONVERSION";
    case CastKind::CONSTRUCTOR_CONVERSION: return "CONSTRUCTOR_CONVERSION";
    case CastKind::INTEGRAL_TO_POINTER: return "INTEGRAL_TO_POINTER";
    case CastKind::POINTER_TO_INTEGRAL: return "POINTER_TO_INTEGRAL";
    case CastKind::POINTER_TO_BOOLEAN: return "POINTER_TO_BOOLEAN";
    case CastKind::TO_VOID: return "TO_VOID";
    case CastKind::MATRIX_CAST: return "MATRIX_CAST";
    case CastKind::VECTOR_SPLAT: return "VECTOR_SPLAT";
    case CastKind::INTEGRAL_CAST: return "INTEGRAL_CAST";
    case CastKind::INTEGRAL_TO_BOOLEAN: return "INTEGRAL_TO_BOOLEAN";
    case CastKind::INTEGRAL_TO_FLOATING: return "INTEGRAL_TO_FLOATING";
    case CastKind::FLOATING_TO_FIXED_POINT: return "FLOATING_TO_FIXED_POINT";
    case CastKind::FIXED_POINT_TO_FLOATING: return "FIXED_POINT_TO_FLOATING";
    case CastKind::FIXED_POINT_CAST: return "FIXED_POINT_CAST";
    case CastKind::FIXED_POINT_TO_INTEGRAL: return "FIXED_POINT_TO_INTEGRAL";
    case CastKind::INTEGRAL_TO_FIXED_POINT: return "INTEGRAL_TO_FIXED_POINT";
    case CastKind::FIXED_POINT_TO_BOOLEAN: return "FIXED_POINT_TO_BOOLEAN";
    case CastKind::FLOATING_TO_INTEGRAL: return "FLOATING_TO_INTEGRAL";
    case CastKind::FLOATING_TO_BOOLEAN: return "FLOATING_TO_BOOLEAN";
    case CastKind::BOOLEAN_TO_SIGNED_INTEGRAL: return "BOOLEAN_TO_SIGNED_INTEGRAL";
    case CastKind::FLOATING_CAST: return "FLOATING_CAST";
    case CastKind::C_POINTER_TO_OBJ_C_POINTER_CAST: return "C_POINTER_TO_OBJ_C_POINTER_CAST";
    case CastKind::BLOCK_POINTER_TO_OBJ_C_POINTER_CAST: return "BLOCK_POINTER_TO_OBJ_C_POINTER_CAST";
    case CastKind::ANY_POINTER_TO_BLOCK_POINTER_CAST: return "ANY_POINTER_TO_BLOCK_POINTER_CAST";
    case CastKind::OBJ_C_OBJECT_L_VALUE_CAST: return "OBJ_C_OBJECT_L_VALUE_CAST";
    case CastKind::FLOATING_REAL_TO_COMPLEX: return "FLOATING_REAL_TO_COMPLEX";
    case CastKind::FLOATING_COMPLEX_TO_REAL: return "FLOATING_COMPLEX_TO_REAL";
    case CastKind::FLOATING_COMPLEX_TO_BOOLEAN: return "FLOATING_COMPLEX_TO_BOOLEAN";
    case CastKind::FLOATING_COMPLEX_CAST: return "FLOATING_COMPLEX_CAST";
    case CastKind::FLOATING_COMPLEX_TO_INTEGRAL_COMPLEX: return "FLOATING_COMPLEX_TO_INTEGRAL_COMPLEX";
    case CastKind::INTEGRAL_REAL_TO_COMPLEX: return "INTEGRAL_REAL_TO_COMPLEX";
    case CastKind::INTEGRAL_COMPLEX_TO_REAL: return "INTEGRAL_COMPLEX_TO_REAL";
    case CastKind::INTEGRAL_COMPLEX_TO_BOOLEAN: return "INTEGRAL_COMPLEX_TO_BOOLEAN";
    case CastKind::INTEGRAL_COMPLEX_CAST: return "INTEGRAL_COMPLEX_CAST";
    case CastKind::INTEGRAL_COMPLEX_TO_FLOATING_COMPLEX: return "INTEGRAL_COMPLEX_TO_FLOATING_COMPLEX";
    case CastKind::ARC_PRODUCE_OBJECT: return "ARC_PRODUCE_OBJECT";
    case CastKind::ARC_CONSUME_OBJECT: return "ARC_CONSUME_OBJECT";
    case CastKind::ARC_RECLAIM_RETURNED_OBJECT: return "ARC_RECLAIM_RETURNED_OBJECT";
    case CastKind::ARC_EXTEND_BLOCK_OBJECT: return "ARC_EXTEND_BLOCK_OBJECT";
    case CastKind::ATOMIC_TO_NON_ATOMIC: return "ATOMIC_TO_NON_ATOMIC";
    case CastKind::NON_ATOMIC_TO_ATOMIC: return "NON_ATOMIC_TO_ATOMIC";
    case CastKind::COPY_AND_AUTORELEASE_BLOCK_OBJECT: return "COPY_AND_AUTORELEASE_BLOCK_OBJECT";
    case CastKind::BUILTIN_FN_TO_FN_POINTER: return "BUILTIN_FN_TO_FN_POINTER";
    case CastKind::ZERO_TO_OCL_OPAQUE_TYPE: return "ZERO_TO_OCL_OPAQUE_TYPE";
    case CastKind::ADDRESS_SPACE_CONVERSION: return "ADDRESS_SPACE_CONVERSION";
    case CastKind::INT_TO_OCL_SAMPLER: return "INT_TO_OCL_SAMPLER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ClangABI e) {
  switch (e) {
    case ClangABI::VER38: return "VER38";
    case ClangABI::VER4: return "VER4";
    case ClangABI::VER6: return "VER6";
    case ClangABI::VER7: return "VER7";
    case ClangABI::VER9: return "VER9";
    case ClangABI::VER11: return "VER11";
    case ClangABI::VER12: return "VER12";
    case ClangABI::LATEST: return "LATEST";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CommentKind e) {
  switch (e) {
    case CommentKind::INVALID: return "INVALID";
    case CommentKind::ORDINARY_BCPL: return "ORDINARY_BCPL";
    case CommentKind::ORDINARY_C: return "ORDINARY_C";
    case CommentKind::BCPL_SLASH: return "BCPL_SLASH";
    case CommentKind::BCPL_EXCL: return "BCPL_EXCL";
    case CommentKind::JAVA_DOC: return "JAVA_DOC";
    case CommentKind::QT: return "QT";
    case CommentKind::MERGED: return "MERGED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ComparisonCategoryResult e) {
  switch (e) {
    case ComparisonCategoryResult::EQUAL: return "EQUAL";
    case ComparisonCategoryResult::EQUIVALENT: return "EQUIVALENT";
    case ComparisonCategoryResult::LESS: return "LESS";
    case ComparisonCategoryResult::GREATER: return "GREATER";
    case ComparisonCategoryResult::UNORDERED: return "UNORDERED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ComparisonCategoryType e) {
  switch (e) {
    case ComparisonCategoryType::PARTIAL_ORDERING: return "PARTIAL_ORDERING";
    case ComparisonCategoryType::WEAK_ORDERING: return "WEAK_ORDERING";
    case ComparisonCategoryType::STRONG_ORDERING: return "STRONG_ORDERING";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CompilingModuleKind e) {
  switch (e) {
    case CompilingModuleKind::NONE: return "NONE";
    case CompilingModuleKind::MODULE_MAP: return "MODULE_MAP";
    case CompilingModuleKind::HEADER_MODULE: return "HEADER_MODULE";
    case CompilingModuleKind::MODULE_INTERFACE: return "MODULE_INTERFACE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ConstexprSpecKind e) {
  switch (e) {
    case ConstexprSpecKind::UNSPECIFIED: return "UNSPECIFIED";
    case ConstexprSpecKind::CONSTEXPR: return "CONSTEXPR";
    case ConstexprSpecKind::CONSTEVAL: return "CONSTEVAL";
    case ConstexprSpecKind::CONSTINIT: return "CONSTINIT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CoreFoundationABI e) {
  switch (e) {
    case CoreFoundationABI::UNSPECIFIED: return "UNSPECIFIED";
    case CoreFoundationABI::STANDALONE: return "STANDALONE";
    case CoreFoundationABI::OBJECTIVE_C: return "OBJECTIVE_C";
    case CoreFoundationABI::SWIFT: return "SWIFT";
    case CoreFoundationABI::SWIFT50: return "SWIFT50";
    case CoreFoundationABI::SWIFT42: return "SWIFT42";
    case CoreFoundationABI::SWIFT41: return "SWIFT41";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DataPositionTy e) {
  switch (e) {
    case DataPositionTy::POSX: return "POSX";
    case DataPositionTy::POSV: return "POSV";
    case DataPositionTy::POSE: return "POSE";
    case DataPositionTy::POS_UPDATE_EXPRESSION: return "POS_UPDATE_EXPRESSION";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DefaultArgKind e) {
  switch (e) {
    case DefaultArgKind::NONE: return "NONE";
    case DefaultArgKind::UNPARSED: return "UNPARSED";
    case DefaultArgKind::UNINSTANTIATED: return "UNINSTANTIATED";
    case DefaultArgKind::NORMAL: return "NORMAL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DefaultCallingConvention e) {
  switch (e) {
    case DefaultCallingConvention::NONE: return "NONE";
    case DefaultCallingConvention::C_DECL: return "C_DECL";
    case DefaultCallingConvention::FAST_CALL: return "FAST_CALL";
    case DefaultCallingConvention::STD_CALL: return "STD_CALL";
    case DefaultCallingConvention::VECTOR_CALL: return "VECTOR_CALL";
    case DefaultCallingConvention::REG_CALL: return "REG_CALL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DiagnosticLevelMask e) {
  switch (e) {
    case DiagnosticLevelMask::NONE: return "NONE";
    case DiagnosticLevelMask::NOTE: return "NOTE";
    case DiagnosticLevelMask::REMARK: return "REMARK";
    case DiagnosticLevelMask::WARNING: return "WARNING";
    case DiagnosticLevelMask::ERROR: return "ERROR";
    case DiagnosticLevelMask::ALL: return "ALL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ElaboratedTypeKeyword e) {
  switch (e) {
    case ElaboratedTypeKeyword::STRUCT: return "STRUCT";
    case ElaboratedTypeKeyword::INTERFACE: return "INTERFACE";
    case ElaboratedTypeKeyword::UNION: return "UNION";
    case ElaboratedTypeKeyword::CLASS: return "CLASS";
    case ElaboratedTypeKeyword::ENUM: return "ENUM";
    case ElaboratedTypeKeyword::TYPENAME: return "TYPENAME";
    case ElaboratedTypeKeyword::NONE: return "NONE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(EmbedBitcodeKind e) {
  switch (e) {
    case EmbedBitcodeKind::EMBED_OFF: return "EMBED_OFF";
    case EmbedBitcodeKind::EMBED_ALL: return "EMBED_ALL";
    case EmbedBitcodeKind::EMBED_BITCODE: return "EMBED_BITCODE";
    case EmbedBitcodeKind::EMBED_MARKER: return "EMBED_MARKER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExceptionHandlingKind e) {
  switch (e) {
    case ExceptionHandlingKind::NONE: return "NONE";
    case ExceptionHandlingKind::SJ_LJ: return "SJ_LJ";
    case ExceptionHandlingKind::WIN_EH: return "WIN_EH";
    case ExceptionHandlingKind::DWARF_CFI: return "DWARF_CFI";
    case ExceptionHandlingKind::WASM: return "WASM";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExceptionSpecificationType e) {
  switch (e) {
    case ExceptionSpecificationType::NONE: return "NONE";
    case ExceptionSpecificationType::DYNAMIC_NONE: return "DYNAMIC_NONE";
    case ExceptionSpecificationType::DYNAMIC: return "DYNAMIC";
    case ExceptionSpecificationType::MS_ANY: return "MS_ANY";
    case ExceptionSpecificationType::NO_THROW: return "NO_THROW";
    case ExceptionSpecificationType::BASIC_NOEXCEPT: return "BASIC_NOEXCEPT";
    case ExceptionSpecificationType::DEPENDENT_NOEXCEPT: return "DEPENDENT_NOEXCEPT";
    case ExceptionSpecificationType::NOEXCEPT_FALSE: return "NOEXCEPT_FALSE";
    case ExceptionSpecificationType::NOEXCEPT_TRUE: return "NOEXCEPT_TRUE";
    case ExceptionSpecificationType::UNEVALUATED: return "UNEVALUATED";
    case ExceptionSpecificationType::UNINSTANTIATED: return "UNINSTANTIATED";
    case ExceptionSpecificationType::UNPARSED: return "UNPARSED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExplicitSpecKind e) {
  switch (e) {
    case ExplicitSpecKind::RESOLVED_FALSE: return "RESOLVED_FALSE";
    case ExplicitSpecKind::RESOLVED_TRUE: return "RESOLVED_TRUE";
    case ExplicitSpecKind::UNRESOLVED: return "UNRESOLVED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExprDependence e) {
  switch (e) {
    case ExprDependence::UNEXPANDED_PACK: return "UNEXPANDED_PACK";
    case ExprDependence::INSTANTIATION: return "INSTANTIATION";
    case ExprDependence::TYPE: return "TYPE";
    case ExprDependence::VALUE: return "VALUE";
    case ExprDependence::ERROR: return "ERROR";
    case ExprDependence::NONE: return "NONE";
    case ExprDependence::ALL: return "ALL";
    case ExprDependence::TYPE_VALUE: return "TYPE_VALUE";
    case ExprDependence::TYPE_INSTANTIATION: return "TYPE_INSTANTIATION";
    case ExprDependence::VALUE_INSTANTIATION: return "VALUE_INSTANTIATION";
    case ExprDependence::TYPE_VALUE_INSTANTIATION: return "TYPE_VALUE_INSTANTIATION";
    case ExprDependence::ERROR_DEPENDENT: return "ERROR_DEPENDENT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExprObjectKind e) {
  switch (e) {
    case ExprObjectKind::ORDINARY: return "ORDINARY";
    case ExprObjectKind::BIT_FIELD: return "BIT_FIELD";
    case ExprObjectKind::VECTOR_COMPONENT: return "VECTOR_COMPONENT";
    case ExprObjectKind::OBJ_C_PROPERTY: return "OBJ_C_PROPERTY";
    case ExprObjectKind::OBJ_C_SUBSCRIPT: return "OBJ_C_SUBSCRIPT";
    case ExprObjectKind::MATRIX_COMPONENT: return "MATRIX_COMPONENT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExprOffsets e) {
  switch (e) {
    case ExprOffsets::ALLOCATOR: return "ALLOCATOR";
    case ExprOffsets::ALLOCATOR_TRAITS: return "ALLOCATOR_TRAITS";
    case ExprOffsets::TOTAL: return "TOTAL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExprValueKind e) {
  switch (e) {
    case ExprValueKind::PR_VALUE: return "PR_VALUE";
    case ExprValueKind::L_VALUE: return "L_VALUE";
    case ExprValueKind::X_VALUE: return "X_VALUE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExpressionTrait e) {
  switch (e) {
    case ExpressionTrait::IS_L_VALUE_EXPRESSION: return "IS_L_VALUE_EXPRESSION";
    case ExpressionTrait::IS_R_VALUE_EXPRESSION: return "IS_R_VALUE_EXPRESSION";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExtKind e) {
  switch (e) {
    case ExtKind::ALWAYS: return "ALWAYS";
    case ExtKind::NEVER: return "NEVER";
    case ExtKind::REPLY_HAZY: return "REPLY_HAZY";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ExtendArgsKind e) {
  switch (e) {
    case ExtendArgsKind::EXTEND_TO32: return "EXTEND_TO32";
    case ExtendArgsKind::EXTEND_TO64: return "EXTEND_TO64";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FPExceptionModeKind e) {
  switch (e) {
    case FPExceptionModeKind::IGNORE: return "IGNORE";
    case FPExceptionModeKind::MAY_TRAP: return "MAY_TRAP";
    case FPExceptionModeKind::STRICT: return "STRICT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FPModeKind e) {
  switch (e) {
    case FPModeKind::OFF: return "OFF";
    case FPModeKind::ON: return "ON";
    case FPModeKind::FAST: return "FAST";
    case FPModeKind::FAST_HONOR_PRAGMAS: return "FAST_HONOR_PRAGMAS";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FiniteLoopsKind e) {
  switch (e) {
    case FiniteLoopsKind::LANGUAGE: return "LANGUAGE";
    case FiniteLoopsKind::ALWAYS: return "ALWAYS";
    case FiniteLoopsKind::NEVER: return "NEVER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FramePointerKind e) {
  switch (e) {
    case FramePointerKind::NONE: return "NONE";
    case FramePointerKind::NON_LEAF: return "NON_LEAF";
    case FramePointerKind::ALL: return "ALL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(GC e) {
  switch (e) {
    case GC::GC_NONE: return "GC_NONE";
    case GC::WEAK: return "WEAK";
    case GC::STRONG: return "STRONG";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(GCMode e) {
  switch (e) {
    case GCMode::NON_GC: return "NON_GC";
    case GCMode::GC_ONLY: return "GC_ONLY";
    case GCMode::HYBRID_GC: return "HYBRID_GC";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(GVALinkage e) {
  switch (e) {
    case GVALinkage::INTERNAL: return "INTERNAL";
    case GVALinkage::AVAILABLE_EXTERNALLY: return "AVAILABLE_EXTERNALLY";
    case GVALinkage::DISCARDABLE_ODR: return "DISCARDABLE_ODR";
    case GVALinkage::STRONG_EXTERNAL: return "STRONG_EXTERNAL";
    case GVALinkage::STRONG_ODR: return "STRONG_ODR";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(GetBuiltinTypeError e) {
  switch (e) {
    case GetBuiltinTypeError::NONE: return "NONE";
    case GetBuiltinTypeError::MISSING_TYPE: return "MISSING_TYPE";
    case GetBuiltinTypeError::MISSING_STDIO: return "MISSING_STDIO";
    case GetBuiltinTypeError::MISSING: return "MISSING";
    case GetBuiltinTypeError::MISSING_UCONTEXT: return "MISSING_UCONTEXT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ID e) {
  switch (e) {
    case ID::WORK_GROUP: return "WORK_GROUP";
    case ID::DEVICE: return "DEVICE";
    case ID::ALL_SVM_DEVICES: return "ALL_SVM_DEVICES";
    case ID::SUB_GROUP: return "SUB_GROUP";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(IdentifierInfoFlag e) {
  switch (e) {
    case IdentifierInfoFlag::ZERO_ARGUMENT: return "ZERO_ARGUMENT";
    case IdentifierInfoFlag::ONE_ARGUMENT: return "ONE_ARGUMENT";
    case IdentifierInfoFlag::MULTI_ARGUMENT: return "MULTI_ARGUMENT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(IfStatementKind e) {
  switch (e) {
    case IfStatementKind::ORDINARY: return "ORDINARY";
    case IfStatementKind::CONSTEXPR: return "CONSTEXPR";
    case IfStatementKind::CONSTEVAL_NON_NEGATED: return "CONSTEVAL_NON_NEGATED";
    case IfStatementKind::CONSTEVAL_NEGATED: return "CONSTEVAL_NEGATED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ImbueAttribute e) {
  switch (e) {
    case ImbueAttribute::NONE: return "NONE";
    case ImbueAttribute::ALWAYS: return "ALWAYS";
    case ImbueAttribute::NEVER: return "NEVER";
    case ImbueAttribute::ALWAYSARG1: return "ALWAYSARG1";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(InClassInitStyle e) {
  switch (e) {
    case InClassInitStyle::NO_INITIALIZER: return "NO_INITIALIZER";
    case InClassInitStyle::COPY_INITIALIZER: return "COPY_INITIALIZER";
    case InClassInitStyle::LIST_INITIALIZER: return "LIST_INITIALIZER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(InheritedDesignatedInitializersState e) {
  switch (e) {
    case InheritedDesignatedInitializersState::UNKNOWN: return "UNKNOWN";
    case InheritedDesignatedInitializersState::INHERITED: return "INHERITED";
    case InheritedDesignatedInitializersState::NOT_INHERITED: return "NOT_INHERITED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(InitStorageKind e) {
  switch (e) {
    case InitStorageKind::NO_INITIALIZER: return "NO_INITIALIZER";
    case InitStorageKind::IN_CLASS_COPY_INITIALIZER: return "IN_CLASS_COPY_INITIALIZER";
    case InitStorageKind::IN_CLASS_LIST_INITIALIZER: return "IN_CLASS_LIST_INITIALIZER";
    case InitStorageKind::CAPTURED_VLA_TYPE: return "CAPTURED_VLA_TYPE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(InlineAsmDialectKind e) {
  switch (e) {
    case InlineAsmDialectKind::IADATT: return "IADATT";
    case InlineAsmDialectKind::IAD_INTEL: return "IAD_INTEL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(InlineVariableDefinitionKind e) {
  switch (e) {
    case InlineVariableDefinitionKind::NONE: return "NONE";
    case InlineVariableDefinitionKind::WEAK: return "WEAK";
    case InlineVariableDefinitionKind::WEAK_UNKNOWN: return "WEAK_UNKNOWN";
    case InlineVariableDefinitionKind::STRONG: return "STRONG";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(InliningMethod e) {
  switch (e) {
    case InliningMethod::NORMAL_INLINING: return "NORMAL_INLINING";
    case InliningMethod::ONLY_HINT_INLINING: return "ONLY_HINT_INLINING";
    case InliningMethod::ONLY_ALWAYS_INLINING: return "ONLY_ALWAYS_INLINING";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(Kinds e) {
  switch (e) {
    case Kinds::L_VALUE: return "L_VALUE";
    case Kinds::X_VALUE: return "X_VALUE";
    case Kinds::FUNCTION: return "FUNCTION";
    case Kinds::VOID: return "VOID";
    case Kinds::ADDRESSABLE_VOID: return "ADDRESSABLE_VOID";
    case Kinds::DUPLICATE_VECTOR_COMPONENTS: return "DUPLICATE_VECTOR_COMPONENTS";
    case Kinds::MEMBER_FUNCTION: return "MEMBER_FUNCTION";
    case Kinds::SUB_OBJ_C_PROPERTY_SETTING: return "SUB_OBJ_C_PROPERTY_SETTING";
    case Kinds::CLASS_TEMPORARY: return "CLASS_TEMPORARY";
    case Kinds::ARRAY_TEMPORARY: return "ARRAY_TEMPORARY";
    case Kinds::OBJ_C_MESSAGE_R_VALUE: return "OBJ_C_MESSAGE_R_VALUE";
    case Kinds::PR_VALUE: return "PR_VALUE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LambdaCaptureDefault e) {
  switch (e) {
    case LambdaCaptureDefault::NONE: return "NONE";
    case LambdaCaptureDefault::BY_COPY: return "BY_COPY";
    case LambdaCaptureDefault::BY_REFERENCE: return "BY_REFERENCE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LambdaCaptureKind e) {
  switch (e) {
    case LambdaCaptureKind::THIS: return "THIS";
    case LambdaCaptureKind::STAR_THIS: return "STAR_THIS";
    case LambdaCaptureKind::BY_COPY: return "BY_COPY";
    case LambdaCaptureKind::BY_REFERENCE: return "BY_REFERENCE";
    case LambdaCaptureKind::VLA_TYPE: return "VLA_TYPE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LangAS e) {
  switch (e) {
    case LangAS::DEFAULT: return "DEFAULT";
    case LangAS::OPENCL_GLOBAL: return "OPENCL_GLOBAL";
    case LangAS::OPENCL_LOCAL: return "OPENCL_LOCAL";
    case LangAS::OPENCL_CONSTANT: return "OPENCL_CONSTANT";
    case LangAS::OPENCL_PRIVATE: return "OPENCL_PRIVATE";
    case LangAS::OPENCL_GENERIC: return "OPENCL_GENERIC";
    case LangAS::OPENCL_GLOBAL_DEVICE: return "OPENCL_GLOBAL_DEVICE";
    case LangAS::OPENCL_GLOBAL_HOST: return "OPENCL_GLOBAL_HOST";
    case LangAS::CUDA_DEVICE: return "CUDA_DEVICE";
    case LangAS::CUDA_CONSTANT: return "CUDA_CONSTANT";
    case LangAS::CUDA_SHARED: return "CUDA_SHARED";
    case LangAS::SYCL_GLOBAL: return "SYCL_GLOBAL";
    case LangAS::SYCL_GLOBAL_DEVICE: return "SYCL_GLOBAL_DEVICE";
    case LangAS::SYCL_GLOBAL_HOST: return "SYCL_GLOBAL_HOST";
    case LangAS::SYCL_LOCAL: return "SYCL_LOCAL";
    case LangAS::SYCL_PRIVATE: return "SYCL_PRIVATE";
    case LangAS::PTR32_SPTR: return "PTR32_SPTR";
    case LangAS::PTR32_UPTR: return "PTR32_UPTR";
    case LangAS::PTR64: return "PTR64";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LangFeatures e) {
  switch (e) {
    case LangFeatures::LINE_COMMENT: return "LINE_COMMENT";
    case LangFeatures::C99: return "C99";
    case LangFeatures::C11: return "C11";
    case LangFeatures::C17: return "C17";
    case LangFeatures::C2X: return "C2X";
    case LangFeatures::C_PLUS_PLUS: return "C_PLUS_PLUS";
    case LangFeatures::C_PLUS_PLUS11: return "C_PLUS_PLUS11";
    case LangFeatures::C_PLUS_PLUS14: return "C_PLUS_PLUS14";
    case LangFeatures::C_PLUS_PLUS17: return "C_PLUS_PLUS17";
    case LangFeatures::C_PLUS_PLUS20: return "C_PLUS_PLUS20";
    case LangFeatures::C_PLUS_PLUS2B: return "C_PLUS_PLUS2B";
    case LangFeatures::DIGRAPHS: return "DIGRAPHS";
    case LangFeatures::GNU_MODE: return "GNU_MODE";
    case LangFeatures::HEX_FLOAT: return "HEX_FLOAT";
    case LangFeatures::IMPLICIT_INT: return "IMPLICIT_INT";
    case LangFeatures::OPEN_CL: return "OPEN_CL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(Language e) {
  switch (e) {
    case Language::UNKNOWN: return "UNKNOWN";
    case Language::ASSEMBLY: return "ASSEMBLY";
    case Language::LLVMIR: return "LLVMIR";
    case Language::C: return "C";
    case Language::CXX: return "CXX";
    case Language::OBJ_C: return "OBJ_C";
    case Language::OBJ_CXX: return "OBJ_CXX";
    case Language::OPEN_CL: return "OPEN_CL";
    case Language::OPEN_CLCXX: return "OPEN_CLCXX";
    case Language::CUDA: return "CUDA";
    case Language::RENDER_SCRIPT: return "RENDER_SCRIPT";
    case Language::HIP: return "HIP";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LanguageLinkage e) {
  switch (e) {
    case LanguageLinkage::C_LANGUAGE_LINKAGE: return "C_LANGUAGE_LINKAGE";
    case LanguageLinkage::CXX_LANGUAGE_LINKAGE: return "CXX_LANGUAGE_LINKAGE";
    case LanguageLinkage::NO_LANGUAGE_LINKAGE: return "NO_LANGUAGE_LINKAGE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(LaxVectorConversionKind e) {
  switch (e) {
    case LaxVectorConversionKind::NONE: return "NONE";
    case LaxVectorConversionKind::INTEGER: return "INTEGER";
    case LaxVectorConversionKind::ALL: return "ALL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(Level e) {
  switch (e) {
    case Level::IGNORED: return "IGNORED";
    case Level::NOTE: return "NOTE";
    case Level::REMARK: return "REMARK";
    case Level::WARNING: return "WARNING";
    case Level::ERROR: return "ERROR";
    case Level::FATAL: return "FATAL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(Linkage e) {
  switch (e) {
    case Linkage::NO_LINKAGE: return "NO_LINKAGE";
    case Linkage::INTERNAL_LINKAGE: return "INTERNAL_LINKAGE";
    case Linkage::UNIQUE_EXTERNAL_LINKAGE: return "UNIQUE_EXTERNAL_LINKAGE";
    case Linkage::VISIBLE_NO_LINKAGE: return "VISIBLE_NO_LINKAGE";
    case Linkage::MODULE_INTERNAL_LINKAGE: return "MODULE_INTERNAL_LINKAGE";
    case Linkage::MODULE_LINKAGE: return "MODULE_LINKAGE";
    case Linkage::EXTERNAL_LINKAGE: return "EXTERNAL_LINKAGE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MSInheritanceModel e) {
  switch (e) {
    case MSInheritanceModel::SINGLE: return "SINGLE";
    case MSInheritanceModel::MULTIPLE: return "MULTIPLE";
    case MSInheritanceModel::VIRTUAL: return "VIRTUAL";
    case MSInheritanceModel::UNSPECIFIED: return "UNSPECIFIED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MSVCMajorVersion e) {
  switch (e) {
    case MSVCMajorVersion::MSVC2010: return "MSVC2010";
    case MSVCMajorVersion::MSVC2012: return "MSVC2012";
    case MSVCMajorVersion::MSVC2013: return "MSVC2013";
    case MSVCMajorVersion::MSVC2015: return "MSVC2015";
    case MSVCMajorVersion::MSVC2017: return "MSVC2017";
    case MSVCMajorVersion::MSVC20175: return "MSVC20175";
    case MSVCMajorVersion::MSVC20177: return "MSVC20177";
    case MSVCMajorVersion::MSVC2019: return "MSVC2019";
    case MSVCMajorVersion::MSVC20195: return "MSVC20195";
    case MSVCMajorVersion::MSVC20198: return "MSVC20198";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MSVtorDispMode e) {
  switch (e) {
    case MSVtorDispMode::NEVER: return "NEVER";
    case MSVtorDispMode::FOR_VIRTUAL_BASE_OVERRIDE: return "FOR_VIRTUAL_BASE_OVERRIDE";
    case MSVtorDispMode::FOR_VF_TABLE: return "FOR_VF_TABLE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MethodRefFlags e) {
  switch (e) {
    case MethodRefFlags::METHOD_REFERENCE_NONE: return "METHOD_REFERENCE_NONE";
    case MethodRefFlags::METHOD_REFERENCE_GETTER: return "METHOD_REFERENCE_GETTER";
    case MethodRefFlags::METHOD_REFERENCE_SETTER: return "METHOD_REFERENCE_SETTER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ModifiableType e) {
  switch (e) {
    case ModifiableType::UNTESTED: return "UNTESTED";
    case ModifiableType::MODIFIABLE: return "MODIFIABLE";
    case ModifiableType::R_VALUE: return "R_VALUE";
    case ModifiableType::FUNCTION: return "FUNCTION";
    case ModifiableType::L_VALUE_CAST: return "L_VALUE_CAST";
    case ModifiableType::NO_SETTER_PROPERTY: return "NO_SETTER_PROPERTY";
    case ModifiableType::CONST_QUALIFIED: return "CONST_QUALIFIED";
    case ModifiableType::CONST_QUALIFIED_FIELD: return "CONST_QUALIFIED_FIELD";
    case ModifiableType::CONST_ADDRESS_SPACE: return "CONST_ADDRESS_SPACE";
    case ModifiableType::ARRAY_TYPE: return "ARRAY_TYPE";
    case ModifiableType::INCOMPLETE_TYPE: return "INCOMPLETE_TYPE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(MultiVersionKind e) {
  switch (e) {
    case MultiVersionKind::NONE: return "NONE";
    case MultiVersionKind::TARGET: return "TARGET";
    case MultiVersionKind::CPU_SPECIFIC: return "CPU_SPECIFIC";
    case MultiVersionKind::CPU_DISPATCH: return "CPU_DISPATCH";
    case MultiVersionKind::TARGET_CLONES: return "TARGET_CLONES";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NameKind e) {
  switch (e) {
    case NameKind::TEMPLATE: return "TEMPLATE";
    case NameKind::OVERLOADED_TEMPLATE: return "OVERLOADED_TEMPLATE";
    case NameKind::ASSUMED_TEMPLATE: return "ASSUMED_TEMPLATE";
    case NameKind::QUALIFIED_TEMPLATE: return "QUALIFIED_TEMPLATE";
    case NameKind::DEPENDENT_TEMPLATE: return "DEPENDENT_TEMPLATE";
    case NameKind::SUBST_TEMPLATE_TEMPLATE_PARM: return "SUBST_TEMPLATE_TEMPLATE_PARM";
    case NameKind::SUBST_TEMPLATE_TEMPLATE_PARM_PACK: return "SUBST_TEMPLATE_TEMPLATE_PARM_PACK";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NeedExtraManglingDecl e) {
  switch (e) {
    case NeedExtraManglingDecl::NEED_EXTRA_MANGLING_DECLARATION: return "NEED_EXTRA_MANGLING_DECLARATION";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NestedNameSpecifierDependence e) {
  switch (e) {
    case NestedNameSpecifierDependence::UNEXPANDED_PACK: return "UNEXPANDED_PACK";
    case NestedNameSpecifierDependence::INSTANTIATION: return "INSTANTIATION";
    case NestedNameSpecifierDependence::DEPENDENT: return "DEPENDENT";
    case NestedNameSpecifierDependence::ERROR: return "ERROR";
    case NestedNameSpecifierDependence::NONE: return "NONE";
    case NestedNameSpecifierDependence::DEPENDENT_INSTANTIATION: return "DEPENDENT_INSTANTIATION";
    case NestedNameSpecifierDependence::ALL: return "ALL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NonOdrUseReason e) {
  switch (e) {
    case NonOdrUseReason::NONE: return "NONE";
    case NonOdrUseReason::UNEVALUATED: return "UNEVALUATED";
    case NonOdrUseReason::CONSTANT: return "CONSTANT";
    case NonOdrUseReason::DISCARDED: return "DISCARDED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NonceObjCInterface e) {
  switch (e) {
    case NonceObjCInterface::OBJ_C_INTERFACE: return "OBJ_C_INTERFACE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(NullabilityKind e) {
  switch (e) {
    case NullabilityKind::NON_NULL: return "NON_NULL";
    case NullabilityKind::NULLABLE: return "NULLABLE";
    case NullabilityKind::UNSPECIFIED: return "UNSPECIFIED";
    case NullabilityKind::NULLABLE_RESULT: return "NULLABLE_RESULT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCBridgeCastKind e) {
  switch (e) {
    case ObjCBridgeCastKind::BRIDGE: return "BRIDGE";
    case ObjCBridgeCastKind::BRIDGE_TRANSFER: return "BRIDGE_TRANSFER";
    case ObjCBridgeCastKind::BRIDGE_RETAINED: return "BRIDGE_RETAINED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCDispatchMethodKind e) {
  switch (e) {
    case ObjCDispatchMethodKind::LEGACY: return "LEGACY";
    case ObjCDispatchMethodKind::NON_LEGACY: return "NON_LEGACY";
    case ObjCDispatchMethodKind::MIXED: return "MIXED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCInstanceTypeFamily e) {
  switch (e) {
    case ObjCInstanceTypeFamily::NONE: return "NONE";
    case ObjCInstanceTypeFamily::ARRAY: return "ARRAY";
    case ObjCInstanceTypeFamily::DICTIONARY: return "DICTIONARY";
    case ObjCInstanceTypeFamily::SINGLETON: return "SINGLETON";
    case ObjCInstanceTypeFamily::INITIALIZER: return "INITIALIZER";
    case ObjCInstanceTypeFamily::RETURNS_SELF: return "RETURNS_SELF";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCLifetime e) {
  switch (e) {
    case ObjCLifetime::NONE: return "NONE";
    case ObjCLifetime::EXPLICIT_NONE: return "EXPLICIT_NONE";
    case ObjCLifetime::STRONG: return "STRONG";
    case ObjCLifetime::WEAK: return "WEAK";
    case ObjCLifetime::AUTORELEASING: return "AUTORELEASING";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCMethodFamily e) {
  switch (e) {
    case ObjCMethodFamily::NONE: return "NONE";
    case ObjCMethodFamily::ALLOC: return "ALLOC";
    case ObjCMethodFamily::COPY: return "COPY";
    case ObjCMethodFamily::INITIALIZER: return "INITIALIZER";
    case ObjCMethodFamily::MUTABLE_COPY: return "MUTABLE_COPY";
    case ObjCMethodFamily::NEW: return "NEW";
    case ObjCMethodFamily::AUTORELEASE: return "AUTORELEASE";
    case ObjCMethodFamily::DEALLOC: return "DEALLOC";
    case ObjCMethodFamily::FINALIZE: return "FINALIZE";
    case ObjCMethodFamily::RELEASE: return "RELEASE";
    case ObjCMethodFamily::RETAIN: return "RETAIN";
    case ObjCMethodFamily::RETAIN_COUNT: return "RETAIN_COUNT";
    case ObjCMethodFamily::SELF: return "SELF";
    case ObjCMethodFamily::INITIALIZE: return "INITIALIZE";
    case ObjCMethodFamily::PERFORM_SELECTOR: return "PERFORM_SELECTOR";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCPropertyQueryKind e) {
  switch (e) {
    case ObjCPropertyQueryKind::QUERY_UNKNOWN: return "QUERY_UNKNOWN";
    case ObjCPropertyQueryKind::QUERY_INSTANCE: return "QUERY_INSTANCE";
    case ObjCPropertyQueryKind::QUERY_CLASS: return "QUERY_CLASS";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCStringFormatFamily e) {
  switch (e) {
    case ObjCStringFormatFamily::NONE: return "NONE";
    case ObjCStringFormatFamily::NS_STRING: return "NS_STRING";
    case ObjCStringFormatFamily::CF_STRING: return "CF_STRING";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCSubstitutionContext e) {
  switch (e) {
    case ObjCSubstitutionContext::ORDINARY: return "ORDINARY";
    case ObjCSubstitutionContext::RESULT: return "RESULT";
    case ObjCSubstitutionContext::PARAMETER: return "PARAMETER";
    case ObjCSubstitutionContext::PROPERTY: return "PROPERTY";
    case ObjCSubstitutionContext::SUPERCLASS: return "SUPERCLASS";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ObjCTypeParamVariance e) {
  switch (e) {
    case ObjCTypeParamVariance::INVARIANT: return "INVARIANT";
    case ObjCTypeParamVariance::COVARIANT: return "COVARIANT";
    case ObjCTypeParamVariance::CONTRAVARIANT: return "CONTRAVARIANT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OnOffSwitch e) {
  switch (e) {
    case OnOffSwitch::ON: return "ON";
    case OnOffSwitch::OFF: return "OFF";
    case OnOffSwitch::DEFAULT: return "DEFAULT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OnStackType e) {
  switch (e) {
    case OnStackType::ON_STACK: return "ON_STACK";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPAdjustArgsOpKind e) {
  switch (e) {
    case OpenMPAdjustArgsOpKind::ADJUSTARGS_NOTHING: return "ADJUSTARGS_NOTHING";
    case OpenMPAdjustArgsOpKind::ADJUSTARGS_NEED_DEVICE_POINTER: return "ADJUSTARGS_NEED_DEVICE_POINTER";
    case OpenMPAdjustArgsOpKind::ADJUSTARGS_UNKNOWN: return "ADJUSTARGS_UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPAtomicDefaultMemOrderClauseKind e) {
  switch (e) {
    case OpenMPAtomicDefaultMemOrderClauseKind::SEQ_CST: return "SEQ_CST";
    case OpenMPAtomicDefaultMemOrderClauseKind::ACQ_REL: return "ACQ_REL";
    case OpenMPAtomicDefaultMemOrderClauseKind::RELAXED: return "RELAXED";
    case OpenMPAtomicDefaultMemOrderClauseKind::UNKNOWN: return "UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPBindClauseKind e) {
  switch (e) {
    case OpenMPBindClauseKind::BIND_TEAMS: return "BIND_TEAMS";
    case OpenMPBindClauseKind::BIND_PARALLEL: return "BIND_PARALLEL";
    case OpenMPBindClauseKind::BIND_THREAD: return "BIND_THREAD";
    case OpenMPBindClauseKind::BIND_UNKNOWN: return "BIND_UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPDefaultmapClauseKind e) {
  switch (e) {
    case OpenMPDefaultmapClauseKind::SCALAR: return "SCALAR";
    case OpenMPDefaultmapClauseKind::AGGREGATE: return "AGGREGATE";
    case OpenMPDefaultmapClauseKind::POINTER: return "POINTER";
    case OpenMPDefaultmapClauseKind::UNKNOWN: return "UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPDefaultmapClauseModifier e) {
  switch (e) {
    case OpenMPDefaultmapClauseModifier::UNKNOWN: return "UNKNOWN";
    case OpenMPDefaultmapClauseModifier::ALLOC: return "ALLOC";
    case OpenMPDefaultmapClauseModifier::TO: return "TO";
    case OpenMPDefaultmapClauseModifier::FROM: return "FROM";
    case OpenMPDefaultmapClauseModifier::TOFROM: return "TOFROM";
    case OpenMPDefaultmapClauseModifier::NONE: return "NONE";
    case OpenMPDefaultmapClauseModifier::DEFAULT: return "DEFAULT";
    case OpenMPDefaultmapClauseModifier::PRESENT: return "PRESENT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPDependClauseKind e) {
  switch (e) {
    case OpenMPDependClauseKind::IN: return "IN";
    case OpenMPDependClauseKind::OUT: return "OUT";
    case OpenMPDependClauseKind::INOUT: return "INOUT";
    case OpenMPDependClauseKind::MUTEXINOUTSET: return "MUTEXINOUTSET";
    case OpenMPDependClauseKind::DEPOBJ: return "DEPOBJ";
    case OpenMPDependClauseKind::SOURCE: return "SOURCE";
    case OpenMPDependClauseKind::SINK: return "SINK";
    case OpenMPDependClauseKind::UNKNOWN: return "UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPDeviceClauseModifier e) {
  switch (e) {
    case OpenMPDeviceClauseModifier::ANCESTOR: return "ANCESTOR";
    case OpenMPDeviceClauseModifier::DEVICE_NUM: return "DEVICE_NUM";
    case OpenMPDeviceClauseModifier::UNKNOWN: return "UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPDeviceType e) {
  switch (e) {
    case OpenMPDeviceType::HOST: return "HOST";
    case OpenMPDeviceType::NOHOST: return "NOHOST";
    case OpenMPDeviceType::ANY: return "ANY";
    case OpenMPDeviceType::UNKNOWN: return "UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPDistScheduleClauseKind e) {
  switch (e) {
    case OpenMPDistScheduleClauseKind::STATIC: return "STATIC";
    case OpenMPDistScheduleClauseKind::UNKNOWN: return "UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPLastprivateModifier e) {
  switch (e) {
    case OpenMPLastprivateModifier::CONDITIONAL: return "CONDITIONAL";
    case OpenMPLastprivateModifier::UNKNOWN: return "UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPLinearClauseKind e) {
  switch (e) {
    case OpenMPLinearClauseKind::VALUE: return "VALUE";
    case OpenMPLinearClauseKind::REFERENCE: return "REFERENCE";
    case OpenMPLinearClauseKind::UVAL: return "UVAL";
    case OpenMPLinearClauseKind::UNKNOWN: return "UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPMapClauseKind e) {
  switch (e) {
    case OpenMPMapClauseKind::ALLOC: return "ALLOC";
    case OpenMPMapClauseKind::TO: return "TO";
    case OpenMPMapClauseKind::FROM: return "FROM";
    case OpenMPMapClauseKind::TOFROM: return "TOFROM";
    case OpenMPMapClauseKind::DELETE: return "DELETE";
    case OpenMPMapClauseKind::RELEASE: return "RELEASE";
    case OpenMPMapClauseKind::UNKNOWN: return "UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPMapModifierKind e) {
  switch (e) {
    case OpenMPMapModifierKind::UNKNOWN: return "UNKNOWN";
    case OpenMPMapModifierKind::ALWAYS: return "ALWAYS";
    case OpenMPMapModifierKind::CLOSE: return "CLOSE";
    case OpenMPMapModifierKind::MAPPER: return "MAPPER";
    case OpenMPMapModifierKind::PRESENT: return "PRESENT";
    case OpenMPMapModifierKind::OMPX_HOLD: return "OMPX_HOLD";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPMotionModifierKind e) {
  switch (e) {
    case OpenMPMotionModifierKind::MOTIONMODIFIER_MAPPER: return "MOTIONMODIFIER_MAPPER";
    case OpenMPMotionModifierKind::MOTIONMODIFIER_PRESENT: return "MOTIONMODIFIER_PRESENT";
    case OpenMPMotionModifierKind::MOTIONMODIFIER_UNKNOWN: return "MOTIONMODIFIER_UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPOrderClauseKind e) {
  switch (e) {
    case OpenMPOrderClauseKind::CONCURRENT: return "CONCURRENT";
    case OpenMPOrderClauseKind::UNKNOWN: return "UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPReductionClauseModifier e) {
  switch (e) {
    case OpenMPReductionClauseModifier::DEFAULT: return "DEFAULT";
    case OpenMPReductionClauseModifier::INSCAN: return "INSCAN";
    case OpenMPReductionClauseModifier::TASK: return "TASK";
    case OpenMPReductionClauseModifier::UNKNOWN: return "UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPScheduleClauseKind e) {
  switch (e) {
    case OpenMPScheduleClauseKind::STATIC: return "STATIC";
    case OpenMPScheduleClauseKind::DYNAMIC: return "DYNAMIC";
    case OpenMPScheduleClauseKind::GUIDED: return "GUIDED";
    case OpenMPScheduleClauseKind::AUTO: return "AUTO";
    case OpenMPScheduleClauseKind::RUNTIME: return "RUNTIME";
    case OpenMPScheduleClauseKind::UNKNOWN: return "UNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OpenMPScheduleClauseModifier e) {
  switch (e) {
    case OpenMPScheduleClauseModifier::UNKNOWN: return "UNKNOWN";
    case OpenMPScheduleClauseModifier::MONOTONIC: return "MONOTONIC";
    case OpenMPScheduleClauseModifier::NONMONOTONIC: return "NONMONOTONIC";
    case OpenMPScheduleClauseModifier::SIMD: return "SIMD";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OverloadedOperatorKind e) {
  switch (e) {
    case OverloadedOperatorKind::NONE: return "NONE";
    case OverloadedOperatorKind::NEW: return "NEW";
    case OverloadedOperatorKind::DELETE: return "DELETE";
    case OverloadedOperatorKind::ARRAY_NEW: return "ARRAY_NEW";
    case OverloadedOperatorKind::ARRAY_DELETE: return "ARRAY_DELETE";
    case OverloadedOperatorKind::PLUS: return "PLUS";
    case OverloadedOperatorKind::MINUS: return "MINUS";
    case OverloadedOperatorKind::STAR: return "STAR";
    case OverloadedOperatorKind::SLASH: return "SLASH";
    case OverloadedOperatorKind::PERCENT: return "PERCENT";
    case OverloadedOperatorKind::CARET: return "CARET";
    case OverloadedOperatorKind::AMP: return "AMP";
    case OverloadedOperatorKind::PIPE: return "PIPE";
    case OverloadedOperatorKind::TILDE: return "TILDE";
    case OverloadedOperatorKind::EXCLAIM: return "EXCLAIM";
    case OverloadedOperatorKind::EQUAL: return "EQUAL";
    case OverloadedOperatorKind::LESS: return "LESS";
    case OverloadedOperatorKind::GREATER: return "GREATER";
    case OverloadedOperatorKind::PLUS_EQUAL: return "PLUS_EQUAL";
    case OverloadedOperatorKind::MINUS_EQUAL: return "MINUS_EQUAL";
    case OverloadedOperatorKind::STAR_EQUAL: return "STAR_EQUAL";
    case OverloadedOperatorKind::SLASH_EQUAL: return "SLASH_EQUAL";
    case OverloadedOperatorKind::PERCENT_EQUAL: return "PERCENT_EQUAL";
    case OverloadedOperatorKind::CARET_EQUAL: return "CARET_EQUAL";
    case OverloadedOperatorKind::AMP_EQUAL: return "AMP_EQUAL";
    case OverloadedOperatorKind::PIPE_EQUAL: return "PIPE_EQUAL";
    case OverloadedOperatorKind::LESS_LESS: return "LESS_LESS";
    case OverloadedOperatorKind::GREATER_GREATER: return "GREATER_GREATER";
    case OverloadedOperatorKind::LESS_LESS_EQUAL: return "LESS_LESS_EQUAL";
    case OverloadedOperatorKind::GREATER_GREATER_EQUAL: return "GREATER_GREATER_EQUAL";
    case OverloadedOperatorKind::EQUAL_EQUAL: return "EQUAL_EQUAL";
    case OverloadedOperatorKind::EXCLAIM_EQUAL: return "EXCLAIM_EQUAL";
    case OverloadedOperatorKind::LESS_EQUAL: return "LESS_EQUAL";
    case OverloadedOperatorKind::GREATER_EQUAL: return "GREATER_EQUAL";
    case OverloadedOperatorKind::SPACESHIP: return "SPACESHIP";
    case OverloadedOperatorKind::AMP_AMP: return "AMP_AMP";
    case OverloadedOperatorKind::PIPE_PIPE: return "PIPE_PIPE";
    case OverloadedOperatorKind::PLUS_PLUS: return "PLUS_PLUS";
    case OverloadedOperatorKind::MINUS_MINUS: return "MINUS_MINUS";
    case OverloadedOperatorKind::COMMA: return "COMMA";
    case OverloadedOperatorKind::ARROW_STAR: return "ARROW_STAR";
    case OverloadedOperatorKind::ARROW: return "ARROW";
    case OverloadedOperatorKind::CALL: return "CALL";
    case OverloadedOperatorKind::SUBSCRIPT: return "SUBSCRIPT";
    case OverloadedOperatorKind::CONDITIONAL: return "CONDITIONAL";
    case OverloadedOperatorKind::COAWAIT: return "COAWAIT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(OverloadsShown e) {
  switch (e) {
    case OverloadsShown::ALL: return "ALL";
    case OverloadsShown::BEST: return "BEST";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ParameterABI e) {
  switch (e) {
    case ParameterABI::ORDINARY: return "ORDINARY";
    case ParameterABI::SWIFT_INDIRECT_RESULT: return "SWIFT_INDIRECT_RESULT";
    case ParameterABI::SWIFT_ERROR_RESULT: return "SWIFT_ERROR_RESULT";
    case ParameterABI::SWIFT_CONTEXT: return "SWIFT_CONTEXT";
    case ParameterABI::SWIFT_ASYNC_CONTEXT: return "SWIFT_ASYNC_CONTEXT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ParenLocsOffsets e) {
  switch (e) {
    case ParenLocsOffsets::L_PAREN_TOKEN: return "L_PAREN_TOKEN";
    case ParenLocsOffsets::R_PAREN_TOKEN: return "R_PAREN_TOKEN";
    case ParenLocsOffsets::TOTAL: return "TOTAL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PragmaFloatControlKind e) {
  switch (e) {
    case PragmaFloatControlKind::UNKNOWN: return "UNKNOWN";
    case PragmaFloatControlKind::PRECISE: return "PRECISE";
    case PragmaFloatControlKind::NO_PRECISE: return "NO_PRECISE";
    case PragmaFloatControlKind::EXCEPT: return "EXCEPT";
    case PragmaFloatControlKind::NO_EXCEPT: return "NO_EXCEPT";
    case PragmaFloatControlKind::PUSH: return "PUSH";
    case PragmaFloatControlKind::POP: return "POP";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PragmaMSCommentKind e) {
  switch (e) {
    case PragmaMSCommentKind::UNKNOWN: return "UNKNOWN";
    case PragmaMSCommentKind::LINKER: return "LINKER";
    case PragmaMSCommentKind::LIB: return "LIB";
    case PragmaMSCommentKind::COMPILER: return "COMPILER";
    case PragmaMSCommentKind::EXE_STRING: return "EXE_STRING";
    case PragmaMSCommentKind::USER: return "USER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PragmaMSPointersToMembersKind e) {
  switch (e) {
    case PragmaMSPointersToMembersKind::BEST_CASE: return "BEST_CASE";
    case PragmaMSPointersToMembersKind::FULL_GENERALITY_SINGLE_INHERITANCE: return "FULL_GENERALITY_SINGLE_INHERITANCE";
    case PragmaMSPointersToMembersKind::FULL_GENERALITY_MULTIPLE_INHERITANCE: return "FULL_GENERALITY_MULTIPLE_INHERITANCE";
    case PragmaMSPointersToMembersKind::FULL_GENERALITY_VIRTUAL_INHERITANCE: return "FULL_GENERALITY_VIRTUAL_INHERITANCE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PragmaMSStructKind e) {
  switch (e) {
    case PragmaMSStructKind::OFF: return "OFF";
    case PragmaMSStructKind::ON: return "ON";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PragmaSectionFlag e) {
  switch (e) {
    case PragmaSectionFlag::NONE: return "NONE";
    case PragmaSectionFlag::READ: return "READ";
    case PragmaSectionFlag::WRITE: return "WRITE";
    case PragmaSectionFlag::EXECUTE: return "EXECUTE";
    case PragmaSectionFlag::IMPLICIT: return "IMPLICIT";
    case PragmaSectionFlag::ZERO_INITIALIZER: return "ZERO_INITIALIZER";
    case PragmaSectionFlag::INVALID: return "INVALID";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ProfileInstrKind e) {
  switch (e) {
    case ProfileInstrKind::PROFILE_NONE: return "PROFILE_NONE";
    case ProfileInstrKind::PROFILE_CLANG_INSTR: return "PROFILE_CLANG_INSTR";
    case ProfileInstrKind::PROFILE_IR_INSTR: return "PROFILE_IR_INSTR";
    case ProfileInstrKind::PROFILE_CSIR_INSTR: return "PROFILE_CSIR_INSTR";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(Qualified e) {
  switch (e) {
    case Qualified::NONE: return "NONE";
    case Qualified::AS_WRITTEN: return "AS_WRITTEN";
    case Qualified::FULLY: return "FULLY";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(RangeExprOffset e) {
  switch (e) {
    case RangeExprOffset::BEGIN: return "BEGIN";
    case RangeExprOffset::END: return "END";
    case RangeExprOffset::STEP: return "STEP";
    case RangeExprOffset::TOTAL: return "TOTAL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(RangeLocOffset e) {
  switch (e) {
    case RangeLocOffset::ASSIGN_TOKEN: return "ASSIGN_TOKEN";
    case RangeLocOffset::SECOND_COLON_TOKEN: return "SECOND_COLON_TOKEN";
    case RangeLocOffset::TOTAL: return "TOTAL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(RefQualifierKind e) {
  switch (e) {
    case RefQualifierKind::NONE: return "NONE";
    case RefQualifierKind::L_VALUE: return "L_VALUE";
    case RefQualifierKind::R_VALUE: return "R_VALUE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(RemarkKind e) {
  switch (e) {
    case RemarkKind::MISSING: return "MISSING";
    case RemarkKind::ENABLED: return "ENABLED";
    case RemarkKind::ENABLED_EVERYTHING: return "ENABLED_EVERYTHING";
    case RemarkKind::DISABLED: return "DISABLED";
    case RemarkKind::DISABLED_EVERYTHING: return "DISABLED_EVERYTHING";
    case RemarkKind::WITH_PATTERN: return "WITH_PATTERN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ReservedIdentifierStatus e) {
  switch (e) {
    case ReservedIdentifierStatus::NOT_RESERVED: return "NOT_RESERVED";
    case ReservedIdentifierStatus::STARTS_WITH_UNDERSCORE_AT_GLOBAL_SCOPE: return "STARTS_WITH_UNDERSCORE_AT_GLOBAL_SCOPE";
    case ReservedIdentifierStatus::STARTS_WITH_UNDERSCORE_AND_IS_EXTERN_C: return "STARTS_WITH_UNDERSCORE_AND_IS_EXTERN_C";
    case ReservedIdentifierStatus::STARTS_WITH_DOUBLE_UNDERSCORE: return "STARTS_WITH_DOUBLE_UNDERSCORE";
    case ReservedIdentifierStatus::STARTS_WITH_UNDERSCORE_FOLLOWED_BY_CAPITAL_LETTER: return "STARTS_WITH_UNDERSCORE_FOLLOWED_BY_CAPITAL_LETTER";
    case ReservedIdentifierStatus::CONTAINS_DOUBLE_UNDERSCORE: return "CONTAINS_DOUBLE_UNDERSCORE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SFINAEResponse e) {
  switch (e) {
    case SFINAEResponse::SUBSTITUTION_FAILURE: return "SUBSTITUTION_FAILURE";
    case SFINAEResponse::SUPPRESS: return "SUPPRESS";
    case SFINAEResponse::REPORT: return "REPORT";
    case SFINAEResponse::ACCESS_CONTROL: return "ACCESS_CONTROL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SYCLMajorVersion e) {
  switch (e) {
    case SYCLMajorVersion::VERSION_NONE: return "VERSION_NONE";
    case SYCLMajorVersion::VERSION2017: return "VERSION2017";
    case SYCLMajorVersion::VERSION2020: return "VERSION2020";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SanitizerOrdinal e) {
  switch (e) {
    case SanitizerOrdinal::ADDRESS: return "ADDRESS";
    case SanitizerOrdinal::POINTER_COMPARE: return "POINTER_COMPARE";
    case SanitizerOrdinal::POINTER_SUBTRACT: return "POINTER_SUBTRACT";
    case SanitizerOrdinal::KERNEL_ADDRESS: return "KERNEL_ADDRESS";
    case SanitizerOrdinal::HW_ADDRESS: return "HW_ADDRESS";
    case SanitizerOrdinal::KERNEL_HW_ADDRESS: return "KERNEL_HW_ADDRESS";
    case SanitizerOrdinal::MEMORY_TAG: return "MEMORY_TAG";
    case SanitizerOrdinal::MEMORY: return "MEMORY";
    case SanitizerOrdinal::KERNEL_MEMORY: return "KERNEL_MEMORY";
    case SanitizerOrdinal::FUZZER: return "FUZZER";
    case SanitizerOrdinal::FUZZER_NO_LINK: return "FUZZER_NO_LINK";
    case SanitizerOrdinal::THREAD: return "THREAD";
    case SanitizerOrdinal::LEAK: return "LEAK";
    case SanitizerOrdinal::ALIGNMENT: return "ALIGNMENT";
    case SanitizerOrdinal::ARRAY_BOUNDS: return "ARRAY_BOUNDS";
    case SanitizerOrdinal::BOOLEAN: return "BOOLEAN";
    case SanitizerOrdinal::BUILTIN: return "BUILTIN";
    case SanitizerOrdinal::ENUM: return "ENUM";
    case SanitizerOrdinal::FLOAT_CAST_OVERFLOW: return "FLOAT_CAST_OVERFLOW";
    case SanitizerOrdinal::FLOAT_DIVIDE_BY_ZERO: return "FLOAT_DIVIDE_BY_ZERO";
    case SanitizerOrdinal::FUNCTION: return "FUNCTION";
    case SanitizerOrdinal::INTEGER_DIVIDE_BY_ZERO: return "INTEGER_DIVIDE_BY_ZERO";
    case SanitizerOrdinal::NONNULL_ATTRIBUTE: return "NONNULL_ATTRIBUTE";
    case SanitizerOrdinal::NULL_: return "NULL_";
    case SanitizerOrdinal::NULLABILITY_ARGUMENT: return "NULLABILITY_ARGUMENT";
    case SanitizerOrdinal::NULLABILITY_ASSIGN: return "NULLABILITY_ASSIGN";
    case SanitizerOrdinal::NULLABILITY_RETURN: return "NULLABILITY_RETURN";
    case SanitizerOrdinal::NULLABILITY_GROUP: return "NULLABILITY_GROUP";
    case SanitizerOrdinal::OBJECT_SIZE: return "OBJECT_SIZE";
    case SanitizerOrdinal::POINTER_OVERFLOW: return "POINTER_OVERFLOW";
    case SanitizerOrdinal::RETURN: return "RETURN";
    case SanitizerOrdinal::RETURNS_NONNULL_ATTRIBUTE: return "RETURNS_NONNULL_ATTRIBUTE";
    case SanitizerOrdinal::SHIFT_BASE: return "SHIFT_BASE";
    case SanitizerOrdinal::SHIFT_EXPONENT: return "SHIFT_EXPONENT";
    case SanitizerOrdinal::SHIFT_GROUP: return "SHIFT_GROUP";
    case SanitizerOrdinal::SIGNED_INTEGER_OVERFLOW: return "SIGNED_INTEGER_OVERFLOW";
    case SanitizerOrdinal::UNREACHABLE: return "UNREACHABLE";
    case SanitizerOrdinal::VLA_BOUND: return "VLA_BOUND";
    case SanitizerOrdinal::VPTR: return "VPTR";
    case SanitizerOrdinal::UNSIGNED_INTEGER_OVERFLOW: return "UNSIGNED_INTEGER_OVERFLOW";
    case SanitizerOrdinal::UNSIGNED_SHIFT_BASE: return "UNSIGNED_SHIFT_BASE";
    case SanitizerOrdinal::DATA_FLOW: return "DATA_FLOW";
    case SanitizerOrdinal::CFI_CAST_STRICT: return "CFI_CAST_STRICT";
    case SanitizerOrdinal::CFI_DERIVED_CAST: return "CFI_DERIVED_CAST";
    case SanitizerOrdinal::CFII_CALL: return "CFII_CALL";
    case SanitizerOrdinal::CFIMF_CALL: return "CFIMF_CALL";
    case SanitizerOrdinal::CFI_UNRELATED_CAST: return "CFI_UNRELATED_CAST";
    case SanitizerOrdinal::CFINV_CALL: return "CFINV_CALL";
    case SanitizerOrdinal::CFIV_CALL: return "CFIV_CALL";
    case SanitizerOrdinal::CFI_GROUP: return "CFI_GROUP";
    case SanitizerOrdinal::SAFE_STACK: return "SAFE_STACK";
    case SanitizerOrdinal::SHADOW_CALL_STACK: return "SHADOW_CALL_STACK";
    case SanitizerOrdinal::UNDEFINED_GROUP: return "UNDEFINED_GROUP";
    case SanitizerOrdinal::UNDEFINED_TRAP_GROUP: return "UNDEFINED_TRAP_GROUP";
    case SanitizerOrdinal::IMPLICIT_UNSIGNED_INTEGER_TRUNCATION: return "IMPLICIT_UNSIGNED_INTEGER_TRUNCATION";
    case SanitizerOrdinal::IMPLICIT_SIGNED_INTEGER_TRUNCATION: return "IMPLICIT_SIGNED_INTEGER_TRUNCATION";
    case SanitizerOrdinal::IMPLICIT_INTEGER_TRUNCATION_GROUP: return "IMPLICIT_INTEGER_TRUNCATION_GROUP";
    case SanitizerOrdinal::IMPLICIT_INTEGER_SIGN_CHANGE: return "IMPLICIT_INTEGER_SIGN_CHANGE";
    case SanitizerOrdinal::IMPLICIT_INTEGER_ARITHMETIC_VALUE_CHANGE_GROUP: return "IMPLICIT_INTEGER_ARITHMETIC_VALUE_CHANGE_GROUP";
    case SanitizerOrdinal::OBJ_C_CAST: return "OBJ_C_CAST";
    case SanitizerOrdinal::IMPLICIT_CONVERSION_GROUP: return "IMPLICIT_CONVERSION_GROUP";
    case SanitizerOrdinal::INTEGER_GROUP: return "INTEGER_GROUP";
    case SanitizerOrdinal::LOCAL_BOUNDS: return "LOCAL_BOUNDS";
    case SanitizerOrdinal::BOUNDS_GROUP: return "BOUNDS_GROUP";
    case SanitizerOrdinal::SCUDO: return "SCUDO";
    case SanitizerOrdinal::ALL_GROUP: return "ALL_GROUP";
    case SanitizerOrdinal::COUNT: return "COUNT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SelectorLocationsKind e) {
  switch (e) {
    case SelectorLocationsKind::NON_STANDARD: return "NON_STANDARD";
    case SelectorLocationsKind::STANDARD_NO_SPACE: return "STANDARD_NO_SPACE";
    case SelectorLocationsKind::STANDARD_WITH_SPACE: return "STANDARD_WITH_SPACE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SignReturnAddressKeyKind e) {
  switch (e) {
    case SignReturnAddressKeyKind::A_KEY: return "A_KEY";
    case SignReturnAddressKeyKind::B_KEY: return "B_KEY";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SignReturnAddressScopeKind e) {
  switch (e) {
    case SignReturnAddressScopeKind::NONE: return "NONE";
    case SignReturnAddressScopeKind::NON_LEAF: return "NON_LEAF";
    case SignReturnAddressScopeKind::ALL: return "ALL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SignedOverflowBehaviorTy e) {
  switch (e) {
    case SignedOverflowBehaviorTy::UNDEFINED: return "UNDEFINED";
    case SignedOverflowBehaviorTy::DEFINED: return "DEFINED";
    case SignedOverflowBehaviorTy::TRAPPING: return "TRAPPING";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SpecialMemberFlags e) {
  switch (e) {
    case SpecialMemberFlags::DEFAULT_CONSTRUCTOR: return "DEFAULT_CONSTRUCTOR";
    case SpecialMemberFlags::COPY_CONSTRUCTOR: return "COPY_CONSTRUCTOR";
    case SpecialMemberFlags::MOVE_CONSTRUCTOR: return "MOVE_CONSTRUCTOR";
    case SpecialMemberFlags::COPY_ASSIGNMENT: return "COPY_ASSIGNMENT";
    case SpecialMemberFlags::MOVE_ASSIGNMENT: return "MOVE_ASSIGNMENT";
    case SpecialMemberFlags::DESTRUCTOR: return "DESTRUCTOR";
    case SpecialMemberFlags::ALL: return "ALL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SpecifierKind e) {
  switch (e) {
    case SpecifierKind::IDENTIFIER: return "IDENTIFIER";
    case SpecifierKind::NAMESPACE: return "NAMESPACE";
    case SpecifierKind::NAMESPACE_ALIAS: return "NAMESPACE_ALIAS";
    case SpecifierKind::TYPE_SPEC: return "TYPE_SPEC";
    case SpecifierKind::TYPE_SPEC_WITH_TEMPLATE: return "TYPE_SPEC_WITH_TEMPLATE";
    case SpecifierKind::GLOBAL: return "GLOBAL";
    case SpecifierKind::SUPER: return "SUPER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(StackProtectorMode e) {
  switch (e) {
    case StackProtectorMode::OFF: return "OFF";
    case StackProtectorMode::ON: return "ON";
    case StackProtectorMode::STRONG: return "STRONG";
    case StackProtectorMode::REQ: return "REQ";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(StorageClass e) {
  switch (e) {
    case StorageClass::NONE: return "NONE";
    case StorageClass::EXTERN: return "EXTERN";
    case StorageClass::STATIC: return "STATIC";
    case StorageClass::PRIVATE_EXTERN: return "PRIVATE_EXTERN";
    case StorageClass::AUTO: return "AUTO";
    case StorageClass::REGISTER: return "REGISTER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(StorageDuration e) {
  switch (e) {
    case StorageDuration::FULL_EXPRESSION: return "FULL_EXPRESSION";
    case StorageDuration::AUTOMATIC: return "AUTOMATIC";
    case StorageDuration::THREAD: return "THREAD";
    case StorageDuration::STATIC: return "STATIC";
    case StorageDuration::DYNAMIC: return "DYNAMIC";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(StoredNameKind e) {
  switch (e) {
    case StoredNameKind::STORED_IDENTIFIER: return "STORED_IDENTIFIER";
    case StoredNameKind::STORED_OBJ_C_ZERO_ARGUMENT_SELECTOR: return "STORED_OBJ_C_ZERO_ARGUMENT_SELECTOR";
    case StoredNameKind::STORED_OBJ_C_ONE_ARGUMENT_SELECTOR: return "STORED_OBJ_C_ONE_ARGUMENT_SELECTOR";
    case StoredNameKind::STORED_CXX_CONSTRUCTOR_NAME: return "STORED_CXX_CONSTRUCTOR_NAME";
    case StoredNameKind::STORED_CXX_DESTRUCTOR_NAME: return "STORED_CXX_DESTRUCTOR_NAME";
    case StoredNameKind::STORED_CXX_CONVERSION_FUNCTION_NAME: return "STORED_CXX_CONVERSION_FUNCTION_NAME";
    case StoredNameKind::STORED_CXX_OPERATOR_NAME: return "STORED_CXX_OPERATOR_NAME";
    case StoredNameKind::STORED_DECLARATION_NAME_EXTRA: return "STORED_DECLARATION_NAME_EXTRA";
    case StoredNameKind::UNCOMMON_NAME_KIND_OFFSET: return "UNCOMMON_NAME_KIND_OFFSET";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(StoredSpecifierKind e) {
  switch (e) {
    case StoredSpecifierKind::STORED_IDENTIFIER: return "STORED_IDENTIFIER";
    case StoredSpecifierKind::STORED_DECLARATION: return "STORED_DECLARATION";
    case StoredSpecifierKind::STORED_TYPE_SPEC: return "STORED_TYPE_SPEC";
    case StoredSpecifierKind::STORED_TYPE_SPEC_WITH_TEMPLATE: return "STORED_TYPE_SPEC_WITH_TEMPLATE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(StructReturnConventionKind e) {
  switch (e) {
    case StructReturnConventionKind::DEFAULT: return "DEFAULT";
    case StructReturnConventionKind::ON_STACK: return "ON_STACK";
    case StructReturnConventionKind::IN_REGS: return "IN_REGS";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SubExpr e) {
  switch (e) {
    case SubExpr::CALLEE: return "CALLEE";
    case SubExpr::LHS: return "LHS";
    case SubExpr::RHS: return "RHS";
    case SubExpr::COUNT: return "COUNT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SubStmt e) {
  switch (e) {
    case SubStmt::BODY: return "BODY";
    case SubStmt::PROMISE: return "PROMISE";
    case SubStmt::INITIALIZER_SUSPEND: return "INITIALIZER_SUSPEND";
    case SubStmt::FINAL_SUSPEND: return "FINAL_SUSPEND";
    case SubStmt::ON_EXCEPTION: return "ON_EXCEPTION";
    case SubStmt::ON_FALLTHROUGH: return "ON_FALLTHROUGH";
    case SubStmt::ALLOCATE: return "ALLOCATE";
    case SubStmt::DEALLOCATE: return "DEALLOCATE";
    case SubStmt::RETURN_VALUE: return "RETURN_VALUE";
    case SubStmt::RESULT_DECLARATION: return "RESULT_DECLARATION";
    case SubStmt::RETURN_STATEMENT: return "RETURN_STATEMENT";
    case SubStmt::RETURN_STATEMENT_ON_ALLOC_FAILURE: return "RETURN_STATEMENT_ON_ALLOC_FAILURE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SwiftAsyncFramePointerKind e) {
  switch (e) {
    case SwiftAsyncFramePointerKind::AUTO: return "AUTO";
    case SwiftAsyncFramePointerKind::ALWAYS: return "ALWAYS";
    case SwiftAsyncFramePointerKind::NEVER: return "NEVER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(SyncScope e) {
  switch (e) {
    case SyncScope::HIP_SINGLE_THREAD: return "HIP_SINGLE_THREAD";
    case SyncScope::HIP_WAVEFRONT: return "HIP_WAVEFRONT";
    case SyncScope::HIP_WORKGROUP: return "HIP_WORKGROUP";
    case SyncScope::HIP_AGENT: return "HIP_AGENT";
    case SyncScope::HIP_SYSTEM: return "HIP_SYSTEM";
    case SyncScope::OPEN_CL_WORK_GROUP: return "OPEN_CL_WORK_GROUP";
    case SyncScope::OPEN_CL_DEVICE: return "OPEN_CL_DEVICE";
    case SyncScope::OPEN_CL_ALL_SVM_DEVICES: return "OPEN_CL_ALL_SVM_DEVICES";
    case SyncScope::OPEN_CL_SUB_GROUP: return "OPEN_CL_SUB_GROUP";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(Syntax e) {
  switch (e) {
    case Syntax::GNU: return "GNU";
    case Syntax::CXX11: return "CXX11";
    case Syntax::C2X: return "C2X";
    case Syntax::DECLSPEC: return "DECLSPEC";
    case Syntax::MICROSOFT: return "MICROSOFT";
    case Syntax::KEYWORD: return "KEYWORD";
    case Syntax::PRAGMA: return "PRAGMA";
    case Syntax::CONTEXT_SENSITIVE_KEYWORD: return "CONTEXT_SENSITIVE_KEYWORD";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TLSModel e) {
  switch (e) {
    case TLSModel::GENERAL_DYNAMIC_TLS_MODEL: return "GENERAL_DYNAMIC_TLS_MODEL";
    case TLSModel::LOCAL_DYNAMIC_TLS_MODEL: return "LOCAL_DYNAMIC_TLS_MODEL";
    case TLSModel::INITIAL_EXEC_TLS_MODEL: return "INITIAL_EXEC_TLS_MODEL";
    case TLSModel::LOCAL_EXEC_TLS_MODEL: return "LOCAL_EXEC_TLS_MODEL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TQ e) {
  switch (e) {
    case TQ::CONST: return "CONST";
    case TQ::RESTRICT: return "RESTRICT";
    case TQ::VOLATILE: return "VOLATILE";
    case TQ::CVR_MASK: return "CVR_MASK";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TagTypeKind e) {
  switch (e) {
    case TagTypeKind::STRUCT: return "STRUCT";
    case TagTypeKind::INTERFACE: return "INTERFACE";
    case TagTypeKind::UNION: return "UNION";
    case TagTypeKind::CLASS: return "CLASS";
    case TagTypeKind::ENUM: return "ENUM";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TailPaddingUseRules e) {
  switch (e) {
    case TailPaddingUseRules::ALWAYS_USE_TAIL_PADDING: return "ALWAYS_USE_TAIL_PADDING";
    case TailPaddingUseRules::USE_TAIL_PADDING_UNLESS_POD03: return "USE_TAIL_PADDING_UNLESS_POD03";
    case TailPaddingUseRules::USE_TAIL_PADDING_UNLESS_POD11: return "USE_TAIL_PADDING_UNLESS_POD11";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TemplateArgumentDependence e) {
  switch (e) {
    case TemplateArgumentDependence::UNEXPANDED_PACK: return "UNEXPANDED_PACK";
    case TemplateArgumentDependence::INSTANTIATION: return "INSTANTIATION";
    case TemplateArgumentDependence::DEPENDENT: return "DEPENDENT";
    case TemplateArgumentDependence::ERROR: return "ERROR";
    case TemplateArgumentDependence::NONE: return "NONE";
    case TemplateArgumentDependence::DEPENDENT_INSTANTIATION: return "DEPENDENT_INSTANTIATION";
    case TemplateArgumentDependence::ALL: return "ALL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TemplateNameDependence e) {
  switch (e) {
    case TemplateNameDependence::UNEXPANDED_PACK: return "UNEXPANDED_PACK";
    case TemplateNameDependence::INSTANTIATION: return "INSTANTIATION";
    case TemplateNameDependence::DEPENDENT: return "DEPENDENT";
    case TemplateNameDependence::ERROR: return "ERROR";
    case TemplateNameDependence::NONE: return "NONE";
    case TemplateNameDependence::DEPENDENT_INSTANTIATION: return "DEPENDENT_INSTANTIATION";
    case TemplateNameDependence::ALL: return "ALL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TemplateSpecializationKind e) {
  switch (e) {
    case TemplateSpecializationKind::UNDECLARED: return "UNDECLARED";
    case TemplateSpecializationKind::IMPLICIT_INSTANTIATION: return "IMPLICIT_INSTANTIATION";
    case TemplateSpecializationKind::EXPLICIT_SPECIALIZATION: return "EXPLICIT_SPECIALIZATION";
    case TemplateSpecializationKind::EXPLICIT_INSTANTIATION_DECLARATION: return "EXPLICIT_INSTANTIATION_DECLARATION";
    case TemplateSpecializationKind::EXPLICIT_INSTANTIATION_DEFINITION: return "EXPLICIT_INSTANTIATION_DEFINITION";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TextDiagnosticFormat e) {
  switch (e) {
    case TextDiagnosticFormat::CLANG: return "CLANG";
    case TextDiagnosticFormat::MSVC: return "MSVC";
    case TextDiagnosticFormat::VI: return "VI";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ThreadModelKind e) {
  switch (e) {
    case ThreadModelKind::POSIX: return "POSIX";
    case ThreadModelKind::SINGLE: return "SINGLE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(ThreadStorageClassSpecifier e) {
  switch (e) {
    case ThreadStorageClassSpecifier::UNSPECIFIED: return "UNSPECIFIED";
    case ThreadStorageClassSpecifier::__THREAD: return "__THREAD";
    case ThreadStorageClassSpecifier::THREAD_LOCAL: return "THREAD_LOCAL";
    case ThreadStorageClassSpecifier::_THREAD_LOCAL: return "_THREAD_LOCAL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TokenKind e) {
  switch (e) {
    case TokenKind::UNKNOWN: return "UNKNOWN";
    case TokenKind::END_OF_FILE: return "END_OF_FILE";
    case TokenKind::END_OF_DIRECTIVE: return "END_OF_DIRECTIVE";
    case TokenKind::CODE_COMPLETION: return "CODE_COMPLETION";
    case TokenKind::COMMENT: return "COMMENT";
    case TokenKind::IDENTIFIER: return "IDENTIFIER";
    case TokenKind::WHITESPACE: return "WHITESPACE";
    case TokenKind::NUMERIC_CONSTANT: return "NUMERIC_CONSTANT";
    case TokenKind::CHARACTER_CONSTANT: return "CHARACTER_CONSTANT";
    case TokenKind::WIDE_CHARACTER_CONSTANT: return "WIDE_CHARACTER_CONSTANT";
    case TokenKind::UTF8_CHARACTER_CONSTANT: return "UTF8_CHARACTER_CONSTANT";
    case TokenKind::UTF16_CHARACTER_CONSTANT: return "UTF16_CHARACTER_CONSTANT";
    case TokenKind::UTF32_CHARACTER_CONSTANT: return "UTF32_CHARACTER_CONSTANT";
    case TokenKind::STRING_LITERAL: return "STRING_LITERAL";
    case TokenKind::WIDE_STRING_LITERAL: return "WIDE_STRING_LITERAL";
    case TokenKind::HEADER_NAME: return "HEADER_NAME";
    case TokenKind::UTF8_STRING_LITERAL: return "UTF8_STRING_LITERAL";
    case TokenKind::UTF16_STRING_LITERAL: return "UTF16_STRING_LITERAL";
    case TokenKind::UTF32_STRING_LITERAL: return "UTF32_STRING_LITERAL";
    case TokenKind::L_SQUARE: return "L_SQUARE";
    case TokenKind::R_SQUARE: return "R_SQUARE";
    case TokenKind::L_PARENTHESIS: return "L_PARENTHESIS";
    case TokenKind::R_PARENTHESIS: return "R_PARENTHESIS";
    case TokenKind::L_BRACE_TOKEN: return "L_BRACE_TOKEN";
    case TokenKind::R_BRACE_TOKEN: return "R_BRACE_TOKEN";
    case TokenKind::PERIOD: return "PERIOD";
    case TokenKind::ELLIPSIS: return "ELLIPSIS";
    case TokenKind::AMP: return "AMP";
    case TokenKind::AMP_AMP: return "AMP_AMP";
    case TokenKind::AMP_EQUAL: return "AMP_EQUAL";
    case TokenKind::STAR: return "STAR";
    case TokenKind::STAR_EQUAL: return "STAR_EQUAL";
    case TokenKind::PLUS: return "PLUS";
    case TokenKind::PLUS_PLUS: return "PLUS_PLUS";
    case TokenKind::PLUS_EQUAL: return "PLUS_EQUAL";
    case TokenKind::MINUS: return "MINUS";
    case TokenKind::ARROW: return "ARROW";
    case TokenKind::MINUS_MINUS: return "MINUS_MINUS";
    case TokenKind::MINUS_EQUAL: return "MINUS_EQUAL";
    case TokenKind::TILDE: return "TILDE";
    case TokenKind::EXCLAIM: return "EXCLAIM";
    case TokenKind::EXCLAIM_EQUAL: return "EXCLAIM_EQUAL";
    case TokenKind::SLASH: return "SLASH";
    case TokenKind::SLASH_EQUAL: return "SLASH_EQUAL";
    case TokenKind::PERCENT: return "PERCENT";
    case TokenKind::PERCENT_EQUAL: return "PERCENT_EQUAL";
    case TokenKind::LESS: return "LESS";
    case TokenKind::LESS_LESS: return "LESS_LESS";
    case TokenKind::LESS_EQUAL: return "LESS_EQUAL";
    case TokenKind::LESS_LESS_EQUAL: return "LESS_LESS_EQUAL";
    case TokenKind::SPACESHIP: return "SPACESHIP";
    case TokenKind::GREATER: return "GREATER";
    case TokenKind::GREATER_GREATER: return "GREATER_GREATER";
    case TokenKind::GREATER_EQUAL: return "GREATER_EQUAL";
    case TokenKind::GREATER_GREATER_EQUAL: return "GREATER_GREATER_EQUAL";
    case TokenKind::CARET: return "CARET";
    case TokenKind::CARET_EQUAL: return "CARET_EQUAL";
    case TokenKind::PIPE: return "PIPE";
    case TokenKind::PIPE_PIPE: return "PIPE_PIPE";
    case TokenKind::PIPE_EQUAL: return "PIPE_EQUAL";
    case TokenKind::QUESTION: return "QUESTION";
    case TokenKind::COLON: return "COLON";
    case TokenKind::SEMI: return "SEMI";
    case TokenKind::EQUAL: return "EQUAL";
    case TokenKind::EQUAL_EQUAL: return "EQUAL_EQUAL";
    case TokenKind::COMMA: return "COMMA";
    case TokenKind::HASH: return "HASH";
    case TokenKind::HASH_HASH: return "HASH_HASH";
    case TokenKind::HASHAT: return "HASHAT";
    case TokenKind::PERIOD_STAR: return "PERIOD_STAR";
    case TokenKind::ARROW_STAR: return "ARROW_STAR";
    case TokenKind::COLON_COLON: return "COLON_COLON";
    case TokenKind::AT: return "AT";
    case TokenKind::LESS_LESS_LESS: return "LESS_LESS_LESS";
    case TokenKind::GREATER_GREATER_GREATER: return "GREATER_GREATER_GREATER";
    case TokenKind::CARETCARET: return "CARETCARET";
    case TokenKind::KEYWORD_AUTO: return "KEYWORD_AUTO";
    case TokenKind::KEYWORD_BREAK: return "KEYWORD_BREAK";
    case TokenKind::KEYWORD_CASE: return "KEYWORD_CASE";
    case TokenKind::KEYWORD_CHARACTER: return "KEYWORD_CHARACTER";
    case TokenKind::KEYWORD_CONST: return "KEYWORD_CONST";
    case TokenKind::KEYWORD_CONTINUE: return "KEYWORD_CONTINUE";
    case TokenKind::KEYWORD_DEFAULT: return "KEYWORD_DEFAULT";
    case TokenKind::KEYWORD_DO: return "KEYWORD_DO";
    case TokenKind::KEYWORD_DOUBLE: return "KEYWORD_DOUBLE";
    case TokenKind::KEYWORD_ELSE: return "KEYWORD_ELSE";
    case TokenKind::KEYWORD_ENUM: return "KEYWORD_ENUM";
    case TokenKind::KEYWORD_EXTERN: return "KEYWORD_EXTERN";
    case TokenKind::KEYWORD_FLOAT: return "KEYWORD_FLOAT";
    case TokenKind::KEYWORD_FOR: return "KEYWORD_FOR";
    case TokenKind::KEYWORD_GOTO: return "KEYWORD_GOTO";
    case TokenKind::KEYWORD_IF: return "KEYWORD_IF";
    case TokenKind::KEYWORD_INLINE: return "KEYWORD_INLINE";
    case TokenKind::KEYWORD_INT: return "KEYWORD_INT";
    case TokenKind::KEYWORD__EXT_INT: return "KEYWORD__EXT_INT";
    case TokenKind::KEYWORD__BIT_INT: return "KEYWORD__BIT_INT";
    case TokenKind::KEYWORD_LONG: return "KEYWORD_LONG";
    case TokenKind::KEYWORD_REGISTER: return "KEYWORD_REGISTER";
    case TokenKind::KEYWORD_RESTRICT: return "KEYWORD_RESTRICT";
    case TokenKind::KEYWORD_RETURN: return "KEYWORD_RETURN";
    case TokenKind::KEYWORD_SHORT: return "KEYWORD_SHORT";
    case TokenKind::KEYWORD_SIGNED: return "KEYWORD_SIGNED";
    case TokenKind::KEYWORD_SIZEOF: return "KEYWORD_SIZEOF";
    case TokenKind::KEYWORD_STATIC: return "KEYWORD_STATIC";
    case TokenKind::KEYWORD_STRUCT: return "KEYWORD_STRUCT";
    case TokenKind::KEYWORD_SWITCH: return "KEYWORD_SWITCH";
    case TokenKind::KEYWORD_TYPEDEF: return "KEYWORD_TYPEDEF";
    case TokenKind::KEYWORD_UNION: return "KEYWORD_UNION";
    case TokenKind::KEYWORD_UNSIGNED: return "KEYWORD_UNSIGNED";
    case TokenKind::KEYWORD_VOID: return "KEYWORD_VOID";
    case TokenKind::KEYWORD_VOLATILE: return "KEYWORD_VOLATILE";
    case TokenKind::KEYWORD_WHILE: return "KEYWORD_WHILE";
    case TokenKind::KEYWORD__ALIGNAS: return "KEYWORD__ALIGNAS";
    case TokenKind::KEYWORD__ALIGNOF: return "KEYWORD__ALIGNOF";
    case TokenKind::KEYWORD__ATOMIC: return "KEYWORD__ATOMIC";
    case TokenKind::KEYWORD__BOOLEAN: return "KEYWORD__BOOLEAN";
    case TokenKind::KEYWORD__COMPLEX: return "KEYWORD__COMPLEX";
    case TokenKind::KEYWORD__GENERIC: return "KEYWORD__GENERIC";
    case TokenKind::KEYWORD__IMAGINARY: return "KEYWORD__IMAGINARY";
    case TokenKind::KEYWORD__NORETURN: return "KEYWORD__NORETURN";
    case TokenKind::KEYWORD__STATIC_ASSERT: return "KEYWORD__STATIC_ASSERT";
    case TokenKind::KEYWORD__THREAD_LOCAL: return "KEYWORD__THREAD_LOCAL";
    case TokenKind::KEYWORD___FUNC__: return "KEYWORD___FUNC__";
    case TokenKind::KEYWORD___OBJC_YES: return "KEYWORD___OBJC_YES";
    case TokenKind::KEYWORD___OBJC_NO: return "KEYWORD___OBJC_NO";
    case TokenKind::KEYWORD_ASSEMBLY: return "KEYWORD_ASSEMBLY";
    case TokenKind::KEYWORD_BOOLEAN: return "KEYWORD_BOOLEAN";
    case TokenKind::KEYWORD_CATCH: return "KEYWORD_CATCH";
    case TokenKind::KEYWORD_CLASS: return "KEYWORD_CLASS";
    case TokenKind::KEYWORD_CONST_CAST: return "KEYWORD_CONST_CAST";
    case TokenKind::KEYWORD_DELETE: return "KEYWORD_DELETE";
    case TokenKind::KEYWORD_DYNAMIC_CAST: return "KEYWORD_DYNAMIC_CAST";
    case TokenKind::KEYWORD_EXPLICIT: return "KEYWORD_EXPLICIT";
    case TokenKind::KEYWORD_EXPORT: return "KEYWORD_EXPORT";
    case TokenKind::KEYWORD_FALSE: return "KEYWORD_FALSE";
    case TokenKind::KEYWORD_FRIEND: return "KEYWORD_FRIEND";
    case TokenKind::KEYWORD_MUTABLE: return "KEYWORD_MUTABLE";
    case TokenKind::KEYWORD_NAMESPACE: return "KEYWORD_NAMESPACE";
    case TokenKind::KEYWORD_NEW: return "KEYWORD_NEW";
    case TokenKind::KEYWORD_OPERATOR: return "KEYWORD_OPERATOR";
    case TokenKind::KEYWORD_PRIVATE: return "KEYWORD_PRIVATE";
    case TokenKind::KEYWORD_PROTECTED: return "KEYWORD_PROTECTED";
    case TokenKind::KEYWORD_PUBLIC: return "KEYWORD_PUBLIC";
    case TokenKind::KEYWORD_REINTERPRET_CAST: return "KEYWORD_REINTERPRET_CAST";
    case TokenKind::KEYWORD_STATIC_CAST: return "KEYWORD_STATIC_CAST";
    case TokenKind::KEYWORD_TEMPLATE: return "KEYWORD_TEMPLATE";
    case TokenKind::KEYWORD_THIS: return "KEYWORD_THIS";
    case TokenKind::KEYWORD_THROW: return "KEYWORD_THROW";
    case TokenKind::KEYWORD_TRUE: return "KEYWORD_TRUE";
    case TokenKind::KEYWORD_TRY: return "KEYWORD_TRY";
    case TokenKind::KEYWORD_TYPENAME: return "KEYWORD_TYPENAME";
    case TokenKind::KEYWORD_TYPEID: return "KEYWORD_TYPEID";
    case TokenKind::KEYWORD_USING: return "KEYWORD_USING";
    case TokenKind::KEYWORD_VIRTUAL: return "KEYWORD_VIRTUAL";
    case TokenKind::KEYWORD_WCHAR_T: return "KEYWORD_WCHAR_T";
    case TokenKind::KEYWORD_ALIGNAS: return "KEYWORD_ALIGNAS";
    case TokenKind::KEYWORD_ALIGNOF: return "KEYWORD_ALIGNOF";
    case TokenKind::KEYWORD_CHAR16_T: return "KEYWORD_CHAR16_T";
    case TokenKind::KEYWORD_CHAR32_T: return "KEYWORD_CHAR32_T";
    case TokenKind::KEYWORD_CONSTEXPR: return "KEYWORD_CONSTEXPR";
    case TokenKind::KEYWORD_DECLTYPE: return "KEYWORD_DECLTYPE";
    case TokenKind::KEYWORD_NOEXCEPT: return "KEYWORD_NOEXCEPT";
    case TokenKind::KEYWORD_NULLPTR: return "KEYWORD_NULLPTR";
    case TokenKind::KEYWORD_STATIC_ASSERT: return "KEYWORD_STATIC_ASSERT";
    case TokenKind::KEYWORD_THREAD_LOCAL: return "KEYWORD_THREAD_LOCAL";
    case TokenKind::KEYWORD_CONCEPT: return "KEYWORD_CONCEPT";
    case TokenKind::KEYWORD_REQUIRES: return "KEYWORD_REQUIRES";
    case TokenKind::KEYWORD_CO_AWAIT: return "KEYWORD_CO_AWAIT";
    case TokenKind::KEYWORD_CO_RETURN: return "KEYWORD_CO_RETURN";
    case TokenKind::KEYWORD_CO_YIELD: return "KEYWORD_CO_YIELD";
    case TokenKind::KEYWORD_MODULE: return "KEYWORD_MODULE";
    case TokenKind::KEYWORD_IMPORT: return "KEYWORD_IMPORT";
    case TokenKind::KEYWORD_CONSTEVAL: return "KEYWORD_CONSTEVAL";
    case TokenKind::KEYWORD_CONSTINIT: return "KEYWORD_CONSTINIT";
    case TokenKind::KEYWORD_CHAR8_T: return "KEYWORD_CHAR8_T";
    case TokenKind::KEYWORD__FLOAT16: return "KEYWORD__FLOAT16";
    case TokenKind::KEYWORD__ACCUM: return "KEYWORD__ACCUM";
    case TokenKind::KEYWORD__FRACT: return "KEYWORD__FRACT";
    case TokenKind::KEYWORD__SAT: return "KEYWORD__SAT";
    case TokenKind::KEYWORD__DECIMAL32: return "KEYWORD__DECIMAL32";
    case TokenKind::KEYWORD__DECIMAL64: return "KEYWORD__DECIMAL64";
    case TokenKind::KEYWORD__DECIMAL128: return "KEYWORD__DECIMAL128";
    case TokenKind::KEYWORD___NULL: return "KEYWORD___NULL";
    case TokenKind::KEYWORD___ALIGNOF: return "KEYWORD___ALIGNOF";
    case TokenKind::KEYWORD___ATTRIBUTE: return "KEYWORD___ATTRIBUTE";
    case TokenKind::KEYWORD___BUILTIN_CHOOSE_EXPRESSION: return "KEYWORD___BUILTIN_CHOOSE_EXPRESSION";
    case TokenKind::KEYWORD___BUILTIN_OFFSETOF: return "KEYWORD___BUILTIN_OFFSETOF";
    case TokenKind::KEYWORD___BUILTIN_FILE: return "KEYWORD___BUILTIN_FILE";
    case TokenKind::KEYWORD___BUILTIN_FUNCTION: return "KEYWORD___BUILTIN_FUNCTION";
    case TokenKind::KEYWORD___BUILTIN_LINE: return "KEYWORD___BUILTIN_LINE";
    case TokenKind::KEYWORD___BUILTIN_COLUMN: return "KEYWORD___BUILTIN_COLUMN";
    case TokenKind::KEYWORD___BUILTIN_TYPES_COMPATIBLE_P: return "KEYWORD___BUILTIN_TYPES_COMPATIBLE_P";
    case TokenKind::KEYWORD___BUILTIN_VA_ARGUMENT: return "KEYWORD___BUILTIN_VA_ARGUMENT";
    case TokenKind::KEYWORD___EXTENSION__: return "KEYWORD___EXTENSION__";
    case TokenKind::KEYWORD___FLOAT128: return "KEYWORD___FLOAT128";
    case TokenKind::KEYWORD___IBM128: return "KEYWORD___IBM128";
    case TokenKind::KEYWORD___IMAG: return "KEYWORD___IMAG";
    case TokenKind::KEYWORD___INT128: return "KEYWORD___INT128";
    case TokenKind::KEYWORD___LABEL__: return "KEYWORD___LABEL__";
    case TokenKind::KEYWORD___REAL: return "KEYWORD___REAL";
    case TokenKind::KEYWORD___THREAD: return "KEYWORD___THREAD";
    case TokenKind::KEYWORD___FUNCTION__: return "KEYWORD___FUNCTION__";
    case TokenKind::KEYWORD___PRETTYFUNCTION__: return "KEYWORD___PRETTYFUNCTION__";
    case TokenKind::KEYWORD___AUTO_TYPE: return "KEYWORD___AUTO_TYPE";
    case TokenKind::KEYWORD_TYPEOF: return "KEYWORD_TYPEOF";
    case TokenKind::KEYWORD___FUNCDNAME__: return "KEYWORD___FUNCDNAME__";
    case TokenKind::KEYWORD___FUNCSIG__: return "KEYWORD___FUNCSIG__";
    case TokenKind::KEYWORD_LFUNCTION__: return "KEYWORD_LFUNCTION__";
    case TokenKind::KEYWORD_LFUNCSIG__: return "KEYWORD_LFUNCSIG__";
    case TokenKind::KEYWORD___IS_INTERFACE_CLASS: return "KEYWORD___IS_INTERFACE_CLASS";
    case TokenKind::KEYWORD___IS_SEALED: return "KEYWORD___IS_SEALED";
    case TokenKind::KEYWORD___IS_DESTRUCTIBLE: return "KEYWORD___IS_DESTRUCTIBLE";
    case TokenKind::KEYWORD___IS_TRIVIALLY_DESTRUCTIBLE: return "KEYWORD___IS_TRIVIALLY_DESTRUCTIBLE";
    case TokenKind::KEYWORD___IS_NOTHROW_DESTRUCTIBLE: return "KEYWORD___IS_NOTHROW_DESTRUCTIBLE";
    case TokenKind::KEYWORD___IS_NOTHROW_ASSIGNABLE: return "KEYWORD___IS_NOTHROW_ASSIGNABLE";
    case TokenKind::KEYWORD___IS_CONSTRUCTIBLE: return "KEYWORD___IS_CONSTRUCTIBLE";
    case TokenKind::KEYWORD___IS_NOTHROW_CONSTRUCTIBLE: return "KEYWORD___IS_NOTHROW_CONSTRUCTIBLE";
    case TokenKind::KEYWORD___IS_ASSIGNABLE: return "KEYWORD___IS_ASSIGNABLE";
    case TokenKind::KEYWORD___HAS_NOTHROW_MOVE_ASSIGN: return "KEYWORD___HAS_NOTHROW_MOVE_ASSIGN";
    case TokenKind::KEYWORD___HAS_TRIVIAL_MOVE_ASSIGN: return "KEYWORD___HAS_TRIVIAL_MOVE_ASSIGN";
    case TokenKind::KEYWORD___HAS_TRIVIAL_MOVE_CONSTRUCTOR: return "KEYWORD___HAS_TRIVIAL_MOVE_CONSTRUCTOR";
    case TokenKind::KEYWORD___HAS_NOTHROW_ASSIGN: return "KEYWORD___HAS_NOTHROW_ASSIGN";
    case TokenKind::KEYWORD___HAS_NOTHROW_COPY: return "KEYWORD___HAS_NOTHROW_COPY";
    case TokenKind::KEYWORD___HAS_NOTHROW_CONSTRUCTOR: return "KEYWORD___HAS_NOTHROW_CONSTRUCTOR";
    case TokenKind::KEYWORD___HAS_TRIVIAL_ASSIGN: return "KEYWORD___HAS_TRIVIAL_ASSIGN";
    case TokenKind::KEYWORD___HAS_TRIVIAL_COPY: return "KEYWORD___HAS_TRIVIAL_COPY";
    case TokenKind::KEYWORD___HAS_TRIVIAL_CONSTRUCTOR: return "KEYWORD___HAS_TRIVIAL_CONSTRUCTOR";
    case TokenKind::KEYWORD___HAS_TRIVIAL_DESTRUCTOR: return "KEYWORD___HAS_TRIVIAL_DESTRUCTOR";
    case TokenKind::KEYWORD___HAS_VIRTUAL_DESTRUCTOR: return "KEYWORD___HAS_VIRTUAL_DESTRUCTOR";
    case TokenKind::KEYWORD___IS_ABSTRACT: return "KEYWORD___IS_ABSTRACT";
    case TokenKind::KEYWORD___IS_AGGREGATE: return "KEYWORD___IS_AGGREGATE";
    case TokenKind::KEYWORD___IS_BASE_OF: return "KEYWORD___IS_BASE_OF";
    case TokenKind::KEYWORD___IS_CLASS: return "KEYWORD___IS_CLASS";
    case TokenKind::KEYWORD___IS_CONVERTIBLE_TO: return "KEYWORD___IS_CONVERTIBLE_TO";
    case TokenKind::KEYWORD___IS_EMPTY: return "KEYWORD___IS_EMPTY";
    case TokenKind::KEYWORD___IS_ENUM: return "KEYWORD___IS_ENUM";
    case TokenKind::KEYWORD___IS_FINAL: return "KEYWORD___IS_FINAL";
    case TokenKind::KEYWORD___IS_LITERAL: return "KEYWORD___IS_LITERAL";
    case TokenKind::KEYWORD___IS_POD: return "KEYWORD___IS_POD";
    case TokenKind::KEYWORD___IS_POLYMORPHIC: return "KEYWORD___IS_POLYMORPHIC";
    case TokenKind::KEYWORD___IS_STANDARD_LAYOUT: return "KEYWORD___IS_STANDARD_LAYOUT";
    case TokenKind::KEYWORD___IS_TRIVIAL: return "KEYWORD___IS_TRIVIAL";
    case TokenKind::KEYWORD___IS_TRIVIALLY_ASSIGNABLE: return "KEYWORD___IS_TRIVIALLY_ASSIGNABLE";
    case TokenKind::KEYWORD___IS_TRIVIALLY_CONSTRUCTIBLE: return "KEYWORD___IS_TRIVIALLY_CONSTRUCTIBLE";
    case TokenKind::KEYWORD___IS_TRIVIALLY_COPYABLE: return "KEYWORD___IS_TRIVIALLY_COPYABLE";
    case TokenKind::KEYWORD___IS_UNION: return "KEYWORD___IS_UNION";
    case TokenKind::KEYWORD___HAS_UNIQUE_OBJECT_REPRESENTATIONS: return "KEYWORD___HAS_UNIQUE_OBJECT_REPRESENTATIONS";
    case TokenKind::KEYWORD___UNDERLYING_TYPE: return "KEYWORD___UNDERLYING_TYPE";
    case TokenKind::KEYWORD___REFERENCE_BINDS_TO_TEMPORARY: return "KEYWORD___REFERENCE_BINDS_TO_TEMPORARY";
    case TokenKind::KEYWORD___IS_LVALUE_EXPRESSION: return "KEYWORD___IS_LVALUE_EXPRESSION";
    case TokenKind::KEYWORD___IS_RVALUE_EXPRESSION: return "KEYWORD___IS_RVALUE_EXPRESSION";
    case TokenKind::KEYWORD___IS_ARITHMETIC: return "KEYWORD___IS_ARITHMETIC";
    case TokenKind::KEYWORD___IS_FLOATING_POINT: return "KEYWORD___IS_FLOATING_POINT";
    case TokenKind::KEYWORD___IS_INTEGRAL: return "KEYWORD___IS_INTEGRAL";
    case TokenKind::KEYWORD___IS_COMPLETE_TYPE: return "KEYWORD___IS_COMPLETE_TYPE";
    case TokenKind::KEYWORD___IS_VOID: return "KEYWORD___IS_VOID";
    case TokenKind::KEYWORD___IS_ARRAY: return "KEYWORD___IS_ARRAY";
    case TokenKind::KEYWORD___IS_FUNCTION: return "KEYWORD___IS_FUNCTION";
    case TokenKind::KEYWORD___IS_REFERENCE: return "KEYWORD___IS_REFERENCE";
    case TokenKind::KEYWORD___IS_LVALUE_REFERENCE: return "KEYWORD___IS_LVALUE_REFERENCE";
    case TokenKind::KEYWORD___IS_RVALUE_REFERENCE: return "KEYWORD___IS_RVALUE_REFERENCE";
    case TokenKind::KEYWORD___IS_FUNDAMENTAL: return "KEYWORD___IS_FUNDAMENTAL";
    case TokenKind::KEYWORD___IS_OBJECT: return "KEYWORD___IS_OBJECT";
    case TokenKind::KEYWORD___IS_SCALAR: return "KEYWORD___IS_SCALAR";
    case TokenKind::KEYWORD___IS_COMPOUND: return "KEYWORD___IS_COMPOUND";
    case TokenKind::KEYWORD___IS_POINTER: return "KEYWORD___IS_POINTER";
    case TokenKind::KEYWORD___IS_MEMBER_OBJECT_POINTER: return "KEYWORD___IS_MEMBER_OBJECT_POINTER";
    case TokenKind::KEYWORD___IS_MEMBER_FUNCTION_POINTER: return "KEYWORD___IS_MEMBER_FUNCTION_POINTER";
    case TokenKind::KEYWORD___IS_MEMBER_POINTER: return "KEYWORD___IS_MEMBER_POINTER";
    case TokenKind::KEYWORD___IS_CONST: return "KEYWORD___IS_CONST";
    case TokenKind::KEYWORD___IS_VOLATILE: return "KEYWORD___IS_VOLATILE";
    case TokenKind::KEYWORD___IS_SIGNED: return "KEYWORD___IS_SIGNED";
    case TokenKind::KEYWORD___IS_UNSIGNED: return "KEYWORD___IS_UNSIGNED";
    case TokenKind::KEYWORD___IS_SAME: return "KEYWORD___IS_SAME";
    case TokenKind::KEYWORD___IS_CONVERTIBLE: return "KEYWORD___IS_CONVERTIBLE";
    case TokenKind::KEYWORD___ARRAY_RANK: return "KEYWORD___ARRAY_RANK";
    case TokenKind::KEYWORD___ARRAY_EXTENT: return "KEYWORD___ARRAY_EXTENT";
    case TokenKind::KEYWORD___PRIVATE_EXTERN__: return "KEYWORD___PRIVATE_EXTERN__";
    case TokenKind::KEYWORD___MODULE_PRIVATE__: return "KEYWORD___MODULE_PRIVATE__";
    case TokenKind::KEYWORD___DECLSPEC: return "KEYWORD___DECLSPEC";
    case TokenKind::KEYWORD___CDECL: return "KEYWORD___CDECL";
    case TokenKind::KEYWORD___STDCALL: return "KEYWORD___STDCALL";
    case TokenKind::KEYWORD___FASTCALL: return "KEYWORD___FASTCALL";
    case TokenKind::KEYWORD___THISCALL: return "KEYWORD___THISCALL";
    case TokenKind::KEYWORD___REGCALL: return "KEYWORD___REGCALL";
    case TokenKind::KEYWORD___VECTORCALL: return "KEYWORD___VECTORCALL";
    case TokenKind::KEYWORD___FORCEINLINE: return "KEYWORD___FORCEINLINE";
    case TokenKind::KEYWORD___UNALIGNED: return "KEYWORD___UNALIGNED";
    case TokenKind::KEYWORD___SUPER: return "KEYWORD___SUPER";
    case TokenKind::KEYWORD___GLOBAL: return "KEYWORD___GLOBAL";
    case TokenKind::KEYWORD___LOCAL: return "KEYWORD___LOCAL";
    case TokenKind::KEYWORD___CONSTANT: return "KEYWORD___CONSTANT";
    case TokenKind::KEYWORD___PRIVATE: return "KEYWORD___PRIVATE";
    case TokenKind::KEYWORD___GENERIC: return "KEYWORD___GENERIC";
    case TokenKind::KEYWORD___KERNEL: return "KEYWORD___KERNEL";
    case TokenKind::KEYWORD___READ_ONLY: return "KEYWORD___READ_ONLY";
    case TokenKind::KEYWORD___WRITE_ONLY: return "KEYWORD___WRITE_ONLY";
    case TokenKind::KEYWORD___READ_WRITE: return "KEYWORD___READ_WRITE";
    case TokenKind::KEYWORD___BUILTIN_ASTYPE: return "KEYWORD___BUILTIN_ASTYPE";
    case TokenKind::KEYWORD_VEC_STEP: return "KEYWORD_VEC_STEP";
    case TokenKind::KEYWORD_IMAGE_1D_T: return "KEYWORD_IMAGE_1D_T";
    case TokenKind::KEYWORD_IMAGE_1D_ARRAY_T: return "KEYWORD_IMAGE_1D_ARRAY_T";
    case TokenKind::KEYWORD_IMAGE_1D_BUFFER_T: return "KEYWORD_IMAGE_1D_BUFFER_T";
    case TokenKind::KEYWORD_IMAGE_2D_T: return "KEYWORD_IMAGE_2D_T";
    case TokenKind::KEYWORD_IMAGE_2D_ARRAY_T: return "KEYWORD_IMAGE_2D_ARRAY_T";
    case TokenKind::KEYWORD_IMAGE_2D_DEPTH_T: return "KEYWORD_IMAGE_2D_DEPTH_T";
    case TokenKind::KEYWORD_IMAGE_2D_ARRAY_DEPTH_T: return "KEYWORD_IMAGE_2D_ARRAY_DEPTH_T";
    case TokenKind::KEYWORD_IMAGE_2D_MSAA_T: return "KEYWORD_IMAGE_2D_MSAA_T";
    case TokenKind::KEYWORD_IMAGE_2D_ARRAY_MSAA_T: return "KEYWORD_IMAGE_2D_ARRAY_MSAA_T";
    case TokenKind::KEYWORD_IMAGE_2D_MSAA_DEPTH_T: return "KEYWORD_IMAGE_2D_MSAA_DEPTH_T";
    case TokenKind::KEYWORD_IMAGE_2D_ARRAY_MSAA_DEPTH_T: return "KEYWORD_IMAGE_2D_ARRAY_MSAA_DEPTH_T";
    case TokenKind::KEYWORD_IMAGE_3D_T: return "KEYWORD_IMAGE_3D_T";
    case TokenKind::KEYWORD_PIPE: return "KEYWORD_PIPE";
    case TokenKind::KEYWORD_ADDRSPACE_CAST: return "KEYWORD_ADDRSPACE_CAST";
    case TokenKind::KEYWORD___BUILTIN_OMP_REQUIRED_SIMD_ALIGN: return "KEYWORD___BUILTIN_OMP_REQUIRED_SIMD_ALIGN";
    case TokenKind::KEYWORD___PASCAL: return "KEYWORD___PASCAL";
    case TokenKind::KEYWORD___VECTOR: return "KEYWORD___VECTOR";
    case TokenKind::KEYWORD___PIXEL: return "KEYWORD___PIXEL";
    case TokenKind::KEYWORD___BOOLEAN: return "KEYWORD___BOOLEAN";
    case TokenKind::KEYWORD___BF16: return "KEYWORD___BF16";
    case TokenKind::KEYWORD_HALF: return "KEYWORD_HALF";
    case TokenKind::KEYWORD___BRIDGE: return "KEYWORD___BRIDGE";
    case TokenKind::KEYWORD___BRIDGE_TRANSFER: return "KEYWORD___BRIDGE_TRANSFER";
    case TokenKind::KEYWORD___BRIDGE_RETAINED: return "KEYWORD___BRIDGE_RETAINED";
    case TokenKind::KEYWORD___BRIDGE_RETAIN: return "KEYWORD___BRIDGE_RETAIN";
    case TokenKind::KEYWORD___COVARIANT: return "KEYWORD___COVARIANT";
    case TokenKind::KEYWORD___CONTRAVARIANT: return "KEYWORD___CONTRAVARIANT";
    case TokenKind::KEYWORD___KINDOF: return "KEYWORD___KINDOF";
    case TokenKind::KEYWORD__NONNULL: return "KEYWORD__NONNULL";
    case TokenKind::KEYWORD__NULLABLE: return "KEYWORD__NULLABLE";
    case TokenKind::KEYWORD__NULLABLE_RESULT: return "KEYWORD__NULLABLE_RESULT";
    case TokenKind::KEYWORD__NULL_UNSPECIFIED: return "KEYWORD__NULL_UNSPECIFIED";
    case TokenKind::KEYWORD___PTR64: return "KEYWORD___PTR64";
    case TokenKind::KEYWORD___PTR32: return "KEYWORD___PTR32";
    case TokenKind::KEYWORD___SPTR: return "KEYWORD___SPTR";
    case TokenKind::KEYWORD___UPTR: return "KEYWORD___UPTR";
    case TokenKind::KEYWORD___W64: return "KEYWORD___W64";
    case TokenKind::KEYWORD___UUIDOF: return "KEYWORD___UUIDOF";
    case TokenKind::KEYWORD___TRY: return "KEYWORD___TRY";
    case TokenKind::KEYWORD___FINALLY: return "KEYWORD___FINALLY";
    case TokenKind::KEYWORD___LEAVE: return "KEYWORD___LEAVE";
    case TokenKind::KEYWORD___INT64: return "KEYWORD___INT64";
    case TokenKind::KEYWORD___IF_EXISTS: return "KEYWORD___IF_EXISTS";
    case TokenKind::KEYWORD___IF_NOT_EXISTS: return "KEYWORD___IF_NOT_EXISTS";
    case TokenKind::KEYWORD___SINGLE_INHERITANCE: return "KEYWORD___SINGLE_INHERITANCE";
    case TokenKind::KEYWORD___MULTIPLE_INHERITANCE: return "KEYWORD___MULTIPLE_INHERITANCE";
    case TokenKind::KEYWORD___VIRTUAL_INHERITANCE: return "KEYWORD___VIRTUAL_INHERITANCE";
    case TokenKind::KEYWORD___INTERFACE: return "KEYWORD___INTERFACE";
    case TokenKind::KEYWORD___BUILTIN_CONVERTVECTOR: return "KEYWORD___BUILTIN_CONVERTVECTOR";
    case TokenKind::KEYWORD___BUILTIN_BIT_CAST: return "KEYWORD___BUILTIN_BIT_CAST";
    case TokenKind::KEYWORD___BUILTIN_AVAILABLE: return "KEYWORD___BUILTIN_AVAILABLE";
    case TokenKind::KEYWORD___BUILTIN_SYCL_UNIQUE_STABLE_NAME: return "KEYWORD___BUILTIN_SYCL_UNIQUE_STABLE_NAME";
    case TokenKind::KEYWORD___UNKNOWN_ANYTYPE: return "KEYWORD___UNKNOWN_ANYTYPE";
    case TokenKind::ANNOT_CXXSCOPE: return "ANNOT_CXXSCOPE";
    case TokenKind::ANNOT_TYPENAME: return "ANNOT_TYPENAME";
    case TokenKind::ANNOT_TEMPLATE_ID: return "ANNOT_TEMPLATE_ID";
    case TokenKind::ANNOT_NON_TYPE: return "ANNOT_NON_TYPE";
    case TokenKind::ANNOT_NON_TYPE_UNDECLARED: return "ANNOT_NON_TYPE_UNDECLARED";
    case TokenKind::ANNOT_NON_TYPE_DEPENDENT: return "ANNOT_NON_TYPE_DEPENDENT";
    case TokenKind::ANNOT_OVERLOAD: return "ANNOT_OVERLOAD";
    case TokenKind::ANNOT_PRIMARY_EXPRESSION: return "ANNOT_PRIMARY_EXPRESSION";
    case TokenKind::ANNOT_DECLTYPE: return "ANNOT_DECLTYPE";
    case TokenKind::ANNOT_PRAGMA_UNUSED: return "ANNOT_PRAGMA_UNUSED";
    case TokenKind::ANNOT_PRAGMA_VIS: return "ANNOT_PRAGMA_VIS";
    case TokenKind::ANNOT_PRAGMA_PACK: return "ANNOT_PRAGMA_PACK";
    case TokenKind::ANNOT_PRAGMA_PARSER_CRASH: return "ANNOT_PRAGMA_PARSER_CRASH";
    case TokenKind::ANNOT_PRAGMA_CAPTURED: return "ANNOT_PRAGMA_CAPTURED";
    case TokenKind::ANNOT_PRAGMA_DUMP: return "ANNOT_PRAGMA_DUMP";
    case TokenKind::ANNOT_PRAGMA_MSSTRUCT: return "ANNOT_PRAGMA_MSSTRUCT";
    case TokenKind::ANNOT_PRAGMA_ALIGN: return "ANNOT_PRAGMA_ALIGN";
    case TokenKind::ANNOT_PRAGMA_WEAK: return "ANNOT_PRAGMA_WEAK";
    case TokenKind::ANNOT_PRAGMA_WEAKALIAS: return "ANNOT_PRAGMA_WEAKALIAS";
    case TokenKind::ANNOT_PRAGMA_REDEFINE_EXTNAME: return "ANNOT_PRAGMA_REDEFINE_EXTNAME";
    case TokenKind::ANNOT_PRAGMA_FP_CONTRACT: return "ANNOT_PRAGMA_FP_CONTRACT";
    case TokenKind::ANNOT_PRAGMA_FENV_ACCESS: return "ANNOT_PRAGMA_FENV_ACCESS";
    case TokenKind::ANNOT_PRAGMA_FENV_ACCESS_MS: return "ANNOT_PRAGMA_FENV_ACCESS_MS";
    case TokenKind::ANNOT_PRAGMA_FENV_ROUND: return "ANNOT_PRAGMA_FENV_ROUND";
    case TokenKind::ANNOT_PRAGMA_FLOAT_CONTROL: return "ANNOT_PRAGMA_FLOAT_CONTROL";
    case TokenKind::ANNOT_PRAGMA_MS_POINTERS_TO_MEMBERS: return "ANNOT_PRAGMA_MS_POINTERS_TO_MEMBERS";
    case TokenKind::ANNOT_PRAGMA_MS_VTORDISP: return "ANNOT_PRAGMA_MS_VTORDISP";
    case TokenKind::ANNOT_PRAGMA_MS_PRAGMA: return "ANNOT_PRAGMA_MS_PRAGMA";
    case TokenKind::ANNOT_PRAGMA_OPENCL_EXTENSION: return "ANNOT_PRAGMA_OPENCL_EXTENSION";
    case TokenKind::ANNOT_ATTRIBUTE_OPENMP: return "ANNOT_ATTRIBUTE_OPENMP";
    case TokenKind::ANNOT_PRAGMA_OPENMP: return "ANNOT_PRAGMA_OPENMP";
    case TokenKind::ANNOT_PRAGMA_OPENMP_END: return "ANNOT_PRAGMA_OPENMP_END";
    case TokenKind::ANNOT_PRAGMA_LOOP_HINT: return "ANNOT_PRAGMA_LOOP_HINT";
    case TokenKind::ANNOT_PRAGMA_FP: return "ANNOT_PRAGMA_FP";
    case TokenKind::ANNOT_PRAGMA_ATTRIBUTE: return "ANNOT_PRAGMA_ATTRIBUTE";
    case TokenKind::ANNOT_MODULE_INCLUDE: return "ANNOT_MODULE_INCLUDE";
    case TokenKind::ANNOT_MODULE_BEGIN: return "ANNOT_MODULE_BEGIN";
    case TokenKind::ANNOT_MODULE_END: return "ANNOT_MODULE_END";
    case TokenKind::ANNOT_HEADER_UNIT: return "ANNOT_HEADER_UNIT";
    case TokenKind::PP_IF: return "PP_IF";
    case TokenKind::PP_IFDEF: return "PP_IFDEF";
    case TokenKind::PP_IFNDEF: return "PP_IFNDEF";
    case TokenKind::PP_ELIF: return "PP_ELIF";
    case TokenKind::PP_ELIFDEF: return "PP_ELIFDEF";
    case TokenKind::PP_ELIFNDEF: return "PP_ELIFNDEF";
    case TokenKind::PP_ELSE: return "PP_ELSE";
    case TokenKind::PP_ENDIF: return "PP_ENDIF";
    case TokenKind::PP_DEFINED: return "PP_DEFINED";
    case TokenKind::PP_INCLUDE: return "PP_INCLUDE";
    case TokenKind::PP___INCLUDE_MACROS: return "PP___INCLUDE_MACROS";
    case TokenKind::PP_DEFINE: return "PP_DEFINE";
    case TokenKind::PP_UNDEF: return "PP_UNDEF";
    case TokenKind::PP_LINE: return "PP_LINE";
    case TokenKind::PP_ERROR: return "PP_ERROR";
    case TokenKind::PP_PRAGMA: return "PP_PRAGMA";
    case TokenKind::PP_IMPORT: return "PP_IMPORT";
    case TokenKind::PP_INCLUDE_NEXT: return "PP_INCLUDE_NEXT";
    case TokenKind::PP_WARNING: return "PP_WARNING";
    case TokenKind::PP_IDENTIFIER: return "PP_IDENTIFIER";
    case TokenKind::PP_SCCS: return "PP_SCCS";
    case TokenKind::PP_ASSERT: return "PP_ASSERT";
    case TokenKind::PP_UNASSERT: return "PP_UNASSERT";
    case TokenKind::PP___PUBLIC_MACRO: return "PP___PUBLIC_MACRO";
    case TokenKind::PP___PRIVATE_MACRO: return "PP___PRIVATE_MACRO";
    case TokenKind::OBJC_AT_CLASS: return "OBJC_AT_CLASS";
    case TokenKind::OBJC_AT_COMPATIBILITY_ALIAS: return "OBJC_AT_COMPATIBILITY_ALIAS";
    case TokenKind::OBJC_AT_DEFINITIONS: return "OBJC_AT_DEFINITIONS";
    case TokenKind::OBJC_AT_ENCODE: return "OBJC_AT_ENCODE";
    case TokenKind::OBJC_AT_OBJC_END: return "OBJC_AT_OBJC_END";
    case TokenKind::OBJC_AT_IMPLEMENTATION: return "OBJC_AT_IMPLEMENTATION";
    case TokenKind::OBJC_AT_INTERFACE: return "OBJC_AT_INTERFACE";
    case TokenKind::OBJC_AT_PRIVATE: return "OBJC_AT_PRIVATE";
    case TokenKind::OBJC_AT_PROTECTED: return "OBJC_AT_PROTECTED";
    case TokenKind::OBJC_AT_PROTOCOL: return "OBJC_AT_PROTOCOL";
    case TokenKind::OBJC_AT_PUBLIC: return "OBJC_AT_PUBLIC";
    case TokenKind::OBJC_AT_SELECTOR: return "OBJC_AT_SELECTOR";
    case TokenKind::OBJC_AT_THROW: return "OBJC_AT_THROW";
    case TokenKind::OBJC_AT_TRY: return "OBJC_AT_TRY";
    case TokenKind::OBJC_AT_CATCH: return "OBJC_AT_CATCH";
    case TokenKind::OBJC_AT_FINALLY: return "OBJC_AT_FINALLY";
    case TokenKind::OBJC_AT_SYNCHRONIZED: return "OBJC_AT_SYNCHRONIZED";
    case TokenKind::OBJC_AT_AUTORELEASEPOOL: return "OBJC_AT_AUTORELEASEPOOL";
    case TokenKind::OBJC_AT_PROPERTY: return "OBJC_AT_PROPERTY";
    case TokenKind::OBJC_AT_PACKAGE: return "OBJC_AT_PACKAGE";
    case TokenKind::OBJC_AT_REQUIRED: return "OBJC_AT_REQUIRED";
    case TokenKind::OBJC_AT_OPTIONAL: return "OBJC_AT_OPTIONAL";
    case TokenKind::OBJC_AT_SYNTHESIZE: return "OBJC_AT_SYNTHESIZE";
    case TokenKind::OBJC_AT_DYNAMIC: return "OBJC_AT_DYNAMIC";
    case TokenKind::OBJC_AT_IMPORT: return "OBJC_AT_IMPORT";
    case TokenKind::OBJC_AT_AVAILABLE: return "OBJC_AT_AVAILABLE";
    case TokenKind::BEGIN_OF_FILE_MARKER: return "BEGIN_OF_FILE_MARKER";
    case TokenKind::END_OF_FILE_MARKER: return "END_OF_FILE_MARKER";
    case TokenKind::BEGIN_OF_MACRO_EXPANSION_MARKER: return "BEGIN_OF_MACRO_EXPANSION_MARKER";
    case TokenKind::END_OF_MACRO_EXPANSION_MARKER: return "END_OF_MACRO_EXPANSION_MARKER";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TrailingAllocKind e) {
  switch (e) {
    case TrailingAllocKind::TAK_INHERITS_CONSTRUCTOR: return "TAK_INHERITS_CONSTRUCTOR";
    case TrailingAllocKind::TAK_HAS_TAIL_EXPLICIT: return "TAK_HAS_TAIL_EXPLICIT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TranslationUnitKind e) {
  switch (e) {
    case TranslationUnitKind::COMPLETE: return "COMPLETE";
    case TranslationUnitKind::PREFIX: return "PREFIX";
    case TranslationUnitKind::MODULE: return "MODULE";
    case TranslationUnitKind::INCREMENTAL: return "INCREMENTAL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TrivialAutoVarInitKind e) {
  switch (e) {
    case TrivialAutoVarInitKind::UNINITIALIZED: return "UNINITIALIZED";
    case TrivialAutoVarInitKind::ZERO: return "ZERO";
    case TrivialAutoVarInitKind::PATTERN: return "PATTERN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TypeDependence e) {
  switch (e) {
    case TypeDependence::UNEXPANDED_PACK: return "UNEXPANDED_PACK";
    case TypeDependence::INSTANTIATION: return "INSTANTIATION";
    case TypeDependence::DEPENDENT: return "DEPENDENT";
    case TypeDependence::VARIABLY_MODIFIED: return "VARIABLY_MODIFIED";
    case TypeDependence::ERROR: return "ERROR";
    case TypeDependence::NONE: return "NONE";
    case TypeDependence::ALL: return "ALL";
    case TypeDependence::DEPENDENT_INSTANTIATION: return "DEPENDENT_INSTANTIATION";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TypeLocClass e) {
  switch (e) {
    case TypeLocClass::ADJUSTED: return "ADJUSTED";
    case TypeLocClass::DECAYED: return "DECAYED";
    case TypeLocClass::CONSTANT_ARRAY: return "CONSTANT_ARRAY";
    case TypeLocClass::DEPENDENT_SIZED_ARRAY: return "DEPENDENT_SIZED_ARRAY";
    case TypeLocClass::INCOMPLETE_ARRAY: return "INCOMPLETE_ARRAY";
    case TypeLocClass::VARIABLE_ARRAY: return "VARIABLE_ARRAY";
    case TypeLocClass::ATOMIC: return "ATOMIC";
    case TypeLocClass::ATTRIBUTED: return "ATTRIBUTED";
    case TypeLocClass::BIT_INT: return "BIT_INT";
    case TypeLocClass::BLOCK_POINTER: return "BLOCK_POINTER";
    case TypeLocClass::BUILTIN: return "BUILTIN";
    case TypeLocClass::COMPLEX: return "COMPLEX";
    case TypeLocClass::DECLTYPE: return "DECLTYPE";
    case TypeLocClass::AUTO: return "AUTO";
    case TypeLocClass::DEDUCED_TEMPLATE_SPECIALIZATION: return "DEDUCED_TEMPLATE_SPECIALIZATION";
    case TypeLocClass::DEPENDENT_ADDRESS_SPACE: return "DEPENDENT_ADDRESS_SPACE";
    case TypeLocClass::DEPENDENT_BIT_INT: return "DEPENDENT_BIT_INT";
    case TypeLocClass::DEPENDENT_NAME: return "DEPENDENT_NAME";
    case TypeLocClass::DEPENDENT_SIZED_EXT_VECTOR: return "DEPENDENT_SIZED_EXT_VECTOR";
    case TypeLocClass::DEPENDENT_TEMPLATE_SPECIALIZATION: return "DEPENDENT_TEMPLATE_SPECIALIZATION";
    case TypeLocClass::DEPENDENT_VECTOR: return "DEPENDENT_VECTOR";
    case TypeLocClass::ELABORATED: return "ELABORATED";
    case TypeLocClass::FUNCTION_NO_PROTO: return "FUNCTION_NO_PROTO";
    case TypeLocClass::FUNCTION_PROTO: return "FUNCTION_PROTO";
    case TypeLocClass::INJECTED_CLASS_NAME: return "INJECTED_CLASS_NAME";
    case TypeLocClass::MACRO_QUALIFIED: return "MACRO_QUALIFIED";
    case TypeLocClass::CONSTANT_MATRIX: return "CONSTANT_MATRIX";
    case TypeLocClass::DEPENDENT_SIZED_MATRIX: return "DEPENDENT_SIZED_MATRIX";
    case TypeLocClass::MEMBER_POINTER: return "MEMBER_POINTER";
    case TypeLocClass::OBJ_C_OBJECT_POINTER: return "OBJ_C_OBJECT_POINTER";
    case TypeLocClass::OBJ_C_OBJECT: return "OBJ_C_OBJECT";
    case TypeLocClass::OBJ_C_INTERFACE: return "OBJ_C_INTERFACE";
    case TypeLocClass::OBJ_C_TYPE_PARAMETER: return "OBJ_C_TYPE_PARAMETER";
    case TypeLocClass::PACK_EXPANSION: return "PACK_EXPANSION";
    case TypeLocClass::PARENTHESIS: return "PARENTHESIS";
    case TypeLocClass::PIPE: return "PIPE";
    case TypeLocClass::POINTER: return "POINTER";
    case TypeLocClass::L_VALUE_REFERENCE: return "L_VALUE_REFERENCE";
    case TypeLocClass::R_VALUE_REFERENCE: return "R_VALUE_REFERENCE";
    case TypeLocClass::SUBST_TEMPLATE_TYPE_PARM_PACK: return "SUBST_TEMPLATE_TYPE_PARM_PACK";
    case TypeLocClass::SUBST_TEMPLATE_TYPE_PARM: return "SUBST_TEMPLATE_TYPE_PARM";
    case TypeLocClass::ENUM: return "ENUM";
    case TypeLocClass::RECORD: return "RECORD";
    case TypeLocClass::TEMPLATE_SPECIALIZATION: return "TEMPLATE_SPECIALIZATION";
    case TypeLocClass::TEMPLATE_TYPE_PARM: return "TEMPLATE_TYPE_PARM";
    case TypeLocClass::TYPE_OF_EXPRESSION: return "TYPE_OF_EXPRESSION";
    case TypeLocClass::TYPE_OF: return "TYPE_OF";
    case TypeLocClass::TYPEDEF: return "TYPEDEF";
    case TypeLocClass::UNARY_TRANSFORM: return "UNARY_TRANSFORM";
    case TypeLocClass::UNRESOLVED_USING: return "UNRESOLVED_USING";
    case TypeLocClass::USING: return "USING";
    case TypeLocClass::VECTOR: return "VECTOR";
    case TypeLocClass::EXT_VECTOR: return "EXT_VECTOR";
    case TypeLocClass::QUALIFIED: return "QUALIFIED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TypeSpecifierSign e) {
  switch (e) {
    case TypeSpecifierSign::UNSPECIFIED: return "UNSPECIFIED";
    case TypeSpecifierSign::SIGNED: return "SIGNED";
    case TypeSpecifierSign::UNSIGNED: return "UNSIGNED";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TypeSpecifierType e) {
  switch (e) {
    case TypeSpecifierType::UNSPECIFIED: return "UNSPECIFIED";
    case TypeSpecifierType::VOID: return "VOID";
    case TypeSpecifierType::CHARACTER: return "CHARACTER";
    case TypeSpecifierType::WCHAR: return "WCHAR";
    case TypeSpecifierType::CHAR8: return "CHAR8";
    case TypeSpecifierType::CHAR16: return "CHAR16";
    case TypeSpecifierType::CHAR32: return "CHAR32";
    case TypeSpecifierType::INT: return "INT";
    case TypeSpecifierType::INT128: return "INT128";
    case TypeSpecifierType::BITINT: return "BITINT";
    case TypeSpecifierType::HALF: return "HALF";
    case TypeSpecifierType::FLOAT16: return "FLOAT16";
    case TypeSpecifierType::ACCUM: return "ACCUM";
    case TypeSpecifierType::FRACT: return "FRACT";
    case TypeSpecifierType::B_FLOAT16: return "B_FLOAT16";
    case TypeSpecifierType::FLOAT: return "FLOAT";
    case TypeSpecifierType::DOUBLE: return "DOUBLE";
    case TypeSpecifierType::FLOAT128: return "FLOAT128";
    case TypeSpecifierType::IBM128: return "IBM128";
    case TypeSpecifierType::BOOLEAN: return "BOOLEAN";
    case TypeSpecifierType::DECIMAL32: return "DECIMAL32";
    case TypeSpecifierType::DECIMAL64: return "DECIMAL64";
    case TypeSpecifierType::DECIMAL128: return "DECIMAL128";
    case TypeSpecifierType::ENUM: return "ENUM";
    case TypeSpecifierType::UNION: return "UNION";
    case TypeSpecifierType::STRUCT: return "STRUCT";
    case TypeSpecifierType::CLASS: return "CLASS";
    case TypeSpecifierType::INTERFACE: return "INTERFACE";
    case TypeSpecifierType::TYPENAME: return "TYPENAME";
    case TypeSpecifierType::TYPEOF_TYPE: return "TYPEOF_TYPE";
    case TypeSpecifierType::TYPEOF_EXPRESSION: return "TYPEOF_EXPRESSION";
    case TypeSpecifierType::DECLTYPE: return "DECLTYPE";
    case TypeSpecifierType::UNDERLYING_TYPE: return "UNDERLYING_TYPE";
    case TypeSpecifierType::AUTO: return "AUTO";
    case TypeSpecifierType::DECLTYPE_AUTO: return "DECLTYPE_AUTO";
    case TypeSpecifierType::AUTO_TYPE: return "AUTO_TYPE";
    case TypeSpecifierType::UNKNOWN_ANYTYPE: return "UNKNOWN_ANYTYPE";
    case TypeSpecifierType::ATOMIC: return "ATOMIC";
    case TypeSpecifierType::IMAGE_1D_T: return "IMAGE_1D_T";
    case TypeSpecifierType::IMAGE_1D_ARRAY_T: return "IMAGE_1D_ARRAY_T";
    case TypeSpecifierType::IMAGE_1D_BUFFER_T: return "IMAGE_1D_BUFFER_T";
    case TypeSpecifierType::IMAGE_2D_T: return "IMAGE_2D_T";
    case TypeSpecifierType::IMAGE_2D_ARRAY_T: return "IMAGE_2D_ARRAY_T";
    case TypeSpecifierType::IMAGE_2D_DEPTH_T: return "IMAGE_2D_DEPTH_T";
    case TypeSpecifierType::IMAGE_2D_ARRAY_DEPTH_T: return "IMAGE_2D_ARRAY_DEPTH_T";
    case TypeSpecifierType::IMAGE_2D_MSAA_T: return "IMAGE_2D_MSAA_T";
    case TypeSpecifierType::IMAGE_2D_ARRAY_MSAA_T: return "IMAGE_2D_ARRAY_MSAA_T";
    case TypeSpecifierType::IMAGE_2D_MSAA_DEPTH_T: return "IMAGE_2D_MSAA_DEPTH_T";
    case TypeSpecifierType::IMAGE_2D_ARRAY_MSAA_DEPTH_T: return "IMAGE_2D_ARRAY_MSAA_DEPTH_T";
    case TypeSpecifierType::IMAGE_3D_T: return "IMAGE_3D_T";
    case TypeSpecifierType::ERROR: return "ERROR";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TypeSpecifierWidth e) {
  switch (e) {
    case TypeSpecifierWidth::UNSPECIFIED: return "UNSPECIFIED";
    case TypeSpecifierWidth::SHORT: return "SHORT";
    case TypeSpecifierWidth::LONG: return "LONG";
    case TypeSpecifierWidth::LONG_LONG: return "LONG_LONG";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TypeSpecifiersPipe e) {
  switch (e) {
    case TypeSpecifiersPipe::UNSPECIFIED: return "UNSPECIFIED";
    case TypeSpecifiersPipe::PIPE: return "PIPE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TypeTrait e) {
  switch (e) {
    case TypeTrait::IS_INTERFACE_CLASS: return "IS_INTERFACE_CLASS";
    case TypeTrait::IS_SEALED: return "IS_SEALED";
    case TypeTrait::IS_DESTRUCTIBLE: return "IS_DESTRUCTIBLE";
    case TypeTrait::IS_TRIVIALLY_DESTRUCTIBLE: return "IS_TRIVIALLY_DESTRUCTIBLE";
    case TypeTrait::IS_NOTHROW_DESTRUCTIBLE: return "IS_NOTHROW_DESTRUCTIBLE";
    case TypeTrait::HAS_NOTHROW_MOVE_ASSIGN: return "HAS_NOTHROW_MOVE_ASSIGN";
    case TypeTrait::HAS_TRIVIAL_MOVE_ASSIGN: return "HAS_TRIVIAL_MOVE_ASSIGN";
    case TypeTrait::HAS_TRIVIAL_MOVE_CONSTRUCTOR: return "HAS_TRIVIAL_MOVE_CONSTRUCTOR";
    case TypeTrait::HAS_NOTHROW_ASSIGN: return "HAS_NOTHROW_ASSIGN";
    case TypeTrait::HAS_NOTHROW_COPY: return "HAS_NOTHROW_COPY";
    case TypeTrait::HAS_NOTHROW_CONSTRUCTOR: return "HAS_NOTHROW_CONSTRUCTOR";
    case TypeTrait::HAS_TRIVIAL_ASSIGN: return "HAS_TRIVIAL_ASSIGN";
    case TypeTrait::HAS_TRIVIAL_COPY: return "HAS_TRIVIAL_COPY";
    case TypeTrait::HAS_TRIVIAL_DEFAULT_CONSTRUCTOR: return "HAS_TRIVIAL_DEFAULT_CONSTRUCTOR";
    case TypeTrait::HAS_TRIVIAL_DESTRUCTOR: return "HAS_TRIVIAL_DESTRUCTOR";
    case TypeTrait::HAS_VIRTUAL_DESTRUCTOR: return "HAS_VIRTUAL_DESTRUCTOR";
    case TypeTrait::IS_ABSTRACT: return "IS_ABSTRACT";
    case TypeTrait::IS_AGGREGATE: return "IS_AGGREGATE";
    case TypeTrait::IS_CLASS: return "IS_CLASS";
    case TypeTrait::IS_EMPTY: return "IS_EMPTY";
    case TypeTrait::IS_ENUM: return "IS_ENUM";
    case TypeTrait::IS_FINAL: return "IS_FINAL";
    case TypeTrait::IS_LITERAL: return "IS_LITERAL";
    case TypeTrait::IS_POD: return "IS_POD";
    case TypeTrait::IS_POLYMORPHIC: return "IS_POLYMORPHIC";
    case TypeTrait::IS_STANDARD_LAYOUT: return "IS_STANDARD_LAYOUT";
    case TypeTrait::IS_TRIVIAL: return "IS_TRIVIAL";
    case TypeTrait::IS_TRIVIALLY_COPYABLE: return "IS_TRIVIALLY_COPYABLE";
    case TypeTrait::IS_UNION: return "IS_UNION";
    case TypeTrait::HAS_UNIQUE_OBJECT_REPRESENTATIONS: return "HAS_UNIQUE_OBJECT_REPRESENTATIONS";
    case TypeTrait::IS_ARITHMETIC: return "IS_ARITHMETIC";
    case TypeTrait::IS_FLOATING_POINT: return "IS_FLOATING_POINT";
    case TypeTrait::IS_INTEGRAL: return "IS_INTEGRAL";
    case TypeTrait::IS_COMPLETE_TYPE: return "IS_COMPLETE_TYPE";
    case TypeTrait::IS_VOID: return "IS_VOID";
    case TypeTrait::IS_ARRAY: return "IS_ARRAY";
    case TypeTrait::IS_FUNCTION: return "IS_FUNCTION";
    case TypeTrait::IS_REFERENCE: return "IS_REFERENCE";
    case TypeTrait::IS_LVALUE_REFERENCE: return "IS_LVALUE_REFERENCE";
    case TypeTrait::IS_RVALUE_REFERENCE: return "IS_RVALUE_REFERENCE";
    case TypeTrait::IS_FUNDAMENTAL: return "IS_FUNDAMENTAL";
    case TypeTrait::IS_OBJECT: return "IS_OBJECT";
    case TypeTrait::IS_SCALAR: return "IS_SCALAR";
    case TypeTrait::IS_COMPOUND: return "IS_COMPOUND";
    case TypeTrait::IS_POINTER: return "IS_POINTER";
    case TypeTrait::IS_MEMBER_OBJECT_POINTER: return "IS_MEMBER_OBJECT_POINTER";
    case TypeTrait::IS_MEMBER_FUNCTION_POINTER: return "IS_MEMBER_FUNCTION_POINTER";
    case TypeTrait::IS_MEMBER_POINTER: return "IS_MEMBER_POINTER";
    case TypeTrait::IS_CONST: return "IS_CONST";
    case TypeTrait::IS_VOLATILE: return "IS_VOLATILE";
    case TypeTrait::IS_SIGNED: return "IS_SIGNED";
    case TypeTrait::IS_UNSIGNED: return "IS_UNSIGNED";
    case TypeTrait::TYPE_COMPATIBLE: return "TYPE_COMPATIBLE";
    case TypeTrait::IS_NOTHROW_ASSIGNABLE: return "IS_NOTHROW_ASSIGNABLE";
    case TypeTrait::IS_ASSIGNABLE: return "IS_ASSIGNABLE";
    case TypeTrait::IS_BASE_OF: return "IS_BASE_OF";
    case TypeTrait::IS_CONVERTIBLE_TO: return "IS_CONVERTIBLE_TO";
    case TypeTrait::IS_TRIVIALLY_ASSIGNABLE: return "IS_TRIVIALLY_ASSIGNABLE";
    case TypeTrait::REFERENCE_BINDS_TO_TEMPORARY: return "REFERENCE_BINDS_TO_TEMPORARY";
    case TypeTrait::IS_SAME: return "IS_SAME";
    case TypeTrait::IS_CONVERTIBLE: return "IS_CONVERTIBLE";
    case TypeTrait::IS_CONSTRUCTIBLE: return "IS_CONSTRUCTIBLE";
    case TypeTrait::IS_NOTHROW_CONSTRUCTIBLE: return "IS_NOTHROW_CONSTRUCTIBLE";
    case TypeTrait::IS_TRIVIALLY_CONSTRUCTIBLE: return "IS_TRIVIALLY_CONSTRUCTIBLE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UnaryExprOrTypeTrait e) {
  switch (e) {
    case UnaryExprOrTypeTrait::SIZE_OF: return "SIZE_OF";
    case UnaryExprOrTypeTrait::ALIGN_OF: return "ALIGN_OF";
    case UnaryExprOrTypeTrait::PREFERRED_ALIGN_OF: return "PREFERRED_ALIGN_OF";
    case UnaryExprOrTypeTrait::VEC_STEP: return "VEC_STEP";
    case UnaryExprOrTypeTrait::OPEN_MP_REQUIRED_SIMD_ALIGN: return "OPEN_MP_REQUIRED_SIMD_ALIGN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(UnaryOperatorKind e) {
  switch (e) {
    case UnaryOperatorKind::POST_INCREMENT: return "POST_INCREMENT";
    case UnaryOperatorKind::POST_DEC: return "POST_DEC";
    case UnaryOperatorKind::PRE_INCREMENT: return "PRE_INCREMENT";
    case UnaryOperatorKind::PRE_DEC: return "PRE_DEC";
    case UnaryOperatorKind::ADDRESS_OF: return "ADDRESS_OF";
    case UnaryOperatorKind::DEREF: return "DEREF";
    case UnaryOperatorKind::PLUS: return "PLUS";
    case UnaryOperatorKind::MINUS: return "MINUS";
    case UnaryOperatorKind::NOT: return "NOT";
    case UnaryOperatorKind::L_NOT: return "L_NOT";
    case UnaryOperatorKind::REAL: return "REAL";
    case UnaryOperatorKind::IMAG: return "IMAG";
    case UnaryOperatorKind::EXTENSION: return "EXTENSION";
    case UnaryOperatorKind::COAWAIT: return "COAWAIT";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(APValueKind e) {
  switch (e) {
    case APValueKind::NONE: return "NONE";
    case APValueKind::INDETERMINATE: return "INDETERMINATE";
    case APValueKind::INT: return "INT";
    case APValueKind::FLOAT: return "FLOAT";
    case APValueKind::FIXED_POINT: return "FIXED_POINT";
    case APValueKind::COMPLEX_INT: return "COMPLEX_INT";
    case APValueKind::COMPLEX_FLOAT: return "COMPLEX_FLOAT";
    case APValueKind::L_VALUE: return "L_VALUE";
    case APValueKind::VECTOR: return "VECTOR";
    case APValueKind::ARRAY: return "ARRAY";
    case APValueKind::STRUCT: return "STRUCT";
    case APValueKind::UNION: return "UNION";
    case APValueKind::MEMBER_POINTER: return "MEMBER_POINTER";
    case APValueKind::ADDRESS_LABEL_DIFF: return "ADDRESS_LABEL_DIFF";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(VectorLibrary e) {
  switch (e) {
    case VectorLibrary::NO_LIBRARY: return "NO_LIBRARY";
    case VectorLibrary::ACCELERATE: return "ACCELERATE";
    case VectorLibrary::LIBMVEC: return "LIBMVEC";
    case VectorLibrary::MASSV: return "MASSV";
    case VectorLibrary::SVML: return "SVML";
    case VectorLibrary::DARWIN_LIBSYSTEM_M: return "DARWIN_LIBSYSTEM_M";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(Visibility e) {
  switch (e) {
    case Visibility::HIDDEN_VISIBILITY: return "HIDDEN_VISIBILITY";
    case Visibility::PROTECTED_VISIBILITY: return "PROTECTED_VISIBILITY";
    case Visibility::DEFAULT_VISIBILITY: return "DEFAULT_VISIBILITY";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(AttributeSyntax e) {
  switch (e) {
    case AttributeSyntax::GNU: return "GNU";
    case AttributeSyntax::CXX11: return "CXX11";
    case AttributeSyntax::C2X: return "C2X";
    case AttributeSyntax::DECLSPEC: return "DECLSPEC";
    case AttributeSyntax::MICROSOFT: return "MICROSOFT";
    case AttributeSyntax::KEYWORD: return "KEYWORD";
    case AttributeSyntax::PRAGMA: return "PRAGMA";
    case AttributeSyntax::CONTEXT_SENSITIVE_KEYWORD: return "CONTEXT_SENSITIVE_KEYWORD";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(DeclCategory e) {
  switch (e) {
    case DeclCategory::UNKNOWN: return "UNKNOWN";
    case DeclCategory::LOCAL_VARIABLE: return "LOCAL_VARIABLE";
    case DeclCategory::GLOBAL_VARIABLE: return "GLOBAL_VARIABLE";
    case DeclCategory::PARAMETER_VARIABLE: return "PARAMETER_VARIABLE";
    case DeclCategory::FUNCTION: return "FUNCTION";
    case DeclCategory::INSTANCE_METHOD: return "INSTANCE_METHOD";
    case DeclCategory::INSTANCE_MEMBER: return "INSTANCE_MEMBER";
    case DeclCategory::CLASS_METHOD: return "CLASS_METHOD";
    case DeclCategory::CLASS_MEMBER: return "CLASS_MEMBER";
    case DeclCategory::THIS: return "THIS";
    case DeclCategory::CLASS: return "CLASS";
    case DeclCategory::STRUCTURE: return "STRUCTURE";
    case DeclCategory::UNION: return "UNION";
    case DeclCategory::INTERFACE: return "INTERFACE";
    case DeclCategory::ENUMERATION: return "ENUMERATION";
    case DeclCategory::ENUMERATOR: return "ENUMERATOR";
    case DeclCategory::NAMESPACE: return "NAMESPACE";
    case DeclCategory::TYPE_ALIAS: return "TYPE_ALIAS";
    case DeclCategory::TEMPLATE_TYPE_PARAMETER: return "TEMPLATE_TYPE_PARAMETER";
    case DeclCategory::TEMPLATE_VALUE_PARAMETER: return "TEMPLATE_VALUE_PARAMETER";
    case DeclCategory::LABEL: return "LABEL";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PathKind e) {
  switch (e) {
    case PathKind::UNIX: return "UNIX";
    case PathKind::WINDOWS: return "WINDOWS";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(FileType e) {
  switch (e) {
    case FileType::NONE: return "NONE";
    case FileType::NOT_FOUND: return "NOT_FOUND";
    case FileType::REGULAR: return "REGULAR";
    case FileType::DIRECTORY: return "DIRECTORY";
    case FileType::SYMBOLIC_LINK: return "SYMBOLIC_LINK";
    case FileType::BLOCK: return "BLOCK";
    case FileType::CHARACTER: return "CHARACTER";
    case FileType::FIRST_IN_FIRST_OUT: return "FIRST_IN_FIRST_OUT";
    case FileType::SOCKET: return "SOCKET";
    case FileType::KNKNOWN: return "KNKNOWN";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(CompilerName e) {
  switch (e) {
    case CompilerName::UNKNOWN: return "UNKNOWN";
    case CompilerName::CLANG: return "CLANG";
    case CompilerName::APPLE_CLANG: return "APPLE_CLANG";
    case CompilerName::CLANG_CL: return "CLANG_CL";
    case CompilerName::CL: return "CL";
    case CompilerName::GNU: return "GNU";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(IncludePathLocation e) {
  switch (e) {
    case IncludePathLocation::ABSOLUTE: return "ABSOLUTE";
    case IncludePathLocation::SYSROOT_RELATIVE: return "SYSROOT_RELATIVE";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(TargetLanguage e) {
  switch (e) {
    case TargetLanguage::C: return "C";
    case TargetLanguage::CXX: return "CXX";
    default: return "<invalid>";
  }
}

const char *EnumeratorName(PseudoKind e) {
  switch (e) {
    case PseudoKind::TEMPLATE_ARGUMENT: return "TEMPLATE_ARGUMENT";
    case PseudoKind::TEMPLATE_PARAMETER_LIST: return "TEMPLATE_PARAMETER_LIST";
    case PseudoKind::CXX_BASE_SPECIFIER: return "CXX_BASE_SPECIFIER";
    case PseudoKind::DESIGNATOR: return "DESIGNATOR";
    default: return "<invalid>";
  }
}

#if !defined(MX_DISABLE_API) || defined(MX_ENABLE_API)
bool Designator::is_field_designator(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal1();
}

bool Designator::is_array_designator(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal2();
}

bool Designator::is_array_range_designator(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal3();
}

std::optional<FieldDecl> Designator::field(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (!self.getVal5()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal4());
    return FieldDecl::from(fragment->DeclFor(fragment, id));
  }
}

TokenRange Designator::tokens(void) const {
  auto self = fragment->NthPseudo(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal6(), self.getVal7());
}

Token Designator::dot_token(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal8())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token Designator::field_token(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token Designator::left_bracket_token(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal10())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token Designator::right_bracket_token(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal11())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token Designator::ellipsis_token(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal12())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<unsigned> Designator::first_expression_index(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (!self.getVal14()) {
    return std::nullopt;
  } else {
    return static_cast<unsigned>(self.getVal13());
  }
}

unsigned TemplateParameterList::num_parameters(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal13();
}

unsigned TemplateParameterList::num_required_parameters(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal15();
}

unsigned TemplateParameterList::depth(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal16();
}

bool TemplateParameterList::has_unexpanded_parameter_pack(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal1();
}

bool TemplateParameterList::has_parameter_pack(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal2();
}

std::optional<Expr> TemplateParameterList::requires_clause(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (!self.getVal3()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal4());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

Token TemplateParameterList::template_keyword_token(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal6())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token TemplateParameterList::left_angle_token(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal7())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token TemplateParameterList::right_angle_token(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal8())) {
    return tok.value();
  } else {
    return Token();
  }
}

TokenRange TemplateParameterList::tokens(void) const {
  auto self = fragment->NthPseudo(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal9(), self.getVal10());
}

std::vector<NamedDecl> TemplateParameterList::parameters(void) const {
  auto self = fragment->NthPseudo(offset_);
  auto list = self.getVal17();
  std::vector<NamedDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d17 = fragment->DeclFor(fragment, id)) {
      if (auto e = NamedDecl::from(d17.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

TemplateArgumentKind TemplateArgument::kind(void) const {
  auto self = fragment->NthPseudo(offset_);
  return static_cast<TemplateArgumentKind>(self.getVal18());
}

bool TemplateArgument::is_null(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal1();
}

bool TemplateArgument::is_dependent(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal2();
}

bool TemplateArgument::is_instantiation_dependent(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal3();
}

bool TemplateArgument::contains_unexpanded_parameter_pack(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal5();
}

bool TemplateArgument::is_pack_expansion(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal14();
}

std::optional<ValueDecl> TemplateArgument::as_declaration(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (!self.getVal19()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal4());
    return ValueDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<Type> TemplateArgument::as_type(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (!self.getVal20()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal6());
    return fragment->TypeFor(fragment, id);
  }
}

std::optional<Type> TemplateArgument::parameter_type_for_declaration(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (!self.getVal21()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal7());
    return fragment->TypeFor(fragment, id);
  }
}

std::optional<Type> TemplateArgument::null_pointer_type(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (!self.getVal22()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal8());
    return fragment->TypeFor(fragment, id);
  }
}

TokenRange CXXBaseSpecifier::tokens(void) const {
  auto self = fragment->NthPseudo(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal4(), self.getVal6());
}

Token CXXBaseSpecifier::base_type_token(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal7())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool CXXBaseSpecifier::is_virtual(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal1();
}

TagTypeKind CXXBaseSpecifier::base_kind(void) const {
  auto self = fragment->NthPseudo(offset_);
  return static_cast<TagTypeKind>(self.getVal18());
}

bool CXXBaseSpecifier::is_pack_expansion(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal2();
}

bool CXXBaseSpecifier::constructors_are_inherited(void) const {
  auto self = fragment->NthPseudo(offset_);
  return self.getVal3();
}

std::optional<Token> CXXBaseSpecifier::ellipsis_token(void) const {
  auto self = fragment->NthPseudo(offset_);
  if (!self.getVal5()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal8());
    return fragment->TokenFor(fragment, id);
  }
}

AccessSpecifier CXXBaseSpecifier::semantic_access_specifier(void) const {
  auto self = fragment->NthPseudo(offset_);
  return static_cast<AccessSpecifier>(self.getVal23());
}

AccessSpecifier CXXBaseSpecifier::lexical_access_specifier(void) const {
  auto self = fragment->NthPseudo(offset_);
  return static_cast<AccessSpecifier>(self.getVal24());
}

Type CXXBaseSpecifier::base_type(void) const {
  auto self = fragment->NthPseudo(offset_);
  EntityId id(self.getVal9());
  return fragment->TypeFor(fragment, id, false).value();
}

Token Attr::token(void) const {
  auto self = fragment->NthAttr(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal0())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool Attr::is_implicit(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal1();
}

bool Attr::is_inherited(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal2();
}

bool Attr::is_late_parsed(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal3();
}

bool Attr::is_pack_expansion(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal4();
}

AttrKind Attr::kind(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<AttrKind>(self.getVal5());
}

TokenRange Attr::tokens(void) const {
  auto self = fragment->NthAttr(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal6(), self.getVal7());
}

std::optional<AlignValueAttr> AlignValueAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AlignValueAttr> AlignValueAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ALIGN_VALUE:
      return reinterpret_cast<const AlignValueAttr &>(parent);
    default: return std::nullopt;
  }
}

Expr AlignValueAttr::alignment(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::string_view AlignValueAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AliasAttr> AliasAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AliasAttr> AliasAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ALIAS:
      return reinterpret_cast<const AliasAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AliasAttr::aliasee(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view AliasAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AbiTagAttr> AbiTagAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AbiTagAttr> AbiTagAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ABI_TAG:
      return reinterpret_cast<const AbiTagAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AbiTagAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<TypeAttr> TypeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TypeAttr> TypeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::S_PTR:
    case mx::AttrKind::PTR64:
    case mx::AttrKind::PTR32:
    case mx::AttrKind::OPEN_CL_PRIVATE_ADDRESS_SPACE:
    case mx::AttrKind::OPEN_CL_LOCAL_ADDRESS_SPACE:
    case mx::AttrKind::OPEN_CL_GLOBAL_HOST_ADDRESS_SPACE:
    case mx::AttrKind::OPEN_CL_GLOBAL_DEVICE_ADDRESS_SPACE:
    case mx::AttrKind::OPEN_CL_GLOBAL_ADDRESS_SPACE:
    case mx::AttrKind::OPEN_CL_GENERIC_ADDRESS_SPACE:
    case mx::AttrKind::OPEN_CL_CONSTANT_ADDRESS_SPACE:
    case mx::AttrKind::OBJ_C_KIND_OF:
    case mx::AttrKind::OBJ_C_INERT_UNSAFE_UNRETAINED:
    case mx::AttrKind::OBJ_CGC:
    case mx::AttrKind::NO_DEREF:
    case mx::AttrKind::CMSE_NS_CALL:
    case mx::AttrKind::BTF_TYPE_TAG:
    case mx::AttrKind::ARM_MVE_STRICT_POLYMORPHISM:
    case mx::AttrKind::ADDRESS_SPACE:
    case mx::AttrKind::U_PTR:
    case mx::AttrKind::TYPE_NULLABLE_RESULT:
    case mx::AttrKind::TYPE_NULLABLE:
    case mx::AttrKind::TYPE_NULL_UNSPECIFIED:
    case mx::AttrKind::TYPE_NON_NULL:
      return reinterpret_cast<const TypeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<SPtrAttr> SPtrAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SPtrAttr> SPtrAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SPtrAttr> SPtrAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::S_PTR:
      return reinterpret_cast<const SPtrAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SPtrAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<Ptr64Attr> Ptr64Attr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<Ptr64Attr> Ptr64Attr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<Ptr64Attr> Ptr64Attr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PTR64:
      return reinterpret_cast<const Ptr64Attr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view Ptr64Attr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<Ptr32Attr> Ptr32Attr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<Ptr32Attr> Ptr32Attr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<Ptr32Attr> Ptr32Attr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PTR32:
      return reinterpret_cast<const Ptr32Attr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view Ptr32Attr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OpenCLPrivateAddressSpaceAttr> OpenCLPrivateAddressSpaceAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OpenCLPrivateAddressSpaceAttr> OpenCLPrivateAddressSpaceAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OpenCLPrivateAddressSpaceAttr> OpenCLPrivateAddressSpaceAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPEN_CL_PRIVATE_ADDRESS_SPACE:
      return reinterpret_cast<const OpenCLPrivateAddressSpaceAttr &>(parent);
    default: return std::nullopt;
  }
}

OpenCLPrivateAddressSpaceAttrSpelling OpenCLPrivateAddressSpaceAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<OpenCLPrivateAddressSpaceAttrSpelling>(self.getVal11());
}

std::string_view OpenCLPrivateAddressSpaceAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OpenCLLocalAddressSpaceAttr> OpenCLLocalAddressSpaceAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OpenCLLocalAddressSpaceAttr> OpenCLLocalAddressSpaceAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OpenCLLocalAddressSpaceAttr> OpenCLLocalAddressSpaceAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPEN_CL_LOCAL_ADDRESS_SPACE:
      return reinterpret_cast<const OpenCLLocalAddressSpaceAttr &>(parent);
    default: return std::nullopt;
  }
}

OpenCLLocalAddressSpaceAttrSpelling OpenCLLocalAddressSpaceAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<OpenCLLocalAddressSpaceAttrSpelling>(self.getVal11());
}

std::string_view OpenCLLocalAddressSpaceAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OpenCLGlobalHostAddressSpaceAttr> OpenCLGlobalHostAddressSpaceAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OpenCLGlobalHostAddressSpaceAttr> OpenCLGlobalHostAddressSpaceAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OpenCLGlobalHostAddressSpaceAttr> OpenCLGlobalHostAddressSpaceAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPEN_CL_GLOBAL_HOST_ADDRESS_SPACE:
      return reinterpret_cast<const OpenCLGlobalHostAddressSpaceAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OpenCLGlobalHostAddressSpaceAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OpenCLGlobalDeviceAddressSpaceAttr> OpenCLGlobalDeviceAddressSpaceAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OpenCLGlobalDeviceAddressSpaceAttr> OpenCLGlobalDeviceAddressSpaceAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OpenCLGlobalDeviceAddressSpaceAttr> OpenCLGlobalDeviceAddressSpaceAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPEN_CL_GLOBAL_DEVICE_ADDRESS_SPACE:
      return reinterpret_cast<const OpenCLGlobalDeviceAddressSpaceAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OpenCLGlobalDeviceAddressSpaceAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OpenCLGlobalAddressSpaceAttr> OpenCLGlobalAddressSpaceAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OpenCLGlobalAddressSpaceAttr> OpenCLGlobalAddressSpaceAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OpenCLGlobalAddressSpaceAttr> OpenCLGlobalAddressSpaceAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPEN_CL_GLOBAL_ADDRESS_SPACE:
      return reinterpret_cast<const OpenCLGlobalAddressSpaceAttr &>(parent);
    default: return std::nullopt;
  }
}

OpenCLGlobalAddressSpaceAttrSpelling OpenCLGlobalAddressSpaceAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<OpenCLGlobalAddressSpaceAttrSpelling>(self.getVal11());
}

std::string_view OpenCLGlobalAddressSpaceAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OpenCLGenericAddressSpaceAttr> OpenCLGenericAddressSpaceAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OpenCLGenericAddressSpaceAttr> OpenCLGenericAddressSpaceAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OpenCLGenericAddressSpaceAttr> OpenCLGenericAddressSpaceAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPEN_CL_GENERIC_ADDRESS_SPACE:
      return reinterpret_cast<const OpenCLGenericAddressSpaceAttr &>(parent);
    default: return std::nullopt;
  }
}

OpenCLGenericAddressSpaceAttrSpelling OpenCLGenericAddressSpaceAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<OpenCLGenericAddressSpaceAttrSpelling>(self.getVal11());
}

std::string_view OpenCLGenericAddressSpaceAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OpenCLConstantAddressSpaceAttr> OpenCLConstantAddressSpaceAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OpenCLConstantAddressSpaceAttr> OpenCLConstantAddressSpaceAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OpenCLConstantAddressSpaceAttr> OpenCLConstantAddressSpaceAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPEN_CL_CONSTANT_ADDRESS_SPACE:
      return reinterpret_cast<const OpenCLConstantAddressSpaceAttr &>(parent);
    default: return std::nullopt;
  }
}

OpenCLConstantAddressSpaceAttrSpelling OpenCLConstantAddressSpaceAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<OpenCLConstantAddressSpaceAttrSpelling>(self.getVal11());
}

std::string_view OpenCLConstantAddressSpaceAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCKindOfAttr> ObjCKindOfAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCKindOfAttr> ObjCKindOfAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCKindOfAttr> ObjCKindOfAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_KIND_OF:
      return reinterpret_cast<const ObjCKindOfAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCKindOfAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCInertUnsafeUnretainedAttr> ObjCInertUnsafeUnretainedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCInertUnsafeUnretainedAttr> ObjCInertUnsafeUnretainedAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCInertUnsafeUnretainedAttr> ObjCInertUnsafeUnretainedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_INERT_UNSAFE_UNRETAINED:
      return reinterpret_cast<const ObjCInertUnsafeUnretainedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCInertUnsafeUnretainedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCGCAttr> ObjCGCAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCGCAttr> ObjCGCAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCGCAttr> ObjCGCAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_CGC:
      return reinterpret_cast<const ObjCGCAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCGCAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoDerefAttr> NoDerefAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoDerefAttr> NoDerefAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoDerefAttr> NoDerefAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_DEREF:
      return reinterpret_cast<const NoDerefAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoDerefAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CmseNSCallAttr> CmseNSCallAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CmseNSCallAttr> CmseNSCallAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CmseNSCallAttr> CmseNSCallAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CMSE_NS_CALL:
      return reinterpret_cast<const CmseNSCallAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CmseNSCallAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<BTFTypeTagAttr> BTFTypeTagAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<BTFTypeTagAttr> BTFTypeTagAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<BTFTypeTagAttr> BTFTypeTagAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::BTF_TYPE_TAG:
      return reinterpret_cast<const BTFTypeTagAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view BTFTypeTagAttr::btf_type_tag(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view BTFTypeTagAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ArmMveStrictPolymorphismAttr> ArmMveStrictPolymorphismAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ArmMveStrictPolymorphismAttr> ArmMveStrictPolymorphismAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ArmMveStrictPolymorphismAttr> ArmMveStrictPolymorphismAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ARM_MVE_STRICT_POLYMORPHISM:
      return reinterpret_cast<const ArmMveStrictPolymorphismAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ArmMveStrictPolymorphismAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AddressSpaceAttr> AddressSpaceAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AddressSpaceAttr> AddressSpaceAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AddressSpaceAttr> AddressSpaceAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ADDRESS_SPACE:
      return reinterpret_cast<const AddressSpaceAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AddressSpaceAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<UPtrAttr> UPtrAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<UPtrAttr> UPtrAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<UPtrAttr> UPtrAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::U_PTR:
      return reinterpret_cast<const UPtrAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view UPtrAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<TypeNullableResultAttr> TypeNullableResultAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TypeNullableResultAttr> TypeNullableResultAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TypeNullableResultAttr> TypeNullableResultAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TYPE_NULLABLE_RESULT:
      return reinterpret_cast<const TypeNullableResultAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view TypeNullableResultAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<TypeNullableAttr> TypeNullableAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TypeNullableAttr> TypeNullableAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TypeNullableAttr> TypeNullableAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TYPE_NULLABLE:
      return reinterpret_cast<const TypeNullableAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view TypeNullableAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<TypeNullUnspecifiedAttr> TypeNullUnspecifiedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TypeNullUnspecifiedAttr> TypeNullUnspecifiedAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TypeNullUnspecifiedAttr> TypeNullUnspecifiedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TYPE_NULL_UNSPECIFIED:
      return reinterpret_cast<const TypeNullUnspecifiedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view TypeNullUnspecifiedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<TypeNonNullAttr> TypeNonNullAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TypeNonNullAttr> TypeNonNullAttr::from(const TypeAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TypeNonNullAttr> TypeNonNullAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TYPE_NON_NULL:
      return reinterpret_cast<const TypeNonNullAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view TypeNonNullAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ThreadAttr> ThreadAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ThreadAttr> ThreadAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::THREAD:
      return reinterpret_cast<const ThreadAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ThreadAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftObjCMembersAttr> SwiftObjCMembersAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftObjCMembersAttr> SwiftObjCMembersAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_OBJ_C_MEMBERS:
      return reinterpret_cast<const SwiftObjCMembersAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftObjCMembersAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<StmtAttr> StmtAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<StmtAttr> StmtAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPEN_CL_UNROLL_HINT:
    case mx::AttrKind::MUST_TAIL:
    case mx::AttrKind::LIKELY:
    case mx::AttrKind::FALL_THROUGH:
    case mx::AttrKind::UNLIKELY:
    case mx::AttrKind::SUPPRESS:
      return reinterpret_cast<const StmtAttr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<OpenCLUnrollHintAttr> OpenCLUnrollHintAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OpenCLUnrollHintAttr> OpenCLUnrollHintAttr::from(const StmtAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OpenCLUnrollHintAttr> OpenCLUnrollHintAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPEN_CL_UNROLL_HINT:
      return reinterpret_cast<const OpenCLUnrollHintAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OpenCLUnrollHintAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MustTailAttr> MustTailAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MustTailAttr> MustTailAttr::from(const StmtAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MustTailAttr> MustTailAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MUST_TAIL:
      return reinterpret_cast<const MustTailAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MustTailAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<LikelyAttr> LikelyAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<LikelyAttr> LikelyAttr::from(const StmtAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<LikelyAttr> LikelyAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::LIKELY:
      return reinterpret_cast<const LikelyAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view LikelyAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<FallThroughAttr> FallThroughAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<FallThroughAttr> FallThroughAttr::from(const StmtAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<FallThroughAttr> FallThroughAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::FALL_THROUGH:
      return reinterpret_cast<const FallThroughAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view FallThroughAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<UnlikelyAttr> UnlikelyAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<UnlikelyAttr> UnlikelyAttr::from(const StmtAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<UnlikelyAttr> UnlikelyAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::UNLIKELY:
      return reinterpret_cast<const UnlikelyAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view UnlikelyAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SuppressAttr> SuppressAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SuppressAttr> SuppressAttr::from(const StmtAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SuppressAttr> SuppressAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SUPPRESS:
      return reinterpret_cast<const SuppressAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SuppressAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<RenderScriptKernelAttr> RenderScriptKernelAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<RenderScriptKernelAttr> RenderScriptKernelAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::RENDER_SCRIPT_KERNEL:
      return reinterpret_cast<const RenderScriptKernelAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view RenderScriptKernelAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OverloadableAttr> OverloadableAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OverloadableAttr> OverloadableAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OVERLOADABLE:
      return reinterpret_cast<const OverloadableAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OverloadableAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OpenCLAccessAttr> OpenCLAccessAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OpenCLAccessAttr> OpenCLAccessAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPEN_CL_ACCESS:
      return reinterpret_cast<const OpenCLAccessAttr &>(parent);
    default: return std::nullopt;
  }
}

OpenCLAccessAttrSpelling OpenCLAccessAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<OpenCLAccessAttrSpelling>(self.getVal11());
}

std::string_view OpenCLAccessAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool OpenCLAccessAttr::is_read_only(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal12();
}

bool OpenCLAccessAttr::is_read_write(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

bool OpenCLAccessAttr::is_write_only(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal14();
}

std::optional<ObjCRuntimeVisibleAttr> ObjCRuntimeVisibleAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCRuntimeVisibleAttr> ObjCRuntimeVisibleAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_RUNTIME_VISIBLE:
      return reinterpret_cast<const ObjCRuntimeVisibleAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCRuntimeVisibleAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCRuntimeNameAttr> ObjCRuntimeNameAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCRuntimeNameAttr> ObjCRuntimeNameAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_RUNTIME_NAME:
      return reinterpret_cast<const ObjCRuntimeNameAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCRuntimeNameAttr::metadata_name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view ObjCRuntimeNameAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCNonRuntimeProtocolAttr> ObjCNonRuntimeProtocolAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCNonRuntimeProtocolAttr> ObjCNonRuntimeProtocolAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_NON_RUNTIME_PROTOCOL:
      return reinterpret_cast<const ObjCNonRuntimeProtocolAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCNonRuntimeProtocolAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCNonLazyClassAttr> ObjCNonLazyClassAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCNonLazyClassAttr> ObjCNonLazyClassAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_NON_LAZY_CLASS:
      return reinterpret_cast<const ObjCNonLazyClassAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCNonLazyClassAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCDirectMembersAttr> ObjCDirectMembersAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCDirectMembersAttr> ObjCDirectMembersAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_DIRECT_MEMBERS:
      return reinterpret_cast<const ObjCDirectMembersAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCDirectMembersAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCDirectAttr> ObjCDirectAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCDirectAttr> ObjCDirectAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_DIRECT:
      return reinterpret_cast<const ObjCDirectAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCDirectAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCDesignatedInitializerAttr> ObjCDesignatedInitializerAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCDesignatedInitializerAttr> ObjCDesignatedInitializerAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_DESIGNATED_INITIALIZER:
      return reinterpret_cast<const ObjCDesignatedInitializerAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCDesignatedInitializerAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCClassStubAttr> ObjCClassStubAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCClassStubAttr> ObjCClassStubAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_CLASS_STUB:
      return reinterpret_cast<const ObjCClassStubAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCClassStubAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCBoxableAttr> ObjCBoxableAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCBoxableAttr> ObjCBoxableAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_BOXABLE:
      return reinterpret_cast<const ObjCBoxableAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCBoxableAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OMPReferencedVarAttr> OMPReferencedVarAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OMPReferencedVarAttr> OMPReferencedVarAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OMP_REFERENCED_VAR:
      return reinterpret_cast<const OMPReferencedVarAttr &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPReferencedVarAttr::reference(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::string_view OMPReferencedVarAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OMPDeclareSimdDeclAttr> OMPDeclareSimdDeclAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OMPDeclareSimdDeclAttr> OMPDeclareSimdDeclAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OMP_DECLARE_SIMD_DECL:
      return reinterpret_cast<const OMPDeclareSimdDeclAttr &>(parent);
    default: return std::nullopt;
  }
}

OMPDeclareSimdDeclAttrBranchStateTy OMPDeclareSimdDeclAttr::branch_state(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<OMPDeclareSimdDeclAttrBranchStateTy>(self.getVal11());
}

Expr OMPDeclareSimdDeclAttr::simdlen(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::string_view OMPDeclareSimdDeclAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OMPCaptureKindAttr> OMPCaptureKindAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OMPCaptureKindAttr> OMPCaptureKindAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OMP_CAPTURE_KIND:
      return reinterpret_cast<const OMPCaptureKindAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OMPCaptureKindAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoEscapeAttr> NoEscapeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoEscapeAttr> NoEscapeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_ESCAPE:
      return reinterpret_cast<const NoEscapeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoEscapeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoBuiltinAttr> NoBuiltinAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoBuiltinAttr> NoBuiltinAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_BUILTIN:
      return reinterpret_cast<const NoBuiltinAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoBuiltinAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ModeAttr> ModeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ModeAttr> ModeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MODE:
      return reinterpret_cast<const ModeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ModeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<LoopHintAttr> LoopHintAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<LoopHintAttr> LoopHintAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::LOOP_HINT:
      return reinterpret_cast<const LoopHintAttr &>(parent);
    default: return std::nullopt;
  }
}

LoopHintAttrOptionType LoopHintAttr::option(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<LoopHintAttrOptionType>(self.getVal11());
}

LoopHintAttrSpelling LoopHintAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<LoopHintAttrSpelling>(self.getVal15());
}

std::string_view LoopHintAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

LoopHintAttrLoopHintState LoopHintAttr::state(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<LoopHintAttrLoopHintState>(self.getVal16());
}

Expr LoopHintAttr::value(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<LoaderUninitializedAttr> LoaderUninitializedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<LoaderUninitializedAttr> LoaderUninitializedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::LOADER_UNINITIALIZED:
      return reinterpret_cast<const LoaderUninitializedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view LoaderUninitializedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<InitSegAttr> InitSegAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<InitSegAttr> InitSegAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::INIT_SEG:
      return reinterpret_cast<const InitSegAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view InitSegAttr::section(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view InitSegAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<InheritableAttr> InheritableAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<InheritableAttr> InheritableAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::IB_OUTLET_COLLECTION:
    case mx::AttrKind::IB_OUTLET:
    case mx::AttrKind::IB_ACTION:
    case mx::AttrKind::HOT:
    case mx::AttrKind::HIP_MANAGED:
    case mx::AttrKind::GUARDED_VAR:
    case mx::AttrKind::GUARDED_BY:
    case mx::AttrKind::GNU_INLINE:
    case mx::AttrKind::FORMAT:
    case mx::AttrKind::FORMAT_ARG:
    case mx::AttrKind::FLATTEN:
    case mx::AttrKind::FLAG_ENUM:
    case mx::AttrKind::FINAL:
    case mx::AttrKind::FAST_CALL:
    case mx::AttrKind::EXTERNAL_SOURCE_SYMBOL:
    case mx::AttrKind::EXCLUSIVE_TRYLOCK_FUNCTION:
    case mx::AttrKind::EXCLUDE_FROM_EXPLICIT_INSTANTIATION:
    case mx::AttrKind::ERROR:
    case mx::AttrKind::ENUM_EXTENSIBILITY:
    case mx::AttrKind::ENFORCE_TCB_LEAF:
    case mx::AttrKind::ENFORCE_TCB:
    case mx::AttrKind::ENABLE_IF:
    case mx::AttrKind::EMPTY_BASES:
    case mx::AttrKind::DISABLE_TAIL_CALLS:
    case mx::AttrKind::DISABLE_SANITIZER_INSTRUMENTATION:
    case mx::AttrKind::DIAGNOSE_IF:
    case mx::AttrKind::DIAGNOSE_AS_BUILTIN:
    case mx::AttrKind::DESTRUCTOR:
    case mx::AttrKind::DEPRECATED:
    case mx::AttrKind::NO_MERGE:
    case mx::AttrKind::DLL_IMPORT_STATIC_LOCAL:
    case mx::AttrKind::DLL_IMPORT:
    case mx::AttrKind::DLL_EXPORT_STATIC_LOCAL:
    case mx::AttrKind::DLL_EXPORT:
    case mx::AttrKind::CONVERGENT:
    case mx::AttrKind::CONSUMABLE_SET_ON_READ:
    case mx::AttrKind::CONSUMABLE_AUTO_CAST:
    case mx::AttrKind::CONSUMABLE:
    case mx::AttrKind::CONSTRUCTOR:
    case mx::AttrKind::CONST_INIT:
    case mx::AttrKind::CONST:
    case mx::AttrKind::COMMON:
    case mx::AttrKind::COLD:
    case mx::AttrKind::CODE_SEG:
    case mx::AttrKind::CMSE_NS_ENTRY:
    case mx::AttrKind::CLEANUP:
    case mx::AttrKind::CAPTURED_RECORD:
    case mx::AttrKind::CAPABILITY:
    case mx::AttrKind::CALLBACK:
    case mx::AttrKind::CALLABLE_WHEN:
    case mx::AttrKind::CXX11_NO_RETURN:
    case mx::AttrKind::CUDA_SHARED:
    case mx::AttrKind::CUDA_LAUNCH_BOUNDS:
    case mx::AttrKind::CUDA_INVALID_TARGET:
    case mx::AttrKind::CUDA_HOST:
    case mx::AttrKind::CUDA_GLOBAL:
    case mx::AttrKind::CUDA_DEVICE_BUILTIN_TEXTURE_TYPE:
    case mx::AttrKind::CUDA_DEVICE_BUILTIN_SURFACE_TYPE:
    case mx::AttrKind::CUDA_DEVICE:
    case mx::AttrKind::CUDA_CONSTANT:
    case mx::AttrKind::CPU_SPECIFIC:
    case mx::AttrKind::CPU_DISPATCH:
    case mx::AttrKind::CF_UNKNOWN_TRANSFER:
    case mx::AttrKind::CF_RETURNS_RETAINED:
    case mx::AttrKind::CF_RETURNS_NOT_RETAINED:
    case mx::AttrKind::CFI_CANONICAL_JUMP_TABLE:
    case mx::AttrKind::CF_GUARD:
    case mx::AttrKind::CF_AUDITED_TRANSFER:
    case mx::AttrKind::C_DECL:
    case mx::AttrKind::C11_NO_RETURN:
    case mx::AttrKind::BUILTIN:
    case mx::AttrKind::BLOCKS:
    case mx::AttrKind::BTF_DECL_TAG:
    case mx::AttrKind::BPF_PRESERVE_ACCESS_INDEX:
    case mx::AttrKind::AVAILABILITY:
    case mx::AttrKind::ASSUMPTION:
    case mx::AttrKind::ASSUME_ALIGNED:
    case mx::AttrKind::ASSERT_SHARED_LOCK:
    case mx::AttrKind::ASSERT_EXCLUSIVE_LOCK:
    case mx::AttrKind::ASSERT_CAPABILITY:
    case mx::AttrKind::ASM_LABEL:
    case mx::AttrKind::ARTIFICIAL:
    case mx::AttrKind::ARM_BUILTIN_ALIAS:
    case mx::AttrKind::ARGUMENT_WITH_TYPE_TAG:
    case mx::AttrKind::ARC_WEAKREF_UNAVAILABLE:
    case mx::AttrKind::ANY_X86_NO_CF_CHECK:
    case mx::AttrKind::ANY_X86_NO_CALLER_SAVED_REGISTERS:
    case mx::AttrKind::ANY_X86_INTERRUPT:
    case mx::AttrKind::ANALYZER_NO_RETURN:
    case mx::AttrKind::ALWAYS_INLINE:
    case mx::AttrKind::ALWAYS_DESTROY:
    case mx::AttrKind::ALLOC_SIZE:
    case mx::AttrKind::ALLOC_ALIGN:
    case mx::AttrKind::ALIGNED:
    case mx::AttrKind::ALIGN_NATURAL:
    case mx::AttrKind::ALIGN_MAC68K:
    case mx::AttrKind::ACQUIRED_BEFORE:
    case mx::AttrKind::ACQUIRED_AFTER:
    case mx::AttrKind::ACQUIRE_HANDLE:
    case mx::AttrKind::ACQUIRE_CAPABILITY:
    case mx::AttrKind::AVR_SIGNAL:
    case mx::AttrKind::AVR_INTERRUPT:
    case mx::AttrKind::ARM_INTERRUPT:
    case mx::AttrKind::AMDGPU_WAVES_PER_EU:
    case mx::AttrKind::AMDGPU_NUM_VGPR:
    case mx::AttrKind::AMDGPU_NUM_SGPR:
    case mx::AttrKind::AMDGPU_FLAT_WORK_GROUP_SIZE:
    case mx::AttrKind::A_ARCH64_VECTOR_PCS:
    case mx::AttrKind::X_RAY_LOG_ARGS:
    case mx::AttrKind::X_RAY_INSTRUMENT:
    case mx::AttrKind::X86_FORCE_ALIGN_ARG_POINTER:
    case mx::AttrKind::WORK_GROUP_SIZE_HINT:
    case mx::AttrKind::WEB_ASSEMBLY_IMPORT_NAME:
    case mx::AttrKind::WEB_ASSEMBLY_IMPORT_MODULE:
    case mx::AttrKind::WEB_ASSEMBLY_EXPORT_NAME:
    case mx::AttrKind::WEAK_REF:
    case mx::AttrKind::WEAK_IMPORT:
    case mx::AttrKind::WEAK:
    case mx::AttrKind::WARN_UNUSED_RESULT:
    case mx::AttrKind::WARN_UNUSED:
    case mx::AttrKind::VISIBILITY:
    case mx::AttrKind::VECTOR_CALL:
    case mx::AttrKind::VEC_TYPE_HINT:
    case mx::AttrKind::VEC_RETURN:
    case mx::AttrKind::UUID:
    case mx::AttrKind::USING_IF_EXISTS:
    case mx::AttrKind::USED:
    case mx::AttrKind::UNUSED:
    case mx::AttrKind::UNINITIALIZED:
    case mx::AttrKind::UNAVAILABLE:
    case mx::AttrKind::TYPE_VISIBILITY:
    case mx::AttrKind::TYPE_TAG_FOR_DATATYPE:
    case mx::AttrKind::TRY_ACQUIRE_CAPABILITY:
    case mx::AttrKind::TRIVIAL_ABI:
    case mx::AttrKind::TRANSPARENT_UNION:
    case mx::AttrKind::THIS_CALL:
    case mx::AttrKind::TEST_TYPESTATE:
    case mx::AttrKind::TARGET_CLONES:
    case mx::AttrKind::TARGET:
    case mx::AttrKind::TLS_MODEL:
    case mx::AttrKind::SYS_VABI:
    case mx::AttrKind::SWIFT_PRIVATE:
    case mx::AttrKind::SWIFT_NEW_TYPE:
    case mx::AttrKind::SWIFT_NAME:
    case mx::AttrKind::SWIFT_ERROR:
    case mx::AttrKind::SWIFT_CALL:
    case mx::AttrKind::SWIFT_BRIDGED_TYPEDEF:
    case mx::AttrKind::SWIFT_BRIDGE:
    case mx::AttrKind::SWIFT_ATTR:
    case mx::AttrKind::SWIFT_ASYNC_NAME:
    case mx::AttrKind::SWIFT_ASYNC_ERROR:
    case mx::AttrKind::SWIFT_ASYNC_CALL:
    case mx::AttrKind::SWIFT_ASYNC:
    case mx::AttrKind::STRICT_FP:
    case mx::AttrKind::STD_CALL:
    case mx::AttrKind::STANDALONE_DEBUG:
    case mx::AttrKind::SPECULATIVE_LOAD_HARDENING:
    case mx::AttrKind::SHARED_TRYLOCK_FUNCTION:
    case mx::AttrKind::SET_TYPESTATE:
    case mx::AttrKind::SENTINEL:
    case mx::AttrKind::SELECT_ANY:
    case mx::AttrKind::SECTION:
    case mx::AttrKind::SCOPED_LOCKABLE:
    case mx::AttrKind::SYCL_SPECIAL_CLASS:
    case mx::AttrKind::SYCL_KERNEL:
    case mx::AttrKind::RETURNS_TWICE:
    case mx::AttrKind::RETURNS_NON_NULL:
    case mx::AttrKind::RETURN_TYPESTATE:
    case mx::AttrKind::RETAIN:
    case mx::AttrKind::RESTRICT:
    case mx::AttrKind::REQUIRES_CAPABILITY:
    case mx::AttrKind::REQD_WORK_GROUP_SIZE:
    case mx::AttrKind::RELEASE_CAPABILITY:
    case mx::AttrKind::REINITIALIZES:
    case mx::AttrKind::REG_CALL:
    case mx::AttrKind::RISCV_INTERRUPT:
    case mx::AttrKind::PURE:
    case mx::AttrKind::PT_GUARDED_VAR:
    case mx::AttrKind::PT_GUARDED_BY:
    case mx::AttrKind::PRESERVE_MOST:
    case mx::AttrKind::PRESERVE_ALL:
    case mx::AttrKind::PREFERRED_NAME:
    case mx::AttrKind::PRAGMA_CLANG_TEXT_SECTION:
    case mx::AttrKind::PRAGMA_CLANG_RODATA_SECTION:
    case mx::AttrKind::PRAGMA_CLANG_RELRO_SECTION:
    case mx::AttrKind::PRAGMA_CLANG_DATA_SECTION:
    case mx::AttrKind::PRAGMA_CLANG_BSS_SECTION:
    case mx::AttrKind::POINTER:
    case mx::AttrKind::PCS:
    case mx::AttrKind::PATCHABLE_FUNCTION_ENTRY:
    case mx::AttrKind::PASCAL:
    case mx::AttrKind::PARAM_TYPESTATE:
    case mx::AttrKind::PACKED:
    case mx::AttrKind::OWNERSHIP:
    case mx::AttrKind::OWNER:
    case mx::AttrKind::OVERRIDE:
    case mx::AttrKind::OPTIMIZE_NONE:
    case mx::AttrKind::OPEN_CL_KERNEL:
    case mx::AttrKind::OPEN_CL_INTEL_REQD_SUB_GROUP_SIZE:
    case mx::AttrKind::OBJ_C_SUBCLASSING_RESTRICTED:
    case mx::AttrKind::OBJ_C_ROOT_CLASS:
    case mx::AttrKind::OBJ_C_RETURNS_INNER_POINTER:
    case mx::AttrKind::OBJ_C_REQUIRES_SUPER:
    case mx::AttrKind::OBJ_C_REQUIRES_PROPERTY_DEFS:
    case mx::AttrKind::OBJ_C_PRECISE_LIFETIME:
    case mx::AttrKind::OBJ_C_OWNERSHIP:
    case mx::AttrKind::OBJ_CNS_OBJECT:
    case mx::AttrKind::OBJ_C_METHOD_FAMILY:
    case mx::AttrKind::OBJ_C_INDEPENDENT_CLASS:
    case mx::AttrKind::OBJ_C_EXTERNALLY_RETAINED:
    case mx::AttrKind::OBJ_C_EXPLICIT_PROTOCOL_IMPL:
    case mx::AttrKind::OBJ_C_EXCEPTION:
    case mx::AttrKind::OBJ_C_BRIDGE_RELATED:
    case mx::AttrKind::OBJ_C_BRIDGE_MUTABLE:
    case mx::AttrKind::OBJ_C_BRIDGE:
    case mx::AttrKind::OS_RETURNS_RETAINED_ON_ZERO:
    case mx::AttrKind::OS_RETURNS_RETAINED_ON_NON_ZERO:
    case mx::AttrKind::OS_RETURNS_RETAINED:
    case mx::AttrKind::OS_RETURNS_NOT_RETAINED:
    case mx::AttrKind::OS_CONSUMES_THIS:
    case mx::AttrKind::OMP_THREAD_PRIVATE_DECL:
    case mx::AttrKind::OMP_DECLARE_VARIANT:
    case mx::AttrKind::OMP_DECLARE_TARGET_DECL:
    case mx::AttrKind::OMP_CAPTURE_NO_INIT:
    case mx::AttrKind::OMP_ALLOCATE_DECL:
    case mx::AttrKind::NOT_TAIL_CALLED:
    case mx::AttrKind::NO_UNIQUE_ADDRESS:
    case mx::AttrKind::NO_THROW:
    case mx::AttrKind::NO_THREAD_SAFETY_ANALYSIS:
    case mx::AttrKind::NO_STACK_PROTECTOR:
    case mx::AttrKind::NO_SPLIT_STACK:
    case mx::AttrKind::NO_SPECULATIVE_LOAD_HARDENING:
    case mx::AttrKind::NO_SANITIZE:
    case mx::AttrKind::NO_RETURN:
    case mx::AttrKind::NO_PROFILE_FUNCTION:
    case mx::AttrKind::NO_MIPS16:
    case mx::AttrKind::NO_MICRO_MIPS:
    case mx::AttrKind::NO_INSTRUMENT_FUNCTION:
    case mx::AttrKind::NO_INLINE:
    case mx::AttrKind::NO_DUPLICATE:
    case mx::AttrKind::NO_DESTROY:
    case mx::AttrKind::NO_DEBUG:
    case mx::AttrKind::NO_COMMON:
    case mx::AttrKind::NO_ALIAS:
    case mx::AttrKind::NAKED:
    case mx::AttrKind::NS_RETURNS_RETAINED:
    case mx::AttrKind::NS_RETURNS_NOT_RETAINED:
    case mx::AttrKind::NS_RETURNS_AUTORELEASED:
    case mx::AttrKind::NS_ERROR_DOMAIN:
    case mx::AttrKind::NS_CONSUMES_SELF:
    case mx::AttrKind::MIPS_SHORT_CALL:
    case mx::AttrKind::MIPS_LONG_CALL:
    case mx::AttrKind::MIPS_INTERRUPT:
    case mx::AttrKind::MIPS16:
    case mx::AttrKind::MIN_VECTOR_WIDTH:
    case mx::AttrKind::MIN_SIZE:
    case mx::AttrKind::MICRO_MIPS:
    case mx::AttrKind::MAY_ALIAS:
    case mx::AttrKind::MAX_FIELD_ALIGNMENT:
    case mx::AttrKind::MS_VTOR_DISP:
    case mx::AttrKind::MS_STRUCT:
    case mx::AttrKind::MSP430_INTERRUPT:
    case mx::AttrKind::MS_NO_V_TABLE:
    case mx::AttrKind::MS_INHERITANCE:
    case mx::AttrKind::MS_ALLOCATOR:
    case mx::AttrKind::MSABI:
    case mx::AttrKind::MIG_SERVER_ROUTINE_:
    case mx::AttrKind::M68K_INTERRUPT:
    case mx::AttrKind::LOCKS_EXCLUDED:
    case mx::AttrKind::LOCK_RETURNED:
    case mx::AttrKind::LIFETIME_BOUND:
    case mx::AttrKind::LEAF:
    case mx::AttrKind::LAYOUT_VERSION:
    case mx::AttrKind::LTO_VISIBILITY_PUBLIC:
    case mx::AttrKind::INTERNAL_LINKAGE:
    case mx::AttrKind::INTEL_OCL_BICC:
    case mx::AttrKind::INIT_PRIORITY:
    case mx::AttrKind::CARRIES_DEPENDENCY:
    case mx::AttrKind::CF_CONSUMED:
    case mx::AttrKind::ANNOTATE:
    case mx::AttrKind::USE_HANDLE:
    case mx::AttrKind::RELEASE_HANDLE:
    case mx::AttrKind::PASS_OBJECT_SIZE:
    case mx::AttrKind::SWIFT_INDIRECT_RESULT:
    case mx::AttrKind::SWIFT_ERROR_RESULT:
    case mx::AttrKind::SWIFT_CONTEXT:
    case mx::AttrKind::SWIFT_ASYNC_CONTEXT:
    case mx::AttrKind::OS_CONSUMED:
    case mx::AttrKind::NON_NULL:
    case mx::AttrKind::NS_CONSUMED:
      return reinterpret_cast<const InheritableAttr &>(parent);
    default: return std::nullopt;
  }
}

bool InheritableAttr::should_inherit_even_if_already_present(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal12();
}

std::optional<IBOutletCollectionAttr> IBOutletCollectionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<IBOutletCollectionAttr> IBOutletCollectionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<IBOutletCollectionAttr> IBOutletCollectionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::IB_OUTLET_COLLECTION:
      return reinterpret_cast<const IBOutletCollectionAttr &>(parent);
    default: return std::nullopt;
  }
}

Type IBOutletCollectionAttr::interface(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return fragment->TypeFor(fragment, id, false).value();
}

Type IBOutletCollectionAttr::interface_token(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal17());
  return fragment->TypeFor(fragment, id, false).value();
}

std::string_view IBOutletCollectionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<IBOutletAttr> IBOutletAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<IBOutletAttr> IBOutletAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<IBOutletAttr> IBOutletAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::IB_OUTLET:
      return reinterpret_cast<const IBOutletAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view IBOutletAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<IBActionAttr> IBActionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<IBActionAttr> IBActionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<IBActionAttr> IBActionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::IB_ACTION:
      return reinterpret_cast<const IBActionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view IBActionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<HotAttr> HotAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<HotAttr> HotAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<HotAttr> HotAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::HOT:
      return reinterpret_cast<const HotAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view HotAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<HIPManagedAttr> HIPManagedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<HIPManagedAttr> HIPManagedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<HIPManagedAttr> HIPManagedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::HIP_MANAGED:
      return reinterpret_cast<const HIPManagedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view HIPManagedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<GuardedVarAttr> GuardedVarAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<GuardedVarAttr> GuardedVarAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<GuardedVarAttr> GuardedVarAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::GUARDED_VAR:
      return reinterpret_cast<const GuardedVarAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view GuardedVarAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<GuardedByAttr> GuardedByAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<GuardedByAttr> GuardedByAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<GuardedByAttr> GuardedByAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::GUARDED_BY:
      return reinterpret_cast<const GuardedByAttr &>(parent);
    default: return std::nullopt;
  }
}

Expr GuardedByAttr::argument(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::string_view GuardedByAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<GNUInlineAttr> GNUInlineAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<GNUInlineAttr> GNUInlineAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<GNUInlineAttr> GNUInlineAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::GNU_INLINE:
      return reinterpret_cast<const GNUInlineAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view GNUInlineAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<FormatAttr> FormatAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<FormatAttr> FormatAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<FormatAttr> FormatAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::FORMAT:
      return reinterpret_cast<const FormatAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view FormatAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<FormatArgAttr> FormatArgAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<FormatArgAttr> FormatArgAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<FormatArgAttr> FormatArgAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::FORMAT_ARG:
      return reinterpret_cast<const FormatArgAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view FormatArgAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<FlattenAttr> FlattenAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<FlattenAttr> FlattenAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<FlattenAttr> FlattenAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::FLATTEN:
      return reinterpret_cast<const FlattenAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view FlattenAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<FlagEnumAttr> FlagEnumAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<FlagEnumAttr> FlagEnumAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<FlagEnumAttr> FlagEnumAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::FLAG_ENUM:
      return reinterpret_cast<const FlagEnumAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view FlagEnumAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<FinalAttr> FinalAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<FinalAttr> FinalAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<FinalAttr> FinalAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::FINAL:
      return reinterpret_cast<const FinalAttr &>(parent);
    default: return std::nullopt;
  }
}

FinalAttrSpelling FinalAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<FinalAttrSpelling>(self.getVal11());
}

std::string_view FinalAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool FinalAttr::is_spelled_as_sealed(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::optional<FastCallAttr> FastCallAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<FastCallAttr> FastCallAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<FastCallAttr> FastCallAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::FAST_CALL:
      return reinterpret_cast<const FastCallAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view FastCallAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ExternalSourceSymbolAttr> ExternalSourceSymbolAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ExternalSourceSymbolAttr> ExternalSourceSymbolAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ExternalSourceSymbolAttr> ExternalSourceSymbolAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::EXTERNAL_SOURCE_SYMBOL:
      return reinterpret_cast<const ExternalSourceSymbolAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ExternalSourceSymbolAttr::defined_in(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool ExternalSourceSymbolAttr::generated_declaration(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::string_view ExternalSourceSymbolAttr::language(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::string_view ExternalSourceSymbolAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal18();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ExclusiveTrylockFunctionAttr> ExclusiveTrylockFunctionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ExclusiveTrylockFunctionAttr> ExclusiveTrylockFunctionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ExclusiveTrylockFunctionAttr> ExclusiveTrylockFunctionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::EXCLUSIVE_TRYLOCK_FUNCTION:
      return reinterpret_cast<const ExclusiveTrylockFunctionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ExclusiveTrylockFunctionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

Expr ExclusiveTrylockFunctionAttr::success_value(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<ExcludeFromExplicitInstantiationAttr> ExcludeFromExplicitInstantiationAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ExcludeFromExplicitInstantiationAttr> ExcludeFromExplicitInstantiationAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ExcludeFromExplicitInstantiationAttr> ExcludeFromExplicitInstantiationAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::EXCLUDE_FROM_EXPLICIT_INSTANTIATION:
      return reinterpret_cast<const ExcludeFromExplicitInstantiationAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ExcludeFromExplicitInstantiationAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ErrorAttr> ErrorAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ErrorAttr> ErrorAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ErrorAttr> ErrorAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ERROR:
      return reinterpret_cast<const ErrorAttr &>(parent);
    default: return std::nullopt;
  }
}

ErrorAttrSpelling ErrorAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<ErrorAttrSpelling>(self.getVal11());
}

std::string_view ErrorAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view ErrorAttr::user_diagnostic(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

bool ErrorAttr::is_error(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

bool ErrorAttr::is_warning(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal14();
}

std::optional<EnumExtensibilityAttr> EnumExtensibilityAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<EnumExtensibilityAttr> EnumExtensibilityAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<EnumExtensibilityAttr> EnumExtensibilityAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ENUM_EXTENSIBILITY:
      return reinterpret_cast<const EnumExtensibilityAttr &>(parent);
    default: return std::nullopt;
  }
}

EnumExtensibilityAttrKind EnumExtensibilityAttr::extensibility(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<EnumExtensibilityAttrKind>(self.getVal11());
}

std::string_view EnumExtensibilityAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<EnforceTCBLeafAttr> EnforceTCBLeafAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<EnforceTCBLeafAttr> EnforceTCBLeafAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<EnforceTCBLeafAttr> EnforceTCBLeafAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ENFORCE_TCB_LEAF:
      return reinterpret_cast<const EnforceTCBLeafAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view EnforceTCBLeafAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view EnforceTCBLeafAttr::tcb_name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<EnforceTCBAttr> EnforceTCBAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<EnforceTCBAttr> EnforceTCBAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<EnforceTCBAttr> EnforceTCBAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ENFORCE_TCB:
      return reinterpret_cast<const EnforceTCBAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view EnforceTCBAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view EnforceTCBAttr::tcb_name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<EnableIfAttr> EnableIfAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<EnableIfAttr> EnableIfAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<EnableIfAttr> EnableIfAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ENABLE_IF:
      return reinterpret_cast<const EnableIfAttr &>(parent);
    default: return std::nullopt;
  }
}

Expr EnableIfAttr::condition(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::string_view EnableIfAttr::message(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view EnableIfAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<EmptyBasesAttr> EmptyBasesAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<EmptyBasesAttr> EmptyBasesAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<EmptyBasesAttr> EmptyBasesAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::EMPTY_BASES:
      return reinterpret_cast<const EmptyBasesAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view EmptyBasesAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<DisableTailCallsAttr> DisableTailCallsAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<DisableTailCallsAttr> DisableTailCallsAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<DisableTailCallsAttr> DisableTailCallsAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::DISABLE_TAIL_CALLS:
      return reinterpret_cast<const DisableTailCallsAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view DisableTailCallsAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<DisableSanitizerInstrumentationAttr> DisableSanitizerInstrumentationAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<DisableSanitizerInstrumentationAttr> DisableSanitizerInstrumentationAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<DisableSanitizerInstrumentationAttr> DisableSanitizerInstrumentationAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::DISABLE_SANITIZER_INSTRUMENTATION:
      return reinterpret_cast<const DisableSanitizerInstrumentationAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view DisableSanitizerInstrumentationAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<DiagnoseIfAttr> DiagnoseIfAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<DiagnoseIfAttr> DiagnoseIfAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<DiagnoseIfAttr> DiagnoseIfAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::DIAGNOSE_IF:
      return reinterpret_cast<const DiagnoseIfAttr &>(parent);
    default: return std::nullopt;
  }
}

bool DiagnoseIfAttr::argument_dependent(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

Expr DiagnoseIfAttr::condition(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

DiagnoseIfAttrDiagnosticType DiagnoseIfAttr::diagnostic_type(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<DiagnoseIfAttrDiagnosticType>(self.getVal11());
}

std::string_view DiagnoseIfAttr::message(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

NamedDecl DiagnoseIfAttr::parent(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal17());
  return NamedDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::string_view DiagnoseIfAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

bool DiagnoseIfAttr::is_error(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal14();
}

bool DiagnoseIfAttr::is_warning(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal19();
}

std::optional<DiagnoseAsBuiltinAttr> DiagnoseAsBuiltinAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<DiagnoseAsBuiltinAttr> DiagnoseAsBuiltinAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<DiagnoseAsBuiltinAttr> DiagnoseAsBuiltinAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::DIAGNOSE_AS_BUILTIN:
      return reinterpret_cast<const DiagnoseAsBuiltinAttr &>(parent);
    default: return std::nullopt;
  }
}

FunctionDecl DiagnoseAsBuiltinAttr::function(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return FunctionDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::string_view DiagnoseAsBuiltinAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<DestructorAttr> DestructorAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<DestructorAttr> DestructorAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<DestructorAttr> DestructorAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::DESTRUCTOR:
      return reinterpret_cast<const DestructorAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view DestructorAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<DeprecatedAttr> DeprecatedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<DeprecatedAttr> DeprecatedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<DeprecatedAttr> DeprecatedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::DEPRECATED:
      return reinterpret_cast<const DeprecatedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view DeprecatedAttr::message(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view DeprecatedAttr::replacement(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::string_view DeprecatedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal18();
  return std::string_view(data.cStr(), data.size());
}

std::optional<DeclOrStmtAttr> DeclOrStmtAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<DeclOrStmtAttr> DeclOrStmtAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<DeclOrStmtAttr> DeclOrStmtAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_MERGE:
      return reinterpret_cast<const DeclOrStmtAttr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<NoMergeAttr> NoMergeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoMergeAttr> NoMergeAttr::from(const DeclOrStmtAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoMergeAttr> NoMergeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoMergeAttr> NoMergeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_MERGE:
      return reinterpret_cast<const NoMergeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoMergeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<DLLImportStaticLocalAttr> DLLImportStaticLocalAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<DLLImportStaticLocalAttr> DLLImportStaticLocalAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<DLLImportStaticLocalAttr> DLLImportStaticLocalAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::DLL_IMPORT_STATIC_LOCAL:
      return reinterpret_cast<const DLLImportStaticLocalAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view DLLImportStaticLocalAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<DLLImportAttr> DLLImportAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<DLLImportAttr> DLLImportAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<DLLImportAttr> DLLImportAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::DLL_IMPORT:
      return reinterpret_cast<const DLLImportAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view DLLImportAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<DLLExportStaticLocalAttr> DLLExportStaticLocalAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<DLLExportStaticLocalAttr> DLLExportStaticLocalAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<DLLExportStaticLocalAttr> DLLExportStaticLocalAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::DLL_EXPORT_STATIC_LOCAL:
      return reinterpret_cast<const DLLExportStaticLocalAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view DLLExportStaticLocalAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<DLLExportAttr> DLLExportAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<DLLExportAttr> DLLExportAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<DLLExportAttr> DLLExportAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::DLL_EXPORT:
      return reinterpret_cast<const DLLExportAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view DLLExportAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ConvergentAttr> ConvergentAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ConvergentAttr> ConvergentAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ConvergentAttr> ConvergentAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CONVERGENT:
      return reinterpret_cast<const ConvergentAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ConvergentAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ConsumableSetOnReadAttr> ConsumableSetOnReadAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ConsumableSetOnReadAttr> ConsumableSetOnReadAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ConsumableSetOnReadAttr> ConsumableSetOnReadAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CONSUMABLE_SET_ON_READ:
      return reinterpret_cast<const ConsumableSetOnReadAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ConsumableSetOnReadAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ConsumableAutoCastAttr> ConsumableAutoCastAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ConsumableAutoCastAttr> ConsumableAutoCastAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ConsumableAutoCastAttr> ConsumableAutoCastAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CONSUMABLE_AUTO_CAST:
      return reinterpret_cast<const ConsumableAutoCastAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ConsumableAutoCastAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ConsumableAttr> ConsumableAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ConsumableAttr> ConsumableAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ConsumableAttr> ConsumableAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CONSUMABLE:
      return reinterpret_cast<const ConsumableAttr &>(parent);
    default: return std::nullopt;
  }
}

ConsumableAttrConsumedState ConsumableAttr::default_state(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<ConsumableAttrConsumedState>(self.getVal11());
}

std::string_view ConsumableAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ConstructorAttr> ConstructorAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ConstructorAttr> ConstructorAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ConstructorAttr> ConstructorAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CONSTRUCTOR:
      return reinterpret_cast<const ConstructorAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ConstructorAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ConstInitAttr> ConstInitAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ConstInitAttr> ConstInitAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ConstInitAttr> ConstInitAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CONST_INIT:
      return reinterpret_cast<const ConstInitAttr &>(parent);
    default: return std::nullopt;
  }
}

ConstInitAttrSpelling ConstInitAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<ConstInitAttrSpelling>(self.getVal11());
}

std::string_view ConstInitAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool ConstInitAttr::is_constinit(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::optional<ConstAttr> ConstAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ConstAttr> ConstAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ConstAttr> ConstAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CONST:
      return reinterpret_cast<const ConstAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ConstAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CommonAttr> CommonAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CommonAttr> CommonAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CommonAttr> CommonAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::COMMON:
      return reinterpret_cast<const CommonAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CommonAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ColdAttr> ColdAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ColdAttr> ColdAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ColdAttr> ColdAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::COLD:
      return reinterpret_cast<const ColdAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ColdAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CodeSegAttr> CodeSegAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CodeSegAttr> CodeSegAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CodeSegAttr> CodeSegAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CODE_SEG:
      return reinterpret_cast<const CodeSegAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CodeSegAttr::name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view CodeSegAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CmseNSEntryAttr> CmseNSEntryAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CmseNSEntryAttr> CmseNSEntryAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CmseNSEntryAttr> CmseNSEntryAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CMSE_NS_ENTRY:
      return reinterpret_cast<const CmseNSEntryAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CmseNSEntryAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CleanupAttr> CleanupAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CleanupAttr> CleanupAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CleanupAttr> CleanupAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CLEANUP:
      return reinterpret_cast<const CleanupAttr &>(parent);
    default: return std::nullopt;
  }
}

FunctionDecl CleanupAttr::function_declaration(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return FunctionDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::string_view CleanupAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CapturedRecordAttr> CapturedRecordAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CapturedRecordAttr> CapturedRecordAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CapturedRecordAttr> CapturedRecordAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CAPTURED_RECORD:
      return reinterpret_cast<const CapturedRecordAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CapturedRecordAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CapabilityAttr> CapabilityAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CapabilityAttr> CapabilityAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CapabilityAttr> CapabilityAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CAPABILITY:
      return reinterpret_cast<const CapabilityAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CapabilityAttr::name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

CapabilityAttrSpelling CapabilityAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<CapabilityAttrSpelling>(self.getVal11());
}

std::string_view CapabilityAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

bool CapabilityAttr::is_shared(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::optional<CallbackAttr> CallbackAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CallbackAttr> CallbackAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CallbackAttr> CallbackAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CALLBACK:
      return reinterpret_cast<const CallbackAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CallbackAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CallableWhenAttr> CallableWhenAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CallableWhenAttr> CallableWhenAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CallableWhenAttr> CallableWhenAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CALLABLE_WHEN:
      return reinterpret_cast<const CallableWhenAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CallableWhenAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CXX11NoReturnAttr> CXX11NoReturnAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CXX11NoReturnAttr> CXX11NoReturnAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CXX11NoReturnAttr> CXX11NoReturnAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CXX11_NO_RETURN:
      return reinterpret_cast<const CXX11NoReturnAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CXX11NoReturnAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CUDASharedAttr> CUDASharedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CUDASharedAttr> CUDASharedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CUDASharedAttr> CUDASharedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CUDA_SHARED:
      return reinterpret_cast<const CUDASharedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CUDASharedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CUDALaunchBoundsAttr> CUDALaunchBoundsAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CUDALaunchBoundsAttr> CUDALaunchBoundsAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CUDALaunchBoundsAttr> CUDALaunchBoundsAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CUDA_LAUNCH_BOUNDS:
      return reinterpret_cast<const CUDALaunchBoundsAttr &>(parent);
    default: return std::nullopt;
  }
}

Expr CUDALaunchBoundsAttr::max_threads(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr CUDALaunchBoundsAttr::min_blocks(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal17());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::string_view CUDALaunchBoundsAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CUDAInvalidTargetAttr> CUDAInvalidTargetAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CUDAInvalidTargetAttr> CUDAInvalidTargetAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CUDAInvalidTargetAttr> CUDAInvalidTargetAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CUDA_INVALID_TARGET:
      return reinterpret_cast<const CUDAInvalidTargetAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CUDAInvalidTargetAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CUDAHostAttr> CUDAHostAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CUDAHostAttr> CUDAHostAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CUDAHostAttr> CUDAHostAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CUDA_HOST:
      return reinterpret_cast<const CUDAHostAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CUDAHostAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CUDAGlobalAttr> CUDAGlobalAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CUDAGlobalAttr> CUDAGlobalAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CUDAGlobalAttr> CUDAGlobalAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CUDA_GLOBAL:
      return reinterpret_cast<const CUDAGlobalAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CUDAGlobalAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CUDADeviceBuiltinTextureTypeAttr> CUDADeviceBuiltinTextureTypeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CUDADeviceBuiltinTextureTypeAttr> CUDADeviceBuiltinTextureTypeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CUDADeviceBuiltinTextureTypeAttr> CUDADeviceBuiltinTextureTypeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CUDA_DEVICE_BUILTIN_TEXTURE_TYPE:
      return reinterpret_cast<const CUDADeviceBuiltinTextureTypeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CUDADeviceBuiltinTextureTypeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CUDADeviceBuiltinSurfaceTypeAttr> CUDADeviceBuiltinSurfaceTypeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CUDADeviceBuiltinSurfaceTypeAttr> CUDADeviceBuiltinSurfaceTypeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CUDADeviceBuiltinSurfaceTypeAttr> CUDADeviceBuiltinSurfaceTypeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CUDA_DEVICE_BUILTIN_SURFACE_TYPE:
      return reinterpret_cast<const CUDADeviceBuiltinSurfaceTypeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CUDADeviceBuiltinSurfaceTypeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CUDADeviceAttr> CUDADeviceAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CUDADeviceAttr> CUDADeviceAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CUDADeviceAttr> CUDADeviceAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CUDA_DEVICE:
      return reinterpret_cast<const CUDADeviceAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CUDADeviceAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CUDAConstantAttr> CUDAConstantAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CUDAConstantAttr> CUDAConstantAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CUDAConstantAttr> CUDAConstantAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CUDA_CONSTANT:
      return reinterpret_cast<const CUDAConstantAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CUDAConstantAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CPUSpecificAttr> CPUSpecificAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CPUSpecificAttr> CPUSpecificAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CPUSpecificAttr> CPUSpecificAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CPU_SPECIFIC:
      return reinterpret_cast<const CPUSpecificAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CPUSpecificAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CPUDispatchAttr> CPUDispatchAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CPUDispatchAttr> CPUDispatchAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CPUDispatchAttr> CPUDispatchAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CPU_DISPATCH:
      return reinterpret_cast<const CPUDispatchAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CPUDispatchAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CFUnknownTransferAttr> CFUnknownTransferAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CFUnknownTransferAttr> CFUnknownTransferAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CFUnknownTransferAttr> CFUnknownTransferAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CF_UNKNOWN_TRANSFER:
      return reinterpret_cast<const CFUnknownTransferAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CFUnknownTransferAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CFReturnsRetainedAttr> CFReturnsRetainedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CFReturnsRetainedAttr> CFReturnsRetainedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CFReturnsRetainedAttr> CFReturnsRetainedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CF_RETURNS_RETAINED:
      return reinterpret_cast<const CFReturnsRetainedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CFReturnsRetainedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CFReturnsNotRetainedAttr> CFReturnsNotRetainedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CFReturnsNotRetainedAttr> CFReturnsNotRetainedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CFReturnsNotRetainedAttr> CFReturnsNotRetainedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CF_RETURNS_NOT_RETAINED:
      return reinterpret_cast<const CFReturnsNotRetainedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CFReturnsNotRetainedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CFICanonicalJumpTableAttr> CFICanonicalJumpTableAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CFICanonicalJumpTableAttr> CFICanonicalJumpTableAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CFICanonicalJumpTableAttr> CFICanonicalJumpTableAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CFI_CANONICAL_JUMP_TABLE:
      return reinterpret_cast<const CFICanonicalJumpTableAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CFICanonicalJumpTableAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CFGuardAttr> CFGuardAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CFGuardAttr> CFGuardAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CFGuardAttr> CFGuardAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CF_GUARD:
      return reinterpret_cast<const CFGuardAttr &>(parent);
    default: return std::nullopt;
  }
}

CFGuardAttrGuardArg CFGuardAttr::guard(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<CFGuardAttrGuardArg>(self.getVal11());
}

std::string_view CFGuardAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CFAuditedTransferAttr> CFAuditedTransferAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CFAuditedTransferAttr> CFAuditedTransferAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CFAuditedTransferAttr> CFAuditedTransferAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CF_AUDITED_TRANSFER:
      return reinterpret_cast<const CFAuditedTransferAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CFAuditedTransferAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CDeclAttr> CDeclAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CDeclAttr> CDeclAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CDeclAttr> CDeclAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::C_DECL:
      return reinterpret_cast<const CDeclAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CDeclAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<C11NoReturnAttr> C11NoReturnAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<C11NoReturnAttr> C11NoReturnAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<C11NoReturnAttr> C11NoReturnAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::C11_NO_RETURN:
      return reinterpret_cast<const C11NoReturnAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view C11NoReturnAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<BuiltinAttr> BuiltinAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<BuiltinAttr> BuiltinAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<BuiltinAttr> BuiltinAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::BUILTIN:
      return reinterpret_cast<const BuiltinAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view BuiltinAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<BlocksAttr> BlocksAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<BlocksAttr> BlocksAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<BlocksAttr> BlocksAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::BLOCKS:
      return reinterpret_cast<const BlocksAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view BlocksAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

BlocksAttrBlockType BlocksAttr::type(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<BlocksAttrBlockType>(self.getVal11());
}

std::optional<BTFDeclTagAttr> BTFDeclTagAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<BTFDeclTagAttr> BTFDeclTagAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<BTFDeclTagAttr> BTFDeclTagAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::BTF_DECL_TAG:
      return reinterpret_cast<const BTFDeclTagAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view BTFDeclTagAttr::btf_decl_tag(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view BTFDeclTagAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<BPFPreserveAccessIndexAttr> BPFPreserveAccessIndexAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<BPFPreserveAccessIndexAttr> BPFPreserveAccessIndexAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<BPFPreserveAccessIndexAttr> BPFPreserveAccessIndexAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::BPF_PRESERVE_ACCESS_INDEX:
      return reinterpret_cast<const BPFPreserveAccessIndexAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view BPFPreserveAccessIndexAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AvailabilityAttr> AvailabilityAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AvailabilityAttr> AvailabilityAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AvailabilityAttr> AvailabilityAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::AVAILABILITY:
      return reinterpret_cast<const AvailabilityAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AvailabilityAttr::message(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view AvailabilityAttr::replacement(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::string_view AvailabilityAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal18();
  return std::string_view(data.cStr(), data.size());
}

bool AvailabilityAttr::strict(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

bool AvailabilityAttr::unavailable(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal14();
}

std::optional<AssumptionAttr> AssumptionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AssumptionAttr> AssumptionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AssumptionAttr> AssumptionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ASSUMPTION:
      return reinterpret_cast<const AssumptionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AssumptionAttr::assumption(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view AssumptionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AssumeAlignedAttr> AssumeAlignedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AssumeAlignedAttr> AssumeAlignedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AssumeAlignedAttr> AssumeAlignedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ASSUME_ALIGNED:
      return reinterpret_cast<const AssumeAlignedAttr &>(parent);
    default: return std::nullopt;
  }
}

Expr AssumeAlignedAttr::alignment(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<Expr> AssumeAlignedAttr::offset(void) const {
  auto self = fragment->NthAttr(offset_);
  if (!self.getVal13()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal17());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

std::string_view AssumeAlignedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AssertSharedLockAttr> AssertSharedLockAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AssertSharedLockAttr> AssertSharedLockAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AssertSharedLockAttr> AssertSharedLockAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ASSERT_SHARED_LOCK:
      return reinterpret_cast<const AssertSharedLockAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AssertSharedLockAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AssertExclusiveLockAttr> AssertExclusiveLockAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AssertExclusiveLockAttr> AssertExclusiveLockAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AssertExclusiveLockAttr> AssertExclusiveLockAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ASSERT_EXCLUSIVE_LOCK:
      return reinterpret_cast<const AssertExclusiveLockAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AssertExclusiveLockAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AssertCapabilityAttr> AssertCapabilityAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AssertCapabilityAttr> AssertCapabilityAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AssertCapabilityAttr> AssertCapabilityAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ASSERT_CAPABILITY:
      return reinterpret_cast<const AssertCapabilityAttr &>(parent);
    default: return std::nullopt;
  }
}

AssertCapabilityAttrSpelling AssertCapabilityAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<AssertCapabilityAttrSpelling>(self.getVal11());
}

std::string_view AssertCapabilityAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool AssertCapabilityAttr::is_shared(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::optional<AsmLabelAttr> AsmLabelAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AsmLabelAttr> AsmLabelAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AsmLabelAttr> AsmLabelAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ASM_LABEL:
      return reinterpret_cast<const AsmLabelAttr &>(parent);
    default: return std::nullopt;
  }
}

bool AsmLabelAttr::is_literal_label(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::string_view AsmLabelAttr::label(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view AsmLabelAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ArtificialAttr> ArtificialAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ArtificialAttr> ArtificialAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ArtificialAttr> ArtificialAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ARTIFICIAL:
      return reinterpret_cast<const ArtificialAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ArtificialAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ArmBuiltinAliasAttr> ArmBuiltinAliasAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ArmBuiltinAliasAttr> ArmBuiltinAliasAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ArmBuiltinAliasAttr> ArmBuiltinAliasAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ARM_BUILTIN_ALIAS:
      return reinterpret_cast<const ArmBuiltinAliasAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ArmBuiltinAliasAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ArgumentWithTypeTagAttr> ArgumentWithTypeTagAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ArgumentWithTypeTagAttr> ArgumentWithTypeTagAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ArgumentWithTypeTagAttr> ArgumentWithTypeTagAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ARGUMENT_WITH_TYPE_TAG:
      return reinterpret_cast<const ArgumentWithTypeTagAttr &>(parent);
    default: return std::nullopt;
  }
}

bool ArgumentWithTypeTagAttr::is_pointer(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

ArgumentWithTypeTagAttrSpelling ArgumentWithTypeTagAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<ArgumentWithTypeTagAttrSpelling>(self.getVal11());
}

std::string_view ArgumentWithTypeTagAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ArcWeakrefUnavailableAttr> ArcWeakrefUnavailableAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ArcWeakrefUnavailableAttr> ArcWeakrefUnavailableAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ArcWeakrefUnavailableAttr> ArcWeakrefUnavailableAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ARC_WEAKREF_UNAVAILABLE:
      return reinterpret_cast<const ArcWeakrefUnavailableAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ArcWeakrefUnavailableAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AnyX86NoCfCheckAttr> AnyX86NoCfCheckAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AnyX86NoCfCheckAttr> AnyX86NoCfCheckAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AnyX86NoCfCheckAttr> AnyX86NoCfCheckAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ANY_X86_NO_CF_CHECK:
      return reinterpret_cast<const AnyX86NoCfCheckAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AnyX86NoCfCheckAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AnyX86NoCallerSavedRegistersAttr> AnyX86NoCallerSavedRegistersAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AnyX86NoCallerSavedRegistersAttr> AnyX86NoCallerSavedRegistersAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AnyX86NoCallerSavedRegistersAttr> AnyX86NoCallerSavedRegistersAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ANY_X86_NO_CALLER_SAVED_REGISTERS:
      return reinterpret_cast<const AnyX86NoCallerSavedRegistersAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AnyX86NoCallerSavedRegistersAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AnyX86InterruptAttr> AnyX86InterruptAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AnyX86InterruptAttr> AnyX86InterruptAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AnyX86InterruptAttr> AnyX86InterruptAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ANY_X86_INTERRUPT:
      return reinterpret_cast<const AnyX86InterruptAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AnyX86InterruptAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AnalyzerNoReturnAttr> AnalyzerNoReturnAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AnalyzerNoReturnAttr> AnalyzerNoReturnAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AnalyzerNoReturnAttr> AnalyzerNoReturnAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ANALYZER_NO_RETURN:
      return reinterpret_cast<const AnalyzerNoReturnAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AnalyzerNoReturnAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AlwaysInlineAttr> AlwaysInlineAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AlwaysInlineAttr> AlwaysInlineAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AlwaysInlineAttr> AlwaysInlineAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ALWAYS_INLINE:
      return reinterpret_cast<const AlwaysInlineAttr &>(parent);
    default: return std::nullopt;
  }
}

AlwaysInlineAttrSpelling AlwaysInlineAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<AlwaysInlineAttrSpelling>(self.getVal11());
}

std::string_view AlwaysInlineAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AlwaysDestroyAttr> AlwaysDestroyAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AlwaysDestroyAttr> AlwaysDestroyAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AlwaysDestroyAttr> AlwaysDestroyAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ALWAYS_DESTROY:
      return reinterpret_cast<const AlwaysDestroyAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AlwaysDestroyAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AllocSizeAttr> AllocSizeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AllocSizeAttr> AllocSizeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AllocSizeAttr> AllocSizeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ALLOC_SIZE:
      return reinterpret_cast<const AllocSizeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AllocSizeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AllocAlignAttr> AllocAlignAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AllocAlignAttr> AllocAlignAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AllocAlignAttr> AllocAlignAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ALLOC_ALIGN:
      return reinterpret_cast<const AllocAlignAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AllocAlignAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AlignedAttr> AlignedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AlignedAttr> AlignedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AlignedAttr> AlignedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ALIGNED:
      return reinterpret_cast<const AlignedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Expr> AlignedAttr::alignment_expression(void) const {
  auto self = fragment->NthAttr(offset_);
  if (!self.getVal13()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal8());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

std::optional<Type> AlignedAttr::alignment_type(void) const {
  auto self = fragment->NthAttr(offset_);
  if (!self.getVal14()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal17());
    return fragment->TypeFor(fragment, id);
  }
}

AlignedAttrSpelling AlignedAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<AlignedAttrSpelling>(self.getVal11());
}

std::string_view AlignedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool AlignedAttr::is_alignas(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal19();
}

bool AlignedAttr::is_alignment_dependent(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal20();
}

bool AlignedAttr::is_alignment_error_dependent(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal21();
}

bool AlignedAttr::is_alignment_expression(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal22();
}

bool AlignedAttr::is_c11(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal23();
}

bool AlignedAttr::is_declspec(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal24();
}

bool AlignedAttr::is_gnu(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal25();
}

std::optional<AlignNaturalAttr> AlignNaturalAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AlignNaturalAttr> AlignNaturalAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AlignNaturalAttr> AlignNaturalAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ALIGN_NATURAL:
      return reinterpret_cast<const AlignNaturalAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AlignNaturalAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AlignMac68kAttr> AlignMac68kAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AlignMac68kAttr> AlignMac68kAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AlignMac68kAttr> AlignMac68kAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ALIGN_MAC68K:
      return reinterpret_cast<const AlignMac68kAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AlignMac68kAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AcquiredBeforeAttr> AcquiredBeforeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AcquiredBeforeAttr> AcquiredBeforeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AcquiredBeforeAttr> AcquiredBeforeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ACQUIRED_BEFORE:
      return reinterpret_cast<const AcquiredBeforeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AcquiredBeforeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AcquiredAfterAttr> AcquiredAfterAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AcquiredAfterAttr> AcquiredAfterAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AcquiredAfterAttr> AcquiredAfterAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ACQUIRED_AFTER:
      return reinterpret_cast<const AcquiredAfterAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AcquiredAfterAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AcquireHandleAttr> AcquireHandleAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AcquireHandleAttr> AcquireHandleAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AcquireHandleAttr> AcquireHandleAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ACQUIRE_HANDLE:
      return reinterpret_cast<const AcquireHandleAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AcquireHandleAttr::handle_type(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view AcquireHandleAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AcquireCapabilityAttr> AcquireCapabilityAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AcquireCapabilityAttr> AcquireCapabilityAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AcquireCapabilityAttr> AcquireCapabilityAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ACQUIRE_CAPABILITY:
      return reinterpret_cast<const AcquireCapabilityAttr &>(parent);
    default: return std::nullopt;
  }
}

AcquireCapabilityAttrSpelling AcquireCapabilityAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<AcquireCapabilityAttrSpelling>(self.getVal11());
}

std::string_view AcquireCapabilityAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool AcquireCapabilityAttr::is_shared(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::optional<AVRSignalAttr> AVRSignalAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AVRSignalAttr> AVRSignalAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AVRSignalAttr> AVRSignalAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::AVR_SIGNAL:
      return reinterpret_cast<const AVRSignalAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AVRSignalAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AVRInterruptAttr> AVRInterruptAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AVRInterruptAttr> AVRInterruptAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AVRInterruptAttr> AVRInterruptAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::AVR_INTERRUPT:
      return reinterpret_cast<const AVRInterruptAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AVRInterruptAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ARMInterruptAttr> ARMInterruptAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ARMInterruptAttr> ARMInterruptAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ARMInterruptAttr> ARMInterruptAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ARM_INTERRUPT:
      return reinterpret_cast<const ARMInterruptAttr &>(parent);
    default: return std::nullopt;
  }
}

ARMInterruptAttrInterruptType ARMInterruptAttr::interrupt(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<ARMInterruptAttrInterruptType>(self.getVal11());
}

std::string_view ARMInterruptAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AMDGPUWavesPerEUAttr> AMDGPUWavesPerEUAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AMDGPUWavesPerEUAttr> AMDGPUWavesPerEUAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AMDGPUWavesPerEUAttr> AMDGPUWavesPerEUAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::AMDGPU_WAVES_PER_EU:
      return reinterpret_cast<const AMDGPUWavesPerEUAttr &>(parent);
    default: return std::nullopt;
  }
}

Expr AMDGPUWavesPerEUAttr::max(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr AMDGPUWavesPerEUAttr::min(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal17());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::string_view AMDGPUWavesPerEUAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AMDGPUNumVGPRAttr> AMDGPUNumVGPRAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AMDGPUNumVGPRAttr> AMDGPUNumVGPRAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AMDGPUNumVGPRAttr> AMDGPUNumVGPRAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::AMDGPU_NUM_VGPR:
      return reinterpret_cast<const AMDGPUNumVGPRAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AMDGPUNumVGPRAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AMDGPUNumSGPRAttr> AMDGPUNumSGPRAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AMDGPUNumSGPRAttr> AMDGPUNumSGPRAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AMDGPUNumSGPRAttr> AMDGPUNumSGPRAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::AMDGPU_NUM_SGPR:
      return reinterpret_cast<const AMDGPUNumSGPRAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AMDGPUNumSGPRAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AMDGPUFlatWorkGroupSizeAttr> AMDGPUFlatWorkGroupSizeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AMDGPUFlatWorkGroupSizeAttr> AMDGPUFlatWorkGroupSizeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AMDGPUFlatWorkGroupSizeAttr> AMDGPUFlatWorkGroupSizeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::AMDGPU_FLAT_WORK_GROUP_SIZE:
      return reinterpret_cast<const AMDGPUFlatWorkGroupSizeAttr &>(parent);
    default: return std::nullopt;
  }
}

Expr AMDGPUFlatWorkGroupSizeAttr::max(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr AMDGPUFlatWorkGroupSizeAttr::min(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal17());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::string_view AMDGPUFlatWorkGroupSizeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AArch64VectorPcsAttr> AArch64VectorPcsAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AArch64VectorPcsAttr> AArch64VectorPcsAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AArch64VectorPcsAttr> AArch64VectorPcsAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::A_ARCH64_VECTOR_PCS:
      return reinterpret_cast<const AArch64VectorPcsAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AArch64VectorPcsAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<XRayLogArgsAttr> XRayLogArgsAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<XRayLogArgsAttr> XRayLogArgsAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<XRayLogArgsAttr> XRayLogArgsAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::X_RAY_LOG_ARGS:
      return reinterpret_cast<const XRayLogArgsAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view XRayLogArgsAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<XRayInstrumentAttr> XRayInstrumentAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<XRayInstrumentAttr> XRayInstrumentAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<XRayInstrumentAttr> XRayInstrumentAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::X_RAY_INSTRUMENT:
      return reinterpret_cast<const XRayInstrumentAttr &>(parent);
    default: return std::nullopt;
  }
}

bool XRayInstrumentAttr::always_x_ray_instrument(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

XRayInstrumentAttrSpelling XRayInstrumentAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<XRayInstrumentAttrSpelling>(self.getVal11());
}

std::string_view XRayInstrumentAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool XRayInstrumentAttr::never_x_ray_instrument(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal14();
}

std::optional<X86ForceAlignArgPointerAttr> X86ForceAlignArgPointerAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<X86ForceAlignArgPointerAttr> X86ForceAlignArgPointerAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<X86ForceAlignArgPointerAttr> X86ForceAlignArgPointerAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::X86_FORCE_ALIGN_ARG_POINTER:
      return reinterpret_cast<const X86ForceAlignArgPointerAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view X86ForceAlignArgPointerAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<WorkGroupSizeHintAttr> WorkGroupSizeHintAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<WorkGroupSizeHintAttr> WorkGroupSizeHintAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<WorkGroupSizeHintAttr> WorkGroupSizeHintAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::WORK_GROUP_SIZE_HINT:
      return reinterpret_cast<const WorkGroupSizeHintAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view WorkGroupSizeHintAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<WebAssemblyImportNameAttr> WebAssemblyImportNameAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<WebAssemblyImportNameAttr> WebAssemblyImportNameAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<WebAssemblyImportNameAttr> WebAssemblyImportNameAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::WEB_ASSEMBLY_IMPORT_NAME:
      return reinterpret_cast<const WebAssemblyImportNameAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view WebAssemblyImportNameAttr::import_name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view WebAssemblyImportNameAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<WebAssemblyImportModuleAttr> WebAssemblyImportModuleAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<WebAssemblyImportModuleAttr> WebAssemblyImportModuleAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<WebAssemblyImportModuleAttr> WebAssemblyImportModuleAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::WEB_ASSEMBLY_IMPORT_MODULE:
      return reinterpret_cast<const WebAssemblyImportModuleAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view WebAssemblyImportModuleAttr::import_module(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view WebAssemblyImportModuleAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<WebAssemblyExportNameAttr> WebAssemblyExportNameAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<WebAssemblyExportNameAttr> WebAssemblyExportNameAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<WebAssemblyExportNameAttr> WebAssemblyExportNameAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::WEB_ASSEMBLY_EXPORT_NAME:
      return reinterpret_cast<const WebAssemblyExportNameAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view WebAssemblyExportNameAttr::export_name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view WebAssemblyExportNameAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<WeakRefAttr> WeakRefAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<WeakRefAttr> WeakRefAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<WeakRefAttr> WeakRefAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::WEAK_REF:
      return reinterpret_cast<const WeakRefAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view WeakRefAttr::aliasee(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view WeakRefAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<WeakImportAttr> WeakImportAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<WeakImportAttr> WeakImportAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<WeakImportAttr> WeakImportAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::WEAK_IMPORT:
      return reinterpret_cast<const WeakImportAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view WeakImportAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<WeakAttr> WeakAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<WeakAttr> WeakAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<WeakAttr> WeakAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::WEAK:
      return reinterpret_cast<const WeakAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view WeakAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<WarnUnusedResultAttr> WarnUnusedResultAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<WarnUnusedResultAttr> WarnUnusedResultAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<WarnUnusedResultAttr> WarnUnusedResultAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::WARN_UNUSED_RESULT:
      return reinterpret_cast<const WarnUnusedResultAttr &>(parent);
    default: return std::nullopt;
  }
}

bool WarnUnusedResultAttr::is_cxx11_no_discard(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::string_view WarnUnusedResultAttr::message(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

WarnUnusedResultAttrSpelling WarnUnusedResultAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<WarnUnusedResultAttrSpelling>(self.getVal11());
}

std::string_view WarnUnusedResultAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<WarnUnusedAttr> WarnUnusedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<WarnUnusedAttr> WarnUnusedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<WarnUnusedAttr> WarnUnusedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::WARN_UNUSED:
      return reinterpret_cast<const WarnUnusedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view WarnUnusedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<VisibilityAttr> VisibilityAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<VisibilityAttr> VisibilityAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<VisibilityAttr> VisibilityAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::VISIBILITY:
      return reinterpret_cast<const VisibilityAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view VisibilityAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

VisibilityAttrVisibilityType VisibilityAttr::visibility(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<VisibilityAttrVisibilityType>(self.getVal11());
}

std::optional<VectorCallAttr> VectorCallAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<VectorCallAttr> VectorCallAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<VectorCallAttr> VectorCallAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::VECTOR_CALL:
      return reinterpret_cast<const VectorCallAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view VectorCallAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<VecTypeHintAttr> VecTypeHintAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<VecTypeHintAttr> VecTypeHintAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<VecTypeHintAttr> VecTypeHintAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::VEC_TYPE_HINT:
      return reinterpret_cast<const VecTypeHintAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view VecTypeHintAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

Type VecTypeHintAttr::type_hint(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return fragment->TypeFor(fragment, id, false).value();
}

Type VecTypeHintAttr::type_hint_token(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal17());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<VecReturnAttr> VecReturnAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<VecReturnAttr> VecReturnAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<VecReturnAttr> VecReturnAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::VEC_RETURN:
      return reinterpret_cast<const VecReturnAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view VecReturnAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<UuidAttr> UuidAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<UuidAttr> UuidAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<UuidAttr> UuidAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::UUID:
      return reinterpret_cast<const UuidAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view UuidAttr::guid(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

MSGuidDecl UuidAttr::guid_declaration(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return MSGuidDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::string_view UuidAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<UsingIfExistsAttr> UsingIfExistsAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<UsingIfExistsAttr> UsingIfExistsAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<UsingIfExistsAttr> UsingIfExistsAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::USING_IF_EXISTS:
      return reinterpret_cast<const UsingIfExistsAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view UsingIfExistsAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<UsedAttr> UsedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<UsedAttr> UsedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<UsedAttr> UsedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::USED:
      return reinterpret_cast<const UsedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view UsedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<UnusedAttr> UnusedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<UnusedAttr> UnusedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<UnusedAttr> UnusedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::UNUSED:
      return reinterpret_cast<const UnusedAttr &>(parent);
    default: return std::nullopt;
  }
}

UnusedAttrSpelling UnusedAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<UnusedAttrSpelling>(self.getVal11());
}

std::string_view UnusedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<UninitializedAttr> UninitializedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<UninitializedAttr> UninitializedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<UninitializedAttr> UninitializedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::UNINITIALIZED:
      return reinterpret_cast<const UninitializedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view UninitializedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<UnavailableAttr> UnavailableAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<UnavailableAttr> UnavailableAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<UnavailableAttr> UnavailableAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::UNAVAILABLE:
      return reinterpret_cast<const UnavailableAttr &>(parent);
    default: return std::nullopt;
  }
}

UnavailableAttrImplicitReason UnavailableAttr::implicit_reason(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<UnavailableAttrImplicitReason>(self.getVal11());
}

std::string_view UnavailableAttr::message(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view UnavailableAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<TypeVisibilityAttr> TypeVisibilityAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TypeVisibilityAttr> TypeVisibilityAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TypeVisibilityAttr> TypeVisibilityAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TYPE_VISIBILITY:
      return reinterpret_cast<const TypeVisibilityAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view TypeVisibilityAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

TypeVisibilityAttrVisibilityType TypeVisibilityAttr::visibility(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<TypeVisibilityAttrVisibilityType>(self.getVal11());
}

std::optional<TypeTagForDatatypeAttr> TypeTagForDatatypeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TypeTagForDatatypeAttr> TypeTagForDatatypeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TypeTagForDatatypeAttr> TypeTagForDatatypeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TYPE_TAG_FOR_DATATYPE:
      return reinterpret_cast<const TypeTagForDatatypeAttr &>(parent);
    default: return std::nullopt;
  }
}

bool TypeTagForDatatypeAttr::layout_compatible(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

Type TypeTagForDatatypeAttr::matching_c_type(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return fragment->TypeFor(fragment, id, false).value();
}

Type TypeTagForDatatypeAttr::matching_c_type_token(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal17());
  return fragment->TypeFor(fragment, id, false).value();
}

bool TypeTagForDatatypeAttr::must_be_null(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal14();
}

std::string_view TypeTagForDatatypeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<TryAcquireCapabilityAttr> TryAcquireCapabilityAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TryAcquireCapabilityAttr> TryAcquireCapabilityAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TryAcquireCapabilityAttr> TryAcquireCapabilityAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TRY_ACQUIRE_CAPABILITY:
      return reinterpret_cast<const TryAcquireCapabilityAttr &>(parent);
    default: return std::nullopt;
  }
}

TryAcquireCapabilityAttrSpelling TryAcquireCapabilityAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<TryAcquireCapabilityAttrSpelling>(self.getVal11());
}

std::string_view TryAcquireCapabilityAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

Expr TryAcquireCapabilityAttr::success_value(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool TryAcquireCapabilityAttr::is_shared(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::optional<TrivialABIAttr> TrivialABIAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TrivialABIAttr> TrivialABIAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TrivialABIAttr> TrivialABIAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TRIVIAL_ABI:
      return reinterpret_cast<const TrivialABIAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view TrivialABIAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<TransparentUnionAttr> TransparentUnionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TransparentUnionAttr> TransparentUnionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TransparentUnionAttr> TransparentUnionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TRANSPARENT_UNION:
      return reinterpret_cast<const TransparentUnionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view TransparentUnionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ThisCallAttr> ThisCallAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ThisCallAttr> ThisCallAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ThisCallAttr> ThisCallAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::THIS_CALL:
      return reinterpret_cast<const ThisCallAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ThisCallAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<TestTypestateAttr> TestTypestateAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TestTypestateAttr> TestTypestateAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TestTypestateAttr> TestTypestateAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TEST_TYPESTATE:
      return reinterpret_cast<const TestTypestateAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view TestTypestateAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

TestTypestateAttrConsumedState TestTypestateAttr::test_state(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<TestTypestateAttrConsumedState>(self.getVal11());
}

std::optional<TargetClonesAttr> TargetClonesAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TargetClonesAttr> TargetClonesAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TargetClonesAttr> TargetClonesAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TARGET_CLONES:
      return reinterpret_cast<const TargetClonesAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view TargetClonesAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<TargetAttr> TargetAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TargetAttr> TargetAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TargetAttr> TargetAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TARGET:
      return reinterpret_cast<const TargetAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view TargetAttr::architecture(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view TargetAttr::features_string(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::string_view TargetAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal18();
  return std::string_view(data.cStr(), data.size());
}

bool TargetAttr::is_default_version(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::optional<TLSModelAttr> TLSModelAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<TLSModelAttr> TLSModelAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<TLSModelAttr> TLSModelAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::TLS_MODEL:
      return reinterpret_cast<const TLSModelAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view TLSModelAttr::model(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view TLSModelAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SysVABIAttr> SysVABIAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SysVABIAttr> SysVABIAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SysVABIAttr> SysVABIAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SYS_VABI:
      return reinterpret_cast<const SysVABIAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SysVABIAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftPrivateAttr> SwiftPrivateAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftPrivateAttr> SwiftPrivateAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftPrivateAttr> SwiftPrivateAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_PRIVATE:
      return reinterpret_cast<const SwiftPrivateAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftPrivateAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftNewTypeAttr> SwiftNewTypeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftNewTypeAttr> SwiftNewTypeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftNewTypeAttr> SwiftNewTypeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_NEW_TYPE:
      return reinterpret_cast<const SwiftNewTypeAttr &>(parent);
    default: return std::nullopt;
  }
}

SwiftNewTypeAttrNewtypeKind SwiftNewTypeAttr::newtype_kind(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<SwiftNewTypeAttrNewtypeKind>(self.getVal11());
}

SwiftNewTypeAttrSpelling SwiftNewTypeAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<SwiftNewTypeAttrSpelling>(self.getVal15());
}

std::string_view SwiftNewTypeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftNameAttr> SwiftNameAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftNameAttr> SwiftNameAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftNameAttr> SwiftNameAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_NAME:
      return reinterpret_cast<const SwiftNameAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftNameAttr::name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view SwiftNameAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftErrorAttr> SwiftErrorAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftErrorAttr> SwiftErrorAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftErrorAttr> SwiftErrorAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_ERROR:
      return reinterpret_cast<const SwiftErrorAttr &>(parent);
    default: return std::nullopt;
  }
}

SwiftErrorAttrConventionKind SwiftErrorAttr::convention(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<SwiftErrorAttrConventionKind>(self.getVal11());
}

std::string_view SwiftErrorAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftCallAttr> SwiftCallAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftCallAttr> SwiftCallAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftCallAttr> SwiftCallAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_CALL:
      return reinterpret_cast<const SwiftCallAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftCallAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftBridgedTypedefAttr> SwiftBridgedTypedefAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftBridgedTypedefAttr> SwiftBridgedTypedefAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftBridgedTypedefAttr> SwiftBridgedTypedefAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_BRIDGED_TYPEDEF:
      return reinterpret_cast<const SwiftBridgedTypedefAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftBridgedTypedefAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftBridgeAttr> SwiftBridgeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftBridgeAttr> SwiftBridgeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftBridgeAttr> SwiftBridgeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_BRIDGE:
      return reinterpret_cast<const SwiftBridgeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftBridgeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view SwiftBridgeAttr::swift_type(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftAttrAttr> SwiftAttrAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftAttrAttr> SwiftAttrAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftAttrAttr> SwiftAttrAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_ATTR:
      return reinterpret_cast<const SwiftAttrAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftAttrAttr::attribute(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view SwiftAttrAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftAsyncNameAttr> SwiftAsyncNameAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftAsyncNameAttr> SwiftAsyncNameAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftAsyncNameAttr> SwiftAsyncNameAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_ASYNC_NAME:
      return reinterpret_cast<const SwiftAsyncNameAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftAsyncNameAttr::name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view SwiftAsyncNameAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftAsyncErrorAttr> SwiftAsyncErrorAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftAsyncErrorAttr> SwiftAsyncErrorAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftAsyncErrorAttr> SwiftAsyncErrorAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_ASYNC_ERROR:
      return reinterpret_cast<const SwiftAsyncErrorAttr &>(parent);
    default: return std::nullopt;
  }
}

SwiftAsyncErrorAttrConventionKind SwiftAsyncErrorAttr::convention(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<SwiftAsyncErrorAttrConventionKind>(self.getVal11());
}

std::string_view SwiftAsyncErrorAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftAsyncCallAttr> SwiftAsyncCallAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftAsyncCallAttr> SwiftAsyncCallAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftAsyncCallAttr> SwiftAsyncCallAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_ASYNC_CALL:
      return reinterpret_cast<const SwiftAsyncCallAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftAsyncCallAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftAsyncAttr> SwiftAsyncAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftAsyncAttr> SwiftAsyncAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftAsyncAttr> SwiftAsyncAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_ASYNC:
      return reinterpret_cast<const SwiftAsyncAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftAsyncAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<StrictFPAttr> StrictFPAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<StrictFPAttr> StrictFPAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<StrictFPAttr> StrictFPAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::STRICT_FP:
      return reinterpret_cast<const StrictFPAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view StrictFPAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<StdCallAttr> StdCallAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<StdCallAttr> StdCallAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<StdCallAttr> StdCallAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::STD_CALL:
      return reinterpret_cast<const StdCallAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view StdCallAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<StandaloneDebugAttr> StandaloneDebugAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<StandaloneDebugAttr> StandaloneDebugAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<StandaloneDebugAttr> StandaloneDebugAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::STANDALONE_DEBUG:
      return reinterpret_cast<const StandaloneDebugAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view StandaloneDebugAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SpeculativeLoadHardeningAttr> SpeculativeLoadHardeningAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SpeculativeLoadHardeningAttr> SpeculativeLoadHardeningAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SpeculativeLoadHardeningAttr> SpeculativeLoadHardeningAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SPECULATIVE_LOAD_HARDENING:
      return reinterpret_cast<const SpeculativeLoadHardeningAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SpeculativeLoadHardeningAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SharedTrylockFunctionAttr> SharedTrylockFunctionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SharedTrylockFunctionAttr> SharedTrylockFunctionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SharedTrylockFunctionAttr> SharedTrylockFunctionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SHARED_TRYLOCK_FUNCTION:
      return reinterpret_cast<const SharedTrylockFunctionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SharedTrylockFunctionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

Expr SharedTrylockFunctionAttr::success_value(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<SetTypestateAttr> SetTypestateAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SetTypestateAttr> SetTypestateAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SetTypestateAttr> SetTypestateAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SET_TYPESTATE:
      return reinterpret_cast<const SetTypestateAttr &>(parent);
    default: return std::nullopt;
  }
}

SetTypestateAttrConsumedState SetTypestateAttr::new_state(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<SetTypestateAttrConsumedState>(self.getVal11());
}

std::string_view SetTypestateAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SentinelAttr> SentinelAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SentinelAttr> SentinelAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SentinelAttr> SentinelAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SENTINEL:
      return reinterpret_cast<const SentinelAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SentinelAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SelectAnyAttr> SelectAnyAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SelectAnyAttr> SelectAnyAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SelectAnyAttr> SelectAnyAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SELECT_ANY:
      return reinterpret_cast<const SelectAnyAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SelectAnyAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SectionAttr> SectionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SectionAttr> SectionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SectionAttr> SectionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SECTION:
      return reinterpret_cast<const SectionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SectionAttr::name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

SectionAttrSpelling SectionAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<SectionAttrSpelling>(self.getVal11());
}

std::string_view SectionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ScopedLockableAttr> ScopedLockableAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ScopedLockableAttr> ScopedLockableAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ScopedLockableAttr> ScopedLockableAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SCOPED_LOCKABLE:
      return reinterpret_cast<const ScopedLockableAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ScopedLockableAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SYCLSpecialClassAttr> SYCLSpecialClassAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SYCLSpecialClassAttr> SYCLSpecialClassAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SYCLSpecialClassAttr> SYCLSpecialClassAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SYCL_SPECIAL_CLASS:
      return reinterpret_cast<const SYCLSpecialClassAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SYCLSpecialClassAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SYCLKernelAttr> SYCLKernelAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SYCLKernelAttr> SYCLKernelAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SYCLKernelAttr> SYCLKernelAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SYCL_KERNEL:
      return reinterpret_cast<const SYCLKernelAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SYCLKernelAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ReturnsTwiceAttr> ReturnsTwiceAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ReturnsTwiceAttr> ReturnsTwiceAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ReturnsTwiceAttr> ReturnsTwiceAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::RETURNS_TWICE:
      return reinterpret_cast<const ReturnsTwiceAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ReturnsTwiceAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ReturnsNonNullAttr> ReturnsNonNullAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ReturnsNonNullAttr> ReturnsNonNullAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ReturnsNonNullAttr> ReturnsNonNullAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::RETURNS_NON_NULL:
      return reinterpret_cast<const ReturnsNonNullAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ReturnsNonNullAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ReturnTypestateAttr> ReturnTypestateAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ReturnTypestateAttr> ReturnTypestateAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ReturnTypestateAttr> ReturnTypestateAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::RETURN_TYPESTATE:
      return reinterpret_cast<const ReturnTypestateAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ReturnTypestateAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

ReturnTypestateAttrConsumedState ReturnTypestateAttr::state(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<ReturnTypestateAttrConsumedState>(self.getVal11());
}

std::optional<RetainAttr> RetainAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<RetainAttr> RetainAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<RetainAttr> RetainAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::RETAIN:
      return reinterpret_cast<const RetainAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view RetainAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<RestrictAttr> RestrictAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<RestrictAttr> RestrictAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<RestrictAttr> RestrictAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::RESTRICT:
      return reinterpret_cast<const RestrictAttr &>(parent);
    default: return std::nullopt;
  }
}

RestrictAttrSpelling RestrictAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<RestrictAttrSpelling>(self.getVal11());
}

std::string_view RestrictAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<RequiresCapabilityAttr> RequiresCapabilityAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<RequiresCapabilityAttr> RequiresCapabilityAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<RequiresCapabilityAttr> RequiresCapabilityAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::REQUIRES_CAPABILITY:
      return reinterpret_cast<const RequiresCapabilityAttr &>(parent);
    default: return std::nullopt;
  }
}

RequiresCapabilityAttrSpelling RequiresCapabilityAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<RequiresCapabilityAttrSpelling>(self.getVal11());
}

std::string_view RequiresCapabilityAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool RequiresCapabilityAttr::is_shared(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::optional<ReqdWorkGroupSizeAttr> ReqdWorkGroupSizeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ReqdWorkGroupSizeAttr> ReqdWorkGroupSizeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ReqdWorkGroupSizeAttr> ReqdWorkGroupSizeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::REQD_WORK_GROUP_SIZE:
      return reinterpret_cast<const ReqdWorkGroupSizeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ReqdWorkGroupSizeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ReleaseCapabilityAttr> ReleaseCapabilityAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ReleaseCapabilityAttr> ReleaseCapabilityAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ReleaseCapabilityAttr> ReleaseCapabilityAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::RELEASE_CAPABILITY:
      return reinterpret_cast<const ReleaseCapabilityAttr &>(parent);
    default: return std::nullopt;
  }
}

ReleaseCapabilityAttrSpelling ReleaseCapabilityAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<ReleaseCapabilityAttrSpelling>(self.getVal11());
}

std::string_view ReleaseCapabilityAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool ReleaseCapabilityAttr::is_generic(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

bool ReleaseCapabilityAttr::is_shared(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal14();
}

std::optional<ReinitializesAttr> ReinitializesAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ReinitializesAttr> ReinitializesAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ReinitializesAttr> ReinitializesAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::REINITIALIZES:
      return reinterpret_cast<const ReinitializesAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ReinitializesAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<RegCallAttr> RegCallAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<RegCallAttr> RegCallAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<RegCallAttr> RegCallAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::REG_CALL:
      return reinterpret_cast<const RegCallAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view RegCallAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<RISCVInterruptAttr> RISCVInterruptAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<RISCVInterruptAttr> RISCVInterruptAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<RISCVInterruptAttr> RISCVInterruptAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::RISCV_INTERRUPT:
      return reinterpret_cast<const RISCVInterruptAttr &>(parent);
    default: return std::nullopt;
  }
}

RISCVInterruptAttrInterruptType RISCVInterruptAttr::interrupt(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<RISCVInterruptAttrInterruptType>(self.getVal11());
}

std::string_view RISCVInterruptAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PureAttr> PureAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PureAttr> PureAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PureAttr> PureAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PURE:
      return reinterpret_cast<const PureAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PureAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PtGuardedVarAttr> PtGuardedVarAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PtGuardedVarAttr> PtGuardedVarAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PtGuardedVarAttr> PtGuardedVarAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PT_GUARDED_VAR:
      return reinterpret_cast<const PtGuardedVarAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PtGuardedVarAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PtGuardedByAttr> PtGuardedByAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PtGuardedByAttr> PtGuardedByAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PtGuardedByAttr> PtGuardedByAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PT_GUARDED_BY:
      return reinterpret_cast<const PtGuardedByAttr &>(parent);
    default: return std::nullopt;
  }
}

Expr PtGuardedByAttr::argument(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::string_view PtGuardedByAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PreserveMostAttr> PreserveMostAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PreserveMostAttr> PreserveMostAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PreserveMostAttr> PreserveMostAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PRESERVE_MOST:
      return reinterpret_cast<const PreserveMostAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PreserveMostAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PreserveAllAttr> PreserveAllAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PreserveAllAttr> PreserveAllAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PreserveAllAttr> PreserveAllAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PRESERVE_ALL:
      return reinterpret_cast<const PreserveAllAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PreserveAllAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PreferredNameAttr> PreferredNameAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PreferredNameAttr> PreferredNameAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PreferredNameAttr> PreferredNameAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PREFERRED_NAME:
      return reinterpret_cast<const PreferredNameAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PreferredNameAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

Type PreferredNameAttr::typedef_type(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return fragment->TypeFor(fragment, id, false).value();
}

Type PreferredNameAttr::typedef_type_token(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal17());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<PragmaClangTextSectionAttr> PragmaClangTextSectionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PragmaClangTextSectionAttr> PragmaClangTextSectionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PragmaClangTextSectionAttr> PragmaClangTextSectionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PRAGMA_CLANG_TEXT_SECTION:
      return reinterpret_cast<const PragmaClangTextSectionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PragmaClangTextSectionAttr::name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view PragmaClangTextSectionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PragmaClangRodataSectionAttr> PragmaClangRodataSectionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PragmaClangRodataSectionAttr> PragmaClangRodataSectionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PragmaClangRodataSectionAttr> PragmaClangRodataSectionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PRAGMA_CLANG_RODATA_SECTION:
      return reinterpret_cast<const PragmaClangRodataSectionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PragmaClangRodataSectionAttr::name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view PragmaClangRodataSectionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PragmaClangRelroSectionAttr> PragmaClangRelroSectionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PragmaClangRelroSectionAttr> PragmaClangRelroSectionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PragmaClangRelroSectionAttr> PragmaClangRelroSectionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PRAGMA_CLANG_RELRO_SECTION:
      return reinterpret_cast<const PragmaClangRelroSectionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PragmaClangRelroSectionAttr::name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view PragmaClangRelroSectionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PragmaClangDataSectionAttr> PragmaClangDataSectionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PragmaClangDataSectionAttr> PragmaClangDataSectionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PragmaClangDataSectionAttr> PragmaClangDataSectionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PRAGMA_CLANG_DATA_SECTION:
      return reinterpret_cast<const PragmaClangDataSectionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PragmaClangDataSectionAttr::name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view PragmaClangDataSectionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PragmaClangBSSSectionAttr> PragmaClangBSSSectionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PragmaClangBSSSectionAttr> PragmaClangBSSSectionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PragmaClangBSSSectionAttr> PragmaClangBSSSectionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PRAGMA_CLANG_BSS_SECTION:
      return reinterpret_cast<const PragmaClangBSSSectionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PragmaClangBSSSectionAttr::name(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view PragmaClangBSSSectionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PointerAttr> PointerAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PointerAttr> PointerAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PointerAttr> PointerAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::POINTER:
      return reinterpret_cast<const PointerAttr &>(parent);
    default: return std::nullopt;
  }
}

Type PointerAttr::deref_type(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return fragment->TypeFor(fragment, id, false).value();
}

Type PointerAttr::deref_type_token(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal17());
  return fragment->TypeFor(fragment, id, false).value();
}

std::string_view PointerAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PcsAttr> PcsAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PcsAttr> PcsAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PcsAttr> PcsAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PCS:
      return reinterpret_cast<const PcsAttr &>(parent);
    default: return std::nullopt;
  }
}

PcsAttrPCSType PcsAttr::pcs(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<PcsAttrPCSType>(self.getVal11());
}

std::string_view PcsAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PatchableFunctionEntryAttr> PatchableFunctionEntryAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PatchableFunctionEntryAttr> PatchableFunctionEntryAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PatchableFunctionEntryAttr> PatchableFunctionEntryAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PATCHABLE_FUNCTION_ENTRY:
      return reinterpret_cast<const PatchableFunctionEntryAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PatchableFunctionEntryAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PascalAttr> PascalAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PascalAttr> PascalAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PascalAttr> PascalAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PASCAL:
      return reinterpret_cast<const PascalAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PascalAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ParamTypestateAttr> ParamTypestateAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ParamTypestateAttr> ParamTypestateAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ParamTypestateAttr> ParamTypestateAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PARAM_TYPESTATE:
      return reinterpret_cast<const ParamTypestateAttr &>(parent);
    default: return std::nullopt;
  }
}

ParamTypestateAttrConsumedState ParamTypestateAttr::parameter_state(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<ParamTypestateAttrConsumedState>(self.getVal11());
}

std::string_view ParamTypestateAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PackedAttr> PackedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PackedAttr> PackedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PackedAttr> PackedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PACKED:
      return reinterpret_cast<const PackedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PackedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OwnershipAttr> OwnershipAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OwnershipAttr> OwnershipAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OwnershipAttr> OwnershipAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OWNERSHIP:
      return reinterpret_cast<const OwnershipAttr &>(parent);
    default: return std::nullopt;
  }
}

OwnershipAttrOwnershipKind OwnershipAttr::own_kind(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<OwnershipAttrOwnershipKind>(self.getVal11());
}

OwnershipAttrSpelling OwnershipAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<OwnershipAttrSpelling>(self.getVal15());
}

std::string_view OwnershipAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool OwnershipAttr::is_holds(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

bool OwnershipAttr::is_returns(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal14();
}

bool OwnershipAttr::is_takes(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal19();
}

std::optional<OwnerAttr> OwnerAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OwnerAttr> OwnerAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OwnerAttr> OwnerAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OWNER:
      return reinterpret_cast<const OwnerAttr &>(parent);
    default: return std::nullopt;
  }
}

Type OwnerAttr::deref_type(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return fragment->TypeFor(fragment, id, false).value();
}

Type OwnerAttr::deref_type_token(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal17());
  return fragment->TypeFor(fragment, id, false).value();
}

std::string_view OwnerAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OverrideAttr> OverrideAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OverrideAttr> OverrideAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OverrideAttr> OverrideAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OVERRIDE:
      return reinterpret_cast<const OverrideAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OverrideAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OptimizeNoneAttr> OptimizeNoneAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OptimizeNoneAttr> OptimizeNoneAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OptimizeNoneAttr> OptimizeNoneAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPTIMIZE_NONE:
      return reinterpret_cast<const OptimizeNoneAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OptimizeNoneAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OpenCLKernelAttr> OpenCLKernelAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OpenCLKernelAttr> OpenCLKernelAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OpenCLKernelAttr> OpenCLKernelAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPEN_CL_KERNEL:
      return reinterpret_cast<const OpenCLKernelAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OpenCLKernelAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OpenCLIntelReqdSubGroupSizeAttr> OpenCLIntelReqdSubGroupSizeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OpenCLIntelReqdSubGroupSizeAttr> OpenCLIntelReqdSubGroupSizeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OpenCLIntelReqdSubGroupSizeAttr> OpenCLIntelReqdSubGroupSizeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OPEN_CL_INTEL_REQD_SUB_GROUP_SIZE:
      return reinterpret_cast<const OpenCLIntelReqdSubGroupSizeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OpenCLIntelReqdSubGroupSizeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCSubclassingRestrictedAttr> ObjCSubclassingRestrictedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCSubclassingRestrictedAttr> ObjCSubclassingRestrictedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCSubclassingRestrictedAttr> ObjCSubclassingRestrictedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_SUBCLASSING_RESTRICTED:
      return reinterpret_cast<const ObjCSubclassingRestrictedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCSubclassingRestrictedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCRootClassAttr> ObjCRootClassAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCRootClassAttr> ObjCRootClassAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCRootClassAttr> ObjCRootClassAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_ROOT_CLASS:
      return reinterpret_cast<const ObjCRootClassAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCRootClassAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCReturnsInnerPointerAttr> ObjCReturnsInnerPointerAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCReturnsInnerPointerAttr> ObjCReturnsInnerPointerAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCReturnsInnerPointerAttr> ObjCReturnsInnerPointerAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_RETURNS_INNER_POINTER:
      return reinterpret_cast<const ObjCReturnsInnerPointerAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCReturnsInnerPointerAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCRequiresSuperAttr> ObjCRequiresSuperAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCRequiresSuperAttr> ObjCRequiresSuperAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCRequiresSuperAttr> ObjCRequiresSuperAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_REQUIRES_SUPER:
      return reinterpret_cast<const ObjCRequiresSuperAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCRequiresSuperAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCRequiresPropertyDefsAttr> ObjCRequiresPropertyDefsAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCRequiresPropertyDefsAttr> ObjCRequiresPropertyDefsAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCRequiresPropertyDefsAttr> ObjCRequiresPropertyDefsAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_REQUIRES_PROPERTY_DEFS:
      return reinterpret_cast<const ObjCRequiresPropertyDefsAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCRequiresPropertyDefsAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCPreciseLifetimeAttr> ObjCPreciseLifetimeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCPreciseLifetimeAttr> ObjCPreciseLifetimeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCPreciseLifetimeAttr> ObjCPreciseLifetimeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_PRECISE_LIFETIME:
      return reinterpret_cast<const ObjCPreciseLifetimeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCPreciseLifetimeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCOwnershipAttr> ObjCOwnershipAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCOwnershipAttr> ObjCOwnershipAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCOwnershipAttr> ObjCOwnershipAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_OWNERSHIP:
      return reinterpret_cast<const ObjCOwnershipAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCOwnershipAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCNSObjectAttr> ObjCNSObjectAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCNSObjectAttr> ObjCNSObjectAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCNSObjectAttr> ObjCNSObjectAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_CNS_OBJECT:
      return reinterpret_cast<const ObjCNSObjectAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCNSObjectAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCMethodFamilyAttr> ObjCMethodFamilyAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCMethodFamilyAttr> ObjCMethodFamilyAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCMethodFamilyAttr> ObjCMethodFamilyAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_METHOD_FAMILY:
      return reinterpret_cast<const ObjCMethodFamilyAttr &>(parent);
    default: return std::nullopt;
  }
}

ObjCMethodFamilyAttrFamilyKind ObjCMethodFamilyAttr::family(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<ObjCMethodFamilyAttrFamilyKind>(self.getVal11());
}

std::string_view ObjCMethodFamilyAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCIndependentClassAttr> ObjCIndependentClassAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCIndependentClassAttr> ObjCIndependentClassAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCIndependentClassAttr> ObjCIndependentClassAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_INDEPENDENT_CLASS:
      return reinterpret_cast<const ObjCIndependentClassAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCIndependentClassAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCExternallyRetainedAttr> ObjCExternallyRetainedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCExternallyRetainedAttr> ObjCExternallyRetainedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCExternallyRetainedAttr> ObjCExternallyRetainedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_EXTERNALLY_RETAINED:
      return reinterpret_cast<const ObjCExternallyRetainedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCExternallyRetainedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCExplicitProtocolImplAttr> ObjCExplicitProtocolImplAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCExplicitProtocolImplAttr> ObjCExplicitProtocolImplAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCExplicitProtocolImplAttr> ObjCExplicitProtocolImplAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_EXPLICIT_PROTOCOL_IMPL:
      return reinterpret_cast<const ObjCExplicitProtocolImplAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCExplicitProtocolImplAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCExceptionAttr> ObjCExceptionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCExceptionAttr> ObjCExceptionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCExceptionAttr> ObjCExceptionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_EXCEPTION:
      return reinterpret_cast<const ObjCExceptionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCExceptionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCBridgeRelatedAttr> ObjCBridgeRelatedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCBridgeRelatedAttr> ObjCBridgeRelatedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCBridgeRelatedAttr> ObjCBridgeRelatedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_BRIDGE_RELATED:
      return reinterpret_cast<const ObjCBridgeRelatedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCBridgeRelatedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCBridgeMutableAttr> ObjCBridgeMutableAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCBridgeMutableAttr> ObjCBridgeMutableAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCBridgeMutableAttr> ObjCBridgeMutableAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_BRIDGE_MUTABLE:
      return reinterpret_cast<const ObjCBridgeMutableAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCBridgeMutableAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCBridgeAttr> ObjCBridgeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ObjCBridgeAttr> ObjCBridgeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ObjCBridgeAttr> ObjCBridgeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OBJ_C_BRIDGE:
      return reinterpret_cast<const ObjCBridgeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCBridgeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OSReturnsRetainedOnZeroAttr> OSReturnsRetainedOnZeroAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OSReturnsRetainedOnZeroAttr> OSReturnsRetainedOnZeroAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OSReturnsRetainedOnZeroAttr> OSReturnsRetainedOnZeroAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OS_RETURNS_RETAINED_ON_ZERO:
      return reinterpret_cast<const OSReturnsRetainedOnZeroAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OSReturnsRetainedOnZeroAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OSReturnsRetainedOnNonZeroAttr> OSReturnsRetainedOnNonZeroAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OSReturnsRetainedOnNonZeroAttr> OSReturnsRetainedOnNonZeroAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OSReturnsRetainedOnNonZeroAttr> OSReturnsRetainedOnNonZeroAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OS_RETURNS_RETAINED_ON_NON_ZERO:
      return reinterpret_cast<const OSReturnsRetainedOnNonZeroAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OSReturnsRetainedOnNonZeroAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OSReturnsRetainedAttr> OSReturnsRetainedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OSReturnsRetainedAttr> OSReturnsRetainedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OSReturnsRetainedAttr> OSReturnsRetainedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OS_RETURNS_RETAINED:
      return reinterpret_cast<const OSReturnsRetainedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OSReturnsRetainedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OSReturnsNotRetainedAttr> OSReturnsNotRetainedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OSReturnsNotRetainedAttr> OSReturnsNotRetainedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OSReturnsNotRetainedAttr> OSReturnsNotRetainedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OS_RETURNS_NOT_RETAINED:
      return reinterpret_cast<const OSReturnsNotRetainedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OSReturnsNotRetainedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OSConsumesThisAttr> OSConsumesThisAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OSConsumesThisAttr> OSConsumesThisAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OSConsumesThisAttr> OSConsumesThisAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OS_CONSUMES_THIS:
      return reinterpret_cast<const OSConsumesThisAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OSConsumesThisAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OMPThreadPrivateDeclAttr> OMPThreadPrivateDeclAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OMPThreadPrivateDeclAttr> OMPThreadPrivateDeclAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OMPThreadPrivateDeclAttr> OMPThreadPrivateDeclAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OMP_THREAD_PRIVATE_DECL:
      return reinterpret_cast<const OMPThreadPrivateDeclAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OMPThreadPrivateDeclAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OMPDeclareVariantAttr> OMPDeclareVariantAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OMPDeclareVariantAttr> OMPDeclareVariantAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OMPDeclareVariantAttr> OMPDeclareVariantAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OMP_DECLARE_VARIANT:
      return reinterpret_cast<const OMPDeclareVariantAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OMPDeclareVariantAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

Expr OMPDeclareVariantAttr::variant_func_reference(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<OMPDeclareTargetDeclAttr> OMPDeclareTargetDeclAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OMPDeclareTargetDeclAttr> OMPDeclareTargetDeclAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OMPDeclareTargetDeclAttr> OMPDeclareTargetDeclAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OMP_DECLARE_TARGET_DECL:
      return reinterpret_cast<const OMPDeclareTargetDeclAttr &>(parent);
    default: return std::nullopt;
  }
}

OMPDeclareTargetDeclAttrDevTypeTy OMPDeclareTargetDeclAttr::dev_type(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<OMPDeclareTargetDeclAttrDevTypeTy>(self.getVal11());
}

bool OMPDeclareTargetDeclAttr::indirect(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

Expr OMPDeclareTargetDeclAttr::indirect_expression(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

OMPDeclareTargetDeclAttrMapTypeTy OMPDeclareTargetDeclAttr::map_type(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<OMPDeclareTargetDeclAttrMapTypeTy>(self.getVal15());
}

std::string_view OMPDeclareTargetDeclAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OMPCaptureNoInitAttr> OMPCaptureNoInitAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OMPCaptureNoInitAttr> OMPCaptureNoInitAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OMPCaptureNoInitAttr> OMPCaptureNoInitAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OMP_CAPTURE_NO_INIT:
      return reinterpret_cast<const OMPCaptureNoInitAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OMPCaptureNoInitAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OMPAllocateDeclAttr> OMPAllocateDeclAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OMPAllocateDeclAttr> OMPAllocateDeclAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OMPAllocateDeclAttr> OMPAllocateDeclAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OMP_ALLOCATE_DECL:
      return reinterpret_cast<const OMPAllocateDeclAttr &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPAllocateDeclAttr::alignment(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPAllocateDeclAttr::allocator(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal17());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

OMPAllocateDeclAttrAllocatorTypeTy OMPAllocateDeclAttr::allocator_type(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<OMPAllocateDeclAttrAllocatorTypeTy>(self.getVal11());
}

std::string_view OMPAllocateDeclAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NotTailCalledAttr> NotTailCalledAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NotTailCalledAttr> NotTailCalledAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NotTailCalledAttr> NotTailCalledAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NOT_TAIL_CALLED:
      return reinterpret_cast<const NotTailCalledAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NotTailCalledAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoUniqueAddressAttr> NoUniqueAddressAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoUniqueAddressAttr> NoUniqueAddressAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoUniqueAddressAttr> NoUniqueAddressAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_UNIQUE_ADDRESS:
      return reinterpret_cast<const NoUniqueAddressAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoUniqueAddressAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoThrowAttr> NoThrowAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoThrowAttr> NoThrowAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoThrowAttr> NoThrowAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_THROW:
      return reinterpret_cast<const NoThrowAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoThrowAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoThreadSafetyAnalysisAttr> NoThreadSafetyAnalysisAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoThreadSafetyAnalysisAttr> NoThreadSafetyAnalysisAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoThreadSafetyAnalysisAttr> NoThreadSafetyAnalysisAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_THREAD_SAFETY_ANALYSIS:
      return reinterpret_cast<const NoThreadSafetyAnalysisAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoThreadSafetyAnalysisAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoStackProtectorAttr> NoStackProtectorAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoStackProtectorAttr> NoStackProtectorAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoStackProtectorAttr> NoStackProtectorAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_STACK_PROTECTOR:
      return reinterpret_cast<const NoStackProtectorAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoStackProtectorAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoSplitStackAttr> NoSplitStackAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoSplitStackAttr> NoSplitStackAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoSplitStackAttr> NoSplitStackAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_SPLIT_STACK:
      return reinterpret_cast<const NoSplitStackAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoSplitStackAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoSpeculativeLoadHardeningAttr> NoSpeculativeLoadHardeningAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoSpeculativeLoadHardeningAttr> NoSpeculativeLoadHardeningAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoSpeculativeLoadHardeningAttr> NoSpeculativeLoadHardeningAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_SPECULATIVE_LOAD_HARDENING:
      return reinterpret_cast<const NoSpeculativeLoadHardeningAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoSpeculativeLoadHardeningAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoSanitizeAttr> NoSanitizeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoSanitizeAttr> NoSanitizeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoSanitizeAttr> NoSanitizeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_SANITIZE:
      return reinterpret_cast<const NoSanitizeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoSanitizeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool NoSanitizeAttr::has_coverage(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::optional<NoReturnAttr> NoReturnAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoReturnAttr> NoReturnAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoReturnAttr> NoReturnAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_RETURN:
      return reinterpret_cast<const NoReturnAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoReturnAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoProfileFunctionAttr> NoProfileFunctionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoProfileFunctionAttr> NoProfileFunctionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoProfileFunctionAttr> NoProfileFunctionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_PROFILE_FUNCTION:
      return reinterpret_cast<const NoProfileFunctionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoProfileFunctionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoMips16Attr> NoMips16Attr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoMips16Attr> NoMips16Attr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoMips16Attr> NoMips16Attr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_MIPS16:
      return reinterpret_cast<const NoMips16Attr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoMips16Attr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoMicroMipsAttr> NoMicroMipsAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoMicroMipsAttr> NoMicroMipsAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoMicroMipsAttr> NoMicroMipsAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_MICRO_MIPS:
      return reinterpret_cast<const NoMicroMipsAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoMicroMipsAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoInstrumentFunctionAttr> NoInstrumentFunctionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoInstrumentFunctionAttr> NoInstrumentFunctionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoInstrumentFunctionAttr> NoInstrumentFunctionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_INSTRUMENT_FUNCTION:
      return reinterpret_cast<const NoInstrumentFunctionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoInstrumentFunctionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoInlineAttr> NoInlineAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoInlineAttr> NoInlineAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoInlineAttr> NoInlineAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_INLINE:
      return reinterpret_cast<const NoInlineAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoInlineAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoDuplicateAttr> NoDuplicateAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoDuplicateAttr> NoDuplicateAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoDuplicateAttr> NoDuplicateAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_DUPLICATE:
      return reinterpret_cast<const NoDuplicateAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoDuplicateAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoDestroyAttr> NoDestroyAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoDestroyAttr> NoDestroyAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoDestroyAttr> NoDestroyAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_DESTROY:
      return reinterpret_cast<const NoDestroyAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoDestroyAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoDebugAttr> NoDebugAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoDebugAttr> NoDebugAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoDebugAttr> NoDebugAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_DEBUG:
      return reinterpret_cast<const NoDebugAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoDebugAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoCommonAttr> NoCommonAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoCommonAttr> NoCommonAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoCommonAttr> NoCommonAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_COMMON:
      return reinterpret_cast<const NoCommonAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoCommonAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NoAliasAttr> NoAliasAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NoAliasAttr> NoAliasAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NoAliasAttr> NoAliasAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NO_ALIAS:
      return reinterpret_cast<const NoAliasAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NoAliasAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NakedAttr> NakedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NakedAttr> NakedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NakedAttr> NakedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NAKED:
      return reinterpret_cast<const NakedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NakedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NSReturnsRetainedAttr> NSReturnsRetainedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NSReturnsRetainedAttr> NSReturnsRetainedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NSReturnsRetainedAttr> NSReturnsRetainedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NS_RETURNS_RETAINED:
      return reinterpret_cast<const NSReturnsRetainedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NSReturnsRetainedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NSReturnsNotRetainedAttr> NSReturnsNotRetainedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NSReturnsNotRetainedAttr> NSReturnsNotRetainedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NSReturnsNotRetainedAttr> NSReturnsNotRetainedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NS_RETURNS_NOT_RETAINED:
      return reinterpret_cast<const NSReturnsNotRetainedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NSReturnsNotRetainedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NSReturnsAutoreleasedAttr> NSReturnsAutoreleasedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NSReturnsAutoreleasedAttr> NSReturnsAutoreleasedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NSReturnsAutoreleasedAttr> NSReturnsAutoreleasedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NS_RETURNS_AUTORELEASED:
      return reinterpret_cast<const NSReturnsAutoreleasedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NSReturnsAutoreleasedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NSErrorDomainAttr> NSErrorDomainAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NSErrorDomainAttr> NSErrorDomainAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NSErrorDomainAttr> NSErrorDomainAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NS_ERROR_DOMAIN:
      return reinterpret_cast<const NSErrorDomainAttr &>(parent);
    default: return std::nullopt;
  }
}

VarDecl NSErrorDomainAttr::error_domain(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return VarDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::string_view NSErrorDomainAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NSConsumesSelfAttr> NSConsumesSelfAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NSConsumesSelfAttr> NSConsumesSelfAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NSConsumesSelfAttr> NSConsumesSelfAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NS_CONSUMES_SELF:
      return reinterpret_cast<const NSConsumesSelfAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NSConsumesSelfAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MipsShortCallAttr> MipsShortCallAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MipsShortCallAttr> MipsShortCallAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MipsShortCallAttr> MipsShortCallAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MIPS_SHORT_CALL:
      return reinterpret_cast<const MipsShortCallAttr &>(parent);
    default: return std::nullopt;
  }
}

MipsShortCallAttrSpelling MipsShortCallAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<MipsShortCallAttrSpelling>(self.getVal11());
}

std::string_view MipsShortCallAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MipsLongCallAttr> MipsLongCallAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MipsLongCallAttr> MipsLongCallAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MipsLongCallAttr> MipsLongCallAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MIPS_LONG_CALL:
      return reinterpret_cast<const MipsLongCallAttr &>(parent);
    default: return std::nullopt;
  }
}

MipsLongCallAttrSpelling MipsLongCallAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<MipsLongCallAttrSpelling>(self.getVal11());
}

std::string_view MipsLongCallAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MipsInterruptAttr> MipsInterruptAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MipsInterruptAttr> MipsInterruptAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MipsInterruptAttr> MipsInterruptAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MIPS_INTERRUPT:
      return reinterpret_cast<const MipsInterruptAttr &>(parent);
    default: return std::nullopt;
  }
}

MipsInterruptAttrInterruptType MipsInterruptAttr::interrupt(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<MipsInterruptAttrInterruptType>(self.getVal11());
}

std::string_view MipsInterruptAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<Mips16Attr> Mips16Attr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<Mips16Attr> Mips16Attr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<Mips16Attr> Mips16Attr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MIPS16:
      return reinterpret_cast<const Mips16Attr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view Mips16Attr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MinVectorWidthAttr> MinVectorWidthAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MinVectorWidthAttr> MinVectorWidthAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MinVectorWidthAttr> MinVectorWidthAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MIN_VECTOR_WIDTH:
      return reinterpret_cast<const MinVectorWidthAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MinVectorWidthAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MinSizeAttr> MinSizeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MinSizeAttr> MinSizeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MinSizeAttr> MinSizeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MIN_SIZE:
      return reinterpret_cast<const MinSizeAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MinSizeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MicroMipsAttr> MicroMipsAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MicroMipsAttr> MicroMipsAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MicroMipsAttr> MicroMipsAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MICRO_MIPS:
      return reinterpret_cast<const MicroMipsAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MicroMipsAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MayAliasAttr> MayAliasAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MayAliasAttr> MayAliasAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MayAliasAttr> MayAliasAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MAY_ALIAS:
      return reinterpret_cast<const MayAliasAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MayAliasAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MaxFieldAlignmentAttr> MaxFieldAlignmentAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MaxFieldAlignmentAttr> MaxFieldAlignmentAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MaxFieldAlignmentAttr> MaxFieldAlignmentAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MAX_FIELD_ALIGNMENT:
      return reinterpret_cast<const MaxFieldAlignmentAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MaxFieldAlignmentAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MSVtorDispAttr> MSVtorDispAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MSVtorDispAttr> MSVtorDispAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MSVtorDispAttr> MSVtorDispAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MS_VTOR_DISP:
      return reinterpret_cast<const MSVtorDispAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MSVtorDispAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

MSVtorDispMode MSVtorDispAttr::vtor_disp_mode(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<MSVtorDispMode>(self.getVal11());
}

std::optional<MSStructAttr> MSStructAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MSStructAttr> MSStructAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MSStructAttr> MSStructAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MS_STRUCT:
      return reinterpret_cast<const MSStructAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MSStructAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MSP430InterruptAttr> MSP430InterruptAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MSP430InterruptAttr> MSP430InterruptAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MSP430InterruptAttr> MSP430InterruptAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MSP430_INTERRUPT:
      return reinterpret_cast<const MSP430InterruptAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MSP430InterruptAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MSNoVTableAttr> MSNoVTableAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MSNoVTableAttr> MSNoVTableAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MSNoVTableAttr> MSNoVTableAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MS_NO_V_TABLE:
      return reinterpret_cast<const MSNoVTableAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MSNoVTableAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MSInheritanceAttr> MSInheritanceAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MSInheritanceAttr> MSInheritanceAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MSInheritanceAttr> MSInheritanceAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MS_INHERITANCE:
      return reinterpret_cast<const MSInheritanceAttr &>(parent);
    default: return std::nullopt;
  }
}

bool MSInheritanceAttr::best_case(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

MSInheritanceModel MSInheritanceAttr::inheritance_model(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<MSInheritanceModel>(self.getVal11());
}

MSInheritanceAttrSpelling MSInheritanceAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<MSInheritanceAttrSpelling>(self.getVal15());
}

std::string_view MSInheritanceAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MSAllocatorAttr> MSAllocatorAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MSAllocatorAttr> MSAllocatorAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MSAllocatorAttr> MSAllocatorAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MS_ALLOCATOR:
      return reinterpret_cast<const MSAllocatorAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MSAllocatorAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MSABIAttr> MSABIAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MSABIAttr> MSABIAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MSABIAttr> MSABIAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MSABI:
      return reinterpret_cast<const MSABIAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MSABIAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<MIGServerRoutineAttr> MIGServerRoutineAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<MIGServerRoutineAttr> MIGServerRoutineAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<MIGServerRoutineAttr> MIGServerRoutineAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::MIG_SERVER_ROUTINE_:
      return reinterpret_cast<const MIGServerRoutineAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view MIGServerRoutineAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<M68kInterruptAttr> M68kInterruptAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<M68kInterruptAttr> M68kInterruptAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<M68kInterruptAttr> M68kInterruptAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::M68K_INTERRUPT:
      return reinterpret_cast<const M68kInterruptAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view M68kInterruptAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<LocksExcludedAttr> LocksExcludedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<LocksExcludedAttr> LocksExcludedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<LocksExcludedAttr> LocksExcludedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::LOCKS_EXCLUDED:
      return reinterpret_cast<const LocksExcludedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view LocksExcludedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<LockReturnedAttr> LockReturnedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<LockReturnedAttr> LockReturnedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<LockReturnedAttr> LockReturnedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::LOCK_RETURNED:
      return reinterpret_cast<const LockReturnedAttr &>(parent);
    default: return std::nullopt;
  }
}

Expr LockReturnedAttr::argument(void) const {
  auto self = fragment->NthAttr(offset_);
  EntityId id(self.getVal8());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::string_view LockReturnedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<LifetimeBoundAttr> LifetimeBoundAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<LifetimeBoundAttr> LifetimeBoundAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<LifetimeBoundAttr> LifetimeBoundAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::LIFETIME_BOUND:
      return reinterpret_cast<const LifetimeBoundAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view LifetimeBoundAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<LeafAttr> LeafAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<LeafAttr> LeafAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<LeafAttr> LeafAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::LEAF:
      return reinterpret_cast<const LeafAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view LeafAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<LayoutVersionAttr> LayoutVersionAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<LayoutVersionAttr> LayoutVersionAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<LayoutVersionAttr> LayoutVersionAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::LAYOUT_VERSION:
      return reinterpret_cast<const LayoutVersionAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view LayoutVersionAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<LTOVisibilityPublicAttr> LTOVisibilityPublicAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<LTOVisibilityPublicAttr> LTOVisibilityPublicAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<LTOVisibilityPublicAttr> LTOVisibilityPublicAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::LTO_VISIBILITY_PUBLIC:
      return reinterpret_cast<const LTOVisibilityPublicAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view LTOVisibilityPublicAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<InternalLinkageAttr> InternalLinkageAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<InternalLinkageAttr> InternalLinkageAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<InternalLinkageAttr> InternalLinkageAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::INTERNAL_LINKAGE:
      return reinterpret_cast<const InternalLinkageAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view InternalLinkageAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<IntelOclBiccAttr> IntelOclBiccAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<IntelOclBiccAttr> IntelOclBiccAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<IntelOclBiccAttr> IntelOclBiccAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::INTEL_OCL_BICC:
      return reinterpret_cast<const IntelOclBiccAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view IntelOclBiccAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<InitPriorityAttr> InitPriorityAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<InitPriorityAttr> InitPriorityAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<InitPriorityAttr> InitPriorityAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::INIT_PRIORITY:
      return reinterpret_cast<const InitPriorityAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view InitPriorityAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<InheritableParamAttr> InheritableParamAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<InheritableParamAttr> InheritableParamAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<InheritableParamAttr> InheritableParamAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CARRIES_DEPENDENCY:
    case mx::AttrKind::CF_CONSUMED:
    case mx::AttrKind::ANNOTATE:
    case mx::AttrKind::USE_HANDLE:
    case mx::AttrKind::RELEASE_HANDLE:
    case mx::AttrKind::PASS_OBJECT_SIZE:
    case mx::AttrKind::SWIFT_INDIRECT_RESULT:
    case mx::AttrKind::SWIFT_ERROR_RESULT:
    case mx::AttrKind::SWIFT_CONTEXT:
    case mx::AttrKind::SWIFT_ASYNC_CONTEXT:
    case mx::AttrKind::OS_CONSUMED:
    case mx::AttrKind::NON_NULL:
    case mx::AttrKind::NS_CONSUMED:
      return reinterpret_cast<const InheritableParamAttr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<CarriesDependencyAttr> CarriesDependencyAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CarriesDependencyAttr> CarriesDependencyAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CarriesDependencyAttr> CarriesDependencyAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CarriesDependencyAttr> CarriesDependencyAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CARRIES_DEPENDENCY:
      return reinterpret_cast<const CarriesDependencyAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CarriesDependencyAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CFConsumedAttr> CFConsumedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CFConsumedAttr> CFConsumedAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CFConsumedAttr> CFConsumedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<CFConsumedAttr> CFConsumedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CF_CONSUMED:
      return reinterpret_cast<const CFConsumedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CFConsumedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<AnnotateAttr> AnnotateAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<AnnotateAttr> AnnotateAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AnnotateAttr> AnnotateAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<AnnotateAttr> AnnotateAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::ANNOTATE:
      return reinterpret_cast<const AnnotateAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AnnotateAttr::annotation(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view AnnotateAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<UseHandleAttr> UseHandleAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<UseHandleAttr> UseHandleAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<UseHandleAttr> UseHandleAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<UseHandleAttr> UseHandleAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::USE_HANDLE:
      return reinterpret_cast<const UseHandleAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view UseHandleAttr::handle_type(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view UseHandleAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ReleaseHandleAttr> ReleaseHandleAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ReleaseHandleAttr> ReleaseHandleAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ReleaseHandleAttr> ReleaseHandleAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ReleaseHandleAttr> ReleaseHandleAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::RELEASE_HANDLE:
      return reinterpret_cast<const ReleaseHandleAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ReleaseHandleAttr::handle_type(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view ReleaseHandleAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<PassObjectSizeAttr> PassObjectSizeAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<PassObjectSizeAttr> PassObjectSizeAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PassObjectSizeAttr> PassObjectSizeAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<PassObjectSizeAttr> PassObjectSizeAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::PASS_OBJECT_SIZE:
      return reinterpret_cast<const PassObjectSizeAttr &>(parent);
    default: return std::nullopt;
  }
}

PassObjectSizeAttrSpelling PassObjectSizeAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<PassObjectSizeAttrSpelling>(self.getVal11());
}

std::string_view PassObjectSizeAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool PassObjectSizeAttr::is_dynamic(void) const {
  auto self = fragment->NthAttr(offset_);
  return self.getVal13();
}

std::optional<ParameterABIAttr> ParameterABIAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<ParameterABIAttr> ParameterABIAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ParameterABIAttr> ParameterABIAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<ParameterABIAttr> ParameterABIAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_INDIRECT_RESULT:
    case mx::AttrKind::SWIFT_ERROR_RESULT:
    case mx::AttrKind::SWIFT_CONTEXT:
    case mx::AttrKind::SWIFT_ASYNC_CONTEXT:
      return reinterpret_cast<const ParameterABIAttr &>(parent);
    default: return std::nullopt;
  }
}

ParameterABI ParameterABIAttr::abi(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<ParameterABI>(self.getVal11());
}

std::optional<SwiftIndirectResultAttr> SwiftIndirectResultAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftIndirectResultAttr> SwiftIndirectResultAttr::from(const ParameterABIAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftIndirectResultAttr> SwiftIndirectResultAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftIndirectResultAttr> SwiftIndirectResultAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftIndirectResultAttr> SwiftIndirectResultAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_INDIRECT_RESULT:
      return reinterpret_cast<const SwiftIndirectResultAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftIndirectResultAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftErrorResultAttr> SwiftErrorResultAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftErrorResultAttr> SwiftErrorResultAttr::from(const ParameterABIAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftErrorResultAttr> SwiftErrorResultAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftErrorResultAttr> SwiftErrorResultAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftErrorResultAttr> SwiftErrorResultAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_ERROR_RESULT:
      return reinterpret_cast<const SwiftErrorResultAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftErrorResultAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftContextAttr> SwiftContextAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftContextAttr> SwiftContextAttr::from(const ParameterABIAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftContextAttr> SwiftContextAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftContextAttr> SwiftContextAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftContextAttr> SwiftContextAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_CONTEXT:
      return reinterpret_cast<const SwiftContextAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftContextAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<SwiftAsyncContextAttr> SwiftAsyncContextAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<SwiftAsyncContextAttr> SwiftAsyncContextAttr::from(const ParameterABIAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftAsyncContextAttr> SwiftAsyncContextAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftAsyncContextAttr> SwiftAsyncContextAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<SwiftAsyncContextAttr> SwiftAsyncContextAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::SWIFT_ASYNC_CONTEXT:
      return reinterpret_cast<const SwiftAsyncContextAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SwiftAsyncContextAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<OSConsumedAttr> OSConsumedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<OSConsumedAttr> OSConsumedAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OSConsumedAttr> OSConsumedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<OSConsumedAttr> OSConsumedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::OS_CONSUMED:
      return reinterpret_cast<const OSConsumedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view OSConsumedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NonNullAttr> NonNullAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NonNullAttr> NonNullAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NonNullAttr> NonNullAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NonNullAttr> NonNullAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NON_NULL:
      return reinterpret_cast<const NonNullAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NonNullAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NSConsumedAttr> NSConsumedAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<NSConsumedAttr> NSConsumedAttr::from(const InheritableParamAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NSConsumedAttr> NSConsumedAttr::from(const InheritableAttr &parent) {
  return from(reinterpret_cast<const Attr &>(parent));
}

std::optional<NSConsumedAttr> NSConsumedAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::NS_CONSUMED:
      return reinterpret_cast<const NSConsumedAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view NSConsumedAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<IFuncAttr> IFuncAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<IFuncAttr> IFuncAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::I_FUNC:
      return reinterpret_cast<const IFuncAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view IFuncAttr::resolver(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::string_view IFuncAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal10();
  return std::string_view(data.cStr(), data.size());
}

std::optional<CalledOnceAttr> CalledOnceAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<CalledOnceAttr> CalledOnceAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::CALLED_ONCE:
      return reinterpret_cast<const CalledOnceAttr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view CalledOnceAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

std::optional<BuiltinAliasAttr> BuiltinAliasAttr::from(const TokenContext &c) {
  return from(c.as_attribute());
}

std::optional<BuiltinAliasAttr> BuiltinAliasAttr::from(const Attr &parent) {
  switch (parent.kind()) {
    case mx::AttrKind::BUILTIN_ALIAS:
      return reinterpret_cast<const BuiltinAliasAttr &>(parent);
    default: return std::nullopt;
  }
}

BuiltinAliasAttrSpelling BuiltinAliasAttr::semantic_spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  return static_cast<BuiltinAliasAttrSpelling>(self.getVal11());
}

std::string_view BuiltinAliasAttr::spelling(void) const {
  auto self = fragment->NthAttr(offset_);
  capnp::Text::Reader data = self.getVal9();
  return std::string_view(data.cStr(), data.size());
}

bool Type::is_qualified(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal0();
}

Type Type::unqualified_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal1());
  return fragment->TypeFor(fragment, id, false).value();
}

bool Type::accepts_obj_c_type_parameters(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal2();
}

bool Type::can_decay_to_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal3();
}

bool Type::can_have_nullability(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal4();
}

bool Type::contains_errors(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal5();
}

bool Type::contains_unexpanded_parameter_pack(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal6();
}

std::optional<Type> Type::array_element_type_no_type_qualified(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal8()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal7());
    return fragment->TypeFor(fragment, id);
  }
}

std::optional<CXXRecordDecl> Type::as_cxx_record_declaration(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal10()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal9());
    return CXXRecordDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<ComplexType> Type::as_complex_integer_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal11());
    return ComplexType::from(fragment->TypeFor(fragment, id));
  }
}

std::optional<ObjCObjectPointerType> Type::as_obj_c_interface_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal14()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal13());
    return ObjCObjectPointerType::from(fragment->TypeFor(fragment, id));
  }
}

std::optional<ObjCObjectType> Type::as_obj_c_interface_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal16()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal15());
    return ObjCObjectType::from(fragment->TypeFor(fragment, id));
  }
}

std::optional<ObjCObjectPointerType> Type::as_obj_c_qualified_class_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal18()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal17());
    return ObjCObjectPointerType::from(fragment->TypeFor(fragment, id));
  }
}

std::optional<ObjCObjectPointerType> Type::as_obj_c_qualified_id_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal20()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal19());
    return ObjCObjectPointerType::from(fragment->TypeFor(fragment, id));
  }
}

std::optional<ObjCObjectType> Type::as_obj_c_qualified_interface_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal22()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal21());
    return ObjCObjectType::from(fragment->TypeFor(fragment, id));
  }
}

std::optional<BuiltinType> Type::as_placeholder_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal24()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal23());
    return BuiltinType::from(fragment->TypeFor(fragment, id));
  }
}

std::optional<RecordDecl> Type::as_record_declaration(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal26()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal25());
    return RecordDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<RecordType> Type::as_structure_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal28()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal27());
    return RecordType::from(fragment->TypeFor(fragment, id));
  }
}

std::optional<TagDecl> Type::as_tag_declaration(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal30()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal29());
    return TagDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<RecordType> Type::as_union_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal32()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal31());
    return RecordType::from(fragment->TypeFor(fragment, id));
  }
}

std::optional<AutoType> Type::contained_auto_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal34()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal33());
    return AutoType::from(fragment->TypeFor(fragment, id));
  }
}

std::optional<DeducedType> Type::contained_deduced_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal36()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal35());
    return DeducedType::from(fragment->TypeFor(fragment, id));
  }
}

Linkage Type::linkage(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<Linkage>(self.getVal37());
}

Type Type::locally_unqualified_single_step_desugared_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal38());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<NullabilityKind> Type::nullability(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal40()) {
    return std::nullopt;
  } else {
    return static_cast<NullabilityKind>(self.getVal39());
  }
}

std::optional<CXXRecordDecl> Type::pointee_cxx_record_declaration(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal42()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal41());
    return CXXRecordDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<Type> Type::pointee_or_array_element_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal44()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal43());
    return fragment->TypeFor(fragment, id);
  }
}

std::optional<Type> Type::pointee_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal46()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal45());
    return fragment->TypeFor(fragment, id);
  }
}

std::optional<TypeScalarTypeKind> Type::scalar_type_kind(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal48()) {
    return std::nullopt;
  } else {
    return static_cast<TypeScalarTypeKind>(self.getVal47());
  }
}

std::optional<Type> Type::sve_element_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal50()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal49());
    return fragment->TypeFor(fragment, id);
  }
}

TypeKind Type::kind(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<TypeKind>(self.getVal51());
}

Type Type::unqualified_desugared_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal52());
  return fragment->TypeFor(fragment, id, false).value();
}

Visibility Type::visibility(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<Visibility>(self.getVal53());
}

bool Type::has_auto_for_trailing_return_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal54();
}

bool Type::has_floating_representation(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal55();
}

bool Type::has_integer_representation(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal56();
}

bool Type::has_obj_c_pointer_representation(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal57();
}

bool Type::has_pointer_representation(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal58();
}

bool Type::has_signed_integer_representation(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal59();
}

bool Type::has_sized_vla_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal60();
}

bool Type::has_unnamed_or_local_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal61();
}

bool Type::has_unsigned_integer_representation(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal62();
}

std::optional<bool> Type::is_aggregate_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal64()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal63());
  }
}

bool Type::is_align_value_t(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal65();
}

bool Type::is_any_character_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal66();
}

bool Type::is_any_complex_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal67();
}

bool Type::is_any_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal68();
}

bool Type::is_arithmetic_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal69();
}

bool Type::is_array_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal70();
}

bool Type::is_atomic_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal71();
}

bool Type::is_b_float16_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal72();
}

bool Type::is_bit_int_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal73();
}

bool Type::is_block_compatible_obj_c_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal74();
}

bool Type::is_block_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal75();
}

bool Type::is_boolean_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal76();
}

bool Type::is_builtin_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal77();
}

bool Type::is_carc_bridgable_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal78();
}

bool Type::is_cuda_device_builtin_surface_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal79();
}

bool Type::is_cuda_device_builtin_texture_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal80();
}

bool Type::is_canonical_unqualified(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal81();
}

bool Type::is_char16_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal82();
}

bool Type::is_char32_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal83();
}

bool Type::is_char8_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal84();
}

bool Type::is_character_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal85();
}

bool Type::is_class_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal86();
}

bool Type::is_clk_event_t(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal87();
}

bool Type::is_complex_integer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal88();
}

bool Type::is_complex_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal89();
}

bool Type::is_compound_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal90();
}

bool Type::is_constant_array_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal91();
}

bool Type::is_constant_matrix_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal92();
}

std::optional<bool> Type::is_constant_size_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal94()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal93());
  }
}

bool Type::is_decltype_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal95();
}

bool Type::is_dependent_address_space_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal96();
}

bool Type::is_dependent_sized_array_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal97();
}

bool Type::is_dependent_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal98();
}

bool Type::is_elaborated_type_specifier(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal99();
}

bool Type::is_enumeral_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal100();
}

bool Type::is_event_t(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal101();
}

bool Type::is_ext_vector_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal102();
}

bool Type::is_fixed_point_or_integer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal103();
}

bool Type::is_fixed_point_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal104();
}

bool Type::is_float128_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal105();
}

bool Type::is_float16_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal106();
}

bool Type::is_floating_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal107();
}

bool Type::is_from_ast(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal108();
}

bool Type::is_function_no_proto_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal109();
}

bool Type::is_function_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal110();
}

bool Type::is_function_proto_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal111();
}

bool Type::is_function_reference_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal112();
}

bool Type::is_function_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal113();
}

bool Type::is_fundamental_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal114();
}

bool Type::is_half_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal115();
}

bool Type::is_ibm128_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal116();
}

bool Type::is_image_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal117();
}

bool Type::is_incomplete_array_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal118();
}

bool Type::is_incomplete_or_object_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal119();
}

bool Type::is_incomplete_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal120();
}

bool Type::is_instantiation_dependent_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal121();
}

bool Type::is_integer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal122();
}

bool Type::is_integral_or_enumeration_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal123();
}

bool Type::is_integral_or_unscoped_enumeration_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal124();
}

bool Type::is_integral_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal125();
}

bool Type::is_interface_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal126();
}

bool Type::is_l_value_reference_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal127();
}

bool Type::is_linkage_valid(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal128();
}

std::optional<bool> Type::is_literal_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal130()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal129());
  }
}

bool Type::is_matrix_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal131();
}

bool Type::is_member_data_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal132();
}

bool Type::is_member_function_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal133();
}

bool Type::is_member_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal134();
}

bool Type::is_non_overload_placeholder_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal135();
}

bool Type::is_nothrow_t(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal136();
}

bool Type::is_null_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal137();
}

bool Type::is_ocl_ext_opaque_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal138();
}

bool Type::is_ocl_image_1d_array_ro_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal139();
}

bool Type::is_ocl_image_1d_array_rw_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal140();
}

bool Type::is_ocl_image_1d_array_wo_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal141();
}

bool Type::is_ocl_image_1d_buffer_ro_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal142();
}

bool Type::is_ocl_image_1d_buffer_rw_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal143();
}

bool Type::is_ocl_image_1d_buffer_wo_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal144();
}

bool Type::is_ocl_image_1d_ro_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal145();
}

bool Type::is_ocl_image_1d_rw_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal146();
}

bool Type::is_ocl_image_1d_wo_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal147();
}

bool Type::is_ocl_image_2d_array_depth_ro_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal148();
}

bool Type::is_ocl_image_2d_array_depth_rw_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal149();
}

bool Type::is_ocl_image_2d_array_depth_wo_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal150();
}

bool Type::is_ocl_image_2d_array_msaa_depth_ro_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal151();
}

bool Type::is_ocl_image_2d_array_msaa_depth_rw_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal152();
}

bool Type::is_ocl_image_2d_array_msaa_depth_wo_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal153();
}

bool Type::is_ocl_image_2d_array_msaaro_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal154();
}

bool Type::is_ocl_image_2d_array_msaarw_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal155();
}

bool Type::is_ocl_image_2d_array_msaawo_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal156();
}

bool Type::is_ocl_image_2d_array_ro_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal157();
}

bool Type::is_ocl_image_2d_array_rw_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal158();
}

bool Type::is_ocl_image_2d_array_wo_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal159();
}

bool Type::is_ocl_image_2d_depth_ro_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal160();
}

bool Type::is_ocl_image_2d_depth_rw_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal161();
}

bool Type::is_ocl_image_2d_depth_wo_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal162();
}

bool Type::is_ocl_image_2d_msaa_depth_ro_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal163();
}

bool Type::is_ocl_image_2d_msaa_depth_rw_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal164();
}

bool Type::is_ocl_image_2d_msaa_depth_wo_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal165();
}

bool Type::is_ocl_image_2d_msaaro_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal166();
}

bool Type::is_ocl_image_2d_msaarw_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal167();
}

bool Type::is_ocl_image_2d_msaawo_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal168();
}

bool Type::is_ocl_image_2d_ro_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal169();
}

bool Type::is_ocl_image_2d_rw_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal170();
}

bool Type::is_ocl_image_2d_wo_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal171();
}

bool Type::is_ocl_image_3d_ro_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal172();
}

bool Type::is_ocl_image_3d_rw_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal173();
}

bool Type::is_ocl_image_3d_wo_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal174();
}

bool Type::is_ocl_intel_subgroup_avc_ime_dual_reference_streamin_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal175();
}

bool Type::is_ocl_intel_subgroup_avc_ime_payload_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal176();
}

bool Type::is_ocl_intel_subgroup_avc_ime_result_dual_reference_streamout_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal177();
}

bool Type::is_ocl_intel_subgroup_avc_ime_result_single_reference_streamout_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal178();
}

bool Type::is_ocl_intel_subgroup_avc_ime_result_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal179();
}

bool Type::is_ocl_intel_subgroup_avc_ime_single_reference_streamin_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal180();
}

bool Type::is_ocl_intel_subgroup_avc_mce_payload_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal181();
}

bool Type::is_ocl_intel_subgroup_avc_mce_result_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal182();
}

bool Type::is_ocl_intel_subgroup_avc_ref_payload_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal183();
}

bool Type::is_ocl_intel_subgroup_avc_ref_result_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal184();
}

bool Type::is_ocl_intel_subgroup_avc_sic_payload_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal185();
}

bool Type::is_ocl_intel_subgroup_avc_sic_result_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal186();
}

bool Type::is_ocl_intel_subgroup_avc_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal187();
}

bool Type::is_obj_carc_bridgable_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal188();
}

std::optional<bool> Type::is_obj_carc_implicitly_unretained_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal190()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal189());
  }
}

bool Type::is_obj_c_boxable_record_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal191();
}

bool Type::is_obj_c_builtin_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal192();
}

bool Type::is_obj_c_class_or_class_kind_of_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal193();
}

bool Type::is_obj_c_class_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal194();
}

bool Type::is_obj_c_id_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal195();
}

bool Type::is_obj_c_independent_class_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal196();
}

bool Type::is_obj_c_indirect_lifetime_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal197();
}

bool Type::is_obj_c_inert_unsafe_unretained_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal198();
}

bool Type::is_obj_c_lifetime_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal199();
}

bool Type::is_obj_cns_object_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal200();
}

bool Type::is_obj_c_object_or_interface_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal201();
}

bool Type::is_obj_c_object_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal202();
}

bool Type::is_obj_c_object_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal203();
}

bool Type::is_obj_c_qualified_class_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal204();
}

bool Type::is_obj_c_qualified_id_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal205();
}

bool Type::is_obj_c_qualified_interface_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal206();
}

bool Type::is_obj_c_retainable_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal207();
}

bool Type::is_obj_c_sel_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal208();
}

bool Type::is_object_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal209();
}

bool Type::is_object_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal210();
}

bool Type::is_open_cl_specific_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal211();
}

bool Type::is_overloadable_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal212();
}

bool Type::is_pipe_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal213();
}

bool Type::is_placeholder_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal214();
}

bool Type::is_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal215();
}

bool Type::is_promotable_integer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal216();
}

bool Type::is_queue_t(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal217();
}

bool Type::is_r_value_reference_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal218();
}

bool Type::is_real_floating_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal219();
}

bool Type::is_real_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal220();
}

bool Type::is_record_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal221();
}

bool Type::is_reference_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal222();
}

bool Type::is_reserve_idt(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal223();
}

bool Type::is_sampler_t(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal224();
}

bool Type::is_saturated_fixed_point_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal225();
}

bool Type::is_scalar_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal226();
}

bool Type::is_scoped_enumeral_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal227();
}

bool Type::is_signed_fixed_point_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal228();
}

bool Type::is_signed_integer_or_enumeration_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal229();
}

bool Type::is_signed_integer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal230();
}

bool Type::is_sizeless_builtin_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal231();
}

bool Type::is_sizeless_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal232();
}

bool Type::is_specifier_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal233();
}

std::optional<bool> Type::is_standard_layout_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal235()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal234());
  }
}

bool Type::is_std_byte_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal236();
}

std::optional<bool> Type::is_structural_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal238()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal237());
  }
}

bool Type::is_structure_or_class_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal239();
}

bool Type::is_structure_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal240();
}

bool Type::is_template_type_parm_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal241();
}

bool Type::is_typedef_name_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal242();
}

bool Type::is_undeduced_auto_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal243();
}

bool Type::is_undeduced_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal244();
}

bool Type::is_union_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal245();
}

bool Type::is_unsaturated_fixed_point_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal246();
}

bool Type::is_unscoped_enumeration_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal247();
}

bool Type::is_unsigned_fixed_point_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal248();
}

bool Type::is_unsigned_integer_or_enumeration_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal249();
}

bool Type::is_unsigned_integer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal250();
}

bool Type::is_vlst_builtin_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal251();
}

bool Type::is_variable_array_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal252();
}

bool Type::is_variably_modified_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal253();
}

bool Type::is_vector_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal254();
}

bool Type::is_visibility_explicit(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal255();
}

bool Type::is_void_pointer_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal256();
}

bool Type::is_void_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal257();
}

bool Type::is_wide_character_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal258();
}

Type Type::ignore_parentheses(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal259());
  return fragment->TypeFor(fragment, id, false).value();
}

LangAS Type::address_space(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<LangAS>(self.getVal260());
}

Type Type::atomic_unqualified_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal261());
  return fragment->TypeFor(fragment, id, false).value();
}

Type Type::canonical_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal262());
  return fragment->TypeFor(fragment, id, false).value();
}

Type Type::desugared_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal263());
  return fragment->TypeFor(fragment, id, false).value();
}

Type Type::local_unqualified_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal264());
  return fragment->TypeFor(fragment, id, false).value();
}

Type Type::non_l_value_expression_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal265());
  return fragment->TypeFor(fragment, id, false).value();
}

Type Type::non_pack_expansion_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal266());
  return fragment->TypeFor(fragment, id, false).value();
}

Type Type::non_reference_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal267());
  return fragment->TypeFor(fragment, id, false).value();
}

Type Type::single_step_desugared_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal268());
  return fragment->TypeFor(fragment, id, false).value();
}

bool Type::has_address_space(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal269();
}

bool Type::has_local_non_fast_qualifiers(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal270();
}

bool Type::has_local_qualifiers(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal271();
}

bool Type::has_non_trivial_obj_c_lifetime(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal272();
}

bool Type::has_non_trivial_to_primitive_copy_c_union(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal273();
}

bool Type::has_non_trivial_to_primitive_default_initialize_c_union(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal274();
}

bool Type::has_non_trivial_to_primitive_destruct_c_union(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal275();
}

bool Type::has_qualifiers(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal276();
}

bool Type::has_strong_or_weak_obj_c_lifetime(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal277();
}

bool Type::is_c_forbidden_l_value_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal278();
}

bool Type::is_cxx11_pod_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal279();
}

bool Type::is_cxx98_pod_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal280();
}

bool Type::is_canonical(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal281();
}

bool Type::is_canonical_as_parameter(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal282();
}

bool Type::is_const_qualified(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal283();
}

bool Type::is_constant(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal284();
}

QualTypeDestructionKind Type::is_destructed_type(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<QualTypeDestructionKind>(self.getVal285());
}

bool Type::is_local_const_qualified(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal286();
}

bool Type::is_local_restrict_qualified(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal287();
}

bool Type::is_local_volatile_qualified(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal288();
}

QualTypePrimitiveCopyKind Type::is_non_trivial_to_primitive_copy(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<QualTypePrimitiveCopyKind>(self.getVal289());
}

QualTypePrimitiveDefaultInitializeKind Type::is_non_trivial_to_primitive_default_initialize(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<QualTypePrimitiveDefaultInitializeKind>(self.getVal290());
}

QualTypePrimitiveCopyKind Type::is_non_trivial_to_primitive_destructive_move(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<QualTypePrimitiveCopyKind>(self.getVal291());
}

bool Type::is_non_weak_in_mrr_with_obj_c_weak(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal292();
}

bool Type::is_null(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal293();
}

bool Type::is_obj_cgc_strong(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal294();
}

bool Type::is_obj_cgc_weak(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal295();
}

bool Type::is_pod_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal296();
}

bool Type::is_restrict_qualified(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal297();
}

bool Type::is_trivial_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal298();
}

bool Type::is_trivially_copyable_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal299();
}

bool Type::is_volatile_qualified(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal300();
}

bool Type::may_be_dynamic_class(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal301();
}

bool Type::may_be_not_dynamic_class(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal302();
}

Type Type::strip_obj_c_kind_of_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal303());
  return fragment->TypeFor(fragment, id, false).value();
}

Type Type::with_const(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal304());
  return fragment->TypeFor(fragment, id, false).value();
}

Type Type::with_restrict(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal305());
  return fragment->TypeFor(fragment, id, false).value();
}

Type Type::with_volatile(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal306());
  return fragment->TypeFor(fragment, id, false).value();
}

Type Type::without_local_fast_qualifiers(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal307());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<TemplateTypeParmType> TemplateTypeParmType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<TemplateTypeParmType> TemplateTypeParmType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::TEMPLATE_TYPE_PARM:
      return reinterpret_cast<const TemplateTypeParmType &>(parent);
    default: return std::nullopt;
  }
}

Type TemplateTypeParmType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<TemplateTypeParmDecl> TemplateTypeParmType::declaration(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal310()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal309());
    return TemplateTypeParmDecl::from(fragment->DeclFor(fragment, id));
  }
}

bool TemplateTypeParmType::is_parameter_pack(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

bool TemplateTypeParmType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

std::optional<TemplateSpecializationType> TemplateSpecializationType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<TemplateSpecializationType> TemplateSpecializationType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::TEMPLATE_SPECIALIZATION:
      return reinterpret_cast<const TemplateSpecializationType &>(parent);
    default: return std::nullopt;
  }
}

Type TemplateSpecializationType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<Type> TemplateSpecializationType::aliased_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal310()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal309());
    return fragment->TypeFor(fragment, id);
  }
}

bool TemplateSpecializationType::is_current_instantiation(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

bool TemplateSpecializationType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

bool TemplateSpecializationType::is_type_alias(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal313();
}

std::vector<TemplateArgument> TemplateSpecializationType::template_arguments(void) const {
  auto self = fragment->NthType(offset_);
  auto list = self.getVal314();
  std::vector<TemplateArgument> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

std::optional<TagType> TagType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<TagType> TagType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::RECORD:
    case mx::TypeKind::ENUM:
      return reinterpret_cast<const TagType &>(parent);
    default: return std::nullopt;
  }
}

TagDecl TagType::declaration(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return TagDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool TagType::is_being_defined(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<RecordType> RecordType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<RecordType> RecordType::from(const TagType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<RecordType> RecordType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::RECORD:
      return reinterpret_cast<const RecordType &>(parent);
    default: return std::nullopt;
  }
}

Type RecordType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool RecordType::has_const_fields(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

bool RecordType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

std::optional<EnumType> EnumType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<EnumType> EnumType::from(const TagType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<EnumType> EnumType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::ENUM:
      return reinterpret_cast<const EnumType &>(parent);
    default: return std::nullopt;
  }
}

Type EnumType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool EnumType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

std::optional<SubstTemplateTypeParmType> SubstTemplateTypeParmType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<SubstTemplateTypeParmType> SubstTemplateTypeParmType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::SUBST_TEMPLATE_TYPE_PARM:
      return reinterpret_cast<const SubstTemplateTypeParmType &>(parent);
    default: return std::nullopt;
  }
}

Type SubstTemplateTypeParmType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

TemplateTypeParmType SubstTemplateTypeParmType::replaced_parameter(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return TemplateTypeParmType::from(fragment->TypeFor(fragment, id, false).value()).value();
}

Type SubstTemplateTypeParmType::replacement_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return fragment->TypeFor(fragment, id, false).value();
}

bool SubstTemplateTypeParmType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<SubstTemplateTypeParmPackType> SubstTemplateTypeParmPackType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<SubstTemplateTypeParmPackType> SubstTemplateTypeParmPackType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::SUBST_TEMPLATE_TYPE_PARM_PACK:
      return reinterpret_cast<const SubstTemplateTypeParmPackType &>(parent);
    default: return std::nullopt;
  }
}

Type SubstTemplateTypeParmPackType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

TemplateTypeParmType SubstTemplateTypeParmPackType::replaced_parameter(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return TemplateTypeParmType::from(fragment->TypeFor(fragment, id, false).value()).value();
}

bool SubstTemplateTypeParmPackType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<ReferenceType> ReferenceType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<ReferenceType> ReferenceType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::R_VALUE_REFERENCE:
    case mx::TypeKind::L_VALUE_REFERENCE:
      return reinterpret_cast<const ReferenceType &>(parent);
    default: return std::nullopt;
  }
}

Type ReferenceType::pointee_type_as_written(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

bool ReferenceType::is_inner_reference(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

bool ReferenceType::is_spelled_as_l_value(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

std::optional<RValueReferenceType> RValueReferenceType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<RValueReferenceType> RValueReferenceType::from(const ReferenceType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<RValueReferenceType> RValueReferenceType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::R_VALUE_REFERENCE:
      return reinterpret_cast<const RValueReferenceType &>(parent);
    default: return std::nullopt;
  }
}

Type RValueReferenceType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool RValueReferenceType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

std::optional<LValueReferenceType> LValueReferenceType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<LValueReferenceType> LValueReferenceType::from(const ReferenceType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<LValueReferenceType> LValueReferenceType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::L_VALUE_REFERENCE:
      return reinterpret_cast<const LValueReferenceType &>(parent);
    default: return std::nullopt;
  }
}

Type LValueReferenceType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool LValueReferenceType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

std::optional<PointerType> PointerType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<PointerType> PointerType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::POINTER:
      return reinterpret_cast<const PointerType &>(parent);
    default: return std::nullopt;
  }
}

Type PointerType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

bool PointerType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<PipeType> PipeType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<PipeType> PipeType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::PIPE:
      return reinterpret_cast<const PipeType &>(parent);
    default: return std::nullopt;
  }
}

Type PipeType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type PipeType::element_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool PipeType::is_read_only(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

bool PipeType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

std::optional<ParenType> ParenType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<ParenType> ParenType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::PAREN:
      return reinterpret_cast<const ParenType &>(parent);
    default: return std::nullopt;
  }
}

Type ParenType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type ParenType::inner_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool ParenType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<PackExpansionType> PackExpansionType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<PackExpansionType> PackExpansionType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::PACK_EXPANSION:
      return reinterpret_cast<const PackExpansionType &>(parent);
    default: return std::nullopt;
  }
}

Type PackExpansionType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<unsigned> PackExpansionType::num_expansions(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal310()) {
    return std::nullopt;
  } else {
    return static_cast<unsigned>(self.getVal316());
  }
}

Type PackExpansionType::pattern(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool PackExpansionType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

std::optional<ObjCTypeParamType> ObjCTypeParamType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<ObjCTypeParamType> ObjCTypeParamType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::OBJ_C_TYPE_PARAM:
      return reinterpret_cast<const ObjCTypeParamType &>(parent);
    default: return std::nullopt;
  }
}

Type ObjCTypeParamType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

ObjCTypeParamDecl ObjCTypeParamType::declaration(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return ObjCTypeParamDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool ObjCTypeParamType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<ObjCObjectType> ObjCObjectType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<ObjCObjectType> ObjCObjectType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::OBJ_C_OBJECT:
    case mx::TypeKind::OBJ_C_INTERFACE:
      return reinterpret_cast<const ObjCObjectType &>(parent);
    default: return std::nullopt;
  }
}

Type ObjCObjectType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type ObjCObjectType::base_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

ObjCInterfaceDecl ObjCObjectType::interface(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::optional<Type> ObjCObjectType::super_class_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal310()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal317());
    return fragment->TypeFor(fragment, id);
  }
}

std::vector<Type> ObjCObjectType::type_arguments(void) const {
  auto self = fragment->NthType(offset_);
  auto list = self.getVal318();
  std::vector<Type> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t318 = fragment->TypeFor(fragment, id)) {
      vec.emplace_back(std::move(t318.value()));
    }
  }
  return vec;
}

std::vector<Type> ObjCObjectType::type_arguments_as_written(void) const {
  auto self = fragment->NthType(offset_);
  auto list = self.getVal319();
  std::vector<Type> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t319 = fragment->TypeFor(fragment, id)) {
      vec.emplace_back(std::move(t319.value()));
    }
  }
  return vec;
}

bool ObjCObjectType::is_kind_of_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

bool ObjCObjectType::is_kind_of_type_as_written(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

bool ObjCObjectType::is_obj_c_class(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal313();
}

bool ObjCObjectType::is_obj_c_id(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal320();
}

bool ObjCObjectType::is_obj_c_qualified_class(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal321();
}

bool ObjCObjectType::is_obj_c_qualified_id(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal322();
}

bool ObjCObjectType::is_obj_c_unqualified_class(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal323();
}

bool ObjCObjectType::is_obj_c_unqualified_id(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal324();
}

bool ObjCObjectType::is_obj_c_unqualified_id_or_class(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal325();
}

bool ObjCObjectType::is_specialized(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal326();
}

bool ObjCObjectType::is_specialized_as_written(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal327();
}

bool ObjCObjectType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal328();
}

bool ObjCObjectType::is_unspecialized(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal329();
}

bool ObjCObjectType::is_unspecialized_as_written(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal330();
}

Type ObjCObjectType::strip_obj_c_kind_of_type_and_qualifiers(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal331());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<ObjCInterfaceType> ObjCInterfaceType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<ObjCInterfaceType> ObjCInterfaceType::from(const ObjCObjectType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<ObjCInterfaceType> ObjCInterfaceType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::OBJ_C_INTERFACE:
      return reinterpret_cast<const ObjCInterfaceType &>(parent);
    default: return std::nullopt;
  }
}

ObjCInterfaceDecl ObjCInterfaceType::declaration(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal332());
  return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::optional<ObjCObjectPointerType> ObjCObjectPointerType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<ObjCObjectPointerType> ObjCObjectPointerType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::OBJ_C_OBJECT_POINTER:
      return reinterpret_cast<const ObjCObjectPointerType &>(parent);
    default: return std::nullopt;
  }
}

Type ObjCObjectPointerType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

ObjCInterfaceDecl ObjCObjectPointerType::interface_declaration(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCInterfaceType ObjCObjectPointerType::interface_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return ObjCInterfaceType::from(fragment->TypeFor(fragment, id, false).value()).value();
}

ObjCObjectType ObjCObjectPointerType::object_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal317());
  return ObjCObjectType::from(fragment->TypeFor(fragment, id, false).value()).value();
}

Type ObjCObjectPointerType::super_class_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal331());
  return fragment->TypeFor(fragment, id, false).value();
}

std::vector<Type> ObjCObjectPointerType::type_arguments(void) const {
  auto self = fragment->NthType(offset_);
  auto list = self.getVal318();
  std::vector<Type> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t318 = fragment->TypeFor(fragment, id)) {
      vec.emplace_back(std::move(t318.value()));
    }
  }
  return vec;
}

std::vector<Type> ObjCObjectPointerType::type_arguments_as_written(void) const {
  auto self = fragment->NthType(offset_);
  auto list = self.getVal319();
  std::vector<Type> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t319 = fragment->TypeFor(fragment, id)) {
      vec.emplace_back(std::move(t319.value()));
    }
  }
  return vec;
}

bool ObjCObjectPointerType::is_kind_of_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

bool ObjCObjectPointerType::is_obj_c_id_or_class_type(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

bool ObjCObjectPointerType::is_specialized(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

bool ObjCObjectPointerType::is_specialized_as_written(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal313();
}

bool ObjCObjectPointerType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal320();
}

bool ObjCObjectPointerType::is_unspecialized(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal321();
}

bool ObjCObjectPointerType::is_unspecialized_as_written(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal322();
}

std::vector<ObjCProtocolDecl> ObjCObjectPointerType::qualifiers(void) const {
  auto self = fragment->NthType(offset_);
  auto list = self.getVal333();
  std::vector<ObjCProtocolDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d333 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCProtocolDecl::from(d333.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

ObjCObjectPointerType ObjCObjectPointerType::strip_obj_c_kind_of_type_and_qualifiers(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal332());
  return ObjCObjectPointerType::from(fragment->TypeFor(fragment, id, false).value()).value();
}

std::vector<ObjCProtocolDecl> ObjCObjectPointerType::protocols(void) const {
  auto self = fragment->NthType(offset_);
  auto list = self.getVal334();
  std::vector<ObjCProtocolDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d334 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCProtocolDecl::from(d334.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::optional<MemberPointerType> MemberPointerType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<MemberPointerType> MemberPointerType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::MEMBER_POINTER:
      return reinterpret_cast<const MemberPointerType &>(parent);
    default: return std::nullopt;
  }
}

Type MemberPointerType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type MemberPointerType::class_(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

CXXRecordDecl MemberPointerType::most_recent_cxx_record_declaration(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return CXXRecordDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool MemberPointerType::is_member_data_pointer(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

bool MemberPointerType::is_member_function_pointer(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

bool MemberPointerType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

std::optional<MatrixType> MatrixType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<MatrixType> MatrixType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DEPENDENT_SIZED_MATRIX:
    case mx::TypeKind::CONSTANT_MATRIX:
      return reinterpret_cast<const MatrixType &>(parent);
    default: return std::nullopt;
  }
}

Type MatrixType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type MatrixType::element_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool MatrixType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<DependentSizedMatrixType> DependentSizedMatrixType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<DependentSizedMatrixType> DependentSizedMatrixType::from(const MatrixType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<DependentSizedMatrixType> DependentSizedMatrixType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DEPENDENT_SIZED_MATRIX:
      return reinterpret_cast<const DependentSizedMatrixType &>(parent);
    default: return std::nullopt;
  }
}

Token DependentSizedMatrixType::attribute_token(void) const {
  auto self = fragment->NthType(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal315())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr DependentSizedMatrixType::column_expression(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal317());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr DependentSizedMatrixType::row_expression(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal331());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<ConstantMatrixType> ConstantMatrixType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<ConstantMatrixType> ConstantMatrixType::from(const MatrixType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<ConstantMatrixType> ConstantMatrixType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::CONSTANT_MATRIX:
      return reinterpret_cast<const ConstantMatrixType &>(parent);
    default: return std::nullopt;
  }
}

std::optional<MacroQualifiedType> MacroQualifiedType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<MacroQualifiedType> MacroQualifiedType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::MACRO_QUALIFIED:
      return reinterpret_cast<const MacroQualifiedType &>(parent);
    default: return std::nullopt;
  }
}

Type MacroQualifiedType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type MacroQualifiedType::modified_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

Type MacroQualifiedType::underlying_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return fragment->TypeFor(fragment, id, false).value();
}

bool MacroQualifiedType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<InjectedClassNameType> InjectedClassNameType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<InjectedClassNameType> InjectedClassNameType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::INJECTED_CLASS_NAME:
      return reinterpret_cast<const InjectedClassNameType &>(parent);
    default: return std::nullopt;
  }
}

Type InjectedClassNameType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

CXXRecordDecl InjectedClassNameType::declaration(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return CXXRecordDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Type InjectedClassNameType::injected_specialization_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return fragment->TypeFor(fragment, id, false).value();
}

TemplateSpecializationType InjectedClassNameType::injected_tst(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal317());
  return TemplateSpecializationType::from(fragment->TypeFor(fragment, id, false).value()).value();
}

bool InjectedClassNameType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<FunctionType> FunctionType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<FunctionType> FunctionType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::FUNCTION_PROTO:
    case mx::TypeKind::FUNCTION_NO_PROTO:
      return reinterpret_cast<const FunctionType &>(parent);
    default: return std::nullopt;
  }
}

CallingConv FunctionType::call_conv(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<CallingConv>(self.getVal335());
}

Type FunctionType::call_result_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

bool FunctionType::cmse_ns_call_attribute(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

bool FunctionType::has_reg_parm(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

bool FunctionType::no_return_attribute(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

Type FunctionType::return_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool FunctionType::is_const(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal313();
}

bool FunctionType::is_restrict(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal320();
}

bool FunctionType::is_volatile(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal321();
}

std::optional<FunctionProtoType> FunctionProtoType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<FunctionProtoType> FunctionProtoType::from(const FunctionType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<FunctionProtoType> FunctionProtoType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::FUNCTION_PROTO:
      return reinterpret_cast<const FunctionProtoType &>(parent);
    default: return std::nullopt;
  }
}

std::optional<CanThrowResult> FunctionProtoType::can_throw(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal322()) {
    return std::nullopt;
  } else {
    return static_cast<CanThrowResult>(self.getVal336());
  }
}

Type FunctionProtoType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return fragment->TypeFor(fragment, id, false).value();
}

Token FunctionProtoType::ellipsis_token(void) const {
  auto self = fragment->NthType(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal317())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<FunctionDecl> FunctionProtoType::exception_spec_declaration(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal323()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal331());
    return FunctionDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<FunctionDecl> FunctionProtoType::exception_spec_template(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal324()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal332());
    return FunctionDecl::from(fragment->DeclFor(fragment, id));
  }
}

ExceptionSpecificationType FunctionProtoType::exception_spec_type(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<ExceptionSpecificationType>(self.getVal337());
}

std::optional<Expr> FunctionProtoType::noexcept_expression(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal325()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal338());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

std::vector<Type> FunctionProtoType::parameter_types(void) const {
  auto self = fragment->NthType(offset_);
  auto list = self.getVal318();
  std::vector<Type> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t318 = fragment->TypeFor(fragment, id)) {
      vec.emplace_back(std::move(t318.value()));
    }
  }
  return vec;
}

RefQualifierKind FunctionProtoType::reference_qualifier(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<RefQualifierKind>(self.getVal339());
}

bool FunctionProtoType::has_dependent_exception_spec(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal326();
}

bool FunctionProtoType::has_dynamic_exception_spec(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal327();
}

bool FunctionProtoType::has_exception_spec(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal328();
}

bool FunctionProtoType::has_ext_parameter_infos(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal329();
}

bool FunctionProtoType::has_instantiation_dependent_exception_spec(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal330();
}

bool FunctionProtoType::has_noexcept_exception_spec(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal340();
}

bool FunctionProtoType::has_trailing_return(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal341();
}

std::optional<bool> FunctionProtoType::is_nothrow(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal343()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal342());
  }
}

bool FunctionProtoType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal344();
}

bool FunctionProtoType::is_template_variadic(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal345();
}

bool FunctionProtoType::is_variadic(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal346();
}

std::vector<Type> FunctionProtoType::exception_types(void) const {
  auto self = fragment->NthType(offset_);
  auto list = self.getVal319();
  std::vector<Type> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t319 = fragment->TypeFor(fragment, id)) {
      vec.emplace_back(std::move(t319.value()));
    }
  }
  return vec;
}

std::optional<FunctionNoProtoType> FunctionNoProtoType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<FunctionNoProtoType> FunctionNoProtoType::from(const FunctionType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<FunctionNoProtoType> FunctionNoProtoType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::FUNCTION_NO_PROTO:
      return reinterpret_cast<const FunctionNoProtoType &>(parent);
    default: return std::nullopt;
  }
}

Type FunctionNoProtoType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return fragment->TypeFor(fragment, id, false).value();
}

bool FunctionNoProtoType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal322();
}

std::optional<DependentVectorType> DependentVectorType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<DependentVectorType> DependentVectorType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DEPENDENT_VECTOR:
      return reinterpret_cast<const DependentVectorType &>(parent);
    default: return std::nullopt;
  }
}

Type DependentVectorType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Token DependentVectorType::attribute_token(void) const {
  auto self = fragment->NthType(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal309())) {
    return tok.value();
  } else {
    return Token();
  }
}

Type DependentVectorType::element_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return fragment->TypeFor(fragment, id, false).value();
}

Expr DependentVectorType::size_expression(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal317());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

VectorTypeVectorKind DependentVectorType::vector_kind(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<VectorTypeVectorKind>(self.getVal335());
}

bool DependentVectorType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<DependentSizedExtVectorType> DependentSizedExtVectorType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<DependentSizedExtVectorType> DependentSizedExtVectorType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DEPENDENT_SIZED_EXT_VECTOR:
      return reinterpret_cast<const DependentSizedExtVectorType &>(parent);
    default: return std::nullopt;
  }
}

Type DependentSizedExtVectorType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Token DependentSizedExtVectorType::attribute_token(void) const {
  auto self = fragment->NthType(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal309())) {
    return tok.value();
  } else {
    return Token();
  }
}

Type DependentSizedExtVectorType::element_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return fragment->TypeFor(fragment, id, false).value();
}

Expr DependentSizedExtVectorType::size_expression(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal317());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool DependentSizedExtVectorType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<DependentBitIntType> DependentBitIntType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<DependentBitIntType> DependentBitIntType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DEPENDENT_BIT_INT:
      return reinterpret_cast<const DependentBitIntType &>(parent);
    default: return std::nullopt;
  }
}

Type DependentBitIntType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Expr DependentBitIntType::num_bits_expression(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool DependentBitIntType::is_signed(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

bool DependentBitIntType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

bool DependentBitIntType::is_unsigned(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

std::optional<DependentAddressSpaceType> DependentAddressSpaceType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<DependentAddressSpaceType> DependentAddressSpaceType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DEPENDENT_ADDRESS_SPACE:
      return reinterpret_cast<const DependentAddressSpaceType &>(parent);
    default: return std::nullopt;
  }
}

Type DependentAddressSpaceType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Expr DependentAddressSpaceType::address_space_expression(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token DependentAddressSpaceType::attribute_token(void) const {
  auto self = fragment->NthType(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal315())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool DependentAddressSpaceType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<DeducedType> DeducedType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<DeducedType> DeducedType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DEDUCED_TEMPLATE_SPECIALIZATION:
    case mx::TypeKind::AUTO:
      return reinterpret_cast<const DeducedType &>(parent);
    default: return std::nullopt;
  }
}

Type DeducedType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<Type> DeducedType::resolved_type(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal310()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal309());
    return fragment->TypeFor(fragment, id);
  }
}

bool DeducedType::is_deduced(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

bool DeducedType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

std::optional<DeducedTemplateSpecializationType> DeducedTemplateSpecializationType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<DeducedTemplateSpecializationType> DeducedTemplateSpecializationType::from(const DeducedType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<DeducedTemplateSpecializationType> DeducedTemplateSpecializationType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DEDUCED_TEMPLATE_SPECIALIZATION:
      return reinterpret_cast<const DeducedTemplateSpecializationType &>(parent);
    default: return std::nullopt;
  }
}

std::optional<AutoType> AutoType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<AutoType> AutoType::from(const DeducedType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<AutoType> AutoType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::AUTO:
      return reinterpret_cast<const AutoType &>(parent);
    default: return std::nullopt;
  }
}

AutoTypeKeyword AutoType::keyword(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<AutoTypeKeyword>(self.getVal335());
}

std::vector<TemplateArgument> AutoType::type_constraint_arguments(void) const {
  auto self = fragment->NthType(offset_);
  auto list = self.getVal314();
  std::vector<TemplateArgument> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

std::optional<ConceptDecl> AutoType::type_constraint_concept(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal313()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal315());
    return ConceptDecl::from(fragment->DeclFor(fragment, id));
  }
}

bool AutoType::is_constrained(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal320();
}

bool AutoType::is_decltype_auto(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal321();
}

std::optional<DecltypeType> DecltypeType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<DecltypeType> DecltypeType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DECLTYPE:
      return reinterpret_cast<const DecltypeType &>(parent);
    default: return std::nullopt;
  }
}

Type DecltypeType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Expr DecltypeType::underlying_expression(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Type DecltypeType::underlying_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return fragment->TypeFor(fragment, id, false).value();
}

bool DecltypeType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<ComplexType> ComplexType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<ComplexType> ComplexType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::COMPLEX:
      return reinterpret_cast<const ComplexType &>(parent);
    default: return std::nullopt;
  }
}

Type ComplexType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type ComplexType::element_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool ComplexType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<BuiltinType> BuiltinType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<BuiltinType> BuiltinType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::BUILTIN:
      return reinterpret_cast<const BuiltinType &>(parent);
    default: return std::nullopt;
  }
}

Type BuiltinType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

BuiltinTypeKind BuiltinType::builtin_kind(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<BuiltinTypeKind>(self.getVal335());
}

bool BuiltinType::is_floating_point(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

bool BuiltinType::is_integer(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

bool BuiltinType::is_signed_integer(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

bool BuiltinType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal313();
}

bool BuiltinType::is_unsigned_integer(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal320();
}

std::optional<BlockPointerType> BlockPointerType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<BlockPointerType> BlockPointerType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::BLOCK_POINTER:
      return reinterpret_cast<const BlockPointerType &>(parent);
    default: return std::nullopt;
  }
}

Type BlockPointerType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

bool BlockPointerType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<BitIntType> BitIntType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<BitIntType> BitIntType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::BIT_INT:
      return reinterpret_cast<const BitIntType &>(parent);
    default: return std::nullopt;
  }
}

Type BitIntType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

bool BitIntType::is_signed(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

bool BitIntType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

bool BitIntType::is_unsigned(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

std::optional<AttributedType> AttributedType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<AttributedType> AttributedType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::ATTRIBUTED:
      return reinterpret_cast<const AttributedType &>(parent);
    default: return std::nullopt;
  }
}

Type AttributedType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

AttrKind AttributedType::attribute_kind(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<AttrKind>(self.getVal347());
}

Type AttributedType::equivalent_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<NullabilityKind> AttributedType::immediate_nullability(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal310()) {
    return std::nullopt;
  } else {
    return static_cast<NullabilityKind>(self.getVal335());
  }
}

Type AttributedType::modified_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return fragment->TypeFor(fragment, id, false).value();
}

bool AttributedType::is_calling_conv(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

bool AttributedType::is_ms_type_spec(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal312();
}

bool AttributedType::is_qualifier(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal313();
}

bool AttributedType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal320();
}

std::optional<AtomicType> AtomicType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<AtomicType> AtomicType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::ATOMIC:
      return reinterpret_cast<const AtomicType &>(parent);
    default: return std::nullopt;
  }
}

Type AtomicType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type AtomicType::value_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool AtomicType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<ArrayType> ArrayType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<ArrayType> ArrayType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::VARIABLE_ARRAY:
    case mx::TypeKind::INCOMPLETE_ARRAY:
    case mx::TypeKind::DEPENDENT_SIZED_ARRAY:
    case mx::TypeKind::CONSTANT_ARRAY:
      return reinterpret_cast<const ArrayType &>(parent);
    default: return std::nullopt;
  }
}

Type ArrayType::element_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

ArrayTypeArraySizeModifier ArrayType::size_modifier(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<ArrayTypeArraySizeModifier>(self.getVal335());
}

std::optional<VariableArrayType> VariableArrayType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<VariableArrayType> VariableArrayType::from(const ArrayType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<VariableArrayType> VariableArrayType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::VARIABLE_ARRAY:
      return reinterpret_cast<const VariableArrayType &>(parent);
    default: return std::nullopt;
  }
}

Type VariableArrayType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

TokenRange VariableArrayType::brackets_range(void) const {
  auto self = fragment->NthType(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal315(), self.getVal317());
}

Token VariableArrayType::l_bracket_token(void) const {
  auto self = fragment->NthType(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal331())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token VariableArrayType::r_bracket_token(void) const {
  auto self = fragment->NthType(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal332())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr VariableArrayType::size_expression(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal338());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool VariableArrayType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<IncompleteArrayType> IncompleteArrayType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<IncompleteArrayType> IncompleteArrayType::from(const ArrayType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<IncompleteArrayType> IncompleteArrayType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::INCOMPLETE_ARRAY:
      return reinterpret_cast<const IncompleteArrayType &>(parent);
    default: return std::nullopt;
  }
}

Type IncompleteArrayType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool IncompleteArrayType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<DependentSizedArrayType> DependentSizedArrayType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<DependentSizedArrayType> DependentSizedArrayType::from(const ArrayType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<DependentSizedArrayType> DependentSizedArrayType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DEPENDENT_SIZED_ARRAY:
      return reinterpret_cast<const DependentSizedArrayType &>(parent);
    default: return std::nullopt;
  }
}

Type DependentSizedArrayType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

TokenRange DependentSizedArrayType::brackets_range(void) const {
  auto self = fragment->NthType(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal315(), self.getVal317());
}

Token DependentSizedArrayType::l_bracket_token(void) const {
  auto self = fragment->NthType(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal331())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token DependentSizedArrayType::r_bracket_token(void) const {
  auto self = fragment->NthType(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal332())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr DependentSizedArrayType::size_expression(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal338());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool DependentSizedArrayType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<ConstantArrayType> ConstantArrayType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<ConstantArrayType> ConstantArrayType::from(const ArrayType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<ConstantArrayType> ConstantArrayType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::CONSTANT_ARRAY:
      return reinterpret_cast<const ConstantArrayType &>(parent);
    default: return std::nullopt;
  }
}

Type ConstantArrayType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<Expr> ConstantArrayType::size_expression(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal310()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal315());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

bool ConstantArrayType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

std::optional<AdjustedType> AdjustedType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<AdjustedType> AdjustedType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::ADJUSTED:
    case mx::TypeKind::DECAYED:
      return reinterpret_cast<const AdjustedType &>(parent);
    default: return std::nullopt;
  }
}

Type AdjustedType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type AdjustedType::resolved_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

Type AdjustedType::original_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return fragment->TypeFor(fragment, id, false).value();
}

bool AdjustedType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<DecayedType> DecayedType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<DecayedType> DecayedType::from(const AdjustedType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<DecayedType> DecayedType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DECAYED:
      return reinterpret_cast<const DecayedType &>(parent);
    default: return std::nullopt;
  }
}

std::optional<TypeWithKeyword> TypeWithKeyword::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<TypeWithKeyword> TypeWithKeyword::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::ELABORATED:
    case mx::TypeKind::DEPENDENT_TEMPLATE_SPECIALIZATION:
    case mx::TypeKind::DEPENDENT_NAME:
      return reinterpret_cast<const TypeWithKeyword &>(parent);
    default: return std::nullopt;
  }
}

ElaboratedTypeKeyword TypeWithKeyword::keyword(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<ElaboratedTypeKeyword>(self.getVal335());
}

std::optional<ElaboratedType> ElaboratedType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<ElaboratedType> ElaboratedType::from(const TypeWithKeyword &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<ElaboratedType> ElaboratedType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::ELABORATED:
      return reinterpret_cast<const ElaboratedType &>(parent);
    default: return std::nullopt;
  }
}

Type ElaboratedType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type ElaboratedType::named_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<TagDecl> ElaboratedType::owned_tag_declaration(void) const {
  auto self = fragment->NthType(offset_);
  if (!self.getVal310()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal315());
    return TagDecl::from(fragment->DeclFor(fragment, id));
  }
}

bool ElaboratedType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal311();
}

std::optional<DependentTemplateSpecializationType> DependentTemplateSpecializationType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<DependentTemplateSpecializationType> DependentTemplateSpecializationType::from(const TypeWithKeyword &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<DependentTemplateSpecializationType> DependentTemplateSpecializationType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DEPENDENT_TEMPLATE_SPECIALIZATION:
      return reinterpret_cast<const DependentTemplateSpecializationType &>(parent);
    default: return std::nullopt;
  }
}

Type DependentTemplateSpecializationType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

bool DependentTemplateSpecializationType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::vector<TemplateArgument> DependentTemplateSpecializationType::template_arguments(void) const {
  auto self = fragment->NthType(offset_);
  auto list = self.getVal314();
  std::vector<TemplateArgument> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

std::optional<DependentNameType> DependentNameType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<DependentNameType> DependentNameType::from(const TypeWithKeyword &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<DependentNameType> DependentNameType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::DEPENDENT_NAME:
      return reinterpret_cast<const DependentNameType &>(parent);
    default: return std::nullopt;
  }
}

Type DependentNameType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

bool DependentNameType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<VectorType> VectorType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<VectorType> VectorType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::VECTOR:
    case mx::TypeKind::EXT_VECTOR:
      return reinterpret_cast<const VectorType &>(parent);
    default: return std::nullopt;
  }
}

Type VectorType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type VectorType::element_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

VectorTypeVectorKind VectorType::vector_kind(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<VectorTypeVectorKind>(self.getVal335());
}

bool VectorType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<ExtVectorType> ExtVectorType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<ExtVectorType> ExtVectorType::from(const VectorType &parent) {
  return from(reinterpret_cast<const Type &>(parent));
}

std::optional<ExtVectorType> ExtVectorType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::EXT_VECTOR:
      return reinterpret_cast<const ExtVectorType &>(parent);
    default: return std::nullopt;
  }
}

std::optional<UsingType> UsingType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<UsingType> UsingType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::USING:
      return reinterpret_cast<const UsingType &>(parent);
    default: return std::nullopt;
  }
}

Type UsingType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

UsingShadowDecl UsingType::found_declaration(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return UsingShadowDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Type UsingType::underlying_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return fragment->TypeFor(fragment, id, false).value();
}

bool UsingType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<UnresolvedUsingType> UnresolvedUsingType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<UnresolvedUsingType> UnresolvedUsingType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::UNRESOLVED_USING:
      return reinterpret_cast<const UnresolvedUsingType &>(parent);
    default: return std::nullopt;
  }
}

Type UnresolvedUsingType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

UnresolvedUsingTypenameDecl UnresolvedUsingType::declaration(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return UnresolvedUsingTypenameDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool UnresolvedUsingType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<UnaryTransformType> UnaryTransformType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<UnaryTransformType> UnaryTransformType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::UNARY_TRANSFORM:
      return reinterpret_cast<const UnaryTransformType &>(parent);
    default: return std::nullopt;
  }
}

Type UnaryTransformType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type UnaryTransformType::base_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

UnaryTransformTypeUTTKind UnaryTransformType::utt_kind(void) const {
  auto self = fragment->NthType(offset_);
  return static_cast<UnaryTransformTypeUTTKind>(self.getVal335());
}

Type UnaryTransformType::underlying_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal315());
  return fragment->TypeFor(fragment, id, false).value();
}

bool UnaryTransformType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<TypedefType> TypedefType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<TypedefType> TypedefType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::TYPEDEF:
      return reinterpret_cast<const TypedefType &>(parent);
    default: return std::nullopt;
  }
}

Type TypedefType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

TypedefNameDecl TypedefType::declaration(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return TypedefNameDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool TypedefType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<TypeOfType> TypeOfType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<TypeOfType> TypeOfType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::TYPE_OF:
      return reinterpret_cast<const TypeOfType &>(parent);
    default: return std::nullopt;
  }
}

Type TypeOfType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Type TypeOfType::underlying_type(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return fragment->TypeFor(fragment, id, false).value();
}

bool TypeOfType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<TypeOfExprType> TypeOfExprType::from(const TokenContext &c) {
  return from(c.as_type());
}

std::optional<TypeOfExprType> TypeOfExprType::from(const Type &parent) {
  switch (parent.kind()) {
    case mx::TypeKind::TYPE_OF_EXPR:
      return reinterpret_cast<const TypeOfExprType &>(parent);
    default: return std::nullopt;
  }
}

Type TypeOfExprType::desugar(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal308());
  return fragment->TypeFor(fragment, id, false).value();
}

Expr TypeOfExprType::underlying_expression(void) const {
  auto self = fragment->NthType(offset_);
  EntityId id(self.getVal309());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool TypeOfExprType::is_sugared(void) const {
  auto self = fragment->NthType(offset_);
  return self.getVal310();
}

std::optional<Decl> Stmt::parent_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto id = self.getVal0(); id != kInvalidEntityId) {
    return fragment->DeclFor(fragment, id);
  } else {
    return std::nullopt;
  }
}

std::optional<Stmt> Stmt::parent_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto id = self.getVal1(); id != kInvalidEntityId) {
    return fragment->StmtFor(fragment, id);
  } else {
    return std::nullopt;
  }
}

std::optional<Decl> Stmt::referenced_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto id = self.getVal2(); id != kInvalidEntityId) {
    return fragment->DeclFor(fragment, id);
  } else {
    return std::nullopt;
  }
}

StmtContainingStmtRange Stmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

StmtContainingStmtRange Stmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool Stmt::contains(const Decl &decl) {
  for(auto &parent : Stmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool Stmt::contains(const Stmt &stmt) {
  for(auto &parent : Stmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

Stmt Stmt::ignore_containers(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal3());
  return fragment->StmtFor(fragment, id, false).value();
}

std::vector<Stmt> Stmt::children(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal4();
  std::vector<Stmt> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s4 = fragment->StmtFor(fragment, id)) {
      vec.emplace_back(std::move(s4.value()));
    }
  }
  return vec;
}

TokenRange Stmt::tokens(void) const {
  auto self = fragment->NthStmt(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal5(), self.getVal6());
}

StmtKind Stmt::kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<StmtKind>(self.getVal7());
}

Stmt Stmt::strip_label_like_statements(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal8());
  return fragment->StmtFor(fragment, id, false).value();
}

SEHTryStmtContainingStmtRange SEHTryStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

SEHTryStmtContainingStmtRange SEHTryStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool SEHTryStmt::contains(const Decl &decl) {
  for(auto &parent : SEHTryStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool SEHTryStmt::contains(const Stmt &stmt) {
  for(auto &parent : SEHTryStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<SEHTryStmt> SEHTryStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<SEHTryStmt> SEHTryStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::SEH_TRY_STMT:
      return reinterpret_cast<const SEHTryStmt &>(parent);
    default: return std::nullopt;
  }
}

SEHExceptStmt SEHTryStmt::except_handler(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return SEHExceptStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

SEHFinallyStmt SEHTryStmt::finally_handler(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return SEHFinallyStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Stmt SEHTryStmt::handler(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return fragment->StmtFor(fragment, id, false).value();
}

bool SEHTryStmt::is_cxx_try(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal12();
}

CompoundStmt SEHTryStmt::try_block(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal13());
  return CompoundStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token SEHTryStmt::try_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal14())) {
    return tok.value();
  } else {
    return Token();
  }
}

SEHLeaveStmtContainingStmtRange SEHLeaveStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

SEHLeaveStmtContainingStmtRange SEHLeaveStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool SEHLeaveStmt::contains(const Decl &decl) {
  for(auto &parent : SEHLeaveStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool SEHLeaveStmt::contains(const Stmt &stmt) {
  for(auto &parent : SEHLeaveStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<SEHLeaveStmt> SEHLeaveStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<SEHLeaveStmt> SEHLeaveStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::SEH_LEAVE_STMT:
      return reinterpret_cast<const SEHLeaveStmt &>(parent);
    default: return std::nullopt;
  }
}

Token SEHLeaveStmt::leave_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

SEHFinallyStmtContainingStmtRange SEHFinallyStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

SEHFinallyStmtContainingStmtRange SEHFinallyStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool SEHFinallyStmt::contains(const Decl &decl) {
  for(auto &parent : SEHFinallyStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool SEHFinallyStmt::contains(const Stmt &stmt) {
  for(auto &parent : SEHFinallyStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<SEHFinallyStmt> SEHFinallyStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<SEHFinallyStmt> SEHFinallyStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::SEH_FINALLY_STMT:
      return reinterpret_cast<const SEHFinallyStmt &>(parent);
    default: return std::nullopt;
  }
}

CompoundStmt SEHFinallyStmt::block(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return CompoundStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token SEHFinallyStmt::finally_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal10())) {
    return tok.value();
  } else {
    return Token();
  }
}

SEHExceptStmtContainingStmtRange SEHExceptStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

SEHExceptStmtContainingStmtRange SEHExceptStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool SEHExceptStmt::contains(const Decl &decl) {
  for(auto &parent : SEHExceptStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool SEHExceptStmt::contains(const Stmt &stmt) {
  for(auto &parent : SEHExceptStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<SEHExceptStmt> SEHExceptStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<SEHExceptStmt> SEHExceptStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::SEH_EXCEPT_STMT:
      return reinterpret_cast<const SEHExceptStmt &>(parent);
    default: return std::nullopt;
  }
}

CompoundStmt SEHExceptStmt::block(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return CompoundStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token SEHExceptStmt::except_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal10())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr SEHExceptStmt::filter_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ReturnStmtContainingStmtRange ReturnStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ReturnStmtContainingStmtRange ReturnStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ReturnStmt::contains(const Decl &decl) {
  for(auto &parent : ReturnStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ReturnStmt::contains(const Stmt &stmt) {
  for(auto &parent : ReturnStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ReturnStmt> ReturnStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ReturnStmt> ReturnStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::RETURN_STMT:
      return reinterpret_cast<const ReturnStmt &>(parent);
    default: return std::nullopt;
  }
}

std::optional<VarDecl> ReturnStmt::nrvo_candidate(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal9());
    return VarDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<Expr> ReturnStmt::return_value(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal15()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal10());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

Token ReturnStmt::return_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal11())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCForCollectionStmtContainingStmtRange ObjCForCollectionStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCForCollectionStmtContainingStmtRange ObjCForCollectionStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCForCollectionStmt::contains(const Decl &decl) {
  for(auto &parent : ObjCForCollectionStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCForCollectionStmt::contains(const Stmt &stmt) {
  for(auto &parent : ObjCForCollectionStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCForCollectionStmt> ObjCForCollectionStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCForCollectionStmt> ObjCForCollectionStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_FOR_COLLECTION_STMT:
      return reinterpret_cast<const ObjCForCollectionStmt &>(parent);
    default: return std::nullopt;
  }
}

Stmt ObjCForCollectionStmt::body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return fragment->StmtFor(fragment, id, false).value();
}

Expr ObjCForCollectionStmt::collection(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Stmt ObjCForCollectionStmt::element(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return fragment->StmtFor(fragment, id, false).value();
}

Token ObjCForCollectionStmt::for_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal13())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ObjCForCollectionStmt::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal14())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCAutoreleasePoolStmtContainingStmtRange ObjCAutoreleasePoolStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCAutoreleasePoolStmtContainingStmtRange ObjCAutoreleasePoolStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCAutoreleasePoolStmt::contains(const Decl &decl) {
  for(auto &parent : ObjCAutoreleasePoolStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCAutoreleasePoolStmt::contains(const Stmt &stmt) {
  for(auto &parent : ObjCAutoreleasePoolStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCAutoreleasePoolStmt> ObjCAutoreleasePoolStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCAutoreleasePoolStmt> ObjCAutoreleasePoolStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_AUTORELEASE_POOL_STMT:
      return reinterpret_cast<const ObjCAutoreleasePoolStmt &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCAutoreleasePoolStmt::at_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

Stmt ObjCAutoreleasePoolStmt::sub_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return fragment->StmtFor(fragment, id, false).value();
}

ObjCAtTryStmtContainingStmtRange ObjCAtTryStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCAtTryStmtContainingStmtRange ObjCAtTryStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCAtTryStmt::contains(const Decl &decl) {
  for(auto &parent : ObjCAtTryStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCAtTryStmt::contains(const Stmt &stmt) {
  for(auto &parent : ObjCAtTryStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCAtTryStmt> ObjCAtTryStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCAtTryStmt> ObjCAtTryStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_AT_TRY_STMT:
      return reinterpret_cast<const ObjCAtTryStmt &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCAtTryStmt::at_try_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCAtFinallyStmt ObjCAtTryStmt::finally_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return ObjCAtFinallyStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Stmt ObjCAtTryStmt::try_body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return fragment->StmtFor(fragment, id, false).value();
}

std::vector<ObjCAtCatchStmt> ObjCAtTryStmt::catch_statements(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<ObjCAtCatchStmt> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = ObjCAtCatchStmt::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

ObjCAtThrowStmtContainingStmtRange ObjCAtThrowStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCAtThrowStmtContainingStmtRange ObjCAtThrowStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCAtThrowStmt::contains(const Decl &decl) {
  for(auto &parent : ObjCAtThrowStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCAtThrowStmt::contains(const Stmt &stmt) {
  for(auto &parent : ObjCAtThrowStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCAtThrowStmt> ObjCAtThrowStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCAtThrowStmt> ObjCAtThrowStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_AT_THROW_STMT:
      return reinterpret_cast<const ObjCAtThrowStmt &>(parent);
    default: return std::nullopt;
  }
}

Expr ObjCAtThrowStmt::throw_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token ObjCAtThrowStmt::throw_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal10())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCAtSynchronizedStmtContainingStmtRange ObjCAtSynchronizedStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCAtSynchronizedStmtContainingStmtRange ObjCAtSynchronizedStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCAtSynchronizedStmt::contains(const Decl &decl) {
  for(auto &parent : ObjCAtSynchronizedStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCAtSynchronizedStmt::contains(const Stmt &stmt) {
  for(auto &parent : ObjCAtSynchronizedStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCAtSynchronizedStmt> ObjCAtSynchronizedStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCAtSynchronizedStmt> ObjCAtSynchronizedStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_AT_SYNCHRONIZED_STMT:
      return reinterpret_cast<const ObjCAtSynchronizedStmt &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCAtSynchronizedStmt::at_synchronized_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

CompoundStmt ObjCAtSynchronizedStmt::synch_body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return CompoundStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr ObjCAtSynchronizedStmt::synch_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ObjCAtFinallyStmtContainingStmtRange ObjCAtFinallyStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCAtFinallyStmtContainingStmtRange ObjCAtFinallyStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCAtFinallyStmt::contains(const Decl &decl) {
  for(auto &parent : ObjCAtFinallyStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCAtFinallyStmt::contains(const Stmt &stmt) {
  for(auto &parent : ObjCAtFinallyStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCAtFinallyStmt> ObjCAtFinallyStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCAtFinallyStmt> ObjCAtFinallyStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_AT_FINALLY_STMT:
      return reinterpret_cast<const ObjCAtFinallyStmt &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCAtFinallyStmt::at_finally_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

Stmt ObjCAtFinallyStmt::finally_body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return fragment->StmtFor(fragment, id, false).value();
}

ObjCAtCatchStmtContainingStmtRange ObjCAtCatchStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCAtCatchStmtContainingStmtRange ObjCAtCatchStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCAtCatchStmt::contains(const Decl &decl) {
  for(auto &parent : ObjCAtCatchStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCAtCatchStmt::contains(const Stmt &stmt) {
  for(auto &parent : ObjCAtCatchStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCAtCatchStmt> ObjCAtCatchStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCAtCatchStmt> ObjCAtCatchStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_AT_CATCH_STMT:
      return reinterpret_cast<const ObjCAtCatchStmt &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCAtCatchStmt::at_catch_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

Stmt ObjCAtCatchStmt::catch_body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return fragment->StmtFor(fragment, id, false).value();
}

VarDecl ObjCAtCatchStmt::catch_parameter_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return VarDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token ObjCAtCatchStmt::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal13())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool ObjCAtCatchStmt::has_ellipsis(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal12();
}

OMPExecutableDirectiveContainingStmtRange OMPExecutableDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPExecutableDirectiveContainingStmtRange OMPExecutableDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPExecutableDirective::contains(const Decl &decl) {
  for(auto &parent : OMPExecutableDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPExecutableDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPExecutableDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPExecutableDirective> OMPExecutableDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPExecutableDirective> OMPExecutableDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_DISPATCH_DIRECTIVE:
    case mx::StmtKind::OMP_DEPOBJ_DIRECTIVE:
    case mx::StmtKind::OMP_CRITICAL_DIRECTIVE:
    case mx::StmtKind::OMP_CANCELLATION_POINT_DIRECTIVE:
    case mx::StmtKind::OMP_CANCEL_DIRECTIVE:
    case mx::StmtKind::OMP_BARRIER_DIRECTIVE:
    case mx::StmtKind::OMP_ATOMIC_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DIRECTIVE:
    case mx::StmtKind::OMP_TASKYIELD_DIRECTIVE:
    case mx::StmtKind::OMP_TASKWAIT_DIRECTIVE:
    case mx::StmtKind::OMP_TASKGROUP_DIRECTIVE:
    case mx::StmtKind::OMP_TASK_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_UPDATE_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_PARALLEL_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_EXIT_DATA_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_ENTER_DATA_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_DATA_DIRECTIVE:
    case mx::StmtKind::OMP_SINGLE_DIRECTIVE:
    case mx::StmtKind::OMP_SECTIONS_DIRECTIVE:
    case mx::StmtKind::OMP_SECTION_DIRECTIVE:
    case mx::StmtKind::OMP_SCAN_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_SECTIONS_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_MASTER_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_DIRECTIVE:
    case mx::StmtKind::OMP_ORDERED_DIRECTIVE:
    case mx::StmtKind::OMP_META_DIRECTIVE:
    case mx::StmtKind::OMP_MASTER_DIRECTIVE:
    case mx::StmtKind::OMP_MASKED_DIRECTIVE:
    case mx::StmtKind::OMP_UNROLL_DIRECTIVE:
    case mx::StmtKind::OMP_TILE_DIRECTIVE:
    case mx::StmtKind::OMP_GENERIC_LOOP_DIRECTIVE:
    case mx::StmtKind::OMP_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_DISTRIBUTE_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_DISTRIBUTE_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_DIRECTIVE:
    case mx::StmtKind::OMP_TASK_LOOP_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TASK_LOOP_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_MASTER_TASK_LOOP_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_MASTER_TASK_LOOP_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_MASTER_TASK_LOOP_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_MASTER_TASK_LOOP_DIRECTIVE:
    case mx::StmtKind::OMP_INTEROP_DIRECTIVE:
    case mx::StmtKind::OMP_FLUSH_DIRECTIVE:
      return reinterpret_cast<const OMPExecutableDirective &>(parent);
    default: return std::nullopt;
  }
}

Stmt OMPExecutableDirective::associated_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return fragment->StmtFor(fragment, id, false).value();
}

CapturedStmt OMPExecutableDirective::innermost_captured_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return CapturedStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Stmt OMPExecutableDirective::raw_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return fragment->StmtFor(fragment, id, false).value();
}

Stmt OMPExecutableDirective::structured_block(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal13());
  return fragment->StmtFor(fragment, id, false).value();
}

bool OMPExecutableDirective::has_associated_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal12();
}

bool OMPExecutableDirective::is_standalone_directive(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal15();
}

OMPDispatchDirectiveContainingStmtRange OMPDispatchDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPDispatchDirectiveContainingStmtRange OMPDispatchDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPDispatchDirective::contains(const Decl &decl) {
  for(auto &parent : OMPDispatchDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPDispatchDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPDispatchDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPDispatchDirective> OMPDispatchDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPDispatchDirective> OMPDispatchDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDispatchDirective> OMPDispatchDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_DISPATCH_DIRECTIVE:
      return reinterpret_cast<const OMPDispatchDirective &>(parent);
    default: return std::nullopt;
  }
}

Token OMPDispatchDirective::target_call_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal14())) {
    return tok.value();
  } else {
    return Token();
  }
}

OMPDepobjDirectiveContainingStmtRange OMPDepobjDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPDepobjDirectiveContainingStmtRange OMPDepobjDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPDepobjDirective::contains(const Decl &decl) {
  for(auto &parent : OMPDepobjDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPDepobjDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPDepobjDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPDepobjDirective> OMPDepobjDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPDepobjDirective> OMPDepobjDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDepobjDirective> OMPDepobjDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_DEPOBJ_DIRECTIVE:
      return reinterpret_cast<const OMPDepobjDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPCriticalDirectiveContainingStmtRange OMPCriticalDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPCriticalDirectiveContainingStmtRange OMPCriticalDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPCriticalDirective::contains(const Decl &decl) {
  for(auto &parent : OMPCriticalDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPCriticalDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPCriticalDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPCriticalDirective> OMPCriticalDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPCriticalDirective> OMPCriticalDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPCriticalDirective> OMPCriticalDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_CRITICAL_DIRECTIVE:
      return reinterpret_cast<const OMPCriticalDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPCancellationPointDirectiveContainingStmtRange OMPCancellationPointDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPCancellationPointDirectiveContainingStmtRange OMPCancellationPointDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPCancellationPointDirective::contains(const Decl &decl) {
  for(auto &parent : OMPCancellationPointDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPCancellationPointDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPCancellationPointDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPCancellationPointDirective> OMPCancellationPointDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPCancellationPointDirective> OMPCancellationPointDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPCancellationPointDirective> OMPCancellationPointDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_CANCELLATION_POINT_DIRECTIVE:
      return reinterpret_cast<const OMPCancellationPointDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPCancelDirectiveContainingStmtRange OMPCancelDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPCancelDirectiveContainingStmtRange OMPCancelDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPCancelDirective::contains(const Decl &decl) {
  for(auto &parent : OMPCancelDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPCancelDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPCancelDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPCancelDirective> OMPCancelDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPCancelDirective> OMPCancelDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPCancelDirective> OMPCancelDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_CANCEL_DIRECTIVE:
      return reinterpret_cast<const OMPCancelDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPBarrierDirectiveContainingStmtRange OMPBarrierDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPBarrierDirectiveContainingStmtRange OMPBarrierDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPBarrierDirective::contains(const Decl &decl) {
  for(auto &parent : OMPBarrierDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPBarrierDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPBarrierDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPBarrierDirective> OMPBarrierDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPBarrierDirective> OMPBarrierDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPBarrierDirective> OMPBarrierDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_BARRIER_DIRECTIVE:
      return reinterpret_cast<const OMPBarrierDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPAtomicDirectiveContainingStmtRange OMPAtomicDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPAtomicDirectiveContainingStmtRange OMPAtomicDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPAtomicDirective::contains(const Decl &decl) {
  for(auto &parent : OMPAtomicDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPAtomicDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPAtomicDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPAtomicDirective> OMPAtomicDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPAtomicDirective> OMPAtomicDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPAtomicDirective> OMPAtomicDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_ATOMIC_DIRECTIVE:
      return reinterpret_cast<const OMPAtomicDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPAtomicDirective::expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPAtomicDirective::update_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal17());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPAtomicDirective::v(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal18());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPAtomicDirective::x(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal19());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool OMPAtomicDirective::is_postfix_update(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

bool OMPAtomicDirective::is_xlhs_in_rhs_part(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal21();
}

OMPTeamsDirectiveContainingStmtRange OMPTeamsDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTeamsDirectiveContainingStmtRange OMPTeamsDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTeamsDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTeamsDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTeamsDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTeamsDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTeamsDirective> OMPTeamsDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTeamsDirective> OMPTeamsDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDirective> OMPTeamsDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TEAMS_DIRECTIVE:
      return reinterpret_cast<const OMPTeamsDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTaskyieldDirectiveContainingStmtRange OMPTaskyieldDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTaskyieldDirectiveContainingStmtRange OMPTaskyieldDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTaskyieldDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTaskyieldDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTaskyieldDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTaskyieldDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTaskyieldDirective> OMPTaskyieldDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTaskyieldDirective> OMPTaskyieldDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTaskyieldDirective> OMPTaskyieldDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TASKYIELD_DIRECTIVE:
      return reinterpret_cast<const OMPTaskyieldDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTaskwaitDirectiveContainingStmtRange OMPTaskwaitDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTaskwaitDirectiveContainingStmtRange OMPTaskwaitDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTaskwaitDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTaskwaitDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTaskwaitDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTaskwaitDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTaskwaitDirective> OMPTaskwaitDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTaskwaitDirective> OMPTaskwaitDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTaskwaitDirective> OMPTaskwaitDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TASKWAIT_DIRECTIVE:
      return reinterpret_cast<const OMPTaskwaitDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTaskgroupDirectiveContainingStmtRange OMPTaskgroupDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTaskgroupDirectiveContainingStmtRange OMPTaskgroupDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTaskgroupDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTaskgroupDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTaskgroupDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTaskgroupDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTaskgroupDirective> OMPTaskgroupDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTaskgroupDirective> OMPTaskgroupDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTaskgroupDirective> OMPTaskgroupDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TASKGROUP_DIRECTIVE:
      return reinterpret_cast<const OMPTaskgroupDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPTaskgroupDirective::reduction_reference(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

OMPTaskDirectiveContainingStmtRange OMPTaskDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTaskDirectiveContainingStmtRange OMPTaskDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTaskDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTaskDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTaskDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTaskDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTaskDirective> OMPTaskDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTaskDirective> OMPTaskDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTaskDirective> OMPTaskDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TASK_DIRECTIVE:
      return reinterpret_cast<const OMPTaskDirective &>(parent);
    default: return std::nullopt;
  }
}

bool OMPTaskDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPTargetUpdateDirectiveContainingStmtRange OMPTargetUpdateDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetUpdateDirectiveContainingStmtRange OMPTargetUpdateDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetUpdateDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetUpdateDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetUpdateDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetUpdateDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetUpdateDirective> OMPTargetUpdateDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetUpdateDirective> OMPTargetUpdateDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetUpdateDirective> OMPTargetUpdateDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_UPDATE_DIRECTIVE:
      return reinterpret_cast<const OMPTargetUpdateDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTargetTeamsDirectiveContainingStmtRange OMPTargetTeamsDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetTeamsDirectiveContainingStmtRange OMPTargetTeamsDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetTeamsDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetTeamsDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetTeamsDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetTeamsDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetTeamsDirective> OMPTargetTeamsDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetTeamsDirective> OMPTargetTeamsDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDirective> OMPTargetTeamsDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_TEAMS_DIRECTIVE:
      return reinterpret_cast<const OMPTargetTeamsDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTargetParallelDirectiveContainingStmtRange OMPTargetParallelDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetParallelDirectiveContainingStmtRange OMPTargetParallelDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetParallelDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetParallelDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetParallelDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetParallelDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetParallelDirective> OMPTargetParallelDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetParallelDirective> OMPTargetParallelDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetParallelDirective> OMPTargetParallelDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_PARALLEL_DIRECTIVE:
      return reinterpret_cast<const OMPTargetParallelDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPTargetParallelDirective::task_reduction_reference_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool OMPTargetParallelDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPTargetExitDataDirectiveContainingStmtRange OMPTargetExitDataDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetExitDataDirectiveContainingStmtRange OMPTargetExitDataDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetExitDataDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetExitDataDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetExitDataDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetExitDataDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetExitDataDirective> OMPTargetExitDataDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetExitDataDirective> OMPTargetExitDataDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetExitDataDirective> OMPTargetExitDataDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_EXIT_DATA_DIRECTIVE:
      return reinterpret_cast<const OMPTargetExitDataDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTargetEnterDataDirectiveContainingStmtRange OMPTargetEnterDataDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetEnterDataDirectiveContainingStmtRange OMPTargetEnterDataDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetEnterDataDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetEnterDataDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetEnterDataDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetEnterDataDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetEnterDataDirective> OMPTargetEnterDataDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetEnterDataDirective> OMPTargetEnterDataDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetEnterDataDirective> OMPTargetEnterDataDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_ENTER_DATA_DIRECTIVE:
      return reinterpret_cast<const OMPTargetEnterDataDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTargetDirectiveContainingStmtRange OMPTargetDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetDirectiveContainingStmtRange OMPTargetDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetDirective> OMPTargetDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetDirective> OMPTargetDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetDirective> OMPTargetDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_DIRECTIVE:
      return reinterpret_cast<const OMPTargetDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTargetDataDirectiveContainingStmtRange OMPTargetDataDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetDataDirectiveContainingStmtRange OMPTargetDataDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetDataDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetDataDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetDataDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetDataDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetDataDirective> OMPTargetDataDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetDataDirective> OMPTargetDataDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetDataDirective> OMPTargetDataDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_DATA_DIRECTIVE:
      return reinterpret_cast<const OMPTargetDataDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPSingleDirectiveContainingStmtRange OMPSingleDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPSingleDirectiveContainingStmtRange OMPSingleDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPSingleDirective::contains(const Decl &decl) {
  for(auto &parent : OMPSingleDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPSingleDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPSingleDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPSingleDirective> OMPSingleDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPSingleDirective> OMPSingleDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPSingleDirective> OMPSingleDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_SINGLE_DIRECTIVE:
      return reinterpret_cast<const OMPSingleDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPSectionsDirectiveContainingStmtRange OMPSectionsDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPSectionsDirectiveContainingStmtRange OMPSectionsDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPSectionsDirective::contains(const Decl &decl) {
  for(auto &parent : OMPSectionsDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPSectionsDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPSectionsDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPSectionsDirective> OMPSectionsDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPSectionsDirective> OMPSectionsDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPSectionsDirective> OMPSectionsDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_SECTIONS_DIRECTIVE:
      return reinterpret_cast<const OMPSectionsDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPSectionsDirective::task_reduction_reference_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool OMPSectionsDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPSectionDirectiveContainingStmtRange OMPSectionDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPSectionDirectiveContainingStmtRange OMPSectionDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPSectionDirective::contains(const Decl &decl) {
  for(auto &parent : OMPSectionDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPSectionDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPSectionDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPSectionDirective> OMPSectionDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPSectionDirective> OMPSectionDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPSectionDirective> OMPSectionDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_SECTION_DIRECTIVE:
      return reinterpret_cast<const OMPSectionDirective &>(parent);
    default: return std::nullopt;
  }
}

bool OMPSectionDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPScanDirectiveContainingStmtRange OMPScanDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPScanDirectiveContainingStmtRange OMPScanDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPScanDirective::contains(const Decl &decl) {
  for(auto &parent : OMPScanDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPScanDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPScanDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPScanDirective> OMPScanDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPScanDirective> OMPScanDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPScanDirective> OMPScanDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_SCAN_DIRECTIVE:
      return reinterpret_cast<const OMPScanDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPParallelSectionsDirectiveContainingStmtRange OMPParallelSectionsDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPParallelSectionsDirectiveContainingStmtRange OMPParallelSectionsDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPParallelSectionsDirective::contains(const Decl &decl) {
  for(auto &parent : OMPParallelSectionsDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPParallelSectionsDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPParallelSectionsDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPParallelSectionsDirective> OMPParallelSectionsDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPParallelSectionsDirective> OMPParallelSectionsDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelSectionsDirective> OMPParallelSectionsDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_PARALLEL_SECTIONS_DIRECTIVE:
      return reinterpret_cast<const OMPParallelSectionsDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPParallelSectionsDirective::task_reduction_reference_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool OMPParallelSectionsDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPParallelMasterDirectiveContainingStmtRange OMPParallelMasterDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPParallelMasterDirectiveContainingStmtRange OMPParallelMasterDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPParallelMasterDirective::contains(const Decl &decl) {
  for(auto &parent : OMPParallelMasterDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPParallelMasterDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPParallelMasterDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPParallelMasterDirective> OMPParallelMasterDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPParallelMasterDirective> OMPParallelMasterDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelMasterDirective> OMPParallelMasterDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_PARALLEL_MASTER_DIRECTIVE:
      return reinterpret_cast<const OMPParallelMasterDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPParallelMasterDirective::task_reduction_reference_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

OMPParallelDirectiveContainingStmtRange OMPParallelDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPParallelDirectiveContainingStmtRange OMPParallelDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPParallelDirective::contains(const Decl &decl) {
  for(auto &parent : OMPParallelDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPParallelDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPParallelDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPParallelDirective> OMPParallelDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPParallelDirective> OMPParallelDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelDirective> OMPParallelDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_PARALLEL_DIRECTIVE:
      return reinterpret_cast<const OMPParallelDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPParallelDirective::task_reduction_reference_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool OMPParallelDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPOrderedDirectiveContainingStmtRange OMPOrderedDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPOrderedDirectiveContainingStmtRange OMPOrderedDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPOrderedDirective::contains(const Decl &decl) {
  for(auto &parent : OMPOrderedDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPOrderedDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPOrderedDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPOrderedDirective> OMPOrderedDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPOrderedDirective> OMPOrderedDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPOrderedDirective> OMPOrderedDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_ORDERED_DIRECTIVE:
      return reinterpret_cast<const OMPOrderedDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPMetaDirectiveContainingStmtRange OMPMetaDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPMetaDirectiveContainingStmtRange OMPMetaDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPMetaDirective::contains(const Decl &decl) {
  for(auto &parent : OMPMetaDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPMetaDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPMetaDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPMetaDirective> OMPMetaDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPMetaDirective> OMPMetaDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPMetaDirective> OMPMetaDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_META_DIRECTIVE:
      return reinterpret_cast<const OMPMetaDirective &>(parent);
    default: return std::nullopt;
  }
}

Stmt OMPMetaDirective::if_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return fragment->StmtFor(fragment, id, false).value();
}

OMPMasterDirectiveContainingStmtRange OMPMasterDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPMasterDirectiveContainingStmtRange OMPMasterDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPMasterDirective::contains(const Decl &decl) {
  for(auto &parent : OMPMasterDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPMasterDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPMasterDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPMasterDirective> OMPMasterDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPMasterDirective> OMPMasterDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPMasterDirective> OMPMasterDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_MASTER_DIRECTIVE:
      return reinterpret_cast<const OMPMasterDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPMaskedDirectiveContainingStmtRange OMPMaskedDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPMaskedDirectiveContainingStmtRange OMPMaskedDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPMaskedDirective::contains(const Decl &decl) {
  for(auto &parent : OMPMaskedDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPMaskedDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPMaskedDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPMaskedDirective> OMPMaskedDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPMaskedDirective> OMPMaskedDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPMaskedDirective> OMPMaskedDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_MASKED_DIRECTIVE:
      return reinterpret_cast<const OMPMaskedDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPLoopBasedDirectiveContainingStmtRange OMPLoopBasedDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPLoopBasedDirectiveContainingStmtRange OMPLoopBasedDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPLoopBasedDirective::contains(const Decl &decl) {
  for(auto &parent : OMPLoopBasedDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPLoopBasedDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPLoopBasedDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPLoopBasedDirective> OMPLoopBasedDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPLoopBasedDirective> OMPLoopBasedDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPLoopBasedDirective> OMPLoopBasedDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_UNROLL_DIRECTIVE:
    case mx::StmtKind::OMP_TILE_DIRECTIVE:
    case mx::StmtKind::OMP_GENERIC_LOOP_DIRECTIVE:
    case mx::StmtKind::OMP_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_DISTRIBUTE_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_DISTRIBUTE_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_DIRECTIVE:
    case mx::StmtKind::OMP_TASK_LOOP_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TASK_LOOP_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_MASTER_TASK_LOOP_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_MASTER_TASK_LOOP_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_MASTER_TASK_LOOP_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_MASTER_TASK_LOOP_DIRECTIVE:
      return reinterpret_cast<const OMPLoopBasedDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPLoopTransformationDirectiveContainingStmtRange OMPLoopTransformationDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPLoopTransformationDirectiveContainingStmtRange OMPLoopTransformationDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPLoopTransformationDirective::contains(const Decl &decl) {
  for(auto &parent : OMPLoopTransformationDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPLoopTransformationDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPLoopTransformationDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPLoopTransformationDirective> OMPLoopTransformationDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPLoopTransformationDirective> OMPLoopTransformationDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPLoopTransformationDirective> OMPLoopTransformationDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPLoopTransformationDirective> OMPLoopTransformationDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_UNROLL_DIRECTIVE:
    case mx::StmtKind::OMP_TILE_DIRECTIVE:
      return reinterpret_cast<const OMPLoopTransformationDirective &>(parent);
    default: return std::nullopt;
  }
}

Stmt OMPLoopTransformationDirective::pre_initializers(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return fragment->StmtFor(fragment, id, false).value();
}

Stmt OMPLoopTransformationDirective::transformed_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal17());
  return fragment->StmtFor(fragment, id, false).value();
}

OMPUnrollDirectiveContainingStmtRange OMPUnrollDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPUnrollDirectiveContainingStmtRange OMPUnrollDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPUnrollDirective::contains(const Decl &decl) {
  for(auto &parent : OMPUnrollDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPUnrollDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPUnrollDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPUnrollDirective> OMPUnrollDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPUnrollDirective> OMPUnrollDirective::from(const OMPLoopTransformationDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPUnrollDirective> OMPUnrollDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPUnrollDirective> OMPUnrollDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPUnrollDirective> OMPUnrollDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_UNROLL_DIRECTIVE:
      return reinterpret_cast<const OMPUnrollDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTileDirectiveContainingStmtRange OMPTileDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTileDirectiveContainingStmtRange OMPTileDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTileDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTileDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTileDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTileDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTileDirective> OMPTileDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTileDirective> OMPTileDirective::from(const OMPLoopTransformationDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTileDirective> OMPTileDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTileDirective> OMPTileDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTileDirective> OMPTileDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TILE_DIRECTIVE:
      return reinterpret_cast<const OMPTileDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPLoopDirectiveContainingStmtRange OMPLoopDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPLoopDirectiveContainingStmtRange OMPLoopDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPLoopDirective::contains(const Decl &decl) {
  for(auto &parent : OMPLoopDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPLoopDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPLoopDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPLoopDirective> OMPLoopDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPLoopDirective> OMPLoopDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPLoopDirective> OMPLoopDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPLoopDirective> OMPLoopDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_GENERIC_LOOP_DIRECTIVE:
    case mx::StmtKind::OMP_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_DISTRIBUTE_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_DISTRIBUTE_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_DIRECTIVE:
    case mx::StmtKind::OMP_TASK_LOOP_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TASK_LOOP_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_TARGET_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_MASTER_TASK_LOOP_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_MASTER_TASK_LOOP_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_FOR_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_PARALLEL_FOR_DIRECTIVE:
    case mx::StmtKind::OMP_MASTER_TASK_LOOP_SIMD_DIRECTIVE:
    case mx::StmtKind::OMP_MASTER_TASK_LOOP_DIRECTIVE:
      return reinterpret_cast<const OMPLoopDirective &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Expr> OMPLoopDirective::counters(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Expr> OMPLoopDirective::dependent_counters(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal22();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s22 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s22.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Expr> OMPLoopDirective::dependent_initializers(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal23();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s23 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s23.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Expr> OMPLoopDirective::finals(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal24();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s24 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s24.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Expr> OMPLoopDirective::finals_conditions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal25();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s25 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s25.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

Stmt OMPLoopDirective::body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return fragment->StmtFor(fragment, id, false).value();
}

Expr OMPLoopDirective::calculate_last_iteration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal17());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::combined_condition(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal18());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::combined_distance_condition(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal19());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::combined_ensure_upper_bound(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal26());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::combined_initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal27());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::combined_lower_bound_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal28());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::combined_next_lower_bound(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal29());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::combined_next_upper_bound(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal30());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::combined_parallel_for_in_distance_condition(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal31());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::combined_upper_bound_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal32());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::condition(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal33());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::distance_increment(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal34());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::ensure_upper_bound(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal35());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::increment(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal36());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::is_last_iteration_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::iteration_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::last_iteration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::lower_bound_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal41());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::next_lower_bound(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal42());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::next_upper_bound(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::num_iterations(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal44());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::pre_condition(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal45());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Stmt OMPLoopDirective::pre_initializers(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal46());
  return fragment->StmtFor(fragment, id, false).value();
}

Expr OMPLoopDirective::prev_ensure_upper_bound(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal47());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::prev_lower_bound_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal48());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::prev_upper_bound_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal49());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::stride_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal50());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPLoopDirective::upper_bound_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal51());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::vector<Expr> OMPLoopDirective::initializers(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal52();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s52 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s52.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Expr> OMPLoopDirective::private_counters(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal53();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s53 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s53.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Expr> OMPLoopDirective::updates(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal54();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s54 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s54.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

OMPGenericLoopDirectiveContainingStmtRange OMPGenericLoopDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPGenericLoopDirectiveContainingStmtRange OMPGenericLoopDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPGenericLoopDirective::contains(const Decl &decl) {
  for(auto &parent : OMPGenericLoopDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPGenericLoopDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPGenericLoopDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPGenericLoopDirective> OMPGenericLoopDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPGenericLoopDirective> OMPGenericLoopDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPGenericLoopDirective> OMPGenericLoopDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPGenericLoopDirective> OMPGenericLoopDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPGenericLoopDirective> OMPGenericLoopDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_GENERIC_LOOP_DIRECTIVE:
      return reinterpret_cast<const OMPGenericLoopDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPForSimdDirectiveContainingStmtRange OMPForSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPForSimdDirectiveContainingStmtRange OMPForSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPForSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPForSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPForSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPForSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPForSimdDirective> OMPForSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPForSimdDirective> OMPForSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPForSimdDirective> OMPForSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPForSimdDirective> OMPForSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPForSimdDirective> OMPForSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_FOR_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPForSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPForDirectiveContainingStmtRange OMPForDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPForDirectiveContainingStmtRange OMPForDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPForDirective::contains(const Decl &decl) {
  for(auto &parent : OMPForDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPForDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPForDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPForDirective> OMPForDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPForDirective> OMPForDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPForDirective> OMPForDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPForDirective> OMPForDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPForDirective> OMPForDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_FOR_DIRECTIVE:
      return reinterpret_cast<const OMPForDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPForDirective::task_reduction_reference_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal55());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool OMPForDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPDistributeSimdDirectiveContainingStmtRange OMPDistributeSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPDistributeSimdDirectiveContainingStmtRange OMPDistributeSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPDistributeSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPDistributeSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPDistributeSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPDistributeSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPDistributeSimdDirective> OMPDistributeSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPDistributeSimdDirective> OMPDistributeSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDistributeSimdDirective> OMPDistributeSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDistributeSimdDirective> OMPDistributeSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDistributeSimdDirective> OMPDistributeSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_DISTRIBUTE_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPDistributeSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPDistributeParallelForSimdDirectiveContainingStmtRange OMPDistributeParallelForSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPDistributeParallelForSimdDirectiveContainingStmtRange OMPDistributeParallelForSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPDistributeParallelForSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPDistributeParallelForSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPDistributeParallelForSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPDistributeParallelForSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPDistributeParallelForSimdDirective> OMPDistributeParallelForSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPDistributeParallelForSimdDirective> OMPDistributeParallelForSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDistributeParallelForSimdDirective> OMPDistributeParallelForSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDistributeParallelForSimdDirective> OMPDistributeParallelForSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDistributeParallelForSimdDirective> OMPDistributeParallelForSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPDistributeParallelForSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPDistributeParallelForDirectiveContainingStmtRange OMPDistributeParallelForDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPDistributeParallelForDirectiveContainingStmtRange OMPDistributeParallelForDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPDistributeParallelForDirective::contains(const Decl &decl) {
  for(auto &parent : OMPDistributeParallelForDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPDistributeParallelForDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPDistributeParallelForDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPDistributeParallelForDirective> OMPDistributeParallelForDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPDistributeParallelForDirective> OMPDistributeParallelForDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDistributeParallelForDirective> OMPDistributeParallelForDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDistributeParallelForDirective> OMPDistributeParallelForDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDistributeParallelForDirective> OMPDistributeParallelForDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE:
      return reinterpret_cast<const OMPDistributeParallelForDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPDistributeParallelForDirective::task_reduction_reference_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal55());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool OMPDistributeParallelForDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPDistributeDirectiveContainingStmtRange OMPDistributeDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPDistributeDirectiveContainingStmtRange OMPDistributeDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPDistributeDirective::contains(const Decl &decl) {
  for(auto &parent : OMPDistributeDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPDistributeDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPDistributeDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPDistributeDirective> OMPDistributeDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPDistributeDirective> OMPDistributeDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDistributeDirective> OMPDistributeDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDistributeDirective> OMPDistributeDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPDistributeDirective> OMPDistributeDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_DISTRIBUTE_DIRECTIVE:
      return reinterpret_cast<const OMPDistributeDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTeamsDistributeSimdDirectiveContainingStmtRange OMPTeamsDistributeSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTeamsDistributeSimdDirectiveContainingStmtRange OMPTeamsDistributeSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTeamsDistributeSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTeamsDistributeSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTeamsDistributeSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTeamsDistributeSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTeamsDistributeSimdDirective> OMPTeamsDistributeSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTeamsDistributeSimdDirective> OMPTeamsDistributeSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDistributeSimdDirective> OMPTeamsDistributeSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDistributeSimdDirective> OMPTeamsDistributeSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDistributeSimdDirective> OMPTeamsDistributeSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPTeamsDistributeSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTeamsDistributeParallelForSimdDirectiveContainingStmtRange OMPTeamsDistributeParallelForSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTeamsDistributeParallelForSimdDirectiveContainingStmtRange OMPTeamsDistributeParallelForSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTeamsDistributeParallelForSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTeamsDistributeParallelForSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTeamsDistributeParallelForSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTeamsDistributeParallelForSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTeamsDistributeParallelForSimdDirective> OMPTeamsDistributeParallelForSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTeamsDistributeParallelForSimdDirective> OMPTeamsDistributeParallelForSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDistributeParallelForSimdDirective> OMPTeamsDistributeParallelForSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDistributeParallelForSimdDirective> OMPTeamsDistributeParallelForSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDistributeParallelForSimdDirective> OMPTeamsDistributeParallelForSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPTeamsDistributeParallelForSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTeamsDistributeParallelForDirectiveContainingStmtRange OMPTeamsDistributeParallelForDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTeamsDistributeParallelForDirectiveContainingStmtRange OMPTeamsDistributeParallelForDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTeamsDistributeParallelForDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTeamsDistributeParallelForDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTeamsDistributeParallelForDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTeamsDistributeParallelForDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTeamsDistributeParallelForDirective> OMPTeamsDistributeParallelForDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTeamsDistributeParallelForDirective> OMPTeamsDistributeParallelForDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDistributeParallelForDirective> OMPTeamsDistributeParallelForDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDistributeParallelForDirective> OMPTeamsDistributeParallelForDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDistributeParallelForDirective> OMPTeamsDistributeParallelForDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE:
      return reinterpret_cast<const OMPTeamsDistributeParallelForDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPTeamsDistributeParallelForDirective::task_reduction_reference_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal55());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool OMPTeamsDistributeParallelForDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPTeamsDistributeDirectiveContainingStmtRange OMPTeamsDistributeDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTeamsDistributeDirectiveContainingStmtRange OMPTeamsDistributeDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTeamsDistributeDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTeamsDistributeDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTeamsDistributeDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTeamsDistributeDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTeamsDistributeDirective> OMPTeamsDistributeDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTeamsDistributeDirective> OMPTeamsDistributeDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDistributeDirective> OMPTeamsDistributeDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDistributeDirective> OMPTeamsDistributeDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTeamsDistributeDirective> OMPTeamsDistributeDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TEAMS_DISTRIBUTE_DIRECTIVE:
      return reinterpret_cast<const OMPTeamsDistributeDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTaskLoopSimdDirectiveContainingStmtRange OMPTaskLoopSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTaskLoopSimdDirectiveContainingStmtRange OMPTaskLoopSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTaskLoopSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTaskLoopSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTaskLoopSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTaskLoopSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTaskLoopSimdDirective> OMPTaskLoopSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTaskLoopSimdDirective> OMPTaskLoopSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTaskLoopSimdDirective> OMPTaskLoopSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTaskLoopSimdDirective> OMPTaskLoopSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTaskLoopSimdDirective> OMPTaskLoopSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TASK_LOOP_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPTaskLoopSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTaskLoopDirectiveContainingStmtRange OMPTaskLoopDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTaskLoopDirectiveContainingStmtRange OMPTaskLoopDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTaskLoopDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTaskLoopDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTaskLoopDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTaskLoopDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTaskLoopDirective> OMPTaskLoopDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTaskLoopDirective> OMPTaskLoopDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTaskLoopDirective> OMPTaskLoopDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTaskLoopDirective> OMPTaskLoopDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTaskLoopDirective> OMPTaskLoopDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TASK_LOOP_DIRECTIVE:
      return reinterpret_cast<const OMPTaskLoopDirective &>(parent);
    default: return std::nullopt;
  }
}

bool OMPTaskLoopDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPTargetTeamsDistributeSimdDirectiveContainingStmtRange OMPTargetTeamsDistributeSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetTeamsDistributeSimdDirectiveContainingStmtRange OMPTargetTeamsDistributeSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetTeamsDistributeSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetTeamsDistributeSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetTeamsDistributeSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetTeamsDistributeSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetTeamsDistributeSimdDirective> OMPTargetTeamsDistributeSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetTeamsDistributeSimdDirective> OMPTargetTeamsDistributeSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDistributeSimdDirective> OMPTargetTeamsDistributeSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDistributeSimdDirective> OMPTargetTeamsDistributeSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDistributeSimdDirective> OMPTargetTeamsDistributeSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPTargetTeamsDistributeSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTargetTeamsDistributeParallelForSimdDirectiveContainingStmtRange OMPTargetTeamsDistributeParallelForSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetTeamsDistributeParallelForSimdDirectiveContainingStmtRange OMPTargetTeamsDistributeParallelForSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetTeamsDistributeParallelForSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetTeamsDistributeParallelForSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetTeamsDistributeParallelForSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetTeamsDistributeParallelForSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetTeamsDistributeParallelForSimdDirective> OMPTargetTeamsDistributeParallelForSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetTeamsDistributeParallelForSimdDirective> OMPTargetTeamsDistributeParallelForSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDistributeParallelForSimdDirective> OMPTargetTeamsDistributeParallelForSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDistributeParallelForSimdDirective> OMPTargetTeamsDistributeParallelForSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDistributeParallelForSimdDirective> OMPTargetTeamsDistributeParallelForSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPTargetTeamsDistributeParallelForSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTargetTeamsDistributeParallelForDirectiveContainingStmtRange OMPTargetTeamsDistributeParallelForDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetTeamsDistributeParallelForDirectiveContainingStmtRange OMPTargetTeamsDistributeParallelForDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetTeamsDistributeParallelForDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetTeamsDistributeParallelForDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetTeamsDistributeParallelForDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetTeamsDistributeParallelForDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetTeamsDistributeParallelForDirective> OMPTargetTeamsDistributeParallelForDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetTeamsDistributeParallelForDirective> OMPTargetTeamsDistributeParallelForDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDistributeParallelForDirective> OMPTargetTeamsDistributeParallelForDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDistributeParallelForDirective> OMPTargetTeamsDistributeParallelForDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDistributeParallelForDirective> OMPTargetTeamsDistributeParallelForDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE:
      return reinterpret_cast<const OMPTargetTeamsDistributeParallelForDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPTargetTeamsDistributeParallelForDirective::task_reduction_reference_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal55());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool OMPTargetTeamsDistributeParallelForDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPTargetTeamsDistributeDirectiveContainingStmtRange OMPTargetTeamsDistributeDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetTeamsDistributeDirectiveContainingStmtRange OMPTargetTeamsDistributeDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetTeamsDistributeDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetTeamsDistributeDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetTeamsDistributeDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetTeamsDistributeDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetTeamsDistributeDirective> OMPTargetTeamsDistributeDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetTeamsDistributeDirective> OMPTargetTeamsDistributeDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDistributeDirective> OMPTargetTeamsDistributeDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDistributeDirective> OMPTargetTeamsDistributeDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetTeamsDistributeDirective> OMPTargetTeamsDistributeDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_TEAMS_DISTRIBUTE_DIRECTIVE:
      return reinterpret_cast<const OMPTargetTeamsDistributeDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTargetSimdDirectiveContainingStmtRange OMPTargetSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetSimdDirectiveContainingStmtRange OMPTargetSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetSimdDirective> OMPTargetSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetSimdDirective> OMPTargetSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetSimdDirective> OMPTargetSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetSimdDirective> OMPTargetSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetSimdDirective> OMPTargetSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPTargetSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTargetParallelForSimdDirectiveContainingStmtRange OMPTargetParallelForSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetParallelForSimdDirectiveContainingStmtRange OMPTargetParallelForSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetParallelForSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetParallelForSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetParallelForSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetParallelForSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetParallelForSimdDirective> OMPTargetParallelForSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetParallelForSimdDirective> OMPTargetParallelForSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetParallelForSimdDirective> OMPTargetParallelForSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetParallelForSimdDirective> OMPTargetParallelForSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetParallelForSimdDirective> OMPTargetParallelForSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_PARALLEL_FOR_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPTargetParallelForSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPTargetParallelForDirectiveContainingStmtRange OMPTargetParallelForDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPTargetParallelForDirectiveContainingStmtRange OMPTargetParallelForDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPTargetParallelForDirective::contains(const Decl &decl) {
  for(auto &parent : OMPTargetParallelForDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPTargetParallelForDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPTargetParallelForDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPTargetParallelForDirective> OMPTargetParallelForDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPTargetParallelForDirective> OMPTargetParallelForDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetParallelForDirective> OMPTargetParallelForDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetParallelForDirective> OMPTargetParallelForDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPTargetParallelForDirective> OMPTargetParallelForDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_TARGET_PARALLEL_FOR_DIRECTIVE:
      return reinterpret_cast<const OMPTargetParallelForDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPTargetParallelForDirective::task_reduction_reference_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal55());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool OMPTargetParallelForDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPSimdDirectiveContainingStmtRange OMPSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPSimdDirectiveContainingStmtRange OMPSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPSimdDirective> OMPSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPSimdDirective> OMPSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPSimdDirective> OMPSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPSimdDirective> OMPSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPSimdDirective> OMPSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPParallelMasterTaskLoopSimdDirectiveContainingStmtRange OMPParallelMasterTaskLoopSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPParallelMasterTaskLoopSimdDirectiveContainingStmtRange OMPParallelMasterTaskLoopSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPParallelMasterTaskLoopSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPParallelMasterTaskLoopSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPParallelMasterTaskLoopSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPParallelMasterTaskLoopSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPParallelMasterTaskLoopSimdDirective> OMPParallelMasterTaskLoopSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPParallelMasterTaskLoopSimdDirective> OMPParallelMasterTaskLoopSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelMasterTaskLoopSimdDirective> OMPParallelMasterTaskLoopSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelMasterTaskLoopSimdDirective> OMPParallelMasterTaskLoopSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelMasterTaskLoopSimdDirective> OMPParallelMasterTaskLoopSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_PARALLEL_MASTER_TASK_LOOP_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPParallelMasterTaskLoopSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPParallelMasterTaskLoopDirectiveContainingStmtRange OMPParallelMasterTaskLoopDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPParallelMasterTaskLoopDirectiveContainingStmtRange OMPParallelMasterTaskLoopDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPParallelMasterTaskLoopDirective::contains(const Decl &decl) {
  for(auto &parent : OMPParallelMasterTaskLoopDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPParallelMasterTaskLoopDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPParallelMasterTaskLoopDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPParallelMasterTaskLoopDirective> OMPParallelMasterTaskLoopDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPParallelMasterTaskLoopDirective> OMPParallelMasterTaskLoopDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelMasterTaskLoopDirective> OMPParallelMasterTaskLoopDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelMasterTaskLoopDirective> OMPParallelMasterTaskLoopDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelMasterTaskLoopDirective> OMPParallelMasterTaskLoopDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_PARALLEL_MASTER_TASK_LOOP_DIRECTIVE:
      return reinterpret_cast<const OMPParallelMasterTaskLoopDirective &>(parent);
    default: return std::nullopt;
  }
}

bool OMPParallelMasterTaskLoopDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPParallelForSimdDirectiveContainingStmtRange OMPParallelForSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPParallelForSimdDirectiveContainingStmtRange OMPParallelForSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPParallelForSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPParallelForSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPParallelForSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPParallelForSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPParallelForSimdDirective> OMPParallelForSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPParallelForSimdDirective> OMPParallelForSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelForSimdDirective> OMPParallelForSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelForSimdDirective> OMPParallelForSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelForSimdDirective> OMPParallelForSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_PARALLEL_FOR_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPParallelForSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPParallelForDirectiveContainingStmtRange OMPParallelForDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPParallelForDirectiveContainingStmtRange OMPParallelForDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPParallelForDirective::contains(const Decl &decl) {
  for(auto &parent : OMPParallelForDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPParallelForDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPParallelForDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPParallelForDirective> OMPParallelForDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPParallelForDirective> OMPParallelForDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelForDirective> OMPParallelForDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelForDirective> OMPParallelForDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPParallelForDirective> OMPParallelForDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_PARALLEL_FOR_DIRECTIVE:
      return reinterpret_cast<const OMPParallelForDirective &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPParallelForDirective::task_reduction_reference_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal55());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool OMPParallelForDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPMasterTaskLoopSimdDirectiveContainingStmtRange OMPMasterTaskLoopSimdDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPMasterTaskLoopSimdDirectiveContainingStmtRange OMPMasterTaskLoopSimdDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPMasterTaskLoopSimdDirective::contains(const Decl &decl) {
  for(auto &parent : OMPMasterTaskLoopSimdDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPMasterTaskLoopSimdDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPMasterTaskLoopSimdDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPMasterTaskLoopSimdDirective> OMPMasterTaskLoopSimdDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPMasterTaskLoopSimdDirective> OMPMasterTaskLoopSimdDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPMasterTaskLoopSimdDirective> OMPMasterTaskLoopSimdDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPMasterTaskLoopSimdDirective> OMPMasterTaskLoopSimdDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPMasterTaskLoopSimdDirective> OMPMasterTaskLoopSimdDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_MASTER_TASK_LOOP_SIMD_DIRECTIVE:
      return reinterpret_cast<const OMPMasterTaskLoopSimdDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPMasterTaskLoopDirectiveContainingStmtRange OMPMasterTaskLoopDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPMasterTaskLoopDirectiveContainingStmtRange OMPMasterTaskLoopDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPMasterTaskLoopDirective::contains(const Decl &decl) {
  for(auto &parent : OMPMasterTaskLoopDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPMasterTaskLoopDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPMasterTaskLoopDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPMasterTaskLoopDirective> OMPMasterTaskLoopDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPMasterTaskLoopDirective> OMPMasterTaskLoopDirective::from(const OMPLoopDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPMasterTaskLoopDirective> OMPMasterTaskLoopDirective::from(const OMPLoopBasedDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPMasterTaskLoopDirective> OMPMasterTaskLoopDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPMasterTaskLoopDirective> OMPMasterTaskLoopDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_MASTER_TASK_LOOP_DIRECTIVE:
      return reinterpret_cast<const OMPMasterTaskLoopDirective &>(parent);
    default: return std::nullopt;
  }
}

bool OMPMasterTaskLoopDirective::has_cancel(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

OMPInteropDirectiveContainingStmtRange OMPInteropDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPInteropDirectiveContainingStmtRange OMPInteropDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPInteropDirective::contains(const Decl &decl) {
  for(auto &parent : OMPInteropDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPInteropDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPInteropDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPInteropDirective> OMPInteropDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPInteropDirective> OMPInteropDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPInteropDirective> OMPInteropDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_INTEROP_DIRECTIVE:
      return reinterpret_cast<const OMPInteropDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPFlushDirectiveContainingStmtRange OMPFlushDirective::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPFlushDirectiveContainingStmtRange OMPFlushDirective::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPFlushDirective::contains(const Decl &decl) {
  for(auto &parent : OMPFlushDirective::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPFlushDirective::contains(const Stmt &stmt) {
  for(auto &parent : OMPFlushDirective::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPFlushDirective> OMPFlushDirective::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPFlushDirective> OMPFlushDirective::from(const OMPExecutableDirective &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPFlushDirective> OMPFlushDirective::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_FLUSH_DIRECTIVE:
      return reinterpret_cast<const OMPFlushDirective &>(parent);
    default: return std::nullopt;
  }
}

OMPCanonicalLoopContainingStmtRange OMPCanonicalLoop::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPCanonicalLoopContainingStmtRange OMPCanonicalLoop::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPCanonicalLoop::contains(const Decl &decl) {
  for(auto &parent : OMPCanonicalLoop::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPCanonicalLoop::contains(const Stmt &stmt) {
  for(auto &parent : OMPCanonicalLoop::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPCanonicalLoop> OMPCanonicalLoop::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPCanonicalLoop> OMPCanonicalLoop::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_CANONICAL_LOOP:
      return reinterpret_cast<const OMPCanonicalLoop &>(parent);
    default: return std::nullopt;
  }
}

CapturedStmt OMPCanonicalLoop::distance_func(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return CapturedStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Stmt OMPCanonicalLoop::loop_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return fragment->StmtFor(fragment, id, false).value();
}

CapturedStmt OMPCanonicalLoop::loop_variable_func(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return CapturedStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

DeclRefExpr OMPCanonicalLoop::loop_variable_reference(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal13());
  return DeclRefExpr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

NullStmtContainingStmtRange NullStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

NullStmtContainingStmtRange NullStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool NullStmt::contains(const Decl &decl) {
  for(auto &parent : NullStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool NullStmt::contains(const Stmt &stmt) {
  for(auto &parent : NullStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<NullStmt> NullStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<NullStmt> NullStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::NULL_STMT:
      return reinterpret_cast<const NullStmt &>(parent);
    default: return std::nullopt;
  }
}

Token NullStmt::semi_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool NullStmt::has_leading_empty_macro(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal12();
}

MSDependentExistsStmtContainingStmtRange MSDependentExistsStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

MSDependentExistsStmtContainingStmtRange MSDependentExistsStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool MSDependentExistsStmt::contains(const Decl &decl) {
  for(auto &parent : MSDependentExistsStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool MSDependentExistsStmt::contains(const Stmt &stmt) {
  for(auto &parent : MSDependentExistsStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<MSDependentExistsStmt> MSDependentExistsStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<MSDependentExistsStmt> MSDependentExistsStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::MS_DEPENDENT_EXISTS_STMT:
      return reinterpret_cast<const MSDependentExistsStmt &>(parent);
    default: return std::nullopt;
  }
}

Token MSDependentExistsStmt::keyword_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

CompoundStmt MSDependentExistsStmt::sub_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return CompoundStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool MSDependentExistsStmt::is_if_exists(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal12();
}

bool MSDependentExistsStmt::is_if_not_exists(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal15();
}

IndirectGotoStmtContainingStmtRange IndirectGotoStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

IndirectGotoStmtContainingStmtRange IndirectGotoStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool IndirectGotoStmt::contains(const Decl &decl) {
  for(auto &parent : IndirectGotoStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool IndirectGotoStmt::contains(const Stmt &stmt) {
  for(auto &parent : IndirectGotoStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<IndirectGotoStmt> IndirectGotoStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<IndirectGotoStmt> IndirectGotoStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::INDIRECT_GOTO_STMT:
      return reinterpret_cast<const IndirectGotoStmt &>(parent);
    default: return std::nullopt;
  }
}

std::optional<LabelDecl> IndirectGotoStmt::constant_target(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal9());
    return LabelDecl::from(fragment->DeclFor(fragment, id));
  }
}

Token IndirectGotoStmt::goto_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal10())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token IndirectGotoStmt::star_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal11())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr IndirectGotoStmt::target(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal13());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

IfStmtContainingStmtRange IfStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

IfStmtContainingStmtRange IfStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool IfStmt::contains(const Decl &decl) {
  for(auto &parent : IfStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool IfStmt::contains(const Stmt &stmt) {
  for(auto &parent : IfStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<IfStmt> IfStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<IfStmt> IfStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::IF_STMT:
      return reinterpret_cast<const IfStmt &>(parent);
    default: return std::nullopt;
  }
}

Expr IfStmt::condition(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<VarDecl> IfStmt::condition_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal10());
    return VarDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<DeclStmt> IfStmt::condition_variable_declaration_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal15()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal11());
    return DeclStmt::from(fragment->StmtFor(fragment, id));
  }
}

std::optional<Stmt> IfStmt::else_(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal20()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal13());
    return fragment->StmtFor(fragment, id);
  }
}

Token IfStmt::else_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal14())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token IfStmt::if_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal17())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<Stmt> IfStmt::initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal21()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal18());
    return fragment->StmtFor(fragment, id);
  }
}

Token IfStmt::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal19())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token IfStmt::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal26())) {
    return tok.value();
  } else {
    return Token();
  }
}

IfStatementKind IfStmt::statement_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<IfStatementKind>(self.getVal56());
}

Stmt IfStmt::then(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal27());
  return fragment->StmtFor(fragment, id, false).value();
}

bool IfStmt::has_else_storage(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal57();
}

bool IfStmt::has_initializer_storage(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal58();
}

bool IfStmt::has_variable_storage(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal59();
}

bool IfStmt::is_consteval(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal60();
}

bool IfStmt::is_constexpr(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal61();
}

bool IfStmt::is_negated_consteval(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal62();
}

bool IfStmt::is_non_negated_consteval(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal63();
}

bool IfStmt::is_obj_c_availability_check(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal64();
}

GotoStmtContainingStmtRange GotoStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

GotoStmtContainingStmtRange GotoStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool GotoStmt::contains(const Decl &decl) {
  for(auto &parent : GotoStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool GotoStmt::contains(const Stmt &stmt) {
  for(auto &parent : GotoStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<GotoStmt> GotoStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<GotoStmt> GotoStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::GOTO_STMT:
      return reinterpret_cast<const GotoStmt &>(parent);
    default: return std::nullopt;
  }
}

Token GotoStmt::goto_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

LabelDecl GotoStmt::label(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return LabelDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token GotoStmt::label_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal11())) {
    return tok.value();
  } else {
    return Token();
  }
}

ForStmtContainingStmtRange ForStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ForStmtContainingStmtRange ForStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ForStmt::contains(const Decl &decl) {
  for(auto &parent : ForStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ForStmt::contains(const Stmt &stmt) {
  for(auto &parent : ForStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ForStmt> ForStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ForStmt> ForStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::FOR_STMT:
      return reinterpret_cast<const ForStmt &>(parent);
    default: return std::nullopt;
  }
}

Stmt ForStmt::body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return fragment->StmtFor(fragment, id, false).value();
}

std::optional<Expr> ForStmt::condition(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal10());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

std::optional<VarDecl> ForStmt::condition_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal15()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal11());
    return VarDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<DeclStmt> ForStmt::condition_variable_declaration_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal20()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal13());
    return DeclStmt::from(fragment->StmtFor(fragment, id));
  }
}

Token ForStmt::for_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal14())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<Expr> ForStmt::increment(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal21()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal17());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

std::optional<Stmt> ForStmt::initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal57()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal18());
    return fragment->StmtFor(fragment, id);
  }
}

Token ForStmt::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal19())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ForStmt::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal26())) {
    return tok.value();
  } else {
    return Token();
  }
}

DoStmtContainingStmtRange DoStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

DoStmtContainingStmtRange DoStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool DoStmt::contains(const Decl &decl) {
  for(auto &parent : DoStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool DoStmt::contains(const Stmt &stmt) {
  for(auto &parent : DoStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<DoStmt> DoStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<DoStmt> DoStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::DO_STMT:
      return reinterpret_cast<const DoStmt &>(parent);
    default: return std::nullopt;
  }
}

Stmt DoStmt::body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return fragment->StmtFor(fragment, id, false).value();
}

Expr DoStmt::condition(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token DoStmt::do_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal11())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token DoStmt::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal13())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token DoStmt::while_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal14())) {
    return tok.value();
  } else {
    return Token();
  }
}

DeclStmtContainingStmtRange DeclStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

DeclStmtContainingStmtRange DeclStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool DeclStmt::contains(const Decl &decl) {
  for(auto &parent : DeclStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool DeclStmt::contains(const Stmt &stmt) {
  for(auto &parent : DeclStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<DeclStmt> DeclStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<DeclStmt> DeclStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::DECL_STMT:
      return reinterpret_cast<const DeclStmt &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Decl> DeclStmt::declarations(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d16 = fragment->DeclFor(fragment, id)) {
      vec.emplace_back(std::move(d16.value()));
    }
  }
  return vec;
}

std::optional<Decl> DeclStmt::single_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal9());
    return fragment->DeclFor(fragment, id);
  }
}

bool DeclStmt::is_single_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal15();
}

CoroutineBodyStmtContainingStmtRange CoroutineBodyStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CoroutineBodyStmtContainingStmtRange CoroutineBodyStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CoroutineBodyStmt::contains(const Decl &decl) {
  for(auto &parent : CoroutineBodyStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CoroutineBodyStmt::contains(const Stmt &stmt) {
  for(auto &parent : CoroutineBodyStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CoroutineBodyStmt> CoroutineBodyStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CoroutineBodyStmt> CoroutineBodyStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::COROUTINE_BODY_STMT:
      return reinterpret_cast<const CoroutineBodyStmt &>(parent);
    default: return std::nullopt;
  }
}

Expr CoroutineBodyStmt::allocate(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Stmt CoroutineBodyStmt::body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return fragment->StmtFor(fragment, id, false).value();
}

Expr CoroutineBodyStmt::deallocate(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Stmt CoroutineBodyStmt::exception_handler(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal13());
  return fragment->StmtFor(fragment, id, false).value();
}

Stmt CoroutineBodyStmt::fallthrough_handler(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return fragment->StmtFor(fragment, id, false).value();
}

Stmt CoroutineBodyStmt::final_suspend_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal17());
  return fragment->StmtFor(fragment, id, false).value();
}

Stmt CoroutineBodyStmt::initializer_suspend_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal18());
  return fragment->StmtFor(fragment, id, false).value();
}

std::vector<Stmt> CoroutineBodyStmt::parameter_moves(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Stmt> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      vec.emplace_back(std::move(s16.value()));
    }
  }
  return vec;
}

VarDecl CoroutineBodyStmt::promise_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal19());
  return VarDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Stmt CoroutineBodyStmt::promise_declaration_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal26());
  return fragment->StmtFor(fragment, id, false).value();
}

Stmt CoroutineBodyStmt::result_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal27());
  return fragment->StmtFor(fragment, id, false).value();
}

Stmt CoroutineBodyStmt::return_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal28());
  return fragment->StmtFor(fragment, id, false).value();
}

Stmt CoroutineBodyStmt::return_statement_on_alloc_failure(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal29());
  return fragment->StmtFor(fragment, id, false).value();
}

Expr CoroutineBodyStmt::return_value_initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal30());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool CoroutineBodyStmt::has_dependent_promise_type(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal12();
}

CoreturnStmtContainingStmtRange CoreturnStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CoreturnStmtContainingStmtRange CoreturnStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CoreturnStmt::contains(const Decl &decl) {
  for(auto &parent : CoreturnStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CoreturnStmt::contains(const Stmt &stmt) {
  for(auto &parent : CoreturnStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CoreturnStmt> CoreturnStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CoreturnStmt> CoreturnStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CORETURN_STMT:
      return reinterpret_cast<const CoreturnStmt &>(parent);
    default: return std::nullopt;
  }
}

Token CoreturnStmt::keyword_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr CoreturnStmt::operand(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr CoreturnStmt::promise_call(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool CoreturnStmt::is_implicit(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal12();
}

ContinueStmtContainingStmtRange ContinueStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ContinueStmtContainingStmtRange ContinueStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ContinueStmt::contains(const Decl &decl) {
  for(auto &parent : ContinueStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ContinueStmt::contains(const Stmt &stmt) {
  for(auto &parent : ContinueStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ContinueStmt> ContinueStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ContinueStmt> ContinueStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CONTINUE_STMT:
      return reinterpret_cast<const ContinueStmt &>(parent);
    default: return std::nullopt;
  }
}

Token ContinueStmt::continue_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

CompoundStmtContainingStmtRange CompoundStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CompoundStmtContainingStmtRange CompoundStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CompoundStmt::contains(const Decl &decl) {
  for(auto &parent : CompoundStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CompoundStmt::contains(const Stmt &stmt) {
  for(auto &parent : CompoundStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CompoundStmt> CompoundStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CompoundStmt> CompoundStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::COMPOUND_STMT:
      return reinterpret_cast<const CompoundStmt &>(parent);
    default: return std::nullopt;
  }
}

Token CompoundStmt::left_brace_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token CompoundStmt::right_brace_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal10())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<Stmt> CompoundStmt::statement_expression_result(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal11());
    return fragment->StmtFor(fragment, id);
  }
}

CapturedStmtContainingStmtRange CapturedStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CapturedStmtContainingStmtRange CapturedStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CapturedStmt::contains(const Decl &decl) {
  for(auto &parent : CapturedStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CapturedStmt::contains(const Stmt &stmt) {
  for(auto &parent : CapturedStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CapturedStmt> CapturedStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CapturedStmt> CapturedStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CAPTURED_STMT:
      return reinterpret_cast<const CapturedStmt &>(parent);
    default: return std::nullopt;
  }
}

CapturedDecl CapturedStmt::captured_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return CapturedDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

RecordDecl CapturedStmt::captured_record_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return RecordDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

CapturedRegionKind CapturedStmt::captured_region_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<CapturedRegionKind>(self.getVal56());
}

Stmt CapturedStmt::captured_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return fragment->StmtFor(fragment, id, false).value();
}

CXXTryStmtContainingStmtRange CXXTryStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXTryStmtContainingStmtRange CXXTryStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXTryStmt::contains(const Decl &decl) {
  for(auto &parent : CXXTryStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXTryStmt::contains(const Stmt &stmt) {
  for(auto &parent : CXXTryStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXTryStmt> CXXTryStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXTryStmt> CXXTryStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_TRY_STMT:
      return reinterpret_cast<const CXXTryStmt &>(parent);
    default: return std::nullopt;
  }
}

CompoundStmt CXXTryStmt::try_block(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return CompoundStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token CXXTryStmt::try_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal10())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::vector<CXXCatchStmt> CXXTryStmt::handlers(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<CXXCatchStmt> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = CXXCatchStmt::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

CXXForRangeStmtContainingStmtRange CXXForRangeStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXForRangeStmtContainingStmtRange CXXForRangeStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXForRangeStmt::contains(const Decl &decl) {
  for(auto &parent : CXXForRangeStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXForRangeStmt::contains(const Stmt &stmt) {
  for(auto &parent : CXXForRangeStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXForRangeStmt> CXXForRangeStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXForRangeStmt> CXXForRangeStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_FOR_RANGE_STMT:
      return reinterpret_cast<const CXXForRangeStmt &>(parent);
    default: return std::nullopt;
  }
}

DeclStmt CXXForRangeStmt::begin_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return DeclStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Stmt CXXForRangeStmt::body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return fragment->StmtFor(fragment, id, false).value();
}

Token CXXForRangeStmt::coawait_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal11())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token CXXForRangeStmt::colon_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal13())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr CXXForRangeStmt::condition(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

DeclStmt CXXForRangeStmt::end_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal17());
  return DeclStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token CXXForRangeStmt::for_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal18())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr CXXForRangeStmt::increment(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal19());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<Stmt> CXXForRangeStmt::initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal26());
    return fragment->StmtFor(fragment, id);
  }
}

DeclStmt CXXForRangeStmt::loop_variable_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal27());
  return DeclStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

VarDecl CXXForRangeStmt::loop_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal28());
  return VarDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token CXXForRangeStmt::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal29())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr CXXForRangeStmt::range_initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal30());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

DeclStmt CXXForRangeStmt::range_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal31());
  return DeclStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

CXXCatchStmtContainingStmtRange CXXCatchStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXCatchStmtContainingStmtRange CXXCatchStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXCatchStmt::contains(const Decl &decl) {
  for(auto &parent : CXXCatchStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXCatchStmt::contains(const Stmt &stmt) {
  for(auto &parent : CXXCatchStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXCatchStmt> CXXCatchStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXCatchStmt> CXXCatchStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_CATCH_STMT:
      return reinterpret_cast<const CXXCatchStmt &>(parent);
    default: return std::nullopt;
  }
}

Token CXXCatchStmt::catch_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

Type CXXCatchStmt::caught_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<VarDecl> CXXCatchStmt::exception_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal11());
    return VarDecl::from(fragment->DeclFor(fragment, id));
  }
}

Stmt CXXCatchStmt::handler_block(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal13());
  return fragment->StmtFor(fragment, id, false).value();
}

BreakStmtContainingStmtRange BreakStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

BreakStmtContainingStmtRange BreakStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool BreakStmt::contains(const Decl &decl) {
  for(auto &parent : BreakStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool BreakStmt::contains(const Stmt &stmt) {
  for(auto &parent : BreakStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<BreakStmt> BreakStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<BreakStmt> BreakStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::BREAK_STMT:
      return reinterpret_cast<const BreakStmt &>(parent);
    default: return std::nullopt;
  }
}

Token BreakStmt::break_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

AsmStmtContainingStmtRange AsmStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

AsmStmtContainingStmtRange AsmStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool AsmStmt::contains(const Decl &decl) {
  for(auto &parent : AsmStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool AsmStmt::contains(const Stmt &stmt) {
  for(auto &parent : AsmStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<AsmStmt> AsmStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<AsmStmt> AsmStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::MS_ASM_STMT:
    case mx::StmtKind::GCC_ASM_STMT:
      return reinterpret_cast<const AsmStmt &>(parent);
    default: return std::nullopt;
  }
}

std::string_view AsmStmt::generate_assembly_string(void) const {
  auto self = fragment->NthStmt(offset_);
  capnp::Text::Reader data = self.getVal65();
  return std::string_view(data.cStr(), data.size());
}

Token AsmStmt::assembly_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::vector<Expr> AsmStmt::inputs(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

bool AsmStmt::is_simple(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal12();
}

bool AsmStmt::is_volatile(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal15();
}

std::vector<Expr> AsmStmt::outputs(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal22();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s22 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s22.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<std::string_view> AsmStmt::output_constraints(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal66();
  std::vector<std::string_view> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(v.cStr(), v.size());
  }
  return vec;
}

std::vector<Expr> AsmStmt::output_expressions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal23();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s23 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s23.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<std::string_view> AsmStmt::input_constraints(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal67();
  std::vector<std::string_view> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(v.cStr(), v.size());
  }
  return vec;
}

std::vector<Expr> AsmStmt::input_expressions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal24();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s24 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s24.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<std::string_view> AsmStmt::clobbers(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal68();
  std::vector<std::string_view> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(v.cStr(), v.size());
  }
  return vec;
}

MSAsmStmtContainingStmtRange MSAsmStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

MSAsmStmtContainingStmtRange MSAsmStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool MSAsmStmt::contains(const Decl &decl) {
  for(auto &parent : MSAsmStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool MSAsmStmt::contains(const Stmt &stmt) {
  for(auto &parent : MSAsmStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<MSAsmStmt> MSAsmStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<MSAsmStmt> MSAsmStmt::from(const AsmStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<MSAsmStmt> MSAsmStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::MS_ASM_STMT:
      return reinterpret_cast<const MSAsmStmt &>(parent);
    default: return std::nullopt;
  }
}

std::vector<std::string_view> MSAsmStmt::all_constraints(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal69();
  std::vector<std::string_view> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(v.cStr(), v.size());
  }
  return vec;
}

std::vector<Expr> MSAsmStmt::all_expressions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal25();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s25 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s25.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::string_view MSAsmStmt::assembly_string(void) const {
  auto self = fragment->NthStmt(offset_);
  capnp::Text::Reader data = self.getVal70();
  return std::string_view(data.cStr(), data.size());
}

Token MSAsmStmt::l_brace_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal10())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool MSAsmStmt::has_braces(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

GCCAsmStmtContainingStmtRange GCCAsmStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

GCCAsmStmtContainingStmtRange GCCAsmStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool GCCAsmStmt::contains(const Decl &decl) {
  for(auto &parent : GCCAsmStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool GCCAsmStmt::contains(const Stmt &stmt) {
  for(auto &parent : GCCAsmStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<GCCAsmStmt> GCCAsmStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<GCCAsmStmt> GCCAsmStmt::from(const AsmStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<GCCAsmStmt> GCCAsmStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::GCC_ASM_STMT:
      return reinterpret_cast<const GCCAsmStmt &>(parent);
    default: return std::nullopt;
  }
}

StringLiteral GCCAsmStmt::assembly_string(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return StringLiteral::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token GCCAsmStmt::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal11())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool GCCAsmStmt::is_assembly_goto(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

std::vector<AddrLabelExpr> GCCAsmStmt::labels(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal25();
  std::vector<AddrLabelExpr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s25 = fragment->StmtFor(fragment, id)) {
      if (auto e = AddrLabelExpr::from(s25.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<StringLiteral> GCCAsmStmt::output_constraint_literals(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal52();
  std::vector<StringLiteral> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s52 = fragment->StmtFor(fragment, id)) {
      if (auto e = StringLiteral::from(s52.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<std::string_view> GCCAsmStmt::output_names(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal69();
  std::vector<std::string_view> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(v.cStr(), v.size());
  }
  return vec;
}

std::vector<StringLiteral> GCCAsmStmt::input_constraint_literals(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal53();
  std::vector<StringLiteral> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s53 = fragment->StmtFor(fragment, id)) {
      if (auto e = StringLiteral::from(s53.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<std::string_view> GCCAsmStmt::input_names(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal71();
  std::vector<std::string_view> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(v.cStr(), v.size());
  }
  return vec;
}

std::vector<StringLiteral> GCCAsmStmt::clobber_string_literals(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal54();
  std::vector<StringLiteral> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s54 = fragment->StmtFor(fragment, id)) {
      if (auto e = StringLiteral::from(s54.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<AddrLabelExpr> GCCAsmStmt::label_expressions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal72();
  std::vector<AddrLabelExpr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s72 = fragment->StmtFor(fragment, id)) {
      if (auto e = AddrLabelExpr::from(s72.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<std::string_view> GCCAsmStmt::label_names(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal73();
  std::vector<std::string_view> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(v.cStr(), v.size());
  }
  return vec;
}

WhileStmtContainingStmtRange WhileStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

WhileStmtContainingStmtRange WhileStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool WhileStmt::contains(const Decl &decl) {
  for(auto &parent : WhileStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool WhileStmt::contains(const Stmt &stmt) {
  for(auto &parent : WhileStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<WhileStmt> WhileStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<WhileStmt> WhileStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::WHILE_STMT:
      return reinterpret_cast<const WhileStmt &>(parent);
    default: return std::nullopt;
  }
}

Stmt WhileStmt::body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return fragment->StmtFor(fragment, id, false).value();
}

Expr WhileStmt::condition(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<VarDecl> WhileStmt::condition_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal11());
    return VarDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<DeclStmt> WhileStmt::condition_variable_declaration_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal15()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal13());
    return DeclStmt::from(fragment->StmtFor(fragment, id));
  }
}

Token WhileStmt::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal14())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token WhileStmt::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal17())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token WhileStmt::while_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal18())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool WhileStmt::has_variable_storage(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

ValueStmtContainingStmtRange ValueStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ValueStmtContainingStmtRange ValueStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ValueStmt::contains(const Decl &decl) {
  for(auto &parent : ValueStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ValueStmt::contains(const Stmt &stmt) {
  for(auto &parent : ValueStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ValueStmt> ValueStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ValueStmt> ValueStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::LABEL_STMT:
    case mx::StmtKind::DESIGNATED_INIT_UPDATE_EXPR:
    case mx::StmtKind::DESIGNATED_INIT_EXPR:
    case mx::StmtKind::DEPENDENT_SCOPE_DECL_REF_EXPR:
    case mx::StmtKind::DEPENDENT_COAWAIT_EXPR:
    case mx::StmtKind::DECL_REF_EXPR:
    case mx::StmtKind::COAWAIT_EXPR:
    case mx::StmtKind::COYIELD_EXPR:
    case mx::StmtKind::CONVERT_VECTOR_EXPR:
    case mx::StmtKind::CONCEPT_SPECIALIZATION_EXPR:
    case mx::StmtKind::COMPOUND_LITERAL_EXPR:
    case mx::StmtKind::CHOOSE_EXPR:
    case mx::StmtKind::CHARACTER_LITERAL:
    case mx::StmtKind::IMPLICIT_CAST_EXPR:
    case mx::StmtKind::CXX_DYNAMIC_CAST_EXPR:
    case mx::StmtKind::CXX_CONST_CAST_EXPR:
    case mx::StmtKind::CXX_ADDRSPACE_CAST_EXPR:
    case mx::StmtKind::CXX_STATIC_CAST_EXPR:
    case mx::StmtKind::CXX_REINTERPRET_CAST_EXPR:
    case mx::StmtKind::CXX_FUNCTIONAL_CAST_EXPR:
    case mx::StmtKind::C_STYLE_CAST_EXPR:
    case mx::StmtKind::BUILTIN_BIT_CAST_EXPR:
    case mx::StmtKind::OBJ_C_BRIDGED_CAST_EXPR:
    case mx::StmtKind::CALL_EXPR:
    case mx::StmtKind::CXX_OPERATOR_CALL_EXPR:
    case mx::StmtKind::CXX_MEMBER_CALL_EXPR:
    case mx::StmtKind::CUDA_KERNEL_CALL_EXPR:
    case mx::StmtKind::USER_DEFINED_LITERAL:
    case mx::StmtKind::CXX_UUIDOF_EXPR:
    case mx::StmtKind::CXX_UNRESOLVED_CONSTRUCT_EXPR:
    case mx::StmtKind::CXX_TYPEID_EXPR:
    case mx::StmtKind::CXX_THROW_EXPR:
    case mx::StmtKind::CXX_THIS_EXPR:
    case mx::StmtKind::CXX_STD_INITIALIZER_LIST_EXPR:
    case mx::StmtKind::CXX_SCALAR_VALUE_INIT_EXPR:
    case mx::StmtKind::CXX_REWRITTEN_BINARY_OPERATOR:
    case mx::StmtKind::CXX_PSEUDO_DESTRUCTOR_EXPR:
    case mx::StmtKind::CXX_NULL_PTR_LITERAL_EXPR:
    case mx::StmtKind::CXX_NOEXCEPT_EXPR:
    case mx::StmtKind::CXX_NEW_EXPR:
    case mx::StmtKind::CXX_INHERITED_CTOR_INIT_EXPR:
    case mx::StmtKind::CXX_FOLD_EXPR:
    case mx::StmtKind::CXX_DEPENDENT_SCOPE_MEMBER_EXPR:
    case mx::StmtKind::CXX_DELETE_EXPR:
    case mx::StmtKind::CXX_DEFAULT_INIT_EXPR:
    case mx::StmtKind::CXX_DEFAULT_ARG_EXPR:
    case mx::StmtKind::CXX_CONSTRUCT_EXPR:
    case mx::StmtKind::CXX_TEMPORARY_OBJECT_EXPR:
    case mx::StmtKind::CXX_BOOL_LITERAL_EXPR:
    case mx::StmtKind::CXX_BIND_TEMPORARY_EXPR:
    case mx::StmtKind::BLOCK_EXPR:
    case mx::StmtKind::BINARY_OPERATOR:
    case mx::StmtKind::COMPOUND_ASSIGN_OPERATOR:
    case mx::StmtKind::ATOMIC_EXPR:
    case mx::StmtKind::AS_TYPE_EXPR:
    case mx::StmtKind::ARRAY_TYPE_TRAIT_EXPR:
    case mx::StmtKind::ARRAY_SUBSCRIPT_EXPR:
    case mx::StmtKind::ARRAY_INIT_LOOP_EXPR:
    case mx::StmtKind::ARRAY_INIT_INDEX_EXPR:
    case mx::StmtKind::ADDR_LABEL_EXPR:
    case mx::StmtKind::CONDITIONAL_OPERATOR:
    case mx::StmtKind::BINARY_CONDITIONAL_OPERATOR:
    case mx::StmtKind::VA_ARG_EXPR:
    case mx::StmtKind::UNARY_OPERATOR:
    case mx::StmtKind::UNARY_EXPR_OR_TYPE_TRAIT_EXPR:
    case mx::StmtKind::TYPO_EXPR:
    case mx::StmtKind::TYPE_TRAIT_EXPR:
    case mx::StmtKind::SUBST_NON_TYPE_TEMPLATE_PARM_PACK_EXPR:
    case mx::StmtKind::SUBST_NON_TYPE_TEMPLATE_PARM_EXPR:
    case mx::StmtKind::STRING_LITERAL:
    case mx::StmtKind::STMT_EXPR:
    case mx::StmtKind::SOURCE_LOC_EXPR:
    case mx::StmtKind::SIZE_OF_PACK_EXPR:
    case mx::StmtKind::SHUFFLE_VECTOR_EXPR:
    case mx::StmtKind::SYCL_UNIQUE_STABLE_NAME_EXPR:
    case mx::StmtKind::REQUIRES_EXPR:
    case mx::StmtKind::RECOVERY_EXPR:
    case mx::StmtKind::PSEUDO_OBJECT_EXPR:
    case mx::StmtKind::PREDEFINED_EXPR:
    case mx::StmtKind::PAREN_LIST_EXPR:
    case mx::StmtKind::PAREN_EXPR:
    case mx::StmtKind::PACK_EXPANSION_EXPR:
    case mx::StmtKind::UNRESOLVED_MEMBER_EXPR:
    case mx::StmtKind::UNRESOLVED_LOOKUP_EXPR:
    case mx::StmtKind::OPAQUE_VALUE_EXPR:
    case mx::StmtKind::OFFSET_OF_EXPR:
    case mx::StmtKind::OBJ_C_SUBSCRIPT_REF_EXPR:
    case mx::StmtKind::OBJ_C_STRING_LITERAL:
    case mx::StmtKind::OBJ_C_SELECTOR_EXPR:
    case mx::StmtKind::OBJ_C_PROTOCOL_EXPR:
    case mx::StmtKind::OBJ_C_PROPERTY_REF_EXPR:
    case mx::StmtKind::OBJ_C_MESSAGE_EXPR:
    case mx::StmtKind::OBJ_C_IVAR_REF_EXPR:
    case mx::StmtKind::OBJ_C_ISA_EXPR:
    case mx::StmtKind::OBJ_C_INDIRECT_COPY_RESTORE_EXPR:
    case mx::StmtKind::OBJ_C_ENCODE_EXPR:
    case mx::StmtKind::OBJ_C_DICTIONARY_LITERAL:
    case mx::StmtKind::OBJ_C_BOXED_EXPR:
    case mx::StmtKind::OBJ_C_BOOL_LITERAL_EXPR:
    case mx::StmtKind::OBJ_C_AVAILABILITY_CHECK_EXPR:
    case mx::StmtKind::OBJ_C_ARRAY_LITERAL:
    case mx::StmtKind::OMP_ITERATOR_EXPR:
    case mx::StmtKind::OMP_ARRAY_SHAPING_EXPR:
    case mx::StmtKind::OMP_ARRAY_SECTION_EXPR:
    case mx::StmtKind::NO_INIT_EXPR:
    case mx::StmtKind::MEMBER_EXPR:
    case mx::StmtKind::MATRIX_SUBSCRIPT_EXPR:
    case mx::StmtKind::MATERIALIZE_TEMPORARY_EXPR:
    case mx::StmtKind::MS_PROPERTY_SUBSCRIPT_EXPR:
    case mx::StmtKind::MS_PROPERTY_REF_EXPR:
    case mx::StmtKind::LAMBDA_EXPR:
    case mx::StmtKind::INTEGER_LITERAL:
    case mx::StmtKind::INIT_LIST_EXPR:
    case mx::StmtKind::IMPLICIT_VALUE_INIT_EXPR:
    case mx::StmtKind::IMAGINARY_LITERAL:
    case mx::StmtKind::GENERIC_SELECTION_EXPR:
    case mx::StmtKind::GNU_NULL_EXPR:
    case mx::StmtKind::FUNCTION_PARM_PACK_EXPR:
    case mx::StmtKind::EXPR_WITH_CLEANUPS:
    case mx::StmtKind::CONSTANT_EXPR:
    case mx::StmtKind::FLOATING_LITERAL:
    case mx::StmtKind::FIXED_POINT_LITERAL:
    case mx::StmtKind::EXT_VECTOR_ELEMENT_EXPR:
    case mx::StmtKind::EXPRESSION_TRAIT_EXPR:
    case mx::StmtKind::ATTRIBUTED_STMT:
      return reinterpret_cast<const ValueStmt &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Expr> ValueStmt::expression_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal9());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

LabelStmtContainingStmtRange LabelStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

LabelStmtContainingStmtRange LabelStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool LabelStmt::contains(const Decl &decl) {
  for(auto &parent : LabelStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool LabelStmt::contains(const Stmt &stmt) {
  for(auto &parent : LabelStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<LabelStmt> LabelStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<LabelStmt> LabelStmt::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<LabelStmt> LabelStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::LABEL_STMT:
      return reinterpret_cast<const LabelStmt &>(parent);
    default: return std::nullopt;
  }
}

LabelDecl LabelStmt::declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return LabelDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token LabelStmt::identifier_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal11())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::string_view LabelStmt::name(void) const {
  auto self = fragment->NthStmt(offset_);
  capnp::Text::Reader data = self.getVal65();
  return std::string_view(data.cStr(), data.size());
}

Stmt LabelStmt::sub_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal13());
  return fragment->StmtFor(fragment, id, false).value();
}

bool LabelStmt::is_side_entry(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal15();
}

ExprContainingStmtRange Expr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ExprContainingStmtRange Expr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool Expr::contains(const Decl &decl) {
  for(auto &parent : Expr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool Expr::contains(const Stmt &stmt) {
  for(auto &parent : Expr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<Expr> Expr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<Expr> Expr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<Expr> Expr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::DESIGNATED_INIT_UPDATE_EXPR:
    case mx::StmtKind::DESIGNATED_INIT_EXPR:
    case mx::StmtKind::DEPENDENT_SCOPE_DECL_REF_EXPR:
    case mx::StmtKind::DEPENDENT_COAWAIT_EXPR:
    case mx::StmtKind::DECL_REF_EXPR:
    case mx::StmtKind::COAWAIT_EXPR:
    case mx::StmtKind::COYIELD_EXPR:
    case mx::StmtKind::CONVERT_VECTOR_EXPR:
    case mx::StmtKind::CONCEPT_SPECIALIZATION_EXPR:
    case mx::StmtKind::COMPOUND_LITERAL_EXPR:
    case mx::StmtKind::CHOOSE_EXPR:
    case mx::StmtKind::CHARACTER_LITERAL:
    case mx::StmtKind::IMPLICIT_CAST_EXPR:
    case mx::StmtKind::CXX_DYNAMIC_CAST_EXPR:
    case mx::StmtKind::CXX_CONST_CAST_EXPR:
    case mx::StmtKind::CXX_ADDRSPACE_CAST_EXPR:
    case mx::StmtKind::CXX_STATIC_CAST_EXPR:
    case mx::StmtKind::CXX_REINTERPRET_CAST_EXPR:
    case mx::StmtKind::CXX_FUNCTIONAL_CAST_EXPR:
    case mx::StmtKind::C_STYLE_CAST_EXPR:
    case mx::StmtKind::BUILTIN_BIT_CAST_EXPR:
    case mx::StmtKind::OBJ_C_BRIDGED_CAST_EXPR:
    case mx::StmtKind::CALL_EXPR:
    case mx::StmtKind::CXX_OPERATOR_CALL_EXPR:
    case mx::StmtKind::CXX_MEMBER_CALL_EXPR:
    case mx::StmtKind::CUDA_KERNEL_CALL_EXPR:
    case mx::StmtKind::USER_DEFINED_LITERAL:
    case mx::StmtKind::CXX_UUIDOF_EXPR:
    case mx::StmtKind::CXX_UNRESOLVED_CONSTRUCT_EXPR:
    case mx::StmtKind::CXX_TYPEID_EXPR:
    case mx::StmtKind::CXX_THROW_EXPR:
    case mx::StmtKind::CXX_THIS_EXPR:
    case mx::StmtKind::CXX_STD_INITIALIZER_LIST_EXPR:
    case mx::StmtKind::CXX_SCALAR_VALUE_INIT_EXPR:
    case mx::StmtKind::CXX_REWRITTEN_BINARY_OPERATOR:
    case mx::StmtKind::CXX_PSEUDO_DESTRUCTOR_EXPR:
    case mx::StmtKind::CXX_NULL_PTR_LITERAL_EXPR:
    case mx::StmtKind::CXX_NOEXCEPT_EXPR:
    case mx::StmtKind::CXX_NEW_EXPR:
    case mx::StmtKind::CXX_INHERITED_CTOR_INIT_EXPR:
    case mx::StmtKind::CXX_FOLD_EXPR:
    case mx::StmtKind::CXX_DEPENDENT_SCOPE_MEMBER_EXPR:
    case mx::StmtKind::CXX_DELETE_EXPR:
    case mx::StmtKind::CXX_DEFAULT_INIT_EXPR:
    case mx::StmtKind::CXX_DEFAULT_ARG_EXPR:
    case mx::StmtKind::CXX_CONSTRUCT_EXPR:
    case mx::StmtKind::CXX_TEMPORARY_OBJECT_EXPR:
    case mx::StmtKind::CXX_BOOL_LITERAL_EXPR:
    case mx::StmtKind::CXX_BIND_TEMPORARY_EXPR:
    case mx::StmtKind::BLOCK_EXPR:
    case mx::StmtKind::BINARY_OPERATOR:
    case mx::StmtKind::COMPOUND_ASSIGN_OPERATOR:
    case mx::StmtKind::ATOMIC_EXPR:
    case mx::StmtKind::AS_TYPE_EXPR:
    case mx::StmtKind::ARRAY_TYPE_TRAIT_EXPR:
    case mx::StmtKind::ARRAY_SUBSCRIPT_EXPR:
    case mx::StmtKind::ARRAY_INIT_LOOP_EXPR:
    case mx::StmtKind::ARRAY_INIT_INDEX_EXPR:
    case mx::StmtKind::ADDR_LABEL_EXPR:
    case mx::StmtKind::CONDITIONAL_OPERATOR:
    case mx::StmtKind::BINARY_CONDITIONAL_OPERATOR:
    case mx::StmtKind::VA_ARG_EXPR:
    case mx::StmtKind::UNARY_OPERATOR:
    case mx::StmtKind::UNARY_EXPR_OR_TYPE_TRAIT_EXPR:
    case mx::StmtKind::TYPO_EXPR:
    case mx::StmtKind::TYPE_TRAIT_EXPR:
    case mx::StmtKind::SUBST_NON_TYPE_TEMPLATE_PARM_PACK_EXPR:
    case mx::StmtKind::SUBST_NON_TYPE_TEMPLATE_PARM_EXPR:
    case mx::StmtKind::STRING_LITERAL:
    case mx::StmtKind::STMT_EXPR:
    case mx::StmtKind::SOURCE_LOC_EXPR:
    case mx::StmtKind::SIZE_OF_PACK_EXPR:
    case mx::StmtKind::SHUFFLE_VECTOR_EXPR:
    case mx::StmtKind::SYCL_UNIQUE_STABLE_NAME_EXPR:
    case mx::StmtKind::REQUIRES_EXPR:
    case mx::StmtKind::RECOVERY_EXPR:
    case mx::StmtKind::PSEUDO_OBJECT_EXPR:
    case mx::StmtKind::PREDEFINED_EXPR:
    case mx::StmtKind::PAREN_LIST_EXPR:
    case mx::StmtKind::PAREN_EXPR:
    case mx::StmtKind::PACK_EXPANSION_EXPR:
    case mx::StmtKind::UNRESOLVED_MEMBER_EXPR:
    case mx::StmtKind::UNRESOLVED_LOOKUP_EXPR:
    case mx::StmtKind::OPAQUE_VALUE_EXPR:
    case mx::StmtKind::OFFSET_OF_EXPR:
    case mx::StmtKind::OBJ_C_SUBSCRIPT_REF_EXPR:
    case mx::StmtKind::OBJ_C_STRING_LITERAL:
    case mx::StmtKind::OBJ_C_SELECTOR_EXPR:
    case mx::StmtKind::OBJ_C_PROTOCOL_EXPR:
    case mx::StmtKind::OBJ_C_PROPERTY_REF_EXPR:
    case mx::StmtKind::OBJ_C_MESSAGE_EXPR:
    case mx::StmtKind::OBJ_C_IVAR_REF_EXPR:
    case mx::StmtKind::OBJ_C_ISA_EXPR:
    case mx::StmtKind::OBJ_C_INDIRECT_COPY_RESTORE_EXPR:
    case mx::StmtKind::OBJ_C_ENCODE_EXPR:
    case mx::StmtKind::OBJ_C_DICTIONARY_LITERAL:
    case mx::StmtKind::OBJ_C_BOXED_EXPR:
    case mx::StmtKind::OBJ_C_BOOL_LITERAL_EXPR:
    case mx::StmtKind::OBJ_C_AVAILABILITY_CHECK_EXPR:
    case mx::StmtKind::OBJ_C_ARRAY_LITERAL:
    case mx::StmtKind::OMP_ITERATOR_EXPR:
    case mx::StmtKind::OMP_ARRAY_SHAPING_EXPR:
    case mx::StmtKind::OMP_ARRAY_SECTION_EXPR:
    case mx::StmtKind::NO_INIT_EXPR:
    case mx::StmtKind::MEMBER_EXPR:
    case mx::StmtKind::MATRIX_SUBSCRIPT_EXPR:
    case mx::StmtKind::MATERIALIZE_TEMPORARY_EXPR:
    case mx::StmtKind::MS_PROPERTY_SUBSCRIPT_EXPR:
    case mx::StmtKind::MS_PROPERTY_REF_EXPR:
    case mx::StmtKind::LAMBDA_EXPR:
    case mx::StmtKind::INTEGER_LITERAL:
    case mx::StmtKind::INIT_LIST_EXPR:
    case mx::StmtKind::IMPLICIT_VALUE_INIT_EXPR:
    case mx::StmtKind::IMAGINARY_LITERAL:
    case mx::StmtKind::GENERIC_SELECTION_EXPR:
    case mx::StmtKind::GNU_NULL_EXPR:
    case mx::StmtKind::FUNCTION_PARM_PACK_EXPR:
    case mx::StmtKind::EXPR_WITH_CLEANUPS:
    case mx::StmtKind::CONSTANT_EXPR:
    case mx::StmtKind::FLOATING_LITERAL:
    case mx::StmtKind::FIXED_POINT_LITERAL:
    case mx::StmtKind::EXT_VECTOR_ELEMENT_EXPR:
    case mx::StmtKind::EXPRESSION_TRAIT_EXPR:
      return reinterpret_cast<const Expr &>(parent);
    default: return std::nullopt;
  }
}

bool Expr::has_side_effects(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal15();
}

Expr Expr::ignore_casts(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr Expr::ignore_conversion_operator_single_step(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr Expr::ignore_imp_casts(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal13());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr Expr::ignore_implicit(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal14());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr Expr::ignore_implicit_as_written(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal17());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr Expr::ignore_parenthesis_base_casts(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal18());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr Expr::ignore_parenthesis_casts(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal19());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr Expr::ignore_parenthesis_imp_casts(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal26());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr Expr::ignore_parenthesis_l_value_casts(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal27());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr Expr::ignore_parenthesis_noop_casts(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal28());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr Expr::ignore_parentheses(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal29());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr Expr::ignore_unless_spelled_in_source(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal30());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool Expr::contains_errors(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal20();
}

bool Expr::contains_unexpanded_parameter_pack(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal21();
}

Expr Expr::best_dynamic_class_type_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal31());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token Expr::expression_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal32())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<ObjCPropertyRefExpr> Expr::obj_c_property(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal57()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal33());
    return ObjCPropertyRefExpr::from(fragment->StmtFor(fragment, id));
  }
}

ExprObjectKind Expr::object_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<ExprObjectKind>(self.getVal56());
}

std::optional<Decl> Expr::referenced_declaration_of_callee(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal58()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal34());
    return fragment->DeclFor(fragment, id);
  }
}

std::optional<FieldDecl> Expr::source_bit_field(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal59()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal35());
    return FieldDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<Type> Expr::type(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal60()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal36());
    return fragment->TypeFor(fragment, id);
  }
}

ExprValueKind Expr::value_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<ExprValueKind>(self.getVal74());
}

bool Expr::has_non_trivial_call(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal61();
}

std::optional<bool> Expr::is_cxx98_integral_constant_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal63()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal62());
  }
}

bool Expr::is_default_argument(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal64();
}

bool Expr::is_gl_value(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal75();
}

bool Expr::is_implicit_cxx_this(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal76();
}

bool Expr::is_instantiation_dependent(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal77();
}

std::optional<bool> Expr::is_integer_constant_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal79()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal78());
  }
}

bool Expr::is_known_to_have_boolean_value(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal80();
}

bool Expr::is_l_value(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal81();
}

bool Expr::is_objcgc_candidate(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal82();
}

bool Expr::is_obj_c_self_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal83();
}

bool Expr::is_ordinary_or_bit_field_object(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal84();
}

bool Expr::is_pr_value(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal85();
}

bool Expr::is_read_if_discarded_in_c_plus_plus11(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal86();
}

bool Expr::is_type_dependent(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal87();
}

bool Expr::is_value_dependent(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal88();
}

bool Expr::is_x_value(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal89();
}

bool Expr::refers_to_bit_field(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal90();
}

bool Expr::refers_to_global_register_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal91();
}

bool Expr::refers_to_matrix_element(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal92();
}

bool Expr::refers_to_vector_element(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal93();
}

DesignatedInitUpdateExprContainingStmtRange DesignatedInitUpdateExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

DesignatedInitUpdateExprContainingStmtRange DesignatedInitUpdateExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool DesignatedInitUpdateExpr::contains(const Decl &decl) {
  for(auto &parent : DesignatedInitUpdateExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool DesignatedInitUpdateExpr::contains(const Stmt &stmt) {
  for(auto &parent : DesignatedInitUpdateExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<DesignatedInitUpdateExpr> DesignatedInitUpdateExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<DesignatedInitUpdateExpr> DesignatedInitUpdateExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<DesignatedInitUpdateExpr> DesignatedInitUpdateExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<DesignatedInitUpdateExpr> DesignatedInitUpdateExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::DESIGNATED_INIT_UPDATE_EXPR:
      return reinterpret_cast<const DesignatedInitUpdateExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr DesignatedInitUpdateExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

InitListExpr DesignatedInitUpdateExpr::updater(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return InitListExpr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

DesignatedInitExprContainingStmtRange DesignatedInitExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

DesignatedInitExprContainingStmtRange DesignatedInitExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool DesignatedInitExpr::contains(const Decl &decl) {
  for(auto &parent : DesignatedInitExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool DesignatedInitExpr::contains(const Stmt &stmt) {
  for(auto &parent : DesignatedInitExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<DesignatedInitExpr> DesignatedInitExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<DesignatedInitExpr> DesignatedInitExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<DesignatedInitExpr> DesignatedInitExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<DesignatedInitExpr> DesignatedInitExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::DESIGNATED_INIT_EXPR:
      return reinterpret_cast<const DesignatedInitExpr &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Designator> DesignatedInitExpr::designators(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal94();
  std::vector<Designator> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

TokenRange DesignatedInitExpr::designators_source_range(void) const {
  auto self = fragment->NthStmt(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal37(), self.getVal38());
}

Token DesignatedInitExpr::equal_or_colon_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr DesignatedInitExpr::initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool DesignatedInitExpr::is_direct_initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool DesignatedInitExpr::uses_gnu_syntax(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

std::vector<Expr> DesignatedInitExpr::sub_expressions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

DependentScopeDeclRefExprContainingStmtRange DependentScopeDeclRefExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

DependentScopeDeclRefExprContainingStmtRange DependentScopeDeclRefExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool DependentScopeDeclRefExpr::contains(const Decl &decl) {
  for(auto &parent : DependentScopeDeclRefExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool DependentScopeDeclRefExpr::contains(const Stmt &stmt) {
  for(auto &parent : DependentScopeDeclRefExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<DependentScopeDeclRefExpr> DependentScopeDeclRefExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<DependentScopeDeclRefExpr> DependentScopeDeclRefExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<DependentScopeDeclRefExpr> DependentScopeDeclRefExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<DependentScopeDeclRefExpr> DependentScopeDeclRefExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::DEPENDENT_SCOPE_DECL_REF_EXPR:
      return reinterpret_cast<const DependentScopeDeclRefExpr &>(parent);
    default: return std::nullopt;
  }
}

Token DependentScopeDeclRefExpr::l_angle_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token DependentScopeDeclRefExpr::r_angle_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token DependentScopeDeclRefExpr::template_keyword_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool DependentScopeDeclRefExpr::has_explicit_template_arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool DependentScopeDeclRefExpr::has_template_keyword(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

DependentCoawaitExprContainingStmtRange DependentCoawaitExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

DependentCoawaitExprContainingStmtRange DependentCoawaitExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool DependentCoawaitExpr::contains(const Decl &decl) {
  for(auto &parent : DependentCoawaitExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool DependentCoawaitExpr::contains(const Stmt &stmt) {
  for(auto &parent : DependentCoawaitExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<DependentCoawaitExpr> DependentCoawaitExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<DependentCoawaitExpr> DependentCoawaitExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<DependentCoawaitExpr> DependentCoawaitExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<DependentCoawaitExpr> DependentCoawaitExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::DEPENDENT_COAWAIT_EXPR:
      return reinterpret_cast<const DependentCoawaitExpr &>(parent);
    default: return std::nullopt;
  }
}

Token DependentCoawaitExpr::keyword_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr DependentCoawaitExpr::operand(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

UnresolvedLookupExpr DependentCoawaitExpr::operator_coawait_lookup(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return UnresolvedLookupExpr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

DeclRefExprContainingStmtRange DeclRefExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

DeclRefExprContainingStmtRange DeclRefExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool DeclRefExpr::contains(const Decl &decl) {
  for(auto &parent : DeclRefExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool DeclRefExpr::contains(const Stmt &stmt) {
  for(auto &parent : DeclRefExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<DeclRefExpr> DeclRefExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<DeclRefExpr> DeclRefExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<DeclRefExpr> DeclRefExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<DeclRefExpr> DeclRefExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::DECL_REF_EXPR:
      return reinterpret_cast<const DeclRefExpr &>(parent);
    default: return std::nullopt;
  }
}

ValueDecl DeclRefExpr::declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return ValueDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

NamedDecl DeclRefExpr::found_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return NamedDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token DeclRefExpr::l_angle_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token DeclRefExpr::r_angle_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token DeclRefExpr::template_keyword_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal41())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool DeclRefExpr::had_multiple_candidates(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool DeclRefExpr::has_explicit_template_arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

bool DeclRefExpr::has_qualifier(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

bool DeclRefExpr::has_template_keyword_and_arguments_info(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

bool DeclRefExpr::has_template_keyword(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

NonOdrUseReason DeclRefExpr::is_non_odr_use(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<NonOdrUseReason>(self.getVal100());
}

bool DeclRefExpr::refers_to_enclosing_variable_or_capture(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

CoroutineSuspendExprContainingStmtRange CoroutineSuspendExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CoroutineSuspendExprContainingStmtRange CoroutineSuspendExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CoroutineSuspendExpr::contains(const Decl &decl) {
  for(auto &parent : CoroutineSuspendExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CoroutineSuspendExpr::contains(const Stmt &stmt) {
  for(auto &parent : CoroutineSuspendExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CoroutineSuspendExpr> CoroutineSuspendExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CoroutineSuspendExpr> CoroutineSuspendExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CoroutineSuspendExpr> CoroutineSuspendExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CoroutineSuspendExpr> CoroutineSuspendExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::COAWAIT_EXPR:
    case mx::StmtKind::COYIELD_EXPR:
      return reinterpret_cast<const CoroutineSuspendExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr CoroutineSuspendExpr::common_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token CoroutineSuspendExpr::keyword_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

OpaqueValueExpr CoroutineSuspendExpr::opaque_value(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return OpaqueValueExpr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr CoroutineSuspendExpr::ready_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr CoroutineSuspendExpr::resume_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal41());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr CoroutineSuspendExpr::suspend_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal42());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

CoawaitExprContainingStmtRange CoawaitExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CoawaitExprContainingStmtRange CoawaitExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CoawaitExpr::contains(const Decl &decl) {
  for(auto &parent : CoawaitExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CoawaitExpr::contains(const Stmt &stmt) {
  for(auto &parent : CoawaitExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CoawaitExpr> CoawaitExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CoawaitExpr> CoawaitExpr::from(const CoroutineSuspendExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CoawaitExpr> CoawaitExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CoawaitExpr> CoawaitExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CoawaitExpr> CoawaitExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::COAWAIT_EXPR:
      return reinterpret_cast<const CoawaitExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr CoawaitExpr::operand(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool CoawaitExpr::is_implicit(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

CoyieldExprContainingStmtRange CoyieldExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CoyieldExprContainingStmtRange CoyieldExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CoyieldExpr::contains(const Decl &decl) {
  for(auto &parent : CoyieldExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CoyieldExpr::contains(const Stmt &stmt) {
  for(auto &parent : CoyieldExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CoyieldExpr> CoyieldExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CoyieldExpr> CoyieldExpr::from(const CoroutineSuspendExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CoyieldExpr> CoyieldExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CoyieldExpr> CoyieldExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CoyieldExpr> CoyieldExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::COYIELD_EXPR:
      return reinterpret_cast<const CoyieldExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr CoyieldExpr::operand(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ConvertVectorExprContainingStmtRange ConvertVectorExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ConvertVectorExprContainingStmtRange ConvertVectorExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ConvertVectorExpr::contains(const Decl &decl) {
  for(auto &parent : ConvertVectorExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ConvertVectorExpr::contains(const Stmt &stmt) {
  for(auto &parent : ConvertVectorExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ConvertVectorExpr> ConvertVectorExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ConvertVectorExpr> ConvertVectorExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ConvertVectorExpr> ConvertVectorExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ConvertVectorExpr> ConvertVectorExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CONVERT_VECTOR_EXPR:
      return reinterpret_cast<const ConvertVectorExpr &>(parent);
    default: return std::nullopt;
  }
}

Token ConvertVectorExpr::builtin_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ConvertVectorExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr ConvertVectorExpr::src_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ConceptSpecializationExprContainingStmtRange ConceptSpecializationExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ConceptSpecializationExprContainingStmtRange ConceptSpecializationExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ConceptSpecializationExpr::contains(const Decl &decl) {
  for(auto &parent : ConceptSpecializationExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ConceptSpecializationExpr::contains(const Stmt &stmt) {
  for(auto &parent : ConceptSpecializationExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ConceptSpecializationExpr> ConceptSpecializationExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ConceptSpecializationExpr> ConceptSpecializationExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ConceptSpecializationExpr> ConceptSpecializationExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ConceptSpecializationExpr> ConceptSpecializationExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CONCEPT_SPECIALIZATION_EXPR:
      return reinterpret_cast<const ConceptSpecializationExpr &>(parent);
    default: return std::nullopt;
  }
}

std::vector<TemplateArgument> ConceptSpecializationExpr::template_arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal94();
  std::vector<TemplateArgument> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

bool ConceptSpecializationExpr::is_satisfied(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

CompoundLiteralExprContainingStmtRange CompoundLiteralExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CompoundLiteralExprContainingStmtRange CompoundLiteralExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CompoundLiteralExpr::contains(const Decl &decl) {
  for(auto &parent : CompoundLiteralExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CompoundLiteralExpr::contains(const Stmt &stmt) {
  for(auto &parent : CompoundLiteralExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CompoundLiteralExpr> CompoundLiteralExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CompoundLiteralExpr> CompoundLiteralExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CompoundLiteralExpr> CompoundLiteralExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CompoundLiteralExpr> CompoundLiteralExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::COMPOUND_LITERAL_EXPR:
      return reinterpret_cast<const CompoundLiteralExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr CompoundLiteralExpr::initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token CompoundLiteralExpr::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool CompoundLiteralExpr::is_file_scope(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

ChooseExprContainingStmtRange ChooseExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ChooseExprContainingStmtRange ChooseExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ChooseExpr::contains(const Decl &decl) {
  for(auto &parent : ChooseExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ChooseExpr::contains(const Stmt &stmt) {
  for(auto &parent : ChooseExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ChooseExpr> ChooseExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ChooseExpr> ChooseExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ChooseExpr> ChooseExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ChooseExpr> ChooseExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CHOOSE_EXPR:
      return reinterpret_cast<const ChooseExpr &>(parent);
    default: return std::nullopt;
  }
}

Token ChooseExpr::builtin_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr ChooseExpr::chosen_sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr ChooseExpr::condition(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr ChooseExpr::lhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr ChooseExpr::rhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal41());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token ChooseExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal42())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool ChooseExpr::is_condition_dependent(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool ChooseExpr::is_condition_true(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

CharacterLiteralContainingStmtRange CharacterLiteral::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CharacterLiteralContainingStmtRange CharacterLiteral::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CharacterLiteral::contains(const Decl &decl) {
  for(auto &parent : CharacterLiteral::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CharacterLiteral::contains(const Stmt &stmt) {
  for(auto &parent : CharacterLiteral::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CharacterLiteral> CharacterLiteral::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CharacterLiteral> CharacterLiteral::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CharacterLiteral> CharacterLiteral::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CharacterLiteral> CharacterLiteral::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CHARACTER_LITERAL:
      return reinterpret_cast<const CharacterLiteral &>(parent);
    default: return std::nullopt;
  }
}

CharacterLiteralCharacterKind CharacterLiteral::character_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<CharacterLiteralCharacterKind>(self.getVal100());
}

Token CharacterLiteral::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

CastExprContainingStmtRange CastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CastExprContainingStmtRange CastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CastExpr::contains(const Decl &decl) {
  for(auto &parent : CastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CastExpr::contains(const Stmt &stmt) {
  for(auto &parent : CastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CastExpr> CastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CastExpr> CastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CastExpr> CastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CastExpr> CastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::IMPLICIT_CAST_EXPR:
    case mx::StmtKind::CXX_DYNAMIC_CAST_EXPR:
    case mx::StmtKind::CXX_CONST_CAST_EXPR:
    case mx::StmtKind::CXX_ADDRSPACE_CAST_EXPR:
    case mx::StmtKind::CXX_STATIC_CAST_EXPR:
    case mx::StmtKind::CXX_REINTERPRET_CAST_EXPR:
    case mx::StmtKind::CXX_FUNCTIONAL_CAST_EXPR:
    case mx::StmtKind::C_STYLE_CAST_EXPR:
    case mx::StmtKind::BUILTIN_BIT_CAST_EXPR:
    case mx::StmtKind::OBJ_C_BRIDGED_CAST_EXPR:
      return reinterpret_cast<const CastExpr &>(parent);
    default: return std::nullopt;
  }
}

CastKind CastExpr::cast_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<CastKind>(self.getVal100());
}

std::string_view CastExpr::cast_kind_name(void) const {
  auto self = fragment->NthStmt(offset_);
  capnp::Text::Reader data = self.getVal65();
  return std::string_view(data.cStr(), data.size());
}

std::optional<NamedDecl> CastExpr::conversion_function(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal37());
    return NamedDecl::from(fragment->DeclFor(fragment, id));
  }
}

Expr CastExpr::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr CastExpr::sub_expression_as_written(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<FieldDecl> CastExpr::target_union_field(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal40());
    return FieldDecl::from(fragment->DeclFor(fragment, id));
  }
}

bool CastExpr::has_stored_fp_features(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

ImplicitCastExprContainingStmtRange ImplicitCastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ImplicitCastExprContainingStmtRange ImplicitCastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ImplicitCastExpr::contains(const Decl &decl) {
  for(auto &parent : ImplicitCastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ImplicitCastExpr::contains(const Stmt &stmt) {
  for(auto &parent : ImplicitCastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ImplicitCastExpr> ImplicitCastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ImplicitCastExpr> ImplicitCastExpr::from(const CastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ImplicitCastExpr> ImplicitCastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ImplicitCastExpr> ImplicitCastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ImplicitCastExpr> ImplicitCastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::IMPLICIT_CAST_EXPR:
      return reinterpret_cast<const ImplicitCastExpr &>(parent);
    default: return std::nullopt;
  }
}

bool ImplicitCastExpr::is_part_of_explicit_cast(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

ExplicitCastExprContainingStmtRange ExplicitCastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ExplicitCastExprContainingStmtRange ExplicitCastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ExplicitCastExpr::contains(const Decl &decl) {
  for(auto &parent : ExplicitCastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ExplicitCastExpr::contains(const Stmt &stmt) {
  for(auto &parent : ExplicitCastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ExplicitCastExpr> ExplicitCastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ExplicitCastExpr> ExplicitCastExpr::from(const CastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ExplicitCastExpr> ExplicitCastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ExplicitCastExpr> ExplicitCastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ExplicitCastExpr> ExplicitCastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_DYNAMIC_CAST_EXPR:
    case mx::StmtKind::CXX_CONST_CAST_EXPR:
    case mx::StmtKind::CXX_ADDRSPACE_CAST_EXPR:
    case mx::StmtKind::CXX_STATIC_CAST_EXPR:
    case mx::StmtKind::CXX_REINTERPRET_CAST_EXPR:
    case mx::StmtKind::CXX_FUNCTIONAL_CAST_EXPR:
    case mx::StmtKind::C_STYLE_CAST_EXPR:
    case mx::StmtKind::BUILTIN_BIT_CAST_EXPR:
    case mx::StmtKind::OBJ_C_BRIDGED_CAST_EXPR:
      return reinterpret_cast<const ExplicitCastExpr &>(parent);
    default: return std::nullopt;
  }
}

Type ExplicitCastExpr::type_as_written(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal41());
  return fragment->TypeFor(fragment, id, false).value();
}

CXXNamedCastExprContainingStmtRange CXXNamedCastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXNamedCastExprContainingStmtRange CXXNamedCastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXNamedCastExpr::contains(const Decl &decl) {
  for(auto &parent : CXXNamedCastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXNamedCastExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXNamedCastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXNamedCastExpr> CXXNamedCastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXNamedCastExpr> CXXNamedCastExpr::from(const ExplicitCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXNamedCastExpr> CXXNamedCastExpr::from(const CastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXNamedCastExpr> CXXNamedCastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXNamedCastExpr> CXXNamedCastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXNamedCastExpr> CXXNamedCastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_DYNAMIC_CAST_EXPR:
    case mx::StmtKind::CXX_CONST_CAST_EXPR:
    case mx::StmtKind::CXX_ADDRSPACE_CAST_EXPR:
    case mx::StmtKind::CXX_STATIC_CAST_EXPR:
    case mx::StmtKind::CXX_REINTERPRET_CAST_EXPR:
      return reinterpret_cast<const CXXNamedCastExpr &>(parent);
    default: return std::nullopt;
  }
}

TokenRange CXXNamedCastExpr::angle_brackets(void) const {
  auto self = fragment->NthStmt(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal42(), self.getVal43());
}

std::string_view CXXNamedCastExpr::cast_name(void) const {
  auto self = fragment->NthStmt(offset_);
  capnp::Text::Reader data = self.getVal70();
  return std::string_view(data.cStr(), data.size());
}

Token CXXNamedCastExpr::operator_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal44())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token CXXNamedCastExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal45())) {
    return tok.value();
  } else {
    return Token();
  }
}

CXXDynamicCastExprContainingStmtRange CXXDynamicCastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXDynamicCastExprContainingStmtRange CXXDynamicCastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXDynamicCastExpr::contains(const Decl &decl) {
  for(auto &parent : CXXDynamicCastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXDynamicCastExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXDynamicCastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXDynamicCastExpr> CXXDynamicCastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXDynamicCastExpr> CXXDynamicCastExpr::from(const CXXNamedCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDynamicCastExpr> CXXDynamicCastExpr::from(const ExplicitCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDynamicCastExpr> CXXDynamicCastExpr::from(const CastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDynamicCastExpr> CXXDynamicCastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDynamicCastExpr> CXXDynamicCastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDynamicCastExpr> CXXDynamicCastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_DYNAMIC_CAST_EXPR:
      return reinterpret_cast<const CXXDynamicCastExpr &>(parent);
    default: return std::nullopt;
  }
}

bool CXXDynamicCastExpr::is_always_null(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

CXXConstCastExprContainingStmtRange CXXConstCastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXConstCastExprContainingStmtRange CXXConstCastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXConstCastExpr::contains(const Decl &decl) {
  for(auto &parent : CXXConstCastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXConstCastExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXConstCastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXConstCastExpr> CXXConstCastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXConstCastExpr> CXXConstCastExpr::from(const CXXNamedCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXConstCastExpr> CXXConstCastExpr::from(const ExplicitCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXConstCastExpr> CXXConstCastExpr::from(const CastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXConstCastExpr> CXXConstCastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXConstCastExpr> CXXConstCastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXConstCastExpr> CXXConstCastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_CONST_CAST_EXPR:
      return reinterpret_cast<const CXXConstCastExpr &>(parent);
    default: return std::nullopt;
  }
}

CXXAddrspaceCastExprContainingStmtRange CXXAddrspaceCastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXAddrspaceCastExprContainingStmtRange CXXAddrspaceCastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXAddrspaceCastExpr::contains(const Decl &decl) {
  for(auto &parent : CXXAddrspaceCastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXAddrspaceCastExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXAddrspaceCastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXAddrspaceCastExpr> CXXAddrspaceCastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXAddrspaceCastExpr> CXXAddrspaceCastExpr::from(const CXXNamedCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXAddrspaceCastExpr> CXXAddrspaceCastExpr::from(const ExplicitCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXAddrspaceCastExpr> CXXAddrspaceCastExpr::from(const CastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXAddrspaceCastExpr> CXXAddrspaceCastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXAddrspaceCastExpr> CXXAddrspaceCastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXAddrspaceCastExpr> CXXAddrspaceCastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_ADDRSPACE_CAST_EXPR:
      return reinterpret_cast<const CXXAddrspaceCastExpr &>(parent);
    default: return std::nullopt;
  }
}

CXXStaticCastExprContainingStmtRange CXXStaticCastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXStaticCastExprContainingStmtRange CXXStaticCastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXStaticCastExpr::contains(const Decl &decl) {
  for(auto &parent : CXXStaticCastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXStaticCastExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXStaticCastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXStaticCastExpr> CXXStaticCastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXStaticCastExpr> CXXStaticCastExpr::from(const CXXNamedCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXStaticCastExpr> CXXStaticCastExpr::from(const ExplicitCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXStaticCastExpr> CXXStaticCastExpr::from(const CastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXStaticCastExpr> CXXStaticCastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXStaticCastExpr> CXXStaticCastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXStaticCastExpr> CXXStaticCastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_STATIC_CAST_EXPR:
      return reinterpret_cast<const CXXStaticCastExpr &>(parent);
    default: return std::nullopt;
  }
}

CXXReinterpretCastExprContainingStmtRange CXXReinterpretCastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXReinterpretCastExprContainingStmtRange CXXReinterpretCastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXReinterpretCastExpr::contains(const Decl &decl) {
  for(auto &parent : CXXReinterpretCastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXReinterpretCastExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXReinterpretCastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXReinterpretCastExpr> CXXReinterpretCastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXReinterpretCastExpr> CXXReinterpretCastExpr::from(const CXXNamedCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXReinterpretCastExpr> CXXReinterpretCastExpr::from(const ExplicitCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXReinterpretCastExpr> CXXReinterpretCastExpr::from(const CastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXReinterpretCastExpr> CXXReinterpretCastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXReinterpretCastExpr> CXXReinterpretCastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXReinterpretCastExpr> CXXReinterpretCastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_REINTERPRET_CAST_EXPR:
      return reinterpret_cast<const CXXReinterpretCastExpr &>(parent);
    default: return std::nullopt;
  }
}

CXXFunctionalCastExprContainingStmtRange CXXFunctionalCastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXFunctionalCastExprContainingStmtRange CXXFunctionalCastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXFunctionalCastExpr::contains(const Decl &decl) {
  for(auto &parent : CXXFunctionalCastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXFunctionalCastExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXFunctionalCastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXFunctionalCastExpr> CXXFunctionalCastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXFunctionalCastExpr> CXXFunctionalCastExpr::from(const ExplicitCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXFunctionalCastExpr> CXXFunctionalCastExpr::from(const CastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXFunctionalCastExpr> CXXFunctionalCastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXFunctionalCastExpr> CXXFunctionalCastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXFunctionalCastExpr> CXXFunctionalCastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_FUNCTIONAL_CAST_EXPR:
      return reinterpret_cast<const CXXFunctionalCastExpr &>(parent);
    default: return std::nullopt;
  }
}

Token CXXFunctionalCastExpr::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal42())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token CXXFunctionalCastExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal43())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool CXXFunctionalCastExpr::is_list_initialization(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

CStyleCastExprContainingStmtRange CStyleCastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CStyleCastExprContainingStmtRange CStyleCastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CStyleCastExpr::contains(const Decl &decl) {
  for(auto &parent : CStyleCastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CStyleCastExpr::contains(const Stmt &stmt) {
  for(auto &parent : CStyleCastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CStyleCastExpr> CStyleCastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CStyleCastExpr> CStyleCastExpr::from(const ExplicitCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CStyleCastExpr> CStyleCastExpr::from(const CastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CStyleCastExpr> CStyleCastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CStyleCastExpr> CStyleCastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CStyleCastExpr> CStyleCastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::C_STYLE_CAST_EXPR:
      return reinterpret_cast<const CStyleCastExpr &>(parent);
    default: return std::nullopt;
  }
}

Token CStyleCastExpr::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal42())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token CStyleCastExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal43())) {
    return tok.value();
  } else {
    return Token();
  }
}

BuiltinBitCastExprContainingStmtRange BuiltinBitCastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

BuiltinBitCastExprContainingStmtRange BuiltinBitCastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool BuiltinBitCastExpr::contains(const Decl &decl) {
  for(auto &parent : BuiltinBitCastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool BuiltinBitCastExpr::contains(const Stmt &stmt) {
  for(auto &parent : BuiltinBitCastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<BuiltinBitCastExpr> BuiltinBitCastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<BuiltinBitCastExpr> BuiltinBitCastExpr::from(const ExplicitCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<BuiltinBitCastExpr> BuiltinBitCastExpr::from(const CastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<BuiltinBitCastExpr> BuiltinBitCastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<BuiltinBitCastExpr> BuiltinBitCastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<BuiltinBitCastExpr> BuiltinBitCastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::BUILTIN_BIT_CAST_EXPR:
      return reinterpret_cast<const BuiltinBitCastExpr &>(parent);
    default: return std::nullopt;
  }
}

ObjCBridgedCastExprContainingStmtRange ObjCBridgedCastExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCBridgedCastExprContainingStmtRange ObjCBridgedCastExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCBridgedCastExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCBridgedCastExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCBridgedCastExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCBridgedCastExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCBridgedCastExpr> ObjCBridgedCastExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCBridgedCastExpr> ObjCBridgedCastExpr::from(const ExplicitCastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCBridgedCastExpr> ObjCBridgedCastExpr::from(const CastExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCBridgedCastExpr> ObjCBridgedCastExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCBridgedCastExpr> ObjCBridgedCastExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCBridgedCastExpr> ObjCBridgedCastExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_BRIDGED_CAST_EXPR:
      return reinterpret_cast<const ObjCBridgedCastExpr &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCBridgedCastExpr::bridge_keyword_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal42())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCBridgeCastKind ObjCBridgedCastExpr::bridge_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<ObjCBridgeCastKind>(self.getVal102());
}

std::string_view ObjCBridgedCastExpr::bridge_kind_name(void) const {
  auto self = fragment->NthStmt(offset_);
  capnp::Text::Reader data = self.getVal70();
  return std::string_view(data.cStr(), data.size());
}

Token ObjCBridgedCastExpr::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal43())) {
    return tok.value();
  } else {
    return Token();
  }
}

CallExprContainingStmtRange CallExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CallExprContainingStmtRange CallExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CallExpr::contains(const Decl &decl) {
  for(auto &parent : CallExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CallExpr::contains(const Stmt &stmt) {
  for(auto &parent : CallExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CallExpr> CallExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CallExpr> CallExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CallExpr> CallExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CallExpr> CallExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CALL_EXPR:
    case mx::StmtKind::CXX_OPERATOR_CALL_EXPR:
    case mx::StmtKind::CXX_MEMBER_CALL_EXPR:
    case mx::StmtKind::CUDA_KERNEL_CALL_EXPR:
    case mx::StmtKind::USER_DEFINED_LITERAL:
      return reinterpret_cast<const CallExpr &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Expr> CallExpr::arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

CallExprADLCallKind CallExpr::adl_call_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<CallExprADLCallKind>(self.getVal100());
}

Type CallExpr::call_return_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return fragment->TypeFor(fragment, id, false).value();
}

Expr CallExpr::callee(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<Decl> CallExpr::callee_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal39());
    return fragment->DeclFor(fragment, id);
  }
}

std::optional<FunctionDecl> CallExpr::direct_callee(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal40());
    return FunctionDecl::from(fragment->DeclFor(fragment, id));
  }
}

Token CallExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal41())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<Attr> CallExpr::unused_result_attribute(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal97()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal42());
    return fragment->AttrFor(fragment, id);
  }
}

bool CallExpr::has_stored_fp_features(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

bool CallExpr::has_unused_result_attribute(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

bool CallExpr::is_builtin_assume_false(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

bool CallExpr::is_call_to_std_move(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal103();
}

bool CallExpr::is_unevaluated_builtin_call(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal104();
}

bool CallExpr::uses_adl(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal105();
}

CXXOperatorCallExprContainingStmtRange CXXOperatorCallExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXOperatorCallExprContainingStmtRange CXXOperatorCallExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXOperatorCallExpr::contains(const Decl &decl) {
  for(auto &parent : CXXOperatorCallExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXOperatorCallExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXOperatorCallExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXOperatorCallExpr> CXXOperatorCallExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXOperatorCallExpr> CXXOperatorCallExpr::from(const CallExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXOperatorCallExpr> CXXOperatorCallExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXOperatorCallExpr> CXXOperatorCallExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXOperatorCallExpr> CXXOperatorCallExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_OPERATOR_CALL_EXPR:
      return reinterpret_cast<const CXXOperatorCallExpr &>(parent);
    default: return std::nullopt;
  }
}

OverloadedOperatorKind CXXOperatorCallExpr::operator_(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<OverloadedOperatorKind>(self.getVal102());
}

Token CXXOperatorCallExpr::operator_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal43())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool CXXOperatorCallExpr::is_assignment_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal106();
}

bool CXXOperatorCallExpr::is_comparison_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal107();
}

bool CXXOperatorCallExpr::is_infix_binary_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal108();
}

CXXMemberCallExprContainingStmtRange CXXMemberCallExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXMemberCallExprContainingStmtRange CXXMemberCallExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXMemberCallExpr::contains(const Decl &decl) {
  for(auto &parent : CXXMemberCallExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXMemberCallExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXMemberCallExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXMemberCallExpr> CXXMemberCallExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXMemberCallExpr> CXXMemberCallExpr::from(const CallExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXMemberCallExpr> CXXMemberCallExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXMemberCallExpr> CXXMemberCallExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXMemberCallExpr> CXXMemberCallExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_MEMBER_CALL_EXPR:
      return reinterpret_cast<const CXXMemberCallExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr CXXMemberCallExpr::implicit_object_argument(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<CXXMethodDecl> CXXMemberCallExpr::method_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal106()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal44());
    return CXXMethodDecl::from(fragment->DeclFor(fragment, id));
  }
}

Type CXXMemberCallExpr::object_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal45());
  return fragment->TypeFor(fragment, id, false).value();
}

CXXRecordDecl CXXMemberCallExpr::record_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal46());
  return CXXRecordDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

CUDAKernelCallExprContainingStmtRange CUDAKernelCallExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CUDAKernelCallExprContainingStmtRange CUDAKernelCallExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CUDAKernelCallExpr::contains(const Decl &decl) {
  for(auto &parent : CUDAKernelCallExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CUDAKernelCallExpr::contains(const Stmt &stmt) {
  for(auto &parent : CUDAKernelCallExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CUDAKernelCallExpr> CUDAKernelCallExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CUDAKernelCallExpr> CUDAKernelCallExpr::from(const CallExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CUDAKernelCallExpr> CUDAKernelCallExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CUDAKernelCallExpr> CUDAKernelCallExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CUDAKernelCallExpr> CUDAKernelCallExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CUDA_KERNEL_CALL_EXPR:
      return reinterpret_cast<const CUDAKernelCallExpr &>(parent);
    default: return std::nullopt;
  }
}

CallExpr CUDAKernelCallExpr::config(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return CallExpr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

UserDefinedLiteralContainingStmtRange UserDefinedLiteral::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

UserDefinedLiteralContainingStmtRange UserDefinedLiteral::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool UserDefinedLiteral::contains(const Decl &decl) {
  for(auto &parent : UserDefinedLiteral::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UserDefinedLiteral::contains(const Stmt &stmt) {
  for(auto &parent : UserDefinedLiteral::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UserDefinedLiteral> UserDefinedLiteral::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<UserDefinedLiteral> UserDefinedLiteral::from(const CallExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UserDefinedLiteral> UserDefinedLiteral::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UserDefinedLiteral> UserDefinedLiteral::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UserDefinedLiteral> UserDefinedLiteral::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::USER_DEFINED_LITERAL:
      return reinterpret_cast<const UserDefinedLiteral &>(parent);
    default: return std::nullopt;
  }
}

Expr UserDefinedLiteral::cooked_literal(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

UserDefinedLiteralLiteralOperatorKind UserDefinedLiteral::literal_operator_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<UserDefinedLiteralLiteralOperatorKind>(self.getVal102());
}

Token UserDefinedLiteral::ud_suffix_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal44())) {
    return tok.value();
  } else {
    return Token();
  }
}

CXXUuidofExprContainingStmtRange CXXUuidofExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXUuidofExprContainingStmtRange CXXUuidofExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXUuidofExpr::contains(const Decl &decl) {
  for(auto &parent : CXXUuidofExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXUuidofExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXUuidofExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXUuidofExpr> CXXUuidofExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXUuidofExpr> CXXUuidofExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXUuidofExpr> CXXUuidofExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXUuidofExpr> CXXUuidofExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_UUIDOF_EXPR:
      return reinterpret_cast<const CXXUuidofExpr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Expr> CXXUuidofExpr::expression_operand(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal37());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

MSGuidDecl CXXUuidofExpr::guid_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return MSGuidDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Type CXXUuidofExpr::type_operand(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return fragment->TypeFor(fragment, id, false).value();
}

Type CXXUuidofExpr::type_operand_source_info(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return fragment->TypeFor(fragment, id, false).value();
}

bool CXXUuidofExpr::is_type_operand(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

CXXUnresolvedConstructExprContainingStmtRange CXXUnresolvedConstructExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXUnresolvedConstructExprContainingStmtRange CXXUnresolvedConstructExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXUnresolvedConstructExpr::contains(const Decl &decl) {
  for(auto &parent : CXXUnresolvedConstructExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXUnresolvedConstructExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXUnresolvedConstructExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXUnresolvedConstructExpr> CXXUnresolvedConstructExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXUnresolvedConstructExpr> CXXUnresolvedConstructExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXUnresolvedConstructExpr> CXXUnresolvedConstructExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXUnresolvedConstructExpr> CXXUnresolvedConstructExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_UNRESOLVED_CONSTRUCT_EXPR:
      return reinterpret_cast<const CXXUnresolvedConstructExpr &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Expr> CXXUnresolvedConstructExpr::arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

Token CXXUnresolvedConstructExpr::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token CXXUnresolvedConstructExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Type CXXUnresolvedConstructExpr::type_as_written(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return fragment->TypeFor(fragment, id, false).value();
}

bool CXXUnresolvedConstructExpr::is_list_initialization(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

CXXTypeidExprContainingStmtRange CXXTypeidExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXTypeidExprContainingStmtRange CXXTypeidExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXTypeidExpr::contains(const Decl &decl) {
  for(auto &parent : CXXTypeidExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXTypeidExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXTypeidExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXTypeidExpr> CXXTypeidExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXTypeidExpr> CXXTypeidExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXTypeidExpr> CXXTypeidExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXTypeidExpr> CXXTypeidExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_TYPEID_EXPR:
      return reinterpret_cast<const CXXTypeidExpr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Expr> CXXTypeidExpr::expression_operand(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal37());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

Type CXXTypeidExpr::type_operand(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return fragment->TypeFor(fragment, id, false).value();
}

Type CXXTypeidExpr::type_operand_source_info(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<bool> CXXTypeidExpr::is_most_derived(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal97()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal96());
  }
}

bool CXXTypeidExpr::is_potentially_evaluated(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

bool CXXTypeidExpr::is_type_operand(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

CXXThrowExprContainingStmtRange CXXThrowExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXThrowExprContainingStmtRange CXXThrowExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXThrowExpr::contains(const Decl &decl) {
  for(auto &parent : CXXThrowExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXThrowExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXThrowExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXThrowExpr> CXXThrowExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXThrowExpr> CXXThrowExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXThrowExpr> CXXThrowExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXThrowExpr> CXXThrowExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_THROW_EXPR:
      return reinterpret_cast<const CXXThrowExpr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Expr> CXXThrowExpr::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal37());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

Token CXXThrowExpr::throw_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool CXXThrowExpr::is_thrown_variable_in_scope(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

CXXThisExprContainingStmtRange CXXThisExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXThisExprContainingStmtRange CXXThisExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXThisExpr::contains(const Decl &decl) {
  for(auto &parent : CXXThisExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXThisExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXThisExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXThisExpr> CXXThisExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXThisExpr> CXXThisExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXThisExpr> CXXThisExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXThisExpr> CXXThisExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_THIS_EXPR:
      return reinterpret_cast<const CXXThisExpr &>(parent);
    default: return std::nullopt;
  }
}

Token CXXThisExpr::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool CXXThisExpr::is_implicit(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

CXXStdInitializerListExprContainingStmtRange CXXStdInitializerListExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXStdInitializerListExprContainingStmtRange CXXStdInitializerListExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXStdInitializerListExpr::contains(const Decl &decl) {
  for(auto &parent : CXXStdInitializerListExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXStdInitializerListExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXStdInitializerListExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXStdInitializerListExpr> CXXStdInitializerListExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXStdInitializerListExpr> CXXStdInitializerListExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXStdInitializerListExpr> CXXStdInitializerListExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXStdInitializerListExpr> CXXStdInitializerListExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_STD_INITIALIZER_LIST_EXPR:
      return reinterpret_cast<const CXXStdInitializerListExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr CXXStdInitializerListExpr::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

CXXScalarValueInitExprContainingStmtRange CXXScalarValueInitExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXScalarValueInitExprContainingStmtRange CXXScalarValueInitExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXScalarValueInitExpr::contains(const Decl &decl) {
  for(auto &parent : CXXScalarValueInitExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXScalarValueInitExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXScalarValueInitExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXScalarValueInitExpr> CXXScalarValueInitExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXScalarValueInitExpr> CXXScalarValueInitExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXScalarValueInitExpr> CXXScalarValueInitExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXScalarValueInitExpr> CXXScalarValueInitExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_SCALAR_VALUE_INIT_EXPR:
      return reinterpret_cast<const CXXScalarValueInitExpr &>(parent);
    default: return std::nullopt;
  }
}

Token CXXScalarValueInitExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

CXXRewrittenBinaryOperatorContainingStmtRange CXXRewrittenBinaryOperator::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXRewrittenBinaryOperatorContainingStmtRange CXXRewrittenBinaryOperator::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXRewrittenBinaryOperator::contains(const Decl &decl) {
  for(auto &parent : CXXRewrittenBinaryOperator::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXRewrittenBinaryOperator::contains(const Stmt &stmt) {
  for(auto &parent : CXXRewrittenBinaryOperator::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXRewrittenBinaryOperator> CXXRewrittenBinaryOperator::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXRewrittenBinaryOperator> CXXRewrittenBinaryOperator::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXRewrittenBinaryOperator> CXXRewrittenBinaryOperator::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXRewrittenBinaryOperator> CXXRewrittenBinaryOperator::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_REWRITTEN_BINARY_OPERATOR:
      return reinterpret_cast<const CXXRewrittenBinaryOperator &>(parent);
    default: return std::nullopt;
  }
}

Expr CXXRewrittenBinaryOperator::lhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

BinaryOperatorKind CXXRewrittenBinaryOperator::opcode(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<BinaryOperatorKind>(self.getVal100());
}

std::string_view CXXRewrittenBinaryOperator::opcode_string(void) const {
  auto self = fragment->NthStmt(offset_);
  capnp::Text::Reader data = self.getVal65();
  return std::string_view(data.cStr(), data.size());
}

BinaryOperatorKind CXXRewrittenBinaryOperator::operator_(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<BinaryOperatorKind>(self.getVal102());
}

Token CXXRewrittenBinaryOperator::operator_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr CXXRewrittenBinaryOperator::rhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr CXXRewrittenBinaryOperator::semantic_form(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool CXXRewrittenBinaryOperator::is_assignment_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool CXXRewrittenBinaryOperator::is_comparison_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

bool CXXRewrittenBinaryOperator::is_reversed(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

CXXPseudoDestructorExprContainingStmtRange CXXPseudoDestructorExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXPseudoDestructorExprContainingStmtRange CXXPseudoDestructorExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXPseudoDestructorExpr::contains(const Decl &decl) {
  for(auto &parent : CXXPseudoDestructorExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXPseudoDestructorExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXPseudoDestructorExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXPseudoDestructorExpr> CXXPseudoDestructorExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXPseudoDestructorExpr> CXXPseudoDestructorExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXPseudoDestructorExpr> CXXPseudoDestructorExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXPseudoDestructorExpr> CXXPseudoDestructorExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_PSEUDO_DESTRUCTOR_EXPR:
      return reinterpret_cast<const CXXPseudoDestructorExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr CXXPseudoDestructorExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token CXXPseudoDestructorExpr::colon_colon_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Type CXXPseudoDestructorExpr::destroyed_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return fragment->TypeFor(fragment, id, false).value();
}

Token CXXPseudoDestructorExpr::destroyed_type_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token CXXPseudoDestructorExpr::operator_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal41())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<Type> CXXPseudoDestructorExpr::scope_type(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal42());
    return fragment->TypeFor(fragment, id);
  }
}

Token CXXPseudoDestructorExpr::tilde_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal43())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool CXXPseudoDestructorExpr::has_qualifier(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

bool CXXPseudoDestructorExpr::is_arrow(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

CXXNullPtrLiteralExprContainingStmtRange CXXNullPtrLiteralExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXNullPtrLiteralExprContainingStmtRange CXXNullPtrLiteralExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXNullPtrLiteralExpr::contains(const Decl &decl) {
  for(auto &parent : CXXNullPtrLiteralExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXNullPtrLiteralExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXNullPtrLiteralExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXNullPtrLiteralExpr> CXXNullPtrLiteralExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXNullPtrLiteralExpr> CXXNullPtrLiteralExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXNullPtrLiteralExpr> CXXNullPtrLiteralExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXNullPtrLiteralExpr> CXXNullPtrLiteralExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_NULL_PTR_LITERAL_EXPR:
      return reinterpret_cast<const CXXNullPtrLiteralExpr &>(parent);
    default: return std::nullopt;
  }
}

Token CXXNullPtrLiteralExpr::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

CXXNoexceptExprContainingStmtRange CXXNoexceptExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXNoexceptExprContainingStmtRange CXXNoexceptExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXNoexceptExpr::contains(const Decl &decl) {
  for(auto &parent : CXXNoexceptExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXNoexceptExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXNoexceptExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXNoexceptExpr> CXXNoexceptExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXNoexceptExpr> CXXNoexceptExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXNoexceptExpr> CXXNoexceptExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXNoexceptExpr> CXXNoexceptExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_NOEXCEPT_EXPR:
      return reinterpret_cast<const CXXNoexceptExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr CXXNoexceptExpr::operand(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool CXXNoexceptExpr::value(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

CXXNewExprContainingStmtRange CXXNewExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXNewExprContainingStmtRange CXXNewExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXNewExpr::contains(const Decl &decl) {
  for(auto &parent : CXXNewExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXNewExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXNewExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXNewExpr> CXXNewExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXNewExpr> CXXNewExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXNewExpr> CXXNewExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXNewExpr> CXXNewExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_NEW_EXPR:
      return reinterpret_cast<const CXXNewExpr &>(parent);
    default: return std::nullopt;
  }
}

bool CXXNewExpr::does_usual_array_delete_want_size(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

Type CXXNewExpr::allocated_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<Expr> CXXNewExpr::array_size(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal38());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

std::optional<CXXConstructExpr> CXXNewExpr::construct_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal97()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal39());
    return CXXConstructExpr::from(fragment->StmtFor(fragment, id));
  }
}

TokenRange CXXNewExpr::direct_initializer_range(void) const {
  auto self = fragment->NthStmt(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal40(), self.getVal41());
}

CXXNewExprInitializationStyle CXXNewExpr::initialization_style(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<CXXNewExprInitializationStyle>(self.getVal100());
}

std::optional<Expr> CXXNewExpr::initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal98()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal42());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

FunctionDecl CXXNewExpr::operator_delete(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return FunctionDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

FunctionDecl CXXNewExpr::operator_new(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal44());
  return FunctionDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

TokenRange CXXNewExpr::type_id_parentheses(void) const {
  auto self = fragment->NthStmt(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal45(), self.getVal46());
}

bool CXXNewExpr::has_initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

bool CXXNewExpr::is_array(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

bool CXXNewExpr::is_global_new(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal103();
}

bool CXXNewExpr::is_parenthesis_type_id(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal104();
}

bool CXXNewExpr::pass_alignment(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal105();
}

std::vector<Expr> CXXNewExpr::placement_arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

bool CXXNewExpr::should_null_check_allocation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal106();
}

CXXInheritedCtorInitExprContainingStmtRange CXXInheritedCtorInitExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXInheritedCtorInitExprContainingStmtRange CXXInheritedCtorInitExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXInheritedCtorInitExpr::contains(const Decl &decl) {
  for(auto &parent : CXXInheritedCtorInitExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXInheritedCtorInitExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXInheritedCtorInitExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXInheritedCtorInitExpr> CXXInheritedCtorInitExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXInheritedCtorInitExpr> CXXInheritedCtorInitExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXInheritedCtorInitExpr> CXXInheritedCtorInitExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXInheritedCtorInitExpr> CXXInheritedCtorInitExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_INHERITED_CTOR_INIT_EXPR:
      return reinterpret_cast<const CXXInheritedCtorInitExpr &>(parent);
    default: return std::nullopt;
  }
}

bool CXXInheritedCtorInitExpr::constructs_virtual_base(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

CXXConstructExprConstructionKind CXXInheritedCtorInitExpr::construction_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<CXXConstructExprConstructionKind>(self.getVal100());
}

CXXConstructorDecl CXXInheritedCtorInitExpr::constructor(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return CXXConstructorDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token CXXInheritedCtorInitExpr::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool CXXInheritedCtorInitExpr::inherited_from_virtual_base(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

CXXFoldExprContainingStmtRange CXXFoldExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXFoldExprContainingStmtRange CXXFoldExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXFoldExpr::contains(const Decl &decl) {
  for(auto &parent : CXXFoldExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXFoldExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXFoldExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXFoldExpr> CXXFoldExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXFoldExpr> CXXFoldExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXFoldExpr> CXXFoldExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXFoldExpr> CXXFoldExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_FOLD_EXPR:
      return reinterpret_cast<const CXXFoldExpr &>(parent);
    default: return std::nullopt;
  }
}

UnresolvedLookupExpr CXXFoldExpr::callee(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return UnresolvedLookupExpr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token CXXFoldExpr::ellipsis_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr CXXFoldExpr::initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr CXXFoldExpr::lhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token CXXFoldExpr::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal41())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<unsigned> CXXFoldExpr::num_expansions(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    return static_cast<unsigned>(self.getVal109());
  }
}

BinaryOperatorKind CXXFoldExpr::operator_(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<BinaryOperatorKind>(self.getVal100());
}

Expr CXXFoldExpr::pattern(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal42());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr CXXFoldExpr::rhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token CXXFoldExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal44())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool CXXFoldExpr::is_left_fold(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

bool CXXFoldExpr::is_right_fold(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

CXXDependentScopeMemberExprContainingStmtRange CXXDependentScopeMemberExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXDependentScopeMemberExprContainingStmtRange CXXDependentScopeMemberExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXDependentScopeMemberExpr::contains(const Decl &decl) {
  for(auto &parent : CXXDependentScopeMemberExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXDependentScopeMemberExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXDependentScopeMemberExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXDependentScopeMemberExpr> CXXDependentScopeMemberExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXDependentScopeMemberExpr> CXXDependentScopeMemberExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDependentScopeMemberExpr> CXXDependentScopeMemberExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDependentScopeMemberExpr> CXXDependentScopeMemberExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_DEPENDENT_SCOPE_MEMBER_EXPR:
      return reinterpret_cast<const CXXDependentScopeMemberExpr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Expr> CXXDependentScopeMemberExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal37());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

Type CXXDependentScopeMemberExpr::base_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<NamedDecl> CXXDependentScopeMemberExpr::first_qualifier_found_in_scope(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal39());
    return NamedDecl::from(fragment->DeclFor(fragment, id));
  }
}

Token CXXDependentScopeMemberExpr::l_angle_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token CXXDependentScopeMemberExpr::member_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal41())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token CXXDependentScopeMemberExpr::operator_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal42())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token CXXDependentScopeMemberExpr::r_angle_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal43())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token CXXDependentScopeMemberExpr::template_keyword_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal44())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool CXXDependentScopeMemberExpr::has_explicit_template_arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

bool CXXDependentScopeMemberExpr::has_template_keyword(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

bool CXXDependentScopeMemberExpr::is_arrow(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

bool CXXDependentScopeMemberExpr::is_implicit_access(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

CXXDeleteExprContainingStmtRange CXXDeleteExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXDeleteExprContainingStmtRange CXXDeleteExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXDeleteExpr::contains(const Decl &decl) {
  for(auto &parent : CXXDeleteExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXDeleteExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXDeleteExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXDeleteExpr> CXXDeleteExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXDeleteExpr> CXXDeleteExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDeleteExpr> CXXDeleteExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDeleteExpr> CXXDeleteExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_DELETE_EXPR:
      return reinterpret_cast<const CXXDeleteExpr &>(parent);
    default: return std::nullopt;
  }
}

bool CXXDeleteExpr::does_usual_array_delete_want_size(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

Expr CXXDeleteExpr::argument(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Type CXXDeleteExpr::destroyed_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return fragment->TypeFor(fragment, id, false).value();
}

FunctionDecl CXXDeleteExpr::operator_delete(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return FunctionDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool CXXDeleteExpr::is_array_form(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

bool CXXDeleteExpr::is_array_form_as_written(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

bool CXXDeleteExpr::is_global_delete(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

CXXDefaultInitExprContainingStmtRange CXXDefaultInitExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXDefaultInitExprContainingStmtRange CXXDefaultInitExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXDefaultInitExpr::contains(const Decl &decl) {
  for(auto &parent : CXXDefaultInitExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXDefaultInitExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXDefaultInitExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXDefaultInitExpr> CXXDefaultInitExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXDefaultInitExpr> CXXDefaultInitExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDefaultInitExpr> CXXDefaultInitExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDefaultInitExpr> CXXDefaultInitExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_DEFAULT_INIT_EXPR:
      return reinterpret_cast<const CXXDefaultInitExpr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Expr> CXXDefaultInitExpr::expression(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal37());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

FieldDecl CXXDefaultInitExpr::field(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return FieldDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token CXXDefaultInitExpr::used_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

CXXDefaultArgExprContainingStmtRange CXXDefaultArgExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXDefaultArgExprContainingStmtRange CXXDefaultArgExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXDefaultArgExpr::contains(const Decl &decl) {
  for(auto &parent : CXXDefaultArgExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXDefaultArgExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXDefaultArgExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXDefaultArgExpr> CXXDefaultArgExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXDefaultArgExpr> CXXDefaultArgExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDefaultArgExpr> CXXDefaultArgExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXDefaultArgExpr> CXXDefaultArgExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_DEFAULT_ARG_EXPR:
      return reinterpret_cast<const CXXDefaultArgExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr CXXDefaultArgExpr::expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ParmVarDecl CXXDefaultArgExpr::parameter(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return ParmVarDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token CXXDefaultArgExpr::used_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

CXXConstructExprContainingStmtRange CXXConstructExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXConstructExprContainingStmtRange CXXConstructExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXConstructExpr::contains(const Decl &decl) {
  for(auto &parent : CXXConstructExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXConstructExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXConstructExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXConstructExpr> CXXConstructExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXConstructExpr> CXXConstructExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXConstructExpr> CXXConstructExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXConstructExpr> CXXConstructExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_CONSTRUCT_EXPR:
    case mx::StmtKind::CXX_TEMPORARY_OBJECT_EXPR:
      return reinterpret_cast<const CXXConstructExpr &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Expr> CXXConstructExpr::arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

CXXConstructExprConstructionKind CXXConstructExpr::construction_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<CXXConstructExprConstructionKind>(self.getVal100());
}

CXXConstructorDecl CXXConstructExpr::constructor(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return CXXConstructorDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token CXXConstructExpr::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

TokenRange CXXConstructExpr::parenthesis_or_brace_range(void) const {
  auto self = fragment->NthStmt(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal39(), self.getVal40());
}

bool CXXConstructExpr::had_multiple_candidates(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool CXXConstructExpr::is_elidable(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

bool CXXConstructExpr::is_list_initialization(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

bool CXXConstructExpr::is_std_initializer_list_initialization(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

bool CXXConstructExpr::requires_zero_initialization(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

CXXTemporaryObjectExprContainingStmtRange CXXTemporaryObjectExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXTemporaryObjectExprContainingStmtRange CXXTemporaryObjectExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXTemporaryObjectExpr::contains(const Decl &decl) {
  for(auto &parent : CXXTemporaryObjectExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXTemporaryObjectExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXTemporaryObjectExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXTemporaryObjectExpr> CXXTemporaryObjectExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXTemporaryObjectExpr> CXXTemporaryObjectExpr::from(const CXXConstructExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXTemporaryObjectExpr> CXXTemporaryObjectExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXTemporaryObjectExpr> CXXTemporaryObjectExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXTemporaryObjectExpr> CXXTemporaryObjectExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_TEMPORARY_OBJECT_EXPR:
      return reinterpret_cast<const CXXTemporaryObjectExpr &>(parent);
    default: return std::nullopt;
  }
}

CXXBoolLiteralExprContainingStmtRange CXXBoolLiteralExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXBoolLiteralExprContainingStmtRange CXXBoolLiteralExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXBoolLiteralExpr::contains(const Decl &decl) {
  for(auto &parent : CXXBoolLiteralExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXBoolLiteralExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXBoolLiteralExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXBoolLiteralExpr> CXXBoolLiteralExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXBoolLiteralExpr> CXXBoolLiteralExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXBoolLiteralExpr> CXXBoolLiteralExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXBoolLiteralExpr> CXXBoolLiteralExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_BOOL_LITERAL_EXPR:
      return reinterpret_cast<const CXXBoolLiteralExpr &>(parent);
    default: return std::nullopt;
  }
}

Token CXXBoolLiteralExpr::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool CXXBoolLiteralExpr::value(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

CXXBindTemporaryExprContainingStmtRange CXXBindTemporaryExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CXXBindTemporaryExprContainingStmtRange CXXBindTemporaryExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CXXBindTemporaryExpr::contains(const Decl &decl) {
  for(auto &parent : CXXBindTemporaryExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXBindTemporaryExpr::contains(const Stmt &stmt) {
  for(auto &parent : CXXBindTemporaryExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXBindTemporaryExpr> CXXBindTemporaryExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CXXBindTemporaryExpr> CXXBindTemporaryExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXBindTemporaryExpr> CXXBindTemporaryExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CXXBindTemporaryExpr> CXXBindTemporaryExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CXX_BIND_TEMPORARY_EXPR:
      return reinterpret_cast<const CXXBindTemporaryExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr CXXBindTemporaryExpr::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

BlockExprContainingStmtRange BlockExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

BlockExprContainingStmtRange BlockExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool BlockExpr::contains(const Decl &decl) {
  for(auto &parent : BlockExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool BlockExpr::contains(const Stmt &stmt) {
  for(auto &parent : BlockExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<BlockExpr> BlockExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<BlockExpr> BlockExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<BlockExpr> BlockExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<BlockExpr> BlockExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::BLOCK_EXPR:
      return reinterpret_cast<const BlockExpr &>(parent);
    default: return std::nullopt;
  }
}

BlockDecl BlockExpr::block_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return BlockDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Stmt BlockExpr::body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return fragment->StmtFor(fragment, id, false).value();
}

Token BlockExpr::caret_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

FunctionProtoType BlockExpr::function_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return FunctionProtoType::from(fragment->TypeFor(fragment, id, false).value()).value();
}

BinaryOperatorContainingStmtRange BinaryOperator::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

BinaryOperatorContainingStmtRange BinaryOperator::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool BinaryOperator::contains(const Decl &decl) {
  for(auto &parent : BinaryOperator::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool BinaryOperator::contains(const Stmt &stmt) {
  for(auto &parent : BinaryOperator::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<BinaryOperator> BinaryOperator::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<BinaryOperator> BinaryOperator::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<BinaryOperator> BinaryOperator::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<BinaryOperator> BinaryOperator::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::BINARY_OPERATOR:
    case mx::StmtKind::COMPOUND_ASSIGN_OPERATOR:
      return reinterpret_cast<const BinaryOperator &>(parent);
    default: return std::nullopt;
  }
}

Expr BinaryOperator::lhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

BinaryOperatorKind BinaryOperator::opcode(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<BinaryOperatorKind>(self.getVal100());
}

std::string_view BinaryOperator::opcode_string(void) const {
  auto self = fragment->NthStmt(offset_);
  capnp::Text::Reader data = self.getVal65();
  return std::string_view(data.cStr(), data.size());
}

Token BinaryOperator::operator_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr BinaryOperator::rhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool BinaryOperator::has_stored_fp_features(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool BinaryOperator::is_additive_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

bool BinaryOperator::is_assignment_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

bool BinaryOperator::is_bitwise_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

bool BinaryOperator::is_comma_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

bool BinaryOperator::is_comparison_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

bool BinaryOperator::is_compound_assignment_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal103();
}

bool BinaryOperator::is_equality_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal104();
}

bool BinaryOperator::is_logical_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal105();
}

bool BinaryOperator::is_multiplicative_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal106();
}

bool BinaryOperator::is_pointer_memory_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal107();
}

bool BinaryOperator::is_relational_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal108();
}

bool BinaryOperator::is_shift_assign_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal110();
}

bool BinaryOperator::is_shift_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal111();
}

CompoundAssignOperatorContainingStmtRange CompoundAssignOperator::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CompoundAssignOperatorContainingStmtRange CompoundAssignOperator::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CompoundAssignOperator::contains(const Decl &decl) {
  for(auto &parent : CompoundAssignOperator::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CompoundAssignOperator::contains(const Stmt &stmt) {
  for(auto &parent : CompoundAssignOperator::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CompoundAssignOperator> CompoundAssignOperator::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CompoundAssignOperator> CompoundAssignOperator::from(const BinaryOperator &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CompoundAssignOperator> CompoundAssignOperator::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CompoundAssignOperator> CompoundAssignOperator::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CompoundAssignOperator> CompoundAssignOperator::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::COMPOUND_ASSIGN_OPERATOR:
      return reinterpret_cast<const CompoundAssignOperator &>(parent);
    default: return std::nullopt;
  }
}

Type CompoundAssignOperator::computation_lhs_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return fragment->TypeFor(fragment, id, false).value();
}

Type CompoundAssignOperator::computation_result_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal41());
  return fragment->TypeFor(fragment, id, false).value();
}

AtomicExprContainingStmtRange AtomicExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

AtomicExprContainingStmtRange AtomicExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool AtomicExpr::contains(const Decl &decl) {
  for(auto &parent : AtomicExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool AtomicExpr::contains(const Stmt &stmt) {
  for(auto &parent : AtomicExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<AtomicExpr> AtomicExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<AtomicExpr> AtomicExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<AtomicExpr> AtomicExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<AtomicExpr> AtomicExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::ATOMIC_EXPR:
      return reinterpret_cast<const AtomicExpr &>(parent);
    default: return std::nullopt;
  }
}

Token AtomicExpr::builtin_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

AtomicExprAtomicOp AtomicExpr::operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<AtomicExprAtomicOp>(self.getVal100());
}

Expr AtomicExpr::order(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<Expr> AtomicExpr::order_fail(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal39());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

Expr AtomicExpr::pointer(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token AtomicExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal41())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<Expr> AtomicExpr::scope(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal42());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

std::optional<Expr> AtomicExpr::value1(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal97()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal43());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

std::optional<Expr> AtomicExpr::value2(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal98()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal44());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

Type AtomicExpr::value_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal45());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<Expr> AtomicExpr::weak(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal99()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal46());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

bool AtomicExpr::is_cmp_x_chg(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

bool AtomicExpr::is_open_cl(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal103();
}

bool AtomicExpr::is_volatile(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal104();
}

std::vector<Expr> AtomicExpr::sub_expressions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

AsTypeExprContainingStmtRange AsTypeExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

AsTypeExprContainingStmtRange AsTypeExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool AsTypeExpr::contains(const Decl &decl) {
  for(auto &parent : AsTypeExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool AsTypeExpr::contains(const Stmt &stmt) {
  for(auto &parent : AsTypeExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<AsTypeExpr> AsTypeExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<AsTypeExpr> AsTypeExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<AsTypeExpr> AsTypeExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<AsTypeExpr> AsTypeExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::AS_TYPE_EXPR:
      return reinterpret_cast<const AsTypeExpr &>(parent);
    default: return std::nullopt;
  }
}

Token AsTypeExpr::builtin_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token AsTypeExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr AsTypeExpr::src_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ArrayTypeTraitExprContainingStmtRange ArrayTypeTraitExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ArrayTypeTraitExprContainingStmtRange ArrayTypeTraitExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ArrayTypeTraitExpr::contains(const Decl &decl) {
  for(auto &parent : ArrayTypeTraitExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ArrayTypeTraitExpr::contains(const Stmt &stmt) {
  for(auto &parent : ArrayTypeTraitExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ArrayTypeTraitExpr> ArrayTypeTraitExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ArrayTypeTraitExpr> ArrayTypeTraitExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ArrayTypeTraitExpr> ArrayTypeTraitExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ArrayTypeTraitExpr> ArrayTypeTraitExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::ARRAY_TYPE_TRAIT_EXPR:
      return reinterpret_cast<const ArrayTypeTraitExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr ArrayTypeTraitExpr::dimension_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Type ArrayTypeTraitExpr::queried_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return fragment->TypeFor(fragment, id, false).value();
}

ArrayTypeTrait ArrayTypeTraitExpr::trait(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<ArrayTypeTrait>(self.getVal100());
}

ArraySubscriptExprContainingStmtRange ArraySubscriptExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ArraySubscriptExprContainingStmtRange ArraySubscriptExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ArraySubscriptExpr::contains(const Decl &decl) {
  for(auto &parent : ArraySubscriptExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ArraySubscriptExpr::contains(const Stmt &stmt) {
  for(auto &parent : ArraySubscriptExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ArraySubscriptExpr> ArraySubscriptExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ArraySubscriptExpr> ArraySubscriptExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ArraySubscriptExpr> ArraySubscriptExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ArraySubscriptExpr> ArraySubscriptExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::ARRAY_SUBSCRIPT_EXPR:
      return reinterpret_cast<const ArraySubscriptExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr ArraySubscriptExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr ArraySubscriptExpr::index(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr ArraySubscriptExpr::lhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token ArraySubscriptExpr::r_bracket_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr ArraySubscriptExpr::rhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal41());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ArrayInitLoopExprContainingStmtRange ArrayInitLoopExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ArrayInitLoopExprContainingStmtRange ArrayInitLoopExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ArrayInitLoopExpr::contains(const Decl &decl) {
  for(auto &parent : ArrayInitLoopExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ArrayInitLoopExpr::contains(const Stmt &stmt) {
  for(auto &parent : ArrayInitLoopExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ArrayInitLoopExpr> ArrayInitLoopExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ArrayInitLoopExpr> ArrayInitLoopExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ArrayInitLoopExpr> ArrayInitLoopExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ArrayInitLoopExpr> ArrayInitLoopExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::ARRAY_INIT_LOOP_EXPR:
      return reinterpret_cast<const ArrayInitLoopExpr &>(parent);
    default: return std::nullopt;
  }
}

OpaqueValueExpr ArrayInitLoopExpr::common_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return OpaqueValueExpr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr ArrayInitLoopExpr::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ArrayInitIndexExprContainingStmtRange ArrayInitIndexExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ArrayInitIndexExprContainingStmtRange ArrayInitIndexExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ArrayInitIndexExpr::contains(const Decl &decl) {
  for(auto &parent : ArrayInitIndexExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ArrayInitIndexExpr::contains(const Stmt &stmt) {
  for(auto &parent : ArrayInitIndexExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ArrayInitIndexExpr> ArrayInitIndexExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ArrayInitIndexExpr> ArrayInitIndexExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ArrayInitIndexExpr> ArrayInitIndexExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ArrayInitIndexExpr> ArrayInitIndexExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::ARRAY_INIT_INDEX_EXPR:
      return reinterpret_cast<const ArrayInitIndexExpr &>(parent);
    default: return std::nullopt;
  }
}

AddrLabelExprContainingStmtRange AddrLabelExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

AddrLabelExprContainingStmtRange AddrLabelExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool AddrLabelExpr::contains(const Decl &decl) {
  for(auto &parent : AddrLabelExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool AddrLabelExpr::contains(const Stmt &stmt) {
  for(auto &parent : AddrLabelExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<AddrLabelExpr> AddrLabelExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<AddrLabelExpr> AddrLabelExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<AddrLabelExpr> AddrLabelExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<AddrLabelExpr> AddrLabelExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::ADDR_LABEL_EXPR:
      return reinterpret_cast<const AddrLabelExpr &>(parent);
    default: return std::nullopt;
  }
}

Token AddrLabelExpr::amp_amp_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

LabelDecl AddrLabelExpr::label(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return LabelDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token AddrLabelExpr::label_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

AbstractConditionalOperatorContainingStmtRange AbstractConditionalOperator::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

AbstractConditionalOperatorContainingStmtRange AbstractConditionalOperator::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool AbstractConditionalOperator::contains(const Decl &decl) {
  for(auto &parent : AbstractConditionalOperator::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool AbstractConditionalOperator::contains(const Stmt &stmt) {
  for(auto &parent : AbstractConditionalOperator::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<AbstractConditionalOperator> AbstractConditionalOperator::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<AbstractConditionalOperator> AbstractConditionalOperator::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<AbstractConditionalOperator> AbstractConditionalOperator::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<AbstractConditionalOperator> AbstractConditionalOperator::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CONDITIONAL_OPERATOR:
    case mx::StmtKind::BINARY_CONDITIONAL_OPERATOR:
      return reinterpret_cast<const AbstractConditionalOperator &>(parent);
    default: return std::nullopt;
  }
}

Token AbstractConditionalOperator::colon_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr AbstractConditionalOperator::condition(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr AbstractConditionalOperator::false_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token AbstractConditionalOperator::question_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr AbstractConditionalOperator::true_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal41());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ConditionalOperatorContainingStmtRange ConditionalOperator::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ConditionalOperatorContainingStmtRange ConditionalOperator::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ConditionalOperator::contains(const Decl &decl) {
  for(auto &parent : ConditionalOperator::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ConditionalOperator::contains(const Stmt &stmt) {
  for(auto &parent : ConditionalOperator::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ConditionalOperator> ConditionalOperator::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ConditionalOperator> ConditionalOperator::from(const AbstractConditionalOperator &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ConditionalOperator> ConditionalOperator::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ConditionalOperator> ConditionalOperator::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ConditionalOperator> ConditionalOperator::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CONDITIONAL_OPERATOR:
      return reinterpret_cast<const ConditionalOperator &>(parent);
    default: return std::nullopt;
  }
}

Expr ConditionalOperator::lhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal42());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr ConditionalOperator::rhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

BinaryConditionalOperatorContainingStmtRange BinaryConditionalOperator::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

BinaryConditionalOperatorContainingStmtRange BinaryConditionalOperator::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool BinaryConditionalOperator::contains(const Decl &decl) {
  for(auto &parent : BinaryConditionalOperator::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool BinaryConditionalOperator::contains(const Stmt &stmt) {
  for(auto &parent : BinaryConditionalOperator::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<BinaryConditionalOperator> BinaryConditionalOperator::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<BinaryConditionalOperator> BinaryConditionalOperator::from(const AbstractConditionalOperator &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<BinaryConditionalOperator> BinaryConditionalOperator::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<BinaryConditionalOperator> BinaryConditionalOperator::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<BinaryConditionalOperator> BinaryConditionalOperator::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::BINARY_CONDITIONAL_OPERATOR:
      return reinterpret_cast<const BinaryConditionalOperator &>(parent);
    default: return std::nullopt;
  }
}

Expr BinaryConditionalOperator::common(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal42());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

OpaqueValueExpr BinaryConditionalOperator::opaque_value(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return OpaqueValueExpr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

VAArgExprContainingStmtRange VAArgExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

VAArgExprContainingStmtRange VAArgExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool VAArgExpr::contains(const Decl &decl) {
  for(auto &parent : VAArgExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool VAArgExpr::contains(const Stmt &stmt) {
  for(auto &parent : VAArgExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<VAArgExpr> VAArgExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<VAArgExpr> VAArgExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<VAArgExpr> VAArgExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<VAArgExpr> VAArgExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::VA_ARG_EXPR:
      return reinterpret_cast<const VAArgExpr &>(parent);
    default: return std::nullopt;
  }
}

Token VAArgExpr::builtin_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token VAArgExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr VAArgExpr::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Type VAArgExpr::written_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return fragment->TypeFor(fragment, id, false).value();
}

bool VAArgExpr::is_microsoft_abi(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

UnaryOperatorContainingStmtRange UnaryOperator::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

UnaryOperatorContainingStmtRange UnaryOperator::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool UnaryOperator::contains(const Decl &decl) {
  for(auto &parent : UnaryOperator::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UnaryOperator::contains(const Stmt &stmt) {
  for(auto &parent : UnaryOperator::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UnaryOperator> UnaryOperator::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<UnaryOperator> UnaryOperator::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UnaryOperator> UnaryOperator::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UnaryOperator> UnaryOperator::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::UNARY_OPERATOR:
      return reinterpret_cast<const UnaryOperator &>(parent);
    default: return std::nullopt;
  }
}

bool UnaryOperator::can_overflow(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

UnaryOperatorKind UnaryOperator::opcode(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<UnaryOperatorKind>(self.getVal100());
}

Token UnaryOperator::operator_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr UnaryOperator::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool UnaryOperator::has_stored_fp_features(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

bool UnaryOperator::is_arithmetic_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

bool UnaryOperator::is_decrement_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

bool UnaryOperator::is_increment_decrement_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

bool UnaryOperator::is_increment_operation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

bool UnaryOperator::is_postfix(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal103();
}

bool UnaryOperator::is_prefix(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal104();
}

UnaryExprOrTypeTraitExprContainingStmtRange UnaryExprOrTypeTraitExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

UnaryExprOrTypeTraitExprContainingStmtRange UnaryExprOrTypeTraitExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool UnaryExprOrTypeTraitExpr::contains(const Decl &decl) {
  for(auto &parent : UnaryExprOrTypeTraitExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UnaryExprOrTypeTraitExpr::contains(const Stmt &stmt) {
  for(auto &parent : UnaryExprOrTypeTraitExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UnaryExprOrTypeTraitExpr> UnaryExprOrTypeTraitExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<UnaryExprOrTypeTraitExpr> UnaryExprOrTypeTraitExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UnaryExprOrTypeTraitExpr> UnaryExprOrTypeTraitExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UnaryExprOrTypeTraitExpr> UnaryExprOrTypeTraitExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::UNARY_EXPR_OR_TYPE_TRAIT_EXPR:
      return reinterpret_cast<const UnaryExprOrTypeTraitExpr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Expr> UnaryExprOrTypeTraitExpr::argument_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal37());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

std::optional<Type> UnaryExprOrTypeTraitExpr::argument_type(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal38());
    return fragment->TypeFor(fragment, id);
  }
}

UnaryExprOrTypeTrait UnaryExprOrTypeTraitExpr::expression_or_trait_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<UnaryExprOrTypeTrait>(self.getVal100());
}

Token UnaryExprOrTypeTraitExpr::operator_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token UnaryExprOrTypeTraitExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

Type UnaryExprOrTypeTraitExpr::type_of_argument(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal41());
  return fragment->TypeFor(fragment, id, false).value();
}

bool UnaryExprOrTypeTraitExpr::is_argument_type(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

TypoExprContainingStmtRange TypoExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

TypoExprContainingStmtRange TypoExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool TypoExpr::contains(const Decl &decl) {
  for(auto &parent : TypoExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TypoExpr::contains(const Stmt &stmt) {
  for(auto &parent : TypoExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TypoExpr> TypoExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<TypoExpr> TypoExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<TypoExpr> TypoExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<TypoExpr> TypoExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::TYPO_EXPR:
      return reinterpret_cast<const TypoExpr &>(parent);
    default: return std::nullopt;
  }
}

TypeTraitExprContainingStmtRange TypeTraitExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

TypeTraitExprContainingStmtRange TypeTraitExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool TypeTraitExpr::contains(const Decl &decl) {
  for(auto &parent : TypeTraitExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TypeTraitExpr::contains(const Stmt &stmt) {
  for(auto &parent : TypeTraitExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TypeTraitExpr> TypeTraitExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<TypeTraitExpr> TypeTraitExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<TypeTraitExpr> TypeTraitExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<TypeTraitExpr> TypeTraitExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::TYPE_TRAIT_EXPR:
      return reinterpret_cast<const TypeTraitExpr &>(parent);
    default: return std::nullopt;
  }
}

TypeTrait TypeTraitExpr::trait(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<TypeTrait>(self.getVal100());
}

std::optional<bool> TypeTraitExpr::value(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal95());
  }
}

std::vector<Type> TypeTraitExpr::arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Type> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t16 = fragment->TypeFor(fragment, id)) {
      vec.emplace_back(std::move(t16.value()));
    }
  }
  return vec;
}

SubstNonTypeTemplateParmPackExprContainingStmtRange SubstNonTypeTemplateParmPackExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

SubstNonTypeTemplateParmPackExprContainingStmtRange SubstNonTypeTemplateParmPackExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool SubstNonTypeTemplateParmPackExpr::contains(const Decl &decl) {
  for(auto &parent : SubstNonTypeTemplateParmPackExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool SubstNonTypeTemplateParmPackExpr::contains(const Stmt &stmt) {
  for(auto &parent : SubstNonTypeTemplateParmPackExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<SubstNonTypeTemplateParmPackExpr> SubstNonTypeTemplateParmPackExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<SubstNonTypeTemplateParmPackExpr> SubstNonTypeTemplateParmPackExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<SubstNonTypeTemplateParmPackExpr> SubstNonTypeTemplateParmPackExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<SubstNonTypeTemplateParmPackExpr> SubstNonTypeTemplateParmPackExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::SUBST_NON_TYPE_TEMPLATE_PARM_PACK_EXPR:
      return reinterpret_cast<const SubstNonTypeTemplateParmPackExpr &>(parent);
    default: return std::nullopt;
  }
}

NonTypeTemplateParmDecl SubstNonTypeTemplateParmPackExpr::parameter_pack(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return NonTypeTemplateParmDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token SubstNonTypeTemplateParmPackExpr::parameter_pack_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

SubstNonTypeTemplateParmExprContainingStmtRange SubstNonTypeTemplateParmExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

SubstNonTypeTemplateParmExprContainingStmtRange SubstNonTypeTemplateParmExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool SubstNonTypeTemplateParmExpr::contains(const Decl &decl) {
  for(auto &parent : SubstNonTypeTemplateParmExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool SubstNonTypeTemplateParmExpr::contains(const Stmt &stmt) {
  for(auto &parent : SubstNonTypeTemplateParmExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<SubstNonTypeTemplateParmExpr> SubstNonTypeTemplateParmExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<SubstNonTypeTemplateParmExpr> SubstNonTypeTemplateParmExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<SubstNonTypeTemplateParmExpr> SubstNonTypeTemplateParmExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<SubstNonTypeTemplateParmExpr> SubstNonTypeTemplateParmExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::SUBST_NON_TYPE_TEMPLATE_PARM_EXPR:
      return reinterpret_cast<const SubstNonTypeTemplateParmExpr &>(parent);
    default: return std::nullopt;
  }
}

Token SubstNonTypeTemplateParmExpr::name_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

NonTypeTemplateParmDecl SubstNonTypeTemplateParmExpr::parameter(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return NonTypeTemplateParmDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Type SubstNonTypeTemplateParmExpr::parameter_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return fragment->TypeFor(fragment, id, false).value();
}

Expr SubstNonTypeTemplateParmExpr::replacement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool SubstNonTypeTemplateParmExpr::is_reference_parameter(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

StringLiteralContainingStmtRange StringLiteral::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

StringLiteralContainingStmtRange StringLiteral::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool StringLiteral::contains(const Decl &decl) {
  for(auto &parent : StringLiteral::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool StringLiteral::contains(const Stmt &stmt) {
  for(auto &parent : StringLiteral::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<StringLiteral> StringLiteral::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<StringLiteral> StringLiteral::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<StringLiteral> StringLiteral::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<StringLiteral> StringLiteral::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::STRING_LITERAL:
      return reinterpret_cast<const StringLiteral &>(parent);
    default: return std::nullopt;
  }
}

std::optional<bool> StringLiteral::contains_non_ascii(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal95());
  }
}

std::optional<bool> StringLiteral::contains_non_ascii_or_null(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal98()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal97());
  }
}

std::string_view StringLiteral::bytes(void) const {
  auto self = fragment->NthStmt(offset_);
  capnp::Text::Reader data = self.getVal65();
  return std::string_view(data.cStr(), data.size());
}

StringLiteralStringKind StringLiteral::string_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<StringLiteralStringKind>(self.getVal100());
}

std::optional<std::string_view> StringLiteral::string(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal99()) {
    return std::nullopt;
  } else {
    capnp::Text::Reader data = self.getVal70();
    return std::string_view(data.cStr(), data.size());
  }
}

bool StringLiteral::is_ascii(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

bool StringLiteral::is_pascal(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal103();
}

bool StringLiteral::is_utf16(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal104();
}

bool StringLiteral::is_utf32(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal105();
}

bool StringLiteral::is_utf8(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal106();
}

bool StringLiteral::is_wide(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal107();
}

StmtExprContainingStmtRange StmtExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

StmtExprContainingStmtRange StmtExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool StmtExpr::contains(const Decl &decl) {
  for(auto &parent : StmtExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool StmtExpr::contains(const Stmt &stmt) {
  for(auto &parent : StmtExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<StmtExpr> StmtExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<StmtExpr> StmtExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<StmtExpr> StmtExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<StmtExpr> StmtExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::STMT_EXPR:
      return reinterpret_cast<const StmtExpr &>(parent);
    default: return std::nullopt;
  }
}

Token StmtExpr::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token StmtExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

CompoundStmt StmtExpr::sub_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return CompoundStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

SourceLocExprContainingStmtRange SourceLocExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

SourceLocExprContainingStmtRange SourceLocExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool SourceLocExpr::contains(const Decl &decl) {
  for(auto &parent : SourceLocExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool SourceLocExpr::contains(const Stmt &stmt) {
  for(auto &parent : SourceLocExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<SourceLocExpr> SourceLocExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<SourceLocExpr> SourceLocExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<SourceLocExpr> SourceLocExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<SourceLocExpr> SourceLocExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::SOURCE_LOC_EXPR:
      return reinterpret_cast<const SourceLocExpr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SourceLocExpr::builtin_string(void) const {
  auto self = fragment->NthStmt(offset_);
  capnp::Text::Reader data = self.getVal65();
  return std::string_view(data.cStr(), data.size());
}

SourceLocExprIdentKind SourceLocExpr::identifier_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<SourceLocExprIdentKind>(self.getVal100());
}

Token SourceLocExpr::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool SourceLocExpr::is_int_type(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool SourceLocExpr::is_string_type(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

SizeOfPackExprContainingStmtRange SizeOfPackExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

SizeOfPackExprContainingStmtRange SizeOfPackExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool SizeOfPackExpr::contains(const Decl &decl) {
  for(auto &parent : SizeOfPackExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool SizeOfPackExpr::contains(const Stmt &stmt) {
  for(auto &parent : SizeOfPackExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<SizeOfPackExpr> SizeOfPackExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<SizeOfPackExpr> SizeOfPackExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<SizeOfPackExpr> SizeOfPackExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<SizeOfPackExpr> SizeOfPackExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::SIZE_OF_PACK_EXPR:
      return reinterpret_cast<const SizeOfPackExpr &>(parent);
    default: return std::nullopt;
  }
}

Token SizeOfPackExpr::operator_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

NamedDecl SizeOfPackExpr::pack(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return NamedDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::optional<unsigned> SizeOfPackExpr::pack_length(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    return static_cast<unsigned>(self.getVal109());
  }
}

Token SizeOfPackExpr::pack_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<std::vector<TemplateArgument>> SizeOfPackExpr::partial_arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  }
  auto list = self.getVal94();
  std::vector<TemplateArgument> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

Token SizeOfPackExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool SizeOfPackExpr::is_partially_substituted(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

ShuffleVectorExprContainingStmtRange ShuffleVectorExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ShuffleVectorExprContainingStmtRange ShuffleVectorExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ShuffleVectorExpr::contains(const Decl &decl) {
  for(auto &parent : ShuffleVectorExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ShuffleVectorExpr::contains(const Stmt &stmt) {
  for(auto &parent : ShuffleVectorExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ShuffleVectorExpr> ShuffleVectorExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ShuffleVectorExpr> ShuffleVectorExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ShuffleVectorExpr> ShuffleVectorExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ShuffleVectorExpr> ShuffleVectorExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::SHUFFLE_VECTOR_EXPR:
      return reinterpret_cast<const ShuffleVectorExpr &>(parent);
    default: return std::nullopt;
  }
}

Token ShuffleVectorExpr::builtin_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ShuffleVectorExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

SYCLUniqueStableNameExprContainingStmtRange SYCLUniqueStableNameExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

SYCLUniqueStableNameExprContainingStmtRange SYCLUniqueStableNameExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool SYCLUniqueStableNameExpr::contains(const Decl &decl) {
  for(auto &parent : SYCLUniqueStableNameExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool SYCLUniqueStableNameExpr::contains(const Stmt &stmt) {
  for(auto &parent : SYCLUniqueStableNameExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<SYCLUniqueStableNameExpr> SYCLUniqueStableNameExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<SYCLUniqueStableNameExpr> SYCLUniqueStableNameExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<SYCLUniqueStableNameExpr> SYCLUniqueStableNameExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<SYCLUniqueStableNameExpr> SYCLUniqueStableNameExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::SYCL_UNIQUE_STABLE_NAME_EXPR:
      return reinterpret_cast<const SYCLUniqueStableNameExpr &>(parent);
    default: return std::nullopt;
  }
}

std::string_view SYCLUniqueStableNameExpr::compute_name(void) const {
  auto self = fragment->NthStmt(offset_);
  capnp::Text::Reader data = self.getVal65();
  return std::string_view(data.cStr(), data.size());
}

Token SYCLUniqueStableNameExpr::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token SYCLUniqueStableNameExpr::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token SYCLUniqueStableNameExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

RequiresExprContainingStmtRange RequiresExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

RequiresExprContainingStmtRange RequiresExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool RequiresExpr::contains(const Decl &decl) {
  for(auto &parent : RequiresExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool RequiresExpr::contains(const Stmt &stmt) {
  for(auto &parent : RequiresExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<RequiresExpr> RequiresExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<RequiresExpr> RequiresExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<RequiresExpr> RequiresExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<RequiresExpr> RequiresExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::REQUIRES_EXPR:
      return reinterpret_cast<const RequiresExpr &>(parent);
    default: return std::nullopt;
  }
}

RequiresExprBodyDecl RequiresExpr::body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return RequiresExprBodyDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::vector<ParmVarDecl> RequiresExpr::local_parameters(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<ParmVarDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d16 = fragment->DeclFor(fragment, id)) {
      if (auto e = ParmVarDecl::from(d16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

Token RequiresExpr::r_brace_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token RequiresExpr::requires_keyword_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool RequiresExpr::is_satisfied(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

RecoveryExprContainingStmtRange RecoveryExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

RecoveryExprContainingStmtRange RecoveryExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool RecoveryExpr::contains(const Decl &decl) {
  for(auto &parent : RecoveryExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool RecoveryExpr::contains(const Stmt &stmt) {
  for(auto &parent : RecoveryExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<RecoveryExpr> RecoveryExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<RecoveryExpr> RecoveryExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<RecoveryExpr> RecoveryExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<RecoveryExpr> RecoveryExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::RECOVERY_EXPR:
      return reinterpret_cast<const RecoveryExpr &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Expr> RecoveryExpr::sub_expressions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

PseudoObjectExprContainingStmtRange PseudoObjectExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

PseudoObjectExprContainingStmtRange PseudoObjectExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool PseudoObjectExpr::contains(const Decl &decl) {
  for(auto &parent : PseudoObjectExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool PseudoObjectExpr::contains(const Stmt &stmt) {
  for(auto &parent : PseudoObjectExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<PseudoObjectExpr> PseudoObjectExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<PseudoObjectExpr> PseudoObjectExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<PseudoObjectExpr> PseudoObjectExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<PseudoObjectExpr> PseudoObjectExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::PSEUDO_OBJECT_EXPR:
      return reinterpret_cast<const PseudoObjectExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr PseudoObjectExpr::result_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr PseudoObjectExpr::syntactic_form(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::vector<Expr> PseudoObjectExpr::semantics(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Expr> PseudoObjectExpr::semantic_expressions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal22();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s22 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s22.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

PredefinedExprContainingStmtRange PredefinedExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

PredefinedExprContainingStmtRange PredefinedExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool PredefinedExpr::contains(const Decl &decl) {
  for(auto &parent : PredefinedExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool PredefinedExpr::contains(const Stmt &stmt) {
  for(auto &parent : PredefinedExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<PredefinedExpr> PredefinedExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<PredefinedExpr> PredefinedExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<PredefinedExpr> PredefinedExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<PredefinedExpr> PredefinedExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::PREDEFINED_EXPR:
      return reinterpret_cast<const PredefinedExpr &>(parent);
    default: return std::nullopt;
  }
}

StringLiteral PredefinedExpr::function_name(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return StringLiteral::from(fragment->StmtFor(fragment, id, false).value()).value();
}

PredefinedExprIdentKind PredefinedExpr::identifier_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<PredefinedExprIdentKind>(self.getVal100());
}

std::string_view PredefinedExpr::identifier_kind_name(void) const {
  auto self = fragment->NthStmt(offset_);
  capnp::Text::Reader data = self.getVal65();
  return std::string_view(data.cStr(), data.size());
}

Token PredefinedExpr::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

ParenListExprContainingStmtRange ParenListExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ParenListExprContainingStmtRange ParenListExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ParenListExpr::contains(const Decl &decl) {
  for(auto &parent : ParenListExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ParenListExpr::contains(const Stmt &stmt) {
  for(auto &parent : ParenListExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ParenListExpr> ParenListExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ParenListExpr> ParenListExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ParenListExpr> ParenListExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ParenListExpr> ParenListExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::PAREN_LIST_EXPR:
      return reinterpret_cast<const ParenListExpr &>(parent);
    default: return std::nullopt;
  }
}

Token ParenListExpr::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ParenListExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::vector<Expr> ParenListExpr::expressions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

ParenExprContainingStmtRange ParenExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ParenExprContainingStmtRange ParenExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ParenExpr::contains(const Decl &decl) {
  for(auto &parent : ParenExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ParenExpr::contains(const Stmt &stmt) {
  for(auto &parent : ParenExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ParenExpr> ParenExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ParenExpr> ParenExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ParenExpr> ParenExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ParenExpr> ParenExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::PAREN_EXPR:
      return reinterpret_cast<const ParenExpr &>(parent);
    default: return std::nullopt;
  }
}

Token ParenExpr::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ParenExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr ParenExpr::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

PackExpansionExprContainingStmtRange PackExpansionExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

PackExpansionExprContainingStmtRange PackExpansionExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool PackExpansionExpr::contains(const Decl &decl) {
  for(auto &parent : PackExpansionExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool PackExpansionExpr::contains(const Stmt &stmt) {
  for(auto &parent : PackExpansionExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<PackExpansionExpr> PackExpansionExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<PackExpansionExpr> PackExpansionExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<PackExpansionExpr> PackExpansionExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<PackExpansionExpr> PackExpansionExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::PACK_EXPANSION_EXPR:
      return reinterpret_cast<const PackExpansionExpr &>(parent);
    default: return std::nullopt;
  }
}

Token PackExpansionExpr::ellipsis_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<unsigned> PackExpansionExpr::num_expansions(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    return static_cast<unsigned>(self.getVal109());
  }
}

Expr PackExpansionExpr::pattern(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

OverloadExprContainingStmtRange OverloadExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OverloadExprContainingStmtRange OverloadExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OverloadExpr::contains(const Decl &decl) {
  for(auto &parent : OverloadExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OverloadExpr::contains(const Stmt &stmt) {
  for(auto &parent : OverloadExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OverloadExpr> OverloadExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OverloadExpr> OverloadExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OverloadExpr> OverloadExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OverloadExpr> OverloadExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::UNRESOLVED_MEMBER_EXPR:
    case mx::StmtKind::UNRESOLVED_LOOKUP_EXPR:
      return reinterpret_cast<const OverloadExpr &>(parent);
    default: return std::nullopt;
  }
}

Token OverloadExpr::l_angle_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token OverloadExpr::name_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<CXXRecordDecl> OverloadExpr::naming_class(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal39());
    return CXXRecordDecl::from(fragment->DeclFor(fragment, id));
  }
}

Token OverloadExpr::r_angle_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token OverloadExpr::template_keyword_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal41())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool OverloadExpr::has_explicit_template_arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

bool OverloadExpr::has_template_keyword(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

UnresolvedMemberExprContainingStmtRange UnresolvedMemberExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

UnresolvedMemberExprContainingStmtRange UnresolvedMemberExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool UnresolvedMemberExpr::contains(const Decl &decl) {
  for(auto &parent : UnresolvedMemberExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UnresolvedMemberExpr::contains(const Stmt &stmt) {
  for(auto &parent : UnresolvedMemberExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UnresolvedMemberExpr> UnresolvedMemberExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<UnresolvedMemberExpr> UnresolvedMemberExpr::from(const OverloadExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UnresolvedMemberExpr> UnresolvedMemberExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UnresolvedMemberExpr> UnresolvedMemberExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UnresolvedMemberExpr> UnresolvedMemberExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::UNRESOLVED_MEMBER_EXPR:
      return reinterpret_cast<const UnresolvedMemberExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr UnresolvedMemberExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal42());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Type UnresolvedMemberExpr::base_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return fragment->TypeFor(fragment, id, false).value();
}

Token UnresolvedMemberExpr::member_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal44())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token UnresolvedMemberExpr::operator_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal45())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool UnresolvedMemberExpr::has_unresolved_using(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

bool UnresolvedMemberExpr::is_arrow(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

bool UnresolvedMemberExpr::is_implicit_access(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

UnresolvedLookupExprContainingStmtRange UnresolvedLookupExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

UnresolvedLookupExprContainingStmtRange UnresolvedLookupExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool UnresolvedLookupExpr::contains(const Decl &decl) {
  for(auto &parent : UnresolvedLookupExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UnresolvedLookupExpr::contains(const Stmt &stmt) {
  for(auto &parent : UnresolvedLookupExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UnresolvedLookupExpr> UnresolvedLookupExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<UnresolvedLookupExpr> UnresolvedLookupExpr::from(const OverloadExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UnresolvedLookupExpr> UnresolvedLookupExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UnresolvedLookupExpr> UnresolvedLookupExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<UnresolvedLookupExpr> UnresolvedLookupExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::UNRESOLVED_LOOKUP_EXPR:
      return reinterpret_cast<const UnresolvedLookupExpr &>(parent);
    default: return std::nullopt;
  }
}

bool UnresolvedLookupExpr::is_overloaded(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

bool UnresolvedLookupExpr::requires_adl(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

OpaqueValueExprContainingStmtRange OpaqueValueExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OpaqueValueExprContainingStmtRange OpaqueValueExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OpaqueValueExpr::contains(const Decl &decl) {
  for(auto &parent : OpaqueValueExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OpaqueValueExpr::contains(const Stmt &stmt) {
  for(auto &parent : OpaqueValueExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OpaqueValueExpr> OpaqueValueExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OpaqueValueExpr> OpaqueValueExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OpaqueValueExpr> OpaqueValueExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OpaqueValueExpr> OpaqueValueExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OPAQUE_VALUE_EXPR:
      return reinterpret_cast<const OpaqueValueExpr &>(parent);
    default: return std::nullopt;
  }
}

Token OpaqueValueExpr::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr OpaqueValueExpr::source_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool OpaqueValueExpr::is_unique(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

OffsetOfExprContainingStmtRange OffsetOfExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OffsetOfExprContainingStmtRange OffsetOfExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OffsetOfExpr::contains(const Decl &decl) {
  for(auto &parent : OffsetOfExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OffsetOfExpr::contains(const Stmt &stmt) {
  for(auto &parent : OffsetOfExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OffsetOfExpr> OffsetOfExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OffsetOfExpr> OffsetOfExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OffsetOfExpr> OffsetOfExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OffsetOfExpr> OffsetOfExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OFFSET_OF_EXPR:
      return reinterpret_cast<const OffsetOfExpr &>(parent);
    default: return std::nullopt;
  }
}

Token OffsetOfExpr::operator_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token OffsetOfExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCSubscriptRefExprContainingStmtRange ObjCSubscriptRefExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCSubscriptRefExprContainingStmtRange ObjCSubscriptRefExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCSubscriptRefExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCSubscriptRefExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCSubscriptRefExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCSubscriptRefExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCSubscriptRefExpr> ObjCSubscriptRefExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCSubscriptRefExpr> ObjCSubscriptRefExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCSubscriptRefExpr> ObjCSubscriptRefExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCSubscriptRefExpr> ObjCSubscriptRefExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_SUBSCRIPT_REF_EXPR:
      return reinterpret_cast<const ObjCSubscriptRefExpr &>(parent);
    default: return std::nullopt;
  }
}

ObjCMethodDecl ObjCSubscriptRefExpr::at_index_method_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return ObjCMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Expr ObjCSubscriptRefExpr::base_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr ObjCSubscriptRefExpr::key_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token ObjCSubscriptRefExpr::r_bracket_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool ObjCSubscriptRefExpr::is_array_subscript_reference_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

ObjCStringLiteralContainingStmtRange ObjCStringLiteral::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCStringLiteralContainingStmtRange ObjCStringLiteral::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCStringLiteral::contains(const Decl &decl) {
  for(auto &parent : ObjCStringLiteral::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCStringLiteral::contains(const Stmt &stmt) {
  for(auto &parent : ObjCStringLiteral::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCStringLiteral> ObjCStringLiteral::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCStringLiteral> ObjCStringLiteral::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCStringLiteral> ObjCStringLiteral::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCStringLiteral> ObjCStringLiteral::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_STRING_LITERAL:
      return reinterpret_cast<const ObjCStringLiteral &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCStringLiteral::at_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

StringLiteral ObjCStringLiteral::string(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return StringLiteral::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ObjCSelectorExprContainingStmtRange ObjCSelectorExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCSelectorExprContainingStmtRange ObjCSelectorExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCSelectorExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCSelectorExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCSelectorExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCSelectorExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCSelectorExpr> ObjCSelectorExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCSelectorExpr> ObjCSelectorExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCSelectorExpr> ObjCSelectorExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCSelectorExpr> ObjCSelectorExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_SELECTOR_EXPR:
      return reinterpret_cast<const ObjCSelectorExpr &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCSelectorExpr::at_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ObjCSelectorExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCProtocolExprContainingStmtRange ObjCProtocolExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCProtocolExprContainingStmtRange ObjCProtocolExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCProtocolExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCProtocolExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCProtocolExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCProtocolExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCProtocolExpr> ObjCProtocolExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCProtocolExpr> ObjCProtocolExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCProtocolExpr> ObjCProtocolExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCProtocolExpr> ObjCProtocolExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_PROTOCOL_EXPR:
      return reinterpret_cast<const ObjCProtocolExpr &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCProtocolExpr::at_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCProtocolDecl ObjCProtocolExpr::protocol(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return ObjCProtocolDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token ObjCProtocolExpr::protocol_id_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ObjCProtocolExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCPropertyRefExprContainingStmtRange ObjCPropertyRefExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCPropertyRefExprContainingStmtRange ObjCPropertyRefExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCPropertyRefExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCPropertyRefExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCPropertyRefExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCPropertyRefExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCPropertyRefExpr> ObjCPropertyRefExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCPropertyRefExpr> ObjCPropertyRefExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCPropertyRefExpr> ObjCPropertyRefExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCPropertyRefExpr> ObjCPropertyRefExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_PROPERTY_REF_EXPR:
      return reinterpret_cast<const ObjCPropertyRefExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr ObjCPropertyRefExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ObjCInterfaceDecl ObjCPropertyRefExpr::class_receiver(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCPropertyDecl ObjCPropertyRefExpr::explicit_property(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return ObjCPropertyDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCMethodDecl ObjCPropertyRefExpr::implicit_property_getter(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return ObjCMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCMethodDecl ObjCPropertyRefExpr::implicit_property_setter(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal41());
  return ObjCMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token ObjCPropertyRefExpr::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal42())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ObjCPropertyRefExpr::receiver_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal43())) {
    return tok.value();
  } else {
    return Token();
  }
}

Type ObjCPropertyRefExpr::receiver_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal44());
  return fragment->TypeFor(fragment, id, false).value();
}

Type ObjCPropertyRefExpr::super_receiver_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal45());
  return fragment->TypeFor(fragment, id, false).value();
}

bool ObjCPropertyRefExpr::is_class_receiver(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool ObjCPropertyRefExpr::is_explicit_property(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

bool ObjCPropertyRefExpr::is_implicit_property(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

bool ObjCPropertyRefExpr::is_messaging_getter(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

bool ObjCPropertyRefExpr::is_messaging_setter(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

bool ObjCPropertyRefExpr::is_object_receiver(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

bool ObjCPropertyRefExpr::is_super_receiver(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal103();
}

ObjCMessageExprContainingStmtRange ObjCMessageExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCMessageExprContainingStmtRange ObjCMessageExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCMessageExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCMessageExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCMessageExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCMessageExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCMessageExpr> ObjCMessageExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCMessageExpr> ObjCMessageExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCMessageExpr> ObjCMessageExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCMessageExpr> ObjCMessageExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_MESSAGE_EXPR:
      return reinterpret_cast<const ObjCMessageExpr &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Expr> ObjCMessageExpr::arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

Type ObjCMessageExpr::call_return_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return fragment->TypeFor(fragment, id, false).value();
}

Type ObjCMessageExpr::class_receiver(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return fragment->TypeFor(fragment, id, false).value();
}

Type ObjCMessageExpr::class_receiver_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return fragment->TypeFor(fragment, id, false).value();
}

Expr ObjCMessageExpr::instance_receiver(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token ObjCMessageExpr::left_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal41())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCMethodDecl ObjCMessageExpr::method_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal42());
  return ObjCMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCMethodFamily ObjCMessageExpr::method_family(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<ObjCMethodFamily>(self.getVal100());
}

ObjCInterfaceDecl ObjCMessageExpr::receiver_interface(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCMessageExprReceiverKind ObjCMessageExpr::receiver_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<ObjCMessageExprReceiverKind>(self.getVal102());
}

TokenRange ObjCMessageExpr::receiver_range(void) const {
  auto self = fragment->NthStmt(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal44(), self.getVal45());
}

Type ObjCMessageExpr::receiver_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal46());
  return fragment->TypeFor(fragment, id, false).value();
}

Token ObjCMessageExpr::right_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal47())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ObjCMessageExpr::selector_start_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal48())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ObjCMessageExpr::super_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal49())) {
    return tok.value();
  } else {
    return Token();
  }
}

Type ObjCMessageExpr::super_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal50());
  return fragment->TypeFor(fragment, id, false).value();
}

bool ObjCMessageExpr::is_class_message(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool ObjCMessageExpr::is_delegate_initializer_call(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

bool ObjCMessageExpr::is_implicit(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

bool ObjCMessageExpr::is_instance_message(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

std::vector<Token> ObjCMessageExpr::selector_tokens(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal22();
  std::vector<Token> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t22 = fragment->TokenFor(fragment, id)) {
      vec.emplace_back(std::move(t22.value()));
    }
  }
  return vec;
}

ObjCIvarRefExprContainingStmtRange ObjCIvarRefExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCIvarRefExprContainingStmtRange ObjCIvarRefExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCIvarRefExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCIvarRefExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCIvarRefExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCIvarRefExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCIvarRefExpr> ObjCIvarRefExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCIvarRefExpr> ObjCIvarRefExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCIvarRefExpr> ObjCIvarRefExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCIvarRefExpr> ObjCIvarRefExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_IVAR_REF_EXPR:
      return reinterpret_cast<const ObjCIvarRefExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr ObjCIvarRefExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ObjCIvarDecl ObjCIvarRefExpr::declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return ObjCIvarDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token ObjCIvarRefExpr::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ObjCIvarRefExpr::operation_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool ObjCIvarRefExpr::is_arrow(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool ObjCIvarRefExpr::is_free_instance_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

ObjCIsaExprContainingStmtRange ObjCIsaExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCIsaExprContainingStmtRange ObjCIsaExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCIsaExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCIsaExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCIsaExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCIsaExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCIsaExpr> ObjCIsaExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCIsaExpr> ObjCIsaExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCIsaExpr> ObjCIsaExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCIsaExpr> ObjCIsaExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_ISA_EXPR:
      return reinterpret_cast<const ObjCIsaExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr ObjCIsaExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token ObjCIsaExpr::base_token_end(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ObjCIsaExpr::isa_member_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ObjCIsaExpr::operation_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool ObjCIsaExpr::is_arrow(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

ObjCIndirectCopyRestoreExprContainingStmtRange ObjCIndirectCopyRestoreExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCIndirectCopyRestoreExprContainingStmtRange ObjCIndirectCopyRestoreExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCIndirectCopyRestoreExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCIndirectCopyRestoreExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCIndirectCopyRestoreExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCIndirectCopyRestoreExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCIndirectCopyRestoreExpr> ObjCIndirectCopyRestoreExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCIndirectCopyRestoreExpr> ObjCIndirectCopyRestoreExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCIndirectCopyRestoreExpr> ObjCIndirectCopyRestoreExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCIndirectCopyRestoreExpr> ObjCIndirectCopyRestoreExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_INDIRECT_COPY_RESTORE_EXPR:
      return reinterpret_cast<const ObjCIndirectCopyRestoreExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr ObjCIndirectCopyRestoreExpr::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool ObjCIndirectCopyRestoreExpr::should_copy(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

ObjCEncodeExprContainingStmtRange ObjCEncodeExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCEncodeExprContainingStmtRange ObjCEncodeExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCEncodeExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCEncodeExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCEncodeExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCEncodeExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCEncodeExpr> ObjCEncodeExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCEncodeExpr> ObjCEncodeExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCEncodeExpr> ObjCEncodeExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCEncodeExpr> ObjCEncodeExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_ENCODE_EXPR:
      return reinterpret_cast<const ObjCEncodeExpr &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCEncodeExpr::at_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Type ObjCEncodeExpr::encoded_type(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return fragment->TypeFor(fragment, id, false).value();
}

Token ObjCEncodeExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCDictionaryLiteralContainingStmtRange ObjCDictionaryLiteral::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCDictionaryLiteralContainingStmtRange ObjCDictionaryLiteral::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCDictionaryLiteral::contains(const Decl &decl) {
  for(auto &parent : ObjCDictionaryLiteral::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCDictionaryLiteral::contains(const Stmt &stmt) {
  for(auto &parent : ObjCDictionaryLiteral::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCDictionaryLiteral> ObjCDictionaryLiteral::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCDictionaryLiteral> ObjCDictionaryLiteral::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCDictionaryLiteral> ObjCDictionaryLiteral::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCDictionaryLiteral> ObjCDictionaryLiteral::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_DICTIONARY_LITERAL:
      return reinterpret_cast<const ObjCDictionaryLiteral &>(parent);
    default: return std::nullopt;
  }
}

ObjCMethodDecl ObjCDictionaryLiteral::dictionary_with_objects_method(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return ObjCMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCBoxedExprContainingStmtRange ObjCBoxedExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCBoxedExprContainingStmtRange ObjCBoxedExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCBoxedExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCBoxedExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCBoxedExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCBoxedExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCBoxedExpr> ObjCBoxedExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCBoxedExpr> ObjCBoxedExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCBoxedExpr> ObjCBoxedExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCBoxedExpr> ObjCBoxedExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_BOXED_EXPR:
      return reinterpret_cast<const ObjCBoxedExpr &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCBoxedExpr::at_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCMethodDecl ObjCBoxedExpr::boxing_method(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return ObjCMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Expr ObjCBoxedExpr::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool ObjCBoxedExpr::is_expressible_as_constant_initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

ObjCBoolLiteralExprContainingStmtRange ObjCBoolLiteralExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCBoolLiteralExprContainingStmtRange ObjCBoolLiteralExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCBoolLiteralExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCBoolLiteralExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCBoolLiteralExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCBoolLiteralExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCBoolLiteralExpr> ObjCBoolLiteralExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCBoolLiteralExpr> ObjCBoolLiteralExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCBoolLiteralExpr> ObjCBoolLiteralExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCBoolLiteralExpr> ObjCBoolLiteralExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_BOOL_LITERAL_EXPR:
      return reinterpret_cast<const ObjCBoolLiteralExpr &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCBoolLiteralExpr::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool ObjCBoolLiteralExpr::value(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

ObjCAvailabilityCheckExprContainingStmtRange ObjCAvailabilityCheckExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCAvailabilityCheckExprContainingStmtRange ObjCAvailabilityCheckExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCAvailabilityCheckExpr::contains(const Decl &decl) {
  for(auto &parent : ObjCAvailabilityCheckExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCAvailabilityCheckExpr::contains(const Stmt &stmt) {
  for(auto &parent : ObjCAvailabilityCheckExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCAvailabilityCheckExpr> ObjCAvailabilityCheckExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCAvailabilityCheckExpr> ObjCAvailabilityCheckExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCAvailabilityCheckExpr> ObjCAvailabilityCheckExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCAvailabilityCheckExpr> ObjCAvailabilityCheckExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_AVAILABILITY_CHECK_EXPR:
      return reinterpret_cast<const ObjCAvailabilityCheckExpr &>(parent);
    default: return std::nullopt;
  }
}

bool ObjCAvailabilityCheckExpr::has_version(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

ObjCArrayLiteralContainingStmtRange ObjCArrayLiteral::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ObjCArrayLiteralContainingStmtRange ObjCArrayLiteral::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ObjCArrayLiteral::contains(const Decl &decl) {
  for(auto &parent : ObjCArrayLiteral::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCArrayLiteral::contains(const Stmt &stmt) {
  for(auto &parent : ObjCArrayLiteral::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCArrayLiteral> ObjCArrayLiteral::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ObjCArrayLiteral> ObjCArrayLiteral::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCArrayLiteral> ObjCArrayLiteral::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ObjCArrayLiteral> ObjCArrayLiteral::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OBJ_C_ARRAY_LITERAL:
      return reinterpret_cast<const ObjCArrayLiteral &>(parent);
    default: return std::nullopt;
  }
}

ObjCMethodDecl ObjCArrayLiteral::array_with_objects_method(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return ObjCMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::vector<Expr> ObjCArrayLiteral::elements(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

OMPIteratorExprContainingStmtRange OMPIteratorExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPIteratorExprContainingStmtRange OMPIteratorExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPIteratorExpr::contains(const Decl &decl) {
  for(auto &parent : OMPIteratorExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPIteratorExpr::contains(const Stmt &stmt) {
  for(auto &parent : OMPIteratorExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPIteratorExpr> OMPIteratorExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPIteratorExpr> OMPIteratorExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPIteratorExpr> OMPIteratorExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPIteratorExpr> OMPIteratorExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_ITERATOR_EXPR:
      return reinterpret_cast<const OMPIteratorExpr &>(parent);
    default: return std::nullopt;
  }
}

Token OMPIteratorExpr::iterator_kw_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token OMPIteratorExpr::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token OMPIteratorExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

OMPArrayShapingExprContainingStmtRange OMPArrayShapingExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPArrayShapingExprContainingStmtRange OMPArrayShapingExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPArrayShapingExpr::contains(const Decl &decl) {
  for(auto &parent : OMPArrayShapingExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPArrayShapingExpr::contains(const Stmt &stmt) {
  for(auto &parent : OMPArrayShapingExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPArrayShapingExpr> OMPArrayShapingExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPArrayShapingExpr> OMPArrayShapingExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPArrayShapingExpr> OMPArrayShapingExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPArrayShapingExpr> OMPArrayShapingExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_ARRAY_SHAPING_EXPR:
      return reinterpret_cast<const OMPArrayShapingExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPArrayShapingExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::vector<Expr> OMPArrayShapingExpr::dimensions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

Token OMPArrayShapingExpr::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token OMPArrayShapingExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

OMPArraySectionExprContainingStmtRange OMPArraySectionExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

OMPArraySectionExprContainingStmtRange OMPArraySectionExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool OMPArraySectionExpr::contains(const Decl &decl) {
  for(auto &parent : OMPArraySectionExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPArraySectionExpr::contains(const Stmt &stmt) {
  for(auto &parent : OMPArraySectionExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPArraySectionExpr> OMPArraySectionExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<OMPArraySectionExpr> OMPArraySectionExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPArraySectionExpr> OMPArraySectionExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<OMPArraySectionExpr> OMPArraySectionExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::OMP_ARRAY_SECTION_EXPR:
      return reinterpret_cast<const OMPArraySectionExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPArraySectionExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token OMPArraySectionExpr::first_colon_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token OMPArraySectionExpr::second_colon_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr OMPArraySectionExpr::length(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPArraySectionExpr::lower_bound(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal41());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token OMPArraySectionExpr::r_bracket_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal42())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr OMPArraySectionExpr::stride(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

NoInitExprContainingStmtRange NoInitExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

NoInitExprContainingStmtRange NoInitExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool NoInitExpr::contains(const Decl &decl) {
  for(auto &parent : NoInitExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool NoInitExpr::contains(const Stmt &stmt) {
  for(auto &parent : NoInitExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<NoInitExpr> NoInitExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<NoInitExpr> NoInitExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<NoInitExpr> NoInitExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<NoInitExpr> NoInitExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::NO_INIT_EXPR:
      return reinterpret_cast<const NoInitExpr &>(parent);
    default: return std::nullopt;
  }
}

MemberExprContainingStmtRange MemberExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

MemberExprContainingStmtRange MemberExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool MemberExpr::contains(const Decl &decl) {
  for(auto &parent : MemberExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool MemberExpr::contains(const Stmt &stmt) {
  for(auto &parent : MemberExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<MemberExpr> MemberExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<MemberExpr> MemberExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<MemberExpr> MemberExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<MemberExpr> MemberExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::MEMBER_EXPR:
      return reinterpret_cast<const MemberExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr MemberExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token MemberExpr::l_angle_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

ValueDecl MemberExpr::member_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return ValueDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token MemberExpr::member_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token MemberExpr::operator_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal41())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token MemberExpr::r_angle_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal42())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token MemberExpr::template_keyword_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal43())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool MemberExpr::had_multiple_candidates(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool MemberExpr::has_explicit_template_arguments(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

bool MemberExpr::has_qualifier(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

bool MemberExpr::has_template_keyword(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

bool MemberExpr::is_arrow(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

bool MemberExpr::is_implicit_access(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

NonOdrUseReason MemberExpr::is_non_odr_use(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<NonOdrUseReason>(self.getVal100());
}

MatrixSubscriptExprContainingStmtRange MatrixSubscriptExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

MatrixSubscriptExprContainingStmtRange MatrixSubscriptExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool MatrixSubscriptExpr::contains(const Decl &decl) {
  for(auto &parent : MatrixSubscriptExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool MatrixSubscriptExpr::contains(const Stmt &stmt) {
  for(auto &parent : MatrixSubscriptExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<MatrixSubscriptExpr> MatrixSubscriptExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<MatrixSubscriptExpr> MatrixSubscriptExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<MatrixSubscriptExpr> MatrixSubscriptExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<MatrixSubscriptExpr> MatrixSubscriptExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::MATRIX_SUBSCRIPT_EXPR:
      return reinterpret_cast<const MatrixSubscriptExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr MatrixSubscriptExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr MatrixSubscriptExpr::column_index(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token MatrixSubscriptExpr::r_bracket_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr MatrixSubscriptExpr::row_index(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool MatrixSubscriptExpr::is_incomplete(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

MaterializeTemporaryExprContainingStmtRange MaterializeTemporaryExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

MaterializeTemporaryExprContainingStmtRange MaterializeTemporaryExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool MaterializeTemporaryExpr::contains(const Decl &decl) {
  for(auto &parent : MaterializeTemporaryExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool MaterializeTemporaryExpr::contains(const Stmt &stmt) {
  for(auto &parent : MaterializeTemporaryExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<MaterializeTemporaryExpr> MaterializeTemporaryExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<MaterializeTemporaryExpr> MaterializeTemporaryExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<MaterializeTemporaryExpr> MaterializeTemporaryExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<MaterializeTemporaryExpr> MaterializeTemporaryExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::MATERIALIZE_TEMPORARY_EXPR:
      return reinterpret_cast<const MaterializeTemporaryExpr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<ValueDecl> MaterializeTemporaryExpr::extending_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal37());
    return ValueDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<LifetimeExtendedTemporaryDecl> MaterializeTemporaryExpr::lifetime_extended_temporary_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal38());
    return LifetimeExtendedTemporaryDecl::from(fragment->DeclFor(fragment, id));
  }
}

StorageDuration MaterializeTemporaryExpr::storage_duration(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<StorageDuration>(self.getVal100());
}

Expr MaterializeTemporaryExpr::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool MaterializeTemporaryExpr::is_bound_to_lvalue_reference(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

bool MaterializeTemporaryExpr::is_usable_in_constant_expressions(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

MSPropertySubscriptExprContainingStmtRange MSPropertySubscriptExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

MSPropertySubscriptExprContainingStmtRange MSPropertySubscriptExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool MSPropertySubscriptExpr::contains(const Decl &decl) {
  for(auto &parent : MSPropertySubscriptExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool MSPropertySubscriptExpr::contains(const Stmt &stmt) {
  for(auto &parent : MSPropertySubscriptExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<MSPropertySubscriptExpr> MSPropertySubscriptExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<MSPropertySubscriptExpr> MSPropertySubscriptExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<MSPropertySubscriptExpr> MSPropertySubscriptExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<MSPropertySubscriptExpr> MSPropertySubscriptExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::MS_PROPERTY_SUBSCRIPT_EXPR:
      return reinterpret_cast<const MSPropertySubscriptExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr MSPropertySubscriptExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr MSPropertySubscriptExpr::index(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token MSPropertySubscriptExpr::r_bracket_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

MSPropertyRefExprContainingStmtRange MSPropertyRefExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

MSPropertyRefExprContainingStmtRange MSPropertyRefExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool MSPropertyRefExpr::contains(const Decl &decl) {
  for(auto &parent : MSPropertyRefExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool MSPropertyRefExpr::contains(const Stmt &stmt) {
  for(auto &parent : MSPropertyRefExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<MSPropertyRefExpr> MSPropertyRefExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<MSPropertyRefExpr> MSPropertyRefExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<MSPropertyRefExpr> MSPropertyRefExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<MSPropertyRefExpr> MSPropertyRefExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::MS_PROPERTY_REF_EXPR:
      return reinterpret_cast<const MSPropertyRefExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr MSPropertyRefExpr::base_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token MSPropertyRefExpr::member_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

MSPropertyDecl MSPropertyRefExpr::property_declaration(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal39());
  return MSPropertyDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool MSPropertyRefExpr::is_arrow(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool MSPropertyRefExpr::is_implicit_access(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

LambdaExprContainingStmtRange LambdaExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

LambdaExprContainingStmtRange LambdaExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool LambdaExpr::contains(const Decl &decl) {
  for(auto &parent : LambdaExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool LambdaExpr::contains(const Stmt &stmt) {
  for(auto &parent : LambdaExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<LambdaExpr> LambdaExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<LambdaExpr> LambdaExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<LambdaExpr> LambdaExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<LambdaExpr> LambdaExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::LAMBDA_EXPR:
      return reinterpret_cast<const LambdaExpr &>(parent);
    default: return std::nullopt;
  }
}

Stmt LambdaExpr::body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return fragment->StmtFor(fragment, id, false).value();
}

CXXMethodDecl LambdaExpr::call_operator(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return CXXMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

LambdaCaptureDefault LambdaExpr::capture_default(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<LambdaCaptureDefault>(self.getVal100());
}

Token LambdaExpr::capture_default_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

CompoundStmt LambdaExpr::compound_statement_body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal40());
  return CompoundStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::vector<NamedDecl> LambdaExpr::explicit_template_parameters(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<NamedDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d16 = fragment->DeclFor(fragment, id)) {
      if (auto e = NamedDecl::from(d16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

TokenRange LambdaExpr::introducer_range(void) const {
  auto self = fragment->NthStmt(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal41(), self.getVal42());
}

CXXRecordDecl LambdaExpr::lambda_class(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal43());
  return CXXRecordDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::optional<TemplateParameterList> LambdaExpr::template_parameter_list(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    return TemplateParameterList(fragment, self.getVal109());
  }
}

std::optional<Expr> LambdaExpr::trailing_requires_clause(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal44());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

bool LambdaExpr::has_explicit_parameters(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal97();
}

bool LambdaExpr::has_explicit_result_type(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal98();
}

bool LambdaExpr::is_generic_lambda(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

bool LambdaExpr::is_mutable(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

IntegerLiteralContainingStmtRange IntegerLiteral::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

IntegerLiteralContainingStmtRange IntegerLiteral::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool IntegerLiteral::contains(const Decl &decl) {
  for(auto &parent : IntegerLiteral::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool IntegerLiteral::contains(const Stmt &stmt) {
  for(auto &parent : IntegerLiteral::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<IntegerLiteral> IntegerLiteral::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<IntegerLiteral> IntegerLiteral::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<IntegerLiteral> IntegerLiteral::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<IntegerLiteral> IntegerLiteral::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::INTEGER_LITERAL:
      return reinterpret_cast<const IntegerLiteral &>(parent);
    default: return std::nullopt;
  }
}

Token IntegerLiteral::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

InitListExprContainingStmtRange InitListExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

InitListExprContainingStmtRange InitListExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool InitListExpr::contains(const Decl &decl) {
  for(auto &parent : InitListExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool InitListExpr::contains(const Stmt &stmt) {
  for(auto &parent : InitListExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<InitListExpr> InitListExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<InitListExpr> InitListExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<InitListExpr> InitListExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<InitListExpr> InitListExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::INIT_LIST_EXPR:
      return reinterpret_cast<const InitListExpr &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Expr> InitListExpr::array_filler(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal37());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

std::optional<FieldDecl> InitListExpr::initialized_field_in_union(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal38());
    return FieldDecl::from(fragment->DeclFor(fragment, id));
  }
}

Token InitListExpr::l_brace_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token InitListExpr::r_brace_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<InitListExpr> InitListExpr::semantic_form(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal97()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal41());
    return InitListExpr::from(fragment->StmtFor(fragment, id));
  }
}

std::optional<InitListExpr> InitListExpr::syntactic_form(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal98()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal42());
    return InitListExpr::from(fragment->StmtFor(fragment, id));
  }
}

bool InitListExpr::had_array_range_designator(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal99();
}

bool InitListExpr::has_array_filler(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal101();
}

std::vector<Expr> InitListExpr::initializers(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

bool InitListExpr::is_explicit(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal103();
}

bool InitListExpr::is_semantic_form(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal104();
}

bool InitListExpr::is_string_literal_initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal105();
}

bool InitListExpr::is_syntactic_form(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal106();
}

std::optional<bool> InitListExpr::is_transparent(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal108()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal107());
  }
}

ImplicitValueInitExprContainingStmtRange ImplicitValueInitExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ImplicitValueInitExprContainingStmtRange ImplicitValueInitExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ImplicitValueInitExpr::contains(const Decl &decl) {
  for(auto &parent : ImplicitValueInitExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ImplicitValueInitExpr::contains(const Stmt &stmt) {
  for(auto &parent : ImplicitValueInitExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ImplicitValueInitExpr> ImplicitValueInitExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ImplicitValueInitExpr> ImplicitValueInitExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ImplicitValueInitExpr> ImplicitValueInitExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ImplicitValueInitExpr> ImplicitValueInitExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::IMPLICIT_VALUE_INIT_EXPR:
      return reinterpret_cast<const ImplicitValueInitExpr &>(parent);
    default: return std::nullopt;
  }
}

ImaginaryLiteralContainingStmtRange ImaginaryLiteral::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ImaginaryLiteralContainingStmtRange ImaginaryLiteral::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ImaginaryLiteral::contains(const Decl &decl) {
  for(auto &parent : ImaginaryLiteral::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ImaginaryLiteral::contains(const Stmt &stmt) {
  for(auto &parent : ImaginaryLiteral::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ImaginaryLiteral> ImaginaryLiteral::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ImaginaryLiteral> ImaginaryLiteral::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ImaginaryLiteral> ImaginaryLiteral::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ImaginaryLiteral> ImaginaryLiteral::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::IMAGINARY_LITERAL:
      return reinterpret_cast<const ImaginaryLiteral &>(parent);
    default: return std::nullopt;
  }
}

Expr ImaginaryLiteral::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

GenericSelectionExprContainingStmtRange GenericSelectionExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

GenericSelectionExprContainingStmtRange GenericSelectionExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool GenericSelectionExpr::contains(const Decl &decl) {
  for(auto &parent : GenericSelectionExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool GenericSelectionExpr::contains(const Stmt &stmt) {
  for(auto &parent : GenericSelectionExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<GenericSelectionExpr> GenericSelectionExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<GenericSelectionExpr> GenericSelectionExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<GenericSelectionExpr> GenericSelectionExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<GenericSelectionExpr> GenericSelectionExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::GENERIC_SELECTION_EXPR:
      return reinterpret_cast<const GenericSelectionExpr &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Expr> GenericSelectionExpr::association_expressions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s16 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

Expr GenericSelectionExpr::controlling_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token GenericSelectionExpr::default_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token GenericSelectionExpr::generic_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal39())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token GenericSelectionExpr::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal40())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr GenericSelectionExpr::result_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal41());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool GenericSelectionExpr::is_result_dependent(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

GNUNullExprContainingStmtRange GNUNullExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

GNUNullExprContainingStmtRange GNUNullExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool GNUNullExpr::contains(const Decl &decl) {
  for(auto &parent : GNUNullExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool GNUNullExpr::contains(const Stmt &stmt) {
  for(auto &parent : GNUNullExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<GNUNullExpr> GNUNullExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<GNUNullExpr> GNUNullExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<GNUNullExpr> GNUNullExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<GNUNullExpr> GNUNullExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::GNU_NULL_EXPR:
      return reinterpret_cast<const GNUNullExpr &>(parent);
    default: return std::nullopt;
  }
}

Token GNUNullExpr::token_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

FunctionParmPackExprContainingStmtRange FunctionParmPackExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

FunctionParmPackExprContainingStmtRange FunctionParmPackExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool FunctionParmPackExpr::contains(const Decl &decl) {
  for(auto &parent : FunctionParmPackExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool FunctionParmPackExpr::contains(const Stmt &stmt) {
  for(auto &parent : FunctionParmPackExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<FunctionParmPackExpr> FunctionParmPackExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<FunctionParmPackExpr> FunctionParmPackExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<FunctionParmPackExpr> FunctionParmPackExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<FunctionParmPackExpr> FunctionParmPackExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::FUNCTION_PARM_PACK_EXPR:
      return reinterpret_cast<const FunctionParmPackExpr &>(parent);
    default: return std::nullopt;
  }
}

VarDecl FunctionParmPackExpr::parameter_pack(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return VarDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token FunctionParmPackExpr::parameter_pack_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal38())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::vector<VarDecl> FunctionParmPackExpr::expansions(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<VarDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d16 = fragment->DeclFor(fragment, id)) {
      if (auto e = VarDecl::from(d16.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

FullExprContainingStmtRange FullExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

FullExprContainingStmtRange FullExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool FullExpr::contains(const Decl &decl) {
  for(auto &parent : FullExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool FullExpr::contains(const Stmt &stmt) {
  for(auto &parent : FullExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<FullExpr> FullExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<FullExpr> FullExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<FullExpr> FullExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<FullExpr> FullExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::EXPR_WITH_CLEANUPS:
    case mx::StmtKind::CONSTANT_EXPR:
      return reinterpret_cast<const FullExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr FullExpr::sub_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ExprWithCleanupsContainingStmtRange ExprWithCleanups::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ExprWithCleanupsContainingStmtRange ExprWithCleanups::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ExprWithCleanups::contains(const Decl &decl) {
  for(auto &parent : ExprWithCleanups::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ExprWithCleanups::contains(const Stmt &stmt) {
  for(auto &parent : ExprWithCleanups::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ExprWithCleanups> ExprWithCleanups::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ExprWithCleanups> ExprWithCleanups::from(const FullExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ExprWithCleanups> ExprWithCleanups::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ExprWithCleanups> ExprWithCleanups::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ExprWithCleanups> ExprWithCleanups::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::EXPR_WITH_CLEANUPS:
      return reinterpret_cast<const ExprWithCleanups &>(parent);
    default: return std::nullopt;
  }
}

bool ExprWithCleanups::cleanups_have_side_effects(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

ConstantExprContainingStmtRange ConstantExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ConstantExprContainingStmtRange ConstantExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ConstantExpr::contains(const Decl &decl) {
  for(auto &parent : ConstantExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ConstantExpr::contains(const Stmt &stmt) {
  for(auto &parent : ConstantExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ConstantExpr> ConstantExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ConstantExpr> ConstantExpr::from(const FullExpr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ConstantExpr> ConstantExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ConstantExpr> ConstantExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ConstantExpr> ConstantExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CONSTANT_EXPR:
      return reinterpret_cast<const ConstantExpr &>(parent);
    default: return std::nullopt;
  }
}

ConstantExprResultStorageKind ConstantExpr::result_storage_kind(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<ConstantExprResultStorageKind>(self.getVal100());
}

bool ConstantExpr::has_ap_value_result(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

bool ConstantExpr::is_immediate_invocation(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

FloatingLiteralContainingStmtRange FloatingLiteral::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

FloatingLiteralContainingStmtRange FloatingLiteral::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool FloatingLiteral::contains(const Decl &decl) {
  for(auto &parent : FloatingLiteral::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool FloatingLiteral::contains(const Stmt &stmt) {
  for(auto &parent : FloatingLiteral::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<FloatingLiteral> FloatingLiteral::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<FloatingLiteral> FloatingLiteral::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<FloatingLiteral> FloatingLiteral::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<FloatingLiteral> FloatingLiteral::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::FLOATING_LITERAL:
      return reinterpret_cast<const FloatingLiteral &>(parent);
    default: return std::nullopt;
  }
}

Token FloatingLiteral::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool FloatingLiteral::is_exact(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

FixedPointLiteralContainingStmtRange FixedPointLiteral::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

FixedPointLiteralContainingStmtRange FixedPointLiteral::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool FixedPointLiteral::contains(const Decl &decl) {
  for(auto &parent : FixedPointLiteral::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool FixedPointLiteral::contains(const Stmt &stmt) {
  for(auto &parent : FixedPointLiteral::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<FixedPointLiteral> FixedPointLiteral::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<FixedPointLiteral> FixedPointLiteral::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<FixedPointLiteral> FixedPointLiteral::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<FixedPointLiteral> FixedPointLiteral::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::FIXED_POINT_LITERAL:
      return reinterpret_cast<const FixedPointLiteral &>(parent);
    default: return std::nullopt;
  }
}

Token FixedPointLiteral::token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

ExtVectorElementExprContainingStmtRange ExtVectorElementExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ExtVectorElementExprContainingStmtRange ExtVectorElementExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ExtVectorElementExpr::contains(const Decl &decl) {
  for(auto &parent : ExtVectorElementExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ExtVectorElementExpr::contains(const Stmt &stmt) {
  for(auto &parent : ExtVectorElementExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ExtVectorElementExpr> ExtVectorElementExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ExtVectorElementExpr> ExtVectorElementExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ExtVectorElementExpr> ExtVectorElementExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ExtVectorElementExpr> ExtVectorElementExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::EXT_VECTOR_ELEMENT_EXPR:
      return reinterpret_cast<const ExtVectorElementExpr &>(parent);
    default: return std::nullopt;
  }
}

bool ExtVectorElementExpr::contains_duplicate_elements(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

Token ExtVectorElementExpr::accessor_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal37())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr ExtVectorElementExpr::base(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal38());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool ExtVectorElementExpr::is_arrow(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal96();
}

ExpressionTraitExprContainingStmtRange ExpressionTraitExpr::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

ExpressionTraitExprContainingStmtRange ExpressionTraitExpr::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool ExpressionTraitExpr::contains(const Decl &decl) {
  for(auto &parent : ExpressionTraitExpr::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ExpressionTraitExpr::contains(const Stmt &stmt) {
  for(auto &parent : ExpressionTraitExpr::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ExpressionTraitExpr> ExpressionTraitExpr::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<ExpressionTraitExpr> ExpressionTraitExpr::from(const Expr &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ExpressionTraitExpr> ExpressionTraitExpr::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<ExpressionTraitExpr> ExpressionTraitExpr::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::EXPRESSION_TRAIT_EXPR:
      return reinterpret_cast<const ExpressionTraitExpr &>(parent);
    default: return std::nullopt;
  }
}

Expr ExpressionTraitExpr::queried_expression(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal37());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ExpressionTrait ExpressionTraitExpr::trait(void) const {
  auto self = fragment->NthStmt(offset_);
  return static_cast<ExpressionTrait>(self.getVal100());
}

bool ExpressionTraitExpr::value(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal95();
}

AttributedStmtContainingStmtRange AttributedStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

AttributedStmtContainingStmtRange AttributedStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool AttributedStmt::contains(const Decl &decl) {
  for(auto &parent : AttributedStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool AttributedStmt::contains(const Stmt &stmt) {
  for(auto &parent : AttributedStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<AttributedStmt> AttributedStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<AttributedStmt> AttributedStmt::from(const ValueStmt &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<AttributedStmt> AttributedStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::ATTRIBUTED_STMT:
      return reinterpret_cast<const AttributedStmt &>(parent);
    default: return std::nullopt;
  }
}

Token AttributedStmt::attribute_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal10())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::vector<Attr> AttributedStmt::attributes(void) const {
  auto self = fragment->NthStmt(offset_);
  auto list = self.getVal16();
  std::vector<Attr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t16 = fragment->AttrFor(fragment, id)) {
      vec.emplace_back(std::move(t16.value()));
    }
  }
  return vec;
}

Stmt AttributedStmt::sub_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal11());
  return fragment->StmtFor(fragment, id, false).value();
}

SwitchStmtContainingStmtRange SwitchStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

SwitchStmtContainingStmtRange SwitchStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool SwitchStmt::contains(const Decl &decl) {
  for(auto &parent : SwitchStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool SwitchStmt::contains(const Stmt &stmt) {
  for(auto &parent : SwitchStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<SwitchStmt> SwitchStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<SwitchStmt> SwitchStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::SWITCH_STMT:
      return reinterpret_cast<const SwitchStmt &>(parent);
    default: return std::nullopt;
  }
}

Stmt SwitchStmt::body(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal9());
  return fragment->StmtFor(fragment, id, false).value();
}

Expr SwitchStmt::condition(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal10());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<VarDecl> SwitchStmt::condition_variable(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal11());
    return VarDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<DeclStmt> SwitchStmt::condition_variable_declaration_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal15()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal13());
    return DeclStmt::from(fragment->StmtFor(fragment, id));
  }
}

std::optional<Stmt> SwitchStmt::initializer(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal20()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal14());
    return fragment->StmtFor(fragment, id);
  }
}

Token SwitchStmt::l_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal17())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token SwitchStmt::r_paren_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal18())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<SwitchCase> SwitchStmt::first_switch_case(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal21()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal19());
    return SwitchCase::from(fragment->StmtFor(fragment, id));
  }
}

Token SwitchStmt::switch_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal26())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool SwitchStmt::has_initializer_storage(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal57();
}

bool SwitchStmt::has_variable_storage(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal58();
}

bool SwitchStmt::is_all_enum_cases_covered(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal59();
}

SwitchCaseContainingStmtRange SwitchCase::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

SwitchCaseContainingStmtRange SwitchCase::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool SwitchCase::contains(const Decl &decl) {
  for(auto &parent : SwitchCase::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool SwitchCase::contains(const Stmt &stmt) {
  for(auto &parent : SwitchCase::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<SwitchCase> SwitchCase::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<SwitchCase> SwitchCase::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::DEFAULT_STMT:
    case mx::StmtKind::CASE_STMT:
      return reinterpret_cast<const SwitchCase &>(parent);
    default: return std::nullopt;
  }
}

Token SwitchCase::colon_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal9())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token SwitchCase::keyword_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal10())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<SwitchCase> SwitchCase::next_switch_case(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal12()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal11());
    return SwitchCase::from(fragment->StmtFor(fragment, id));
  }
}

Stmt SwitchCase::sub_statement(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal13());
  return fragment->StmtFor(fragment, id, false).value();
}

DefaultStmtContainingStmtRange DefaultStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

DefaultStmtContainingStmtRange DefaultStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool DefaultStmt::contains(const Decl &decl) {
  for(auto &parent : DefaultStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool DefaultStmt::contains(const Stmt &stmt) {
  for(auto &parent : DefaultStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<DefaultStmt> DefaultStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<DefaultStmt> DefaultStmt::from(const SwitchCase &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<DefaultStmt> DefaultStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::DEFAULT_STMT:
      return reinterpret_cast<const DefaultStmt &>(parent);
    default: return std::nullopt;
  }
}

Token DefaultStmt::default_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal14())) {
    return tok.value();
  } else {
    return Token();
  }
}

CaseStmtContainingStmtRange CaseStmt::containing(const Decl &decl) {
  return ParentStmtIteratorImpl<Stmt>(decl.parent_statement());
}

CaseStmtContainingStmtRange CaseStmt::containing(const Stmt &stmt) {
  return ParentStmtIteratorImpl<Stmt>(stmt.parent_statement());
}

bool CaseStmt::contains(const Decl &decl) {
  for(auto &parent : CaseStmt::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CaseStmt::contains(const Stmt &stmt) {
  for(auto &parent : CaseStmt::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CaseStmt> CaseStmt::from(const TokenContext &c) {
  return from(c.as_statement());
}

std::optional<CaseStmt> CaseStmt::from(const SwitchCase &parent) {
  return from(reinterpret_cast<const Stmt &>(parent));
}

std::optional<CaseStmt> CaseStmt::from(const Stmt &parent) {
  switch (parent.kind()) {
    case mx::StmtKind::CASE_STMT:
      return reinterpret_cast<const CaseStmt &>(parent);
    default: return std::nullopt;
  }
}

bool CaseStmt::case_statement_is_gnu_range(void) const {
  auto self = fragment->NthStmt(offset_);
  return self.getVal15();
}

Token CaseStmt::case_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal14())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token CaseStmt::ellipsis_token(void) const {
  auto self = fragment->NthStmt(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal17())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr CaseStmt::lhs(void) const {
  auto self = fragment->NthStmt(offset_);
  EntityId id(self.getVal18());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::optional<Expr> CaseStmt::rhs(void) const {
  auto self = fragment->NthStmt(offset_);
  if (!self.getVal20()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal19());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

bool Decl::is_definition(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal2();
}

std::optional<Decl> Decl::parent_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto id = self.getVal0(); id != kInvalidEntityId) {
    return fragment->DeclFor(fragment, id);
  } else {
    return std::nullopt;
  }
}

std::optional<Stmt> Decl::parent_statement(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto id = self.getVal1(); id != kInvalidEntityId) {
    return fragment->StmtFor(fragment, id);
  } else {
    return std::nullopt;
  }
}

DeclContainingDeclRange Decl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

DeclContainingDeclRange Decl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool Decl::contains(const Decl &decl) {
  for(auto &parent : Decl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool Decl::contains(const Stmt &stmt) {
  for(auto &parent : Decl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::vector<Attr> Decl::attributes(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal3();
  std::vector<Attr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t3 = fragment->AttrFor(fragment, id)) {
      vec.emplace_back(std::move(t3.value()));
    }
  }
  return vec;
}

AccessSpecifier Decl::access(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<AccessSpecifier>(self.getVal4());
}

AvailabilityResult Decl::availability(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<AvailabilityResult>(self.getVal5());
}

std::optional<Attr> Decl::defining_attribute(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal7()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal6());
    return fragment->AttrFor(fragment, id);
  }
}

std::optional<TemplateParameterList> Decl::described_template_parameters(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal9()) {
    return std::nullopt;
  } else {
    return TemplateParameterList(fragment, self.getVal8());
  }
}

std::optional<ExternalSourceSymbolAttr> Decl::external_source_symbol_attribute(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal11()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal10());
    return ExternalSourceSymbolAttr::from(fragment->AttrFor(fragment, id));
  }
}

DeclFriendObjectKind Decl::friend_object_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<DeclFriendObjectKind>(self.getVal12());
}

std::optional<FunctionType> Decl::function_type(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal14()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal13());
    return FunctionType::from(fragment->TypeFor(fragment, id));
  }
}

DeclModuleOwnershipKind Decl::module_ownership_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<DeclModuleOwnershipKind>(self.getVal15());
}

std::optional<Decl> Decl::non_closure_context(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal17()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal16());
    return fragment->DeclFor(fragment, id);
  }
}

bool Decl::has_attributes(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal18();
}

bool Decl::has_defining_attribute(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal19();
}

bool Decl::has_owning_module(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal20();
}

bool Decl::has_tag_identifier_namespace(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal21();
}

bool Decl::is_defined_outside_function_or_method(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal22();
}

bool Decl::is_deprecated(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal23();
}

bool Decl::is_function_or_function_template(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal24();
}

bool Decl::is_implicit(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal25();
}

bool Decl::is_in_anonymous_namespace(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal26();
}

bool Decl::is_in_export_declaration_context(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal27();
}

bool Decl::is_in_local_scope_for_instantiation(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal28();
}

bool Decl::is_in_std_namespace(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal29();
}

bool Decl::is_invalid_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal30();
}

bool Decl::is_module_private(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal31();
}

bool Decl::is_out_of_line(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal32();
}

bool Decl::is_parameter_pack(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal33();
}

bool Decl::is_template_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal34();
}

bool Decl::is_template_parameter(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal35();
}

bool Decl::is_template_parameter_pack(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal36();
}

bool Decl::is_templated(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal37();
}

bool Decl::is_top_level_declaration_in_obj_c_container(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal38();
}

bool Decl::is_unavailable(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal39();
}

bool Decl::is_unconditionally_visible(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal40();
}

bool Decl::is_weak_imported(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal41();
}

std::vector<Decl> Decl::redeclarations_visible_in_translation_unit(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal42();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d42 = fragment->DeclFor(fragment, id)) {
      vec.emplace_back(std::move(d42.value()));
    }
  }
  return vec;
}

DeclKind Decl::kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<DeclKind>(self.getVal43());
}

DeclCategory Decl::category(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<DeclCategory>(self.getVal44());
}

Token Decl::token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal45())) {
    return tok.value();
  } else {
    return Token();
  }
}

TokenRange Decl::tokens(void) const {
  auto self = fragment->NthDecl(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal46(), self.getVal47());
}

ClassScopeFunctionSpecializationDeclContainingDeclRange ClassScopeFunctionSpecializationDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ClassScopeFunctionSpecializationDeclContainingDeclRange ClassScopeFunctionSpecializationDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ClassScopeFunctionSpecializationDecl::contains(const Decl &decl) {
  for(auto &parent : ClassScopeFunctionSpecializationDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ClassScopeFunctionSpecializationDecl::contains(const Stmt &stmt) {
  for(auto &parent : ClassScopeFunctionSpecializationDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ClassScopeFunctionSpecializationDecl> ClassScopeFunctionSpecializationDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ClassScopeFunctionSpecializationDecl> ClassScopeFunctionSpecializationDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CLASS_SCOPE_FUNCTION_SPECIALIZATION:
      return reinterpret_cast<const ClassScopeFunctionSpecializationDecl &>(parent);
    default: return std::nullopt;
  }
}

CXXMethodDecl ClassScopeFunctionSpecializationDecl::specialization(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal48());
  return CXXMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool ClassScopeFunctionSpecializationDecl::has_explicit_template_arguments(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal49();
}

CapturedDeclContainingDeclRange CapturedDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

CapturedDeclContainingDeclRange CapturedDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool CapturedDecl::contains(const Decl &decl) {
  for(auto &parent : CapturedDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CapturedDecl::contains(const Stmt &stmt) {
  for(auto &parent : CapturedDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CapturedDecl> CapturedDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<CapturedDecl> CapturedDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CAPTURED:
      return reinterpret_cast<const CapturedDecl &>(parent);
    default: return std::nullopt;
  }
}

ImplicitParamDecl CapturedDecl::context_parameter(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal48());
  return ImplicitParamDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool CapturedDecl::is_nothrow(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal49();
}

std::vector<ImplicitParamDecl> CapturedDecl::parameters(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<ImplicitParamDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d50 = fragment->DeclFor(fragment, id)) {
      if (auto e = ImplicitParamDecl::from(d50.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Decl> CapturedDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal51();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

BlockDeclContainingDeclRange BlockDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

BlockDeclContainingDeclRange BlockDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool BlockDecl::contains(const Decl &decl) {
  for(auto &parent : BlockDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool BlockDecl::contains(const Stmt &stmt) {
  for(auto &parent : BlockDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<BlockDecl> BlockDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<BlockDecl> BlockDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::BLOCK:
      return reinterpret_cast<const BlockDecl &>(parent);
    default: return std::nullopt;
  }
}

bool BlockDecl::block_missing_return_type(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal49();
}

bool BlockDecl::can_avoid_copy_to_heap(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal52();
}

bool BlockDecl::captures_cxx_this(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal53();
}

bool BlockDecl::does_not_escape(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal54();
}

std::optional<Decl> BlockDecl::block_mangling_context_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal55()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal48());
    return fragment->DeclFor(fragment, id);
  }
}

Token BlockDecl::caret_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal56())) {
    return tok.value();
  } else {
    return Token();
  }
}

CompoundStmt BlockDecl::compound_body(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal57());
  return CompoundStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Type BlockDecl::signature_as_written(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal58());
  return fragment->TypeFor(fragment, id, false).value();
}

bool BlockDecl::has_captures(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal59();
}

bool BlockDecl::is_conversion_from_lambda(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal60();
}

bool BlockDecl::is_variadic(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal61();
}

std::vector<ParmVarDecl> BlockDecl::parameters(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<ParmVarDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d50 = fragment->DeclFor(fragment, id)) {
      if (auto e = ParmVarDecl::from(d50.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<ParmVarDecl> BlockDecl::parameter_declarations(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal51();
  std::vector<ParmVarDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d51 = fragment->DeclFor(fragment, id)) {
      if (auto e = ParmVarDecl::from(d51.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Decl> BlockDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal62();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

AccessSpecDeclContainingDeclRange AccessSpecDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

AccessSpecDeclContainingDeclRange AccessSpecDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool AccessSpecDecl::contains(const Decl &decl) {
  for(auto &parent : AccessSpecDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool AccessSpecDecl::contains(const Stmt &stmt) {
  for(auto &parent : AccessSpecDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<AccessSpecDecl> AccessSpecDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<AccessSpecDecl> AccessSpecDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::ACCESS_SPEC:
      return reinterpret_cast<const AccessSpecDecl &>(parent);
    default: return std::nullopt;
  }
}

Token AccessSpecDecl::access_specifier_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal48())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token AccessSpecDecl::colon_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal56())) {
    return tok.value();
  } else {
    return Token();
  }
}

OMPDeclarativeDirectiveDeclContainingDeclRange OMPDeclarativeDirectiveDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

OMPDeclarativeDirectiveDeclContainingDeclRange OMPDeclarativeDirectiveDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool OMPDeclarativeDirectiveDecl::contains(const Decl &decl) {
  for(auto &parent : OMPDeclarativeDirectiveDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPDeclarativeDirectiveDecl::contains(const Stmt &stmt) {
  for(auto &parent : OMPDeclarativeDirectiveDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPDeclarativeDirectiveDecl> OMPDeclarativeDirectiveDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<OMPDeclarativeDirectiveDecl> OMPDeclarativeDirectiveDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OMP_THREAD_PRIVATE:
    case mx::DeclKind::OMP_REQUIRES:
    case mx::DeclKind::OMP_ALLOCATE:
      return reinterpret_cast<const OMPDeclarativeDirectiveDecl &>(parent);
    default: return std::nullopt;
  }
}

OMPThreadPrivateDeclContainingDeclRange OMPThreadPrivateDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

OMPThreadPrivateDeclContainingDeclRange OMPThreadPrivateDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool OMPThreadPrivateDecl::contains(const Decl &decl) {
  for(auto &parent : OMPThreadPrivateDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPThreadPrivateDecl::contains(const Stmt &stmt) {
  for(auto &parent : OMPThreadPrivateDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPThreadPrivateDecl> OMPThreadPrivateDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<OMPThreadPrivateDecl> OMPThreadPrivateDecl::from(const OMPDeclarativeDirectiveDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPThreadPrivateDecl> OMPThreadPrivateDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OMP_THREAD_PRIVATE:
      return reinterpret_cast<const OMPThreadPrivateDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Expr> OMPThreadPrivateDecl::varlists(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s50 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s50.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

OMPRequiresDeclContainingDeclRange OMPRequiresDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

OMPRequiresDeclContainingDeclRange OMPRequiresDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool OMPRequiresDecl::contains(const Decl &decl) {
  for(auto &parent : OMPRequiresDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPRequiresDecl::contains(const Stmt &stmt) {
  for(auto &parent : OMPRequiresDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPRequiresDecl> OMPRequiresDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<OMPRequiresDecl> OMPRequiresDecl::from(const OMPDeclarativeDirectiveDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPRequiresDecl> OMPRequiresDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OMP_REQUIRES:
      return reinterpret_cast<const OMPRequiresDecl &>(parent);
    default: return std::nullopt;
  }
}

OMPAllocateDeclContainingDeclRange OMPAllocateDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

OMPAllocateDeclContainingDeclRange OMPAllocateDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool OMPAllocateDecl::contains(const Decl &decl) {
  for(auto &parent : OMPAllocateDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPAllocateDecl::contains(const Stmt &stmt) {
  for(auto &parent : OMPAllocateDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPAllocateDecl> OMPAllocateDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<OMPAllocateDecl> OMPAllocateDecl::from(const OMPDeclarativeDirectiveDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPAllocateDecl> OMPAllocateDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OMP_ALLOCATE:
      return reinterpret_cast<const OMPAllocateDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Expr> OMPAllocateDecl::varlists(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Expr> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s50 = fragment->StmtFor(fragment, id)) {
      if (auto e = Expr::from(s50.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

TranslationUnitDeclContainingDeclRange TranslationUnitDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

TranslationUnitDeclContainingDeclRange TranslationUnitDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool TranslationUnitDecl::contains(const Decl &decl) {
  for(auto &parent : TranslationUnitDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TranslationUnitDecl::contains(const Stmt &stmt) {
  for(auto &parent : TranslationUnitDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TranslationUnitDecl> TranslationUnitDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<TranslationUnitDecl> TranslationUnitDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::TRANSLATION_UNIT:
      return reinterpret_cast<const TranslationUnitDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Decl> TranslationUnitDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

StaticAssertDeclContainingDeclRange StaticAssertDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

StaticAssertDeclContainingDeclRange StaticAssertDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool StaticAssertDecl::contains(const Decl &decl) {
  for(auto &parent : StaticAssertDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool StaticAssertDecl::contains(const Stmt &stmt) {
  for(auto &parent : StaticAssertDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<StaticAssertDecl> StaticAssertDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<StaticAssertDecl> StaticAssertDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::STATIC_ASSERT:
      return reinterpret_cast<const StaticAssertDecl &>(parent);
    default: return std::nullopt;
  }
}

Expr StaticAssertDecl::assert_expression(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal48());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

StringLiteral StaticAssertDecl::message(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal56());
  return StringLiteral::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token StaticAssertDecl::r_paren_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal57())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool StaticAssertDecl::is_failed(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal49();
}

RequiresExprBodyDeclContainingDeclRange RequiresExprBodyDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

RequiresExprBodyDeclContainingDeclRange RequiresExprBodyDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool RequiresExprBodyDecl::contains(const Decl &decl) {
  for(auto &parent : RequiresExprBodyDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool RequiresExprBodyDecl::contains(const Stmt &stmt) {
  for(auto &parent : RequiresExprBodyDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<RequiresExprBodyDecl> RequiresExprBodyDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<RequiresExprBodyDecl> RequiresExprBodyDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::REQUIRES_EXPR_BODY:
      return reinterpret_cast<const RequiresExprBodyDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Decl> RequiresExprBodyDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

PragmaDetectMismatchDeclContainingDeclRange PragmaDetectMismatchDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

PragmaDetectMismatchDeclContainingDeclRange PragmaDetectMismatchDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool PragmaDetectMismatchDecl::contains(const Decl &decl) {
  for(auto &parent : PragmaDetectMismatchDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool PragmaDetectMismatchDecl::contains(const Stmt &stmt) {
  for(auto &parent : PragmaDetectMismatchDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<PragmaDetectMismatchDecl> PragmaDetectMismatchDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<PragmaDetectMismatchDecl> PragmaDetectMismatchDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::PRAGMA_DETECT_MISMATCH:
      return reinterpret_cast<const PragmaDetectMismatchDecl &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PragmaDetectMismatchDecl::name(void) const {
  auto self = fragment->NthDecl(offset_);
  capnp::Text::Reader data = self.getVal63();
  return std::string_view(data.cStr(), data.size());
}

std::string_view PragmaDetectMismatchDecl::value(void) const {
  auto self = fragment->NthDecl(offset_);
  capnp::Text::Reader data = self.getVal64();
  return std::string_view(data.cStr(), data.size());
}

PragmaCommentDeclContainingDeclRange PragmaCommentDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

PragmaCommentDeclContainingDeclRange PragmaCommentDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool PragmaCommentDecl::contains(const Decl &decl) {
  for(auto &parent : PragmaCommentDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool PragmaCommentDecl::contains(const Stmt &stmt) {
  for(auto &parent : PragmaCommentDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<PragmaCommentDecl> PragmaCommentDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<PragmaCommentDecl> PragmaCommentDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::PRAGMA_COMMENT:
      return reinterpret_cast<const PragmaCommentDecl &>(parent);
    default: return std::nullopt;
  }
}

std::string_view PragmaCommentDecl::argument(void) const {
  auto self = fragment->NthDecl(offset_);
  capnp::Text::Reader data = self.getVal63();
  return std::string_view(data.cStr(), data.size());
}

PragmaMSCommentKind PragmaCommentDecl::comment_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<PragmaMSCommentKind>(self.getVal65());
}

ObjCPropertyImplDeclContainingDeclRange ObjCPropertyImplDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCPropertyImplDeclContainingDeclRange ObjCPropertyImplDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCPropertyImplDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCPropertyImplDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCPropertyImplDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCPropertyImplDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCPropertyImplDecl> ObjCPropertyImplDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCPropertyImplDecl> ObjCPropertyImplDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_PROPERTY_IMPL:
      return reinterpret_cast<const ObjCPropertyImplDecl &>(parent);
    default: return std::nullopt;
  }
}

Expr ObjCPropertyImplDecl::getter_cxx_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal48());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ObjCMethodDecl ObjCPropertyImplDecl::getter_method_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal56());
  return ObjCMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCPropertyDecl ObjCPropertyImplDecl::property_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal57());
  return ObjCPropertyDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCPropertyImplDeclKind ObjCPropertyImplDecl::property_implementation(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ObjCPropertyImplDeclKind>(self.getVal65());
}

ObjCIvarDecl ObjCPropertyImplDecl::property_instance_variable_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal58());
  return ObjCIvarDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token ObjCPropertyImplDecl::property_instance_variable_declaration_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal66())) {
    return tok.value();
  } else {
    return Token();
  }
}

Expr ObjCPropertyImplDecl::setter_cxx_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal67());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ObjCMethodDecl ObjCPropertyImplDecl::setter_method_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal68());
  return ObjCMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool ObjCPropertyImplDecl::is_instance_variable_name_specified(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal49();
}

NamedDeclContainingDeclRange NamedDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

NamedDeclContainingDeclRange NamedDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool NamedDecl::contains(const Decl &decl) {
  for(auto &parent : NamedDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool NamedDecl::contains(const Stmt &stmt) {
  for(auto &parent : NamedDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<NamedDecl> NamedDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<NamedDecl> NamedDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::NAMED:
    case mx::DeclKind::LABEL:
    case mx::DeclKind::BASE_USING:
    case mx::DeclKind::USING_ENUM:
    case mx::DeclKind::USING:
    case mx::DeclKind::VALUE:
    case mx::DeclKind::UNRESOLVED_USING_VALUE:
    case mx::DeclKind::TEMPLATE_PARAM_OBJECT:
    case mx::DeclKind::OMP_DECLARE_REDUCTION:
    case mx::DeclKind::MS_GUID:
    case mx::DeclKind::INDIRECT_FIELD:
    case mx::DeclKind::ENUM_CONSTANT:
    case mx::DeclKind::DECLARATOR:
    case mx::DeclKind::VAR:
    case mx::DeclKind::PARM_VAR:
    case mx::DeclKind::OMP_CAPTURED_EXPR:
    case mx::DeclKind::IMPLICIT_PARAM:
    case mx::DeclKind::DECOMPOSITION:
    case mx::DeclKind::VAR_TEMPLATE_SPECIALIZATION:
    case mx::DeclKind::VAR_TEMPLATE_PARTIAL_SPECIALIZATION:
    case mx::DeclKind::NON_TYPE_TEMPLATE_PARM:
    case mx::DeclKind::MS_PROPERTY:
    case mx::DeclKind::FUNCTION:
    case mx::DeclKind::CXX_METHOD:
    case mx::DeclKind::CXX_DESTRUCTOR:
    case mx::DeclKind::CXX_CONVERSION:
    case mx::DeclKind::CXX_CONSTRUCTOR:
    case mx::DeclKind::CXX_DEDUCTION_GUIDE:
    case mx::DeclKind::FIELD:
    case mx::DeclKind::OBJ_C_IVAR:
    case mx::DeclKind::OBJ_C_AT_DEFS_FIELD:
    case mx::DeclKind::BINDING:
    case mx::DeclKind::OMP_DECLARE_MAPPER:
    case mx::DeclKind::USING_SHADOW:
    case mx::DeclKind::CONSTRUCTOR_USING_SHADOW:
    case mx::DeclKind::USING_PACK:
    case mx::DeclKind::USING_DIRECTIVE:
    case mx::DeclKind::UNRESOLVED_USING_IF_EXISTS:
    case mx::DeclKind::TYPE:
    case mx::DeclKind::TEMPLATE_TYPE_PARM:
    case mx::DeclKind::TAG:
    case mx::DeclKind::RECORD:
    case mx::DeclKind::CXX_RECORD:
    case mx::DeclKind::CLASS_TEMPLATE_SPECIALIZATION:
    case mx::DeclKind::CLASS_TEMPLATE_PARTIAL_SPECIALIZATION:
    case mx::DeclKind::ENUM:
    case mx::DeclKind::UNRESOLVED_USING_TYPENAME:
    case mx::DeclKind::TYPEDEF_NAME:
    case mx::DeclKind::TYPEDEF:
    case mx::DeclKind::TYPE_ALIAS:
    case mx::DeclKind::OBJ_C_TYPE_PARAM:
    case mx::DeclKind::TEMPLATE:
    case mx::DeclKind::REDECLARABLE_TEMPLATE:
    case mx::DeclKind::FUNCTION_TEMPLATE:
    case mx::DeclKind::CLASS_TEMPLATE:
    case mx::DeclKind::VAR_TEMPLATE:
    case mx::DeclKind::TYPE_ALIAS_TEMPLATE:
    case mx::DeclKind::CONCEPT:
    case mx::DeclKind::BUILTIN_TEMPLATE:
    case mx::DeclKind::TEMPLATE_TEMPLATE_PARM:
    case mx::DeclKind::OBJ_C_PROPERTY:
    case mx::DeclKind::OBJ_C_METHOD:
    case mx::DeclKind::OBJ_C_CONTAINER:
    case mx::DeclKind::OBJ_C_CATEGORY:
    case mx::DeclKind::OBJ_C_PROTOCOL:
    case mx::DeclKind::OBJ_C_INTERFACE:
    case mx::DeclKind::OBJ_C_IMPL:
    case mx::DeclKind::OBJ_C_CATEGORY_IMPL:
    case mx::DeclKind::OBJ_C_IMPLEMENTATION:
    case mx::DeclKind::OBJ_C_COMPATIBLE_ALIAS:
    case mx::DeclKind::NAMESPACE:
    case mx::DeclKind::NAMESPACE_ALIAS:
      return reinterpret_cast<const NamedDecl &>(parent);
    default: return std::nullopt;
  }
}

Linkage NamedDecl::formal_linkage(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<Linkage>(self.getVal65());
}

std::string_view NamedDecl::name(void) const {
  auto self = fragment->NthDecl(offset_);
  capnp::Text::Reader data = self.getVal63();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCStringFormatFamily> NamedDecl::obj_cf_string_formatting_family(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal49()) {
    return std::nullopt;
  } else {
    return static_cast<ObjCStringFormatFamily>(self.getVal69());
  }
}

std::string_view NamedDecl::qualified_name_as_string(void) const {
  auto self = fragment->NthDecl(offset_);
  capnp::Text::Reader data = self.getVal64();
  return std::string_view(data.cStr(), data.size());
}

NamedDecl NamedDecl::underlying_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal48());
  return NamedDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Visibility NamedDecl::visibility(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<Visibility>(self.getVal70());
}

bool NamedDecl::has_external_formal_linkage(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal52();
}

bool NamedDecl::has_linkage(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal53();
}

bool NamedDecl::has_linkage_been_computed(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal54();
}

bool NamedDecl::is_cxx_class_member(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal55();
}

bool NamedDecl::is_cxx_instance_member(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal59();
}

bool NamedDecl::is_externally_declarable(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal60();
}

bool NamedDecl::is_externally_visible(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal61();
}

bool NamedDecl::is_linkage_valid(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal71();
}

LabelDeclContainingDeclRange LabelDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

LabelDeclContainingDeclRange LabelDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool LabelDecl::contains(const Decl &decl) {
  for(auto &parent : LabelDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool LabelDecl::contains(const Stmt &stmt) {
  for(auto &parent : LabelDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<LabelDecl> LabelDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<LabelDecl> LabelDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<LabelDecl> LabelDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::LABEL:
      return reinterpret_cast<const LabelDecl &>(parent);
    default: return std::nullopt;
  }
}

std::string_view LabelDecl::ms_assembly_label(void) const {
  auto self = fragment->NthDecl(offset_);
  capnp::Text::Reader data = self.getVal72();
  return std::string_view(data.cStr(), data.size());
}

LabelStmt LabelDecl::statement(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal56());
  return LabelStmt::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool LabelDecl::is_gnu_local(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal73();
}

bool LabelDecl::is_ms_assembly_label(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal74();
}

bool LabelDecl::is_resolved_ms_assembly_label(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal75();
}

BaseUsingDeclContainingDeclRange BaseUsingDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

BaseUsingDeclContainingDeclRange BaseUsingDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool BaseUsingDecl::contains(const Decl &decl) {
  for(auto &parent : BaseUsingDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool BaseUsingDecl::contains(const Stmt &stmt) {
  for(auto &parent : BaseUsingDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<BaseUsingDecl> BaseUsingDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<BaseUsingDecl> BaseUsingDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<BaseUsingDecl> BaseUsingDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::BASE_USING:
    case mx::DeclKind::USING_ENUM:
    case mx::DeclKind::USING:
      return reinterpret_cast<const BaseUsingDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<UsingShadowDecl> BaseUsingDecl::shadows(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<UsingShadowDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d50 = fragment->DeclFor(fragment, id)) {
      if (auto e = UsingShadowDecl::from(d50.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

UsingEnumDeclContainingDeclRange UsingEnumDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

UsingEnumDeclContainingDeclRange UsingEnumDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool UsingEnumDecl::contains(const Decl &decl) {
  for(auto &parent : UsingEnumDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UsingEnumDecl::contains(const Stmt &stmt) {
  for(auto &parent : UsingEnumDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UsingEnumDecl> UsingEnumDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<UsingEnumDecl> UsingEnumDecl::from(const BaseUsingDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<UsingEnumDecl> UsingEnumDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<UsingEnumDecl> UsingEnumDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::USING_ENUM:
      return reinterpret_cast<const UsingEnumDecl &>(parent);
    default: return std::nullopt;
  }
}

EnumDecl UsingEnumDecl::enum_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal56());
  return EnumDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token UsingEnumDecl::enum_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal57())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token UsingEnumDecl::using_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal58())) {
    return tok.value();
  } else {
    return Token();
  }
}

UsingDeclContainingDeclRange UsingDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

UsingDeclContainingDeclRange UsingDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool UsingDecl::contains(const Decl &decl) {
  for(auto &parent : UsingDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UsingDecl::contains(const Stmt &stmt) {
  for(auto &parent : UsingDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UsingDecl> UsingDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<UsingDecl> UsingDecl::from(const BaseUsingDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<UsingDecl> UsingDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<UsingDecl> UsingDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::USING:
      return reinterpret_cast<const UsingDecl &>(parent);
    default: return std::nullopt;
  }
}

Token UsingDecl::using_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal56())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool UsingDecl::has_typename(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal73();
}

bool UsingDecl::is_access_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal74();
}

ValueDeclContainingDeclRange ValueDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ValueDeclContainingDeclRange ValueDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ValueDecl::contains(const Decl &decl) {
  for(auto &parent : ValueDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ValueDecl::contains(const Stmt &stmt) {
  for(auto &parent : ValueDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ValueDecl> ValueDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ValueDecl> ValueDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ValueDecl> ValueDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::VALUE:
    case mx::DeclKind::UNRESOLVED_USING_VALUE:
    case mx::DeclKind::TEMPLATE_PARAM_OBJECT:
    case mx::DeclKind::OMP_DECLARE_REDUCTION:
    case mx::DeclKind::MS_GUID:
    case mx::DeclKind::INDIRECT_FIELD:
    case mx::DeclKind::ENUM_CONSTANT:
    case mx::DeclKind::DECLARATOR:
    case mx::DeclKind::VAR:
    case mx::DeclKind::PARM_VAR:
    case mx::DeclKind::OMP_CAPTURED_EXPR:
    case mx::DeclKind::IMPLICIT_PARAM:
    case mx::DeclKind::DECOMPOSITION:
    case mx::DeclKind::VAR_TEMPLATE_SPECIALIZATION:
    case mx::DeclKind::VAR_TEMPLATE_PARTIAL_SPECIALIZATION:
    case mx::DeclKind::NON_TYPE_TEMPLATE_PARM:
    case mx::DeclKind::MS_PROPERTY:
    case mx::DeclKind::FUNCTION:
    case mx::DeclKind::CXX_METHOD:
    case mx::DeclKind::CXX_DESTRUCTOR:
    case mx::DeclKind::CXX_CONVERSION:
    case mx::DeclKind::CXX_CONSTRUCTOR:
    case mx::DeclKind::CXX_DEDUCTION_GUIDE:
    case mx::DeclKind::FIELD:
    case mx::DeclKind::OBJ_C_IVAR:
    case mx::DeclKind::OBJ_C_AT_DEFS_FIELD:
    case mx::DeclKind::BINDING:
    case mx::DeclKind::OMP_DECLARE_MAPPER:
      return reinterpret_cast<const ValueDecl &>(parent);
    default: return std::nullopt;
  }
}

Type ValueDecl::type(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal56());
  return fragment->TypeFor(fragment, id, false).value();
}

bool ValueDecl::is_weak(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal73();
}

UnresolvedUsingValueDeclContainingDeclRange UnresolvedUsingValueDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

UnresolvedUsingValueDeclContainingDeclRange UnresolvedUsingValueDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool UnresolvedUsingValueDecl::contains(const Decl &decl) {
  for(auto &parent : UnresolvedUsingValueDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UnresolvedUsingValueDecl::contains(const Stmt &stmt) {
  for(auto &parent : UnresolvedUsingValueDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UnresolvedUsingValueDecl> UnresolvedUsingValueDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<UnresolvedUsingValueDecl> UnresolvedUsingValueDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<UnresolvedUsingValueDecl> UnresolvedUsingValueDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<UnresolvedUsingValueDecl> UnresolvedUsingValueDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::UNRESOLVED_USING_VALUE:
      return reinterpret_cast<const UnresolvedUsingValueDecl &>(parent);
    default: return std::nullopt;
  }
}

Token UnresolvedUsingValueDecl::ellipsis_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal57())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token UnresolvedUsingValueDecl::using_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal58())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool UnresolvedUsingValueDecl::is_access_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal74();
}

bool UnresolvedUsingValueDecl::is_pack_expansion(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal75();
}

TemplateParamObjectDeclContainingDeclRange TemplateParamObjectDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

TemplateParamObjectDeclContainingDeclRange TemplateParamObjectDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool TemplateParamObjectDecl::contains(const Decl &decl) {
  for(auto &parent : TemplateParamObjectDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TemplateParamObjectDecl::contains(const Stmt &stmt) {
  for(auto &parent : TemplateParamObjectDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TemplateParamObjectDecl> TemplateParamObjectDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<TemplateParamObjectDecl> TemplateParamObjectDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TemplateParamObjectDecl> TemplateParamObjectDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TemplateParamObjectDecl> TemplateParamObjectDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::TEMPLATE_PARAM_OBJECT:
      return reinterpret_cast<const TemplateParamObjectDecl &>(parent);
    default: return std::nullopt;
  }
}

OMPDeclareReductionDeclContainingDeclRange OMPDeclareReductionDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

OMPDeclareReductionDeclContainingDeclRange OMPDeclareReductionDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool OMPDeclareReductionDecl::contains(const Decl &decl) {
  for(auto &parent : OMPDeclareReductionDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPDeclareReductionDecl::contains(const Stmt &stmt) {
  for(auto &parent : OMPDeclareReductionDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPDeclareReductionDecl> OMPDeclareReductionDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<OMPDeclareReductionDecl> OMPDeclareReductionDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPDeclareReductionDecl> OMPDeclareReductionDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPDeclareReductionDecl> OMPDeclareReductionDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OMP_DECLARE_REDUCTION:
      return reinterpret_cast<const OMPDeclareReductionDecl &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPDeclareReductionDecl::combiner(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal57());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPDeclareReductionDecl::combiner_in(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal58());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPDeclareReductionDecl::combiner_out(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal66());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPDeclareReductionDecl::initializer_original(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal67());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPDeclareReductionDecl::initializer_private(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal68());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Expr OMPDeclareReductionDecl::initializer(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal76());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

OMPDeclareReductionDeclInitKind OMPDeclareReductionDecl::initializer_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<OMPDeclareReductionDeclInitKind>(self.getVal77());
}

std::vector<Decl> OMPDeclareReductionDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

MSGuidDeclContainingDeclRange MSGuidDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

MSGuidDeclContainingDeclRange MSGuidDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool MSGuidDecl::contains(const Decl &decl) {
  for(auto &parent : MSGuidDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool MSGuidDecl::contains(const Stmt &stmt) {
  for(auto &parent : MSGuidDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<MSGuidDecl> MSGuidDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<MSGuidDecl> MSGuidDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<MSGuidDecl> MSGuidDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<MSGuidDecl> MSGuidDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::MS_GUID:
      return reinterpret_cast<const MSGuidDecl &>(parent);
    default: return std::nullopt;
  }
}

IndirectFieldDeclContainingDeclRange IndirectFieldDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

IndirectFieldDeclContainingDeclRange IndirectFieldDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool IndirectFieldDecl::contains(const Decl &decl) {
  for(auto &parent : IndirectFieldDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool IndirectFieldDecl::contains(const Stmt &stmt) {
  for(auto &parent : IndirectFieldDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<IndirectFieldDecl> IndirectFieldDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<IndirectFieldDecl> IndirectFieldDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<IndirectFieldDecl> IndirectFieldDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<IndirectFieldDecl> IndirectFieldDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::INDIRECT_FIELD:
      return reinterpret_cast<const IndirectFieldDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<NamedDecl> IndirectFieldDecl::chain(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<NamedDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d50 = fragment->DeclFor(fragment, id)) {
      if (auto e = NamedDecl::from(d50.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::optional<FieldDecl> IndirectFieldDecl::anonymous_field(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal74()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal57());
    return FieldDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<VarDecl> IndirectFieldDecl::variable_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal75()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal58());
    return VarDecl::from(fragment->DeclFor(fragment, id));
  }
}

EnumConstantDeclContainingDeclRange EnumConstantDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

EnumConstantDeclContainingDeclRange EnumConstantDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool EnumConstantDecl::contains(const Decl &decl) {
  for(auto &parent : EnumConstantDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool EnumConstantDecl::contains(const Stmt &stmt) {
  for(auto &parent : EnumConstantDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<EnumConstantDecl> EnumConstantDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<EnumConstantDecl> EnumConstantDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<EnumConstantDecl> EnumConstantDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<EnumConstantDecl> EnumConstantDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::ENUM_CONSTANT:
      return reinterpret_cast<const EnumConstantDecl &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Expr> EnumConstantDecl::initializer_expression(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal74()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal57());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

DeclaratorDeclContainingDeclRange DeclaratorDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

DeclaratorDeclContainingDeclRange DeclaratorDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool DeclaratorDecl::contains(const Decl &decl) {
  for(auto &parent : DeclaratorDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool DeclaratorDecl::contains(const Stmt &stmt) {
  for(auto &parent : DeclaratorDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<DeclaratorDecl> DeclaratorDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<DeclaratorDecl> DeclaratorDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<DeclaratorDecl> DeclaratorDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<DeclaratorDecl> DeclaratorDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::DECLARATOR:
    case mx::DeclKind::VAR:
    case mx::DeclKind::PARM_VAR:
    case mx::DeclKind::OMP_CAPTURED_EXPR:
    case mx::DeclKind::IMPLICIT_PARAM:
    case mx::DeclKind::DECOMPOSITION:
    case mx::DeclKind::VAR_TEMPLATE_SPECIALIZATION:
    case mx::DeclKind::VAR_TEMPLATE_PARTIAL_SPECIALIZATION:
    case mx::DeclKind::NON_TYPE_TEMPLATE_PARM:
    case mx::DeclKind::MS_PROPERTY:
    case mx::DeclKind::FUNCTION:
    case mx::DeclKind::CXX_METHOD:
    case mx::DeclKind::CXX_DESTRUCTOR:
    case mx::DeclKind::CXX_CONVERSION:
    case mx::DeclKind::CXX_CONSTRUCTOR:
    case mx::DeclKind::CXX_DEDUCTION_GUIDE:
    case mx::DeclKind::FIELD:
    case mx::DeclKind::OBJ_C_IVAR:
    case mx::DeclKind::OBJ_C_AT_DEFS_FIELD:
      return reinterpret_cast<const DeclaratorDecl &>(parent);
    default: return std::nullopt;
  }
}

Token DeclaratorDecl::first_inner_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal57())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token DeclaratorDecl::first_outer_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal58())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<Expr> DeclaratorDecl::trailing_requires_clause(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal74()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal66());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

Token DeclaratorDecl::type_spec_end_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal67())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token DeclaratorDecl::type_spec_start_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal68())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::vector<TemplateParameterList> DeclaratorDecl::template_parameter_lists(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal78();
  std::vector<TemplateParameterList> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

VarDeclContainingDeclRange VarDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

VarDeclContainingDeclRange VarDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool VarDecl::contains(const Decl &decl) {
  for(auto &parent : VarDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool VarDecl::contains(const Stmt &stmt) {
  for(auto &parent : VarDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<VarDecl> VarDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<VarDecl> VarDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarDecl> VarDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarDecl> VarDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarDecl> VarDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::VAR:
    case mx::DeclKind::PARM_VAR:
    case mx::DeclKind::OMP_CAPTURED_EXPR:
    case mx::DeclKind::IMPLICIT_PARAM:
    case mx::DeclKind::DECOMPOSITION:
    case mx::DeclKind::VAR_TEMPLATE_SPECIALIZATION:
    case mx::DeclKind::VAR_TEMPLATE_PARTIAL_SPECIALIZATION:
      return reinterpret_cast<const VarDecl &>(parent);
    default: return std::nullopt;
  }
}

std::optional<VarDecl> VarDecl::acting_definition(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal75()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal76());
    return VarDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<Expr> VarDecl::initializer(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal80()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal79());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

VarDeclInitializationStyle VarDecl::initializer_style(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<VarDeclInitializationStyle>(self.getVal77());
}

std::optional<VarDecl> VarDecl::initializing_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal82()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal81());
    return VarDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<VarDecl> VarDecl::instantiated_from_static_data_member(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal84()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal83());
    return VarDecl::from(fragment->DeclFor(fragment, id));
  }
}

LanguageLinkage VarDecl::language_linkage(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<LanguageLinkage>(self.getVal85());
}

Token VarDecl::point_of_instantiation(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal86())) {
    return tok.value();
  } else {
    return Token();
  }
}

StorageClass VarDecl::storage_class(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<StorageClass>(self.getVal87());
}

StorageDuration VarDecl::storage_duration(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<StorageDuration>(self.getVal88());
}

VarDeclTLSKind VarDecl::tls_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<VarDeclTLSKind>(self.getVal89());
}

ThreadStorageClassSpecifier VarDecl::tsc_spec(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ThreadStorageClassSpecifier>(self.getVal90());
}

std::optional<VarDecl> VarDecl::template_instantiation_pattern(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal92()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal91());
    return VarDecl::from(fragment->DeclFor(fragment, id));
  }
}

TemplateSpecializationKind VarDecl::template_specialization_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<TemplateSpecializationKind>(self.getVal93());
}

TemplateSpecializationKind VarDecl::template_specialization_kind_for_instantiation(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<TemplateSpecializationKind>(self.getVal94());
}

bool VarDecl::has_constant_initialization(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal95();
}

bool VarDecl::has_dependent_alignment(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal96();
}

bool VarDecl::has_external_storage(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal97();
}

bool VarDecl::has_global_storage(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal98();
}

std::optional<bool> VarDecl::has_ice_initializer(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal100()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal99());
  }
}

bool VarDecl::has_initializer(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal101();
}

bool VarDecl::has_local_storage(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal102();
}

bool VarDecl::is_arc_pseudo_strong(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal103();
}

bool VarDecl::is_cxx_for_range_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal104();
}

bool VarDecl::is_constexpr(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal105();
}

bool VarDecl::is_direct_initializer(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal106();
}

bool VarDecl::is_escaping_byref(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal107();
}

bool VarDecl::is_exception_variable(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal108();
}

bool VarDecl::is_extern_c(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal109();
}

bool VarDecl::is_file_variable_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal110();
}

bool VarDecl::is_function_or_method_variable_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal111();
}

bool VarDecl::is_in_extern_c_context(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal112();
}

bool VarDecl::is_in_extern_cxx_context(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal113();
}

bool VarDecl::is_initializer_capture(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal114();
}

bool VarDecl::is_inline(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal115();
}

bool VarDecl::is_inline_specified(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal116();
}

bool VarDecl::is_known_to_be_defined(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal117();
}

bool VarDecl::is_local_variable_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal118();
}

bool VarDecl::is_local_variable_declaration_or_parm(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal119();
}

bool VarDecl::is_nrvo_variable(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal120();
}

bool VarDecl::is_no_destroy(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal121();
}

bool VarDecl::is_non_escaping_byref(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal122();
}

bool VarDecl::is_obj_c_for_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal123();
}

bool VarDecl::is_previous_declaration_in_same_block_scope(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal124();
}

bool VarDecl::is_static_data_member(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal125();
}

bool VarDecl::is_static_local(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal126();
}

bool VarDecl::is_demoted_definition(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal127();
}

bool VarDecl::is_usable_in_constant_expressions(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal128();
}

bool VarDecl::might_be_usable_in_constant_expressions(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal129();
}

QualTypeDestructionKind VarDecl::needs_destruction(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<QualTypeDestructionKind>(self.getVal130());
}

ParmVarDeclContainingDeclRange ParmVarDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ParmVarDeclContainingDeclRange ParmVarDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ParmVarDecl::contains(const Decl &decl) {
  for(auto &parent : ParmVarDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ParmVarDecl::contains(const Stmt &stmt) {
  for(auto &parent : ParmVarDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ParmVarDecl> ParmVarDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ParmVarDecl> ParmVarDecl::from(const VarDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ParmVarDecl> ParmVarDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ParmVarDecl> ParmVarDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ParmVarDecl> ParmVarDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ParmVarDecl> ParmVarDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::PARM_VAR:
      return reinterpret_cast<const ParmVarDecl &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Expr> ParmVarDecl::default_argument(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal132()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal131());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

TokenRange ParmVarDecl::default_argument_range(void) const {
  auto self = fragment->NthDecl(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal133(), self.getVal134());
}

DeclObjCDeclQualifier ParmVarDecl::obj_c_decl_qualifier(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<DeclObjCDeclQualifier>(self.getVal135());
}

Type ParmVarDecl::original_type(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal136());
  return fragment->TypeFor(fragment, id, false).value();
}

std::optional<Expr> ParmVarDecl::uninstantiated_default_argument(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal138()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal137());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

bool ParmVarDecl::has_default_argument(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal139();
}

bool ParmVarDecl::has_inherited_default_argument(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal140();
}

bool ParmVarDecl::has_uninstantiated_default_argument(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal141();
}

bool ParmVarDecl::has_unparsed_default_argument(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal142();
}

bool ParmVarDecl::is_destroyed_in_callee(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal143();
}

bool ParmVarDecl::is_knr_promoted(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal144();
}

bool ParmVarDecl::is_obj_c_method_parameter(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal145();
}

OMPCapturedExprDeclContainingDeclRange OMPCapturedExprDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

OMPCapturedExprDeclContainingDeclRange OMPCapturedExprDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool OMPCapturedExprDecl::contains(const Decl &decl) {
  for(auto &parent : OMPCapturedExprDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPCapturedExprDecl::contains(const Stmt &stmt) {
  for(auto &parent : OMPCapturedExprDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPCapturedExprDecl> OMPCapturedExprDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<OMPCapturedExprDecl> OMPCapturedExprDecl::from(const VarDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPCapturedExprDecl> OMPCapturedExprDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPCapturedExprDecl> OMPCapturedExprDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPCapturedExprDecl> OMPCapturedExprDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPCapturedExprDecl> OMPCapturedExprDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OMP_CAPTURED_EXPR:
      return reinterpret_cast<const OMPCapturedExprDecl &>(parent);
    default: return std::nullopt;
  }
}

ImplicitParamDeclContainingDeclRange ImplicitParamDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ImplicitParamDeclContainingDeclRange ImplicitParamDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ImplicitParamDecl::contains(const Decl &decl) {
  for(auto &parent : ImplicitParamDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ImplicitParamDecl::contains(const Stmt &stmt) {
  for(auto &parent : ImplicitParamDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ImplicitParamDecl> ImplicitParamDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ImplicitParamDecl> ImplicitParamDecl::from(const VarDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ImplicitParamDecl> ImplicitParamDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ImplicitParamDecl> ImplicitParamDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ImplicitParamDecl> ImplicitParamDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ImplicitParamDecl> ImplicitParamDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::IMPLICIT_PARAM:
      return reinterpret_cast<const ImplicitParamDecl &>(parent);
    default: return std::nullopt;
  }
}

ImplicitParamDeclImplicitParamKind ImplicitParamDecl::parameter_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ImplicitParamDeclImplicitParamKind>(self.getVal135());
}

DecompositionDeclContainingDeclRange DecompositionDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

DecompositionDeclContainingDeclRange DecompositionDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool DecompositionDecl::contains(const Decl &decl) {
  for(auto &parent : DecompositionDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool DecompositionDecl::contains(const Stmt &stmt) {
  for(auto &parent : DecompositionDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<DecompositionDecl> DecompositionDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<DecompositionDecl> DecompositionDecl::from(const VarDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<DecompositionDecl> DecompositionDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<DecompositionDecl> DecompositionDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<DecompositionDecl> DecompositionDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<DecompositionDecl> DecompositionDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::DECOMPOSITION:
      return reinterpret_cast<const DecompositionDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<BindingDecl> DecompositionDecl::bindings(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<BindingDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d50 = fragment->DeclFor(fragment, id)) {
      if (auto e = BindingDecl::from(d50.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

VarTemplateSpecializationDeclContainingDeclRange VarTemplateSpecializationDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

VarTemplateSpecializationDeclContainingDeclRange VarTemplateSpecializationDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool VarTemplateSpecializationDecl::contains(const Decl &decl) {
  for(auto &parent : VarTemplateSpecializationDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool VarTemplateSpecializationDecl::contains(const Stmt &stmt) {
  for(auto &parent : VarTemplateSpecializationDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<VarTemplateSpecializationDecl> VarTemplateSpecializationDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<VarTemplateSpecializationDecl> VarTemplateSpecializationDecl::from(const VarDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarTemplateSpecializationDecl> VarTemplateSpecializationDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarTemplateSpecializationDecl> VarTemplateSpecializationDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarTemplateSpecializationDecl> VarTemplateSpecializationDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarTemplateSpecializationDecl> VarTemplateSpecializationDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::VAR_TEMPLATE_SPECIALIZATION:
    case mx::DeclKind::VAR_TEMPLATE_PARTIAL_SPECIALIZATION:
      return reinterpret_cast<const VarTemplateSpecializationDecl &>(parent);
    default: return std::nullopt;
  }
}

Token VarTemplateSpecializationDecl::extern_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal131())) {
    return tok.value();
  } else {
    return Token();
  }
}

TemplateSpecializationKind VarTemplateSpecializationDecl::specialization_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<TemplateSpecializationKind>(self.getVal135());
}

std::vector<TemplateArgument> VarTemplateSpecializationDecl::template_arguments(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal146();
  std::vector<TemplateArgument> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

std::vector<TemplateArgument> VarTemplateSpecializationDecl::template_instantiation_arguments(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal147();
  std::vector<TemplateArgument> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

Token VarTemplateSpecializationDecl::template_keyword_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal133())) {
    return tok.value();
  } else {
    return Token();
  }
}

Type VarTemplateSpecializationDecl::type_as_written(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal134());
  return fragment->TypeFor(fragment, id, false).value();
}

bool VarTemplateSpecializationDecl::is_class_scope_explicit_specialization(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal132();
}

bool VarTemplateSpecializationDecl::is_explicit_instantiation_or_specialization(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal138();
}

bool VarTemplateSpecializationDecl::is_explicit_specialization(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal139();
}

VarTemplatePartialSpecializationDeclContainingDeclRange VarTemplatePartialSpecializationDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

VarTemplatePartialSpecializationDeclContainingDeclRange VarTemplatePartialSpecializationDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool VarTemplatePartialSpecializationDecl::contains(const Decl &decl) {
  for(auto &parent : VarTemplatePartialSpecializationDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool VarTemplatePartialSpecializationDecl::contains(const Stmt &stmt) {
  for(auto &parent : VarTemplatePartialSpecializationDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<VarTemplatePartialSpecializationDecl> VarTemplatePartialSpecializationDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<VarTemplatePartialSpecializationDecl> VarTemplatePartialSpecializationDecl::from(const VarTemplateSpecializationDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarTemplatePartialSpecializationDecl> VarTemplatePartialSpecializationDecl::from(const VarDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarTemplatePartialSpecializationDecl> VarTemplatePartialSpecializationDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarTemplatePartialSpecializationDecl> VarTemplatePartialSpecializationDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarTemplatePartialSpecializationDecl> VarTemplatePartialSpecializationDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarTemplatePartialSpecializationDecl> VarTemplatePartialSpecializationDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::VAR_TEMPLATE_PARTIAL_SPECIALIZATION:
      return reinterpret_cast<const VarTemplatePartialSpecializationDecl &>(parent);
    default: return std::nullopt;
  }
}

NonTypeTemplateParmDeclContainingDeclRange NonTypeTemplateParmDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

NonTypeTemplateParmDeclContainingDeclRange NonTypeTemplateParmDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool NonTypeTemplateParmDecl::contains(const Decl &decl) {
  for(auto &parent : NonTypeTemplateParmDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool NonTypeTemplateParmDecl::contains(const Stmt &stmt) {
  for(auto &parent : NonTypeTemplateParmDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<NonTypeTemplateParmDecl> NonTypeTemplateParmDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<NonTypeTemplateParmDecl> NonTypeTemplateParmDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<NonTypeTemplateParmDecl> NonTypeTemplateParmDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<NonTypeTemplateParmDecl> NonTypeTemplateParmDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<NonTypeTemplateParmDecl> NonTypeTemplateParmDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::NON_TYPE_TEMPLATE_PARM:
      return reinterpret_cast<const NonTypeTemplateParmDecl &>(parent);
    default: return std::nullopt;
  }
}

bool NonTypeTemplateParmDecl::default_argument_was_inherited(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal75();
}

std::optional<Expr> NonTypeTemplateParmDecl::default_argument(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal80()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal76());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

Token NonTypeTemplateParmDecl::default_argument_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal79())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<unsigned> NonTypeTemplateParmDecl::num_expansion_types(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal82()) {
    return std::nullopt;
  } else {
    return static_cast<unsigned>(self.getVal148());
  }
}

std::optional<Expr> NonTypeTemplateParmDecl::placeholder_type_constraint(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal84()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal81());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

bool NonTypeTemplateParmDecl::has_default_argument(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal92();
}

bool NonTypeTemplateParmDecl::has_placeholder_type_constraint(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal95();
}

bool NonTypeTemplateParmDecl::is_expanded_parameter_pack(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal96();
}

bool NonTypeTemplateParmDecl::is_pack_expansion(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal97();
}

std::vector<Type> NonTypeTemplateParmDecl::expansion_types(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Type> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t50 = fragment->TypeFor(fragment, id)) {
      vec.emplace_back(std::move(t50.value()));
    }
  }
  return vec;
}

MSPropertyDeclContainingDeclRange MSPropertyDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

MSPropertyDeclContainingDeclRange MSPropertyDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool MSPropertyDecl::contains(const Decl &decl) {
  for(auto &parent : MSPropertyDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool MSPropertyDecl::contains(const Stmt &stmt) {
  for(auto &parent : MSPropertyDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<MSPropertyDecl> MSPropertyDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<MSPropertyDecl> MSPropertyDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<MSPropertyDecl> MSPropertyDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<MSPropertyDecl> MSPropertyDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<MSPropertyDecl> MSPropertyDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::MS_PROPERTY:
      return reinterpret_cast<const MSPropertyDecl &>(parent);
    default: return std::nullopt;
  }
}

bool MSPropertyDecl::has_getter(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal75();
}

bool MSPropertyDecl::has_setter(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal80();
}

FunctionDeclContainingDeclRange FunctionDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

FunctionDeclContainingDeclRange FunctionDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool FunctionDecl::contains(const Decl &decl) {
  for(auto &parent : FunctionDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool FunctionDecl::contains(const Stmt &stmt) {
  for(auto &parent : FunctionDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<FunctionDecl> FunctionDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<FunctionDecl> FunctionDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<FunctionDecl> FunctionDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<FunctionDecl> FunctionDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<FunctionDecl> FunctionDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::FUNCTION:
    case mx::DeclKind::CXX_METHOD:
    case mx::DeclKind::CXX_DESTRUCTOR:
    case mx::DeclKind::CXX_CONVERSION:
    case mx::DeclKind::CXX_CONSTRUCTOR:
    case mx::DeclKind::CXX_DEDUCTION_GUIDE:
      return reinterpret_cast<const FunctionDecl &>(parent);
    default: return std::nullopt;
  }
}

bool FunctionDecl::uses_fp_intrin(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal75();
}

std::optional<bool> FunctionDecl::does_declaration_force_externally_visible_definition(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal82()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal80());
  }
}

bool FunctionDecl::does_this_declaration_have_a_body(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal84();
}

Type FunctionDecl::call_result_type(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal76());
  return fragment->TypeFor(fragment, id, false).value();
}

ConstexprSpecKind FunctionDecl::constexpr_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ConstexprSpecKind>(self.getVal77());
}

Type FunctionDecl::declared_return_type(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal79());
  return fragment->TypeFor(fragment, id, false).value();
}

Token FunctionDecl::ellipsis_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal81())) {
    return tok.value();
  } else {
    return Token();
  }
}

TokenRange FunctionDecl::exception_spec_source_range(void) const {
  auto self = fragment->NthDecl(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal83(), self.getVal86());
}

ExceptionSpecificationType FunctionDecl::exception_spec_type(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ExceptionSpecificationType>(self.getVal85());
}

std::optional<FunctionDecl> FunctionDecl::instantiated_from_member_function(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal92()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal91());
    return FunctionDecl::from(fragment->DeclFor(fragment, id));
  }
}

LanguageLinkage FunctionDecl::language_linkage(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<LanguageLinkage>(self.getVal87());
}

MultiVersionKind FunctionDecl::multi_version_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<MultiVersionKind>(self.getVal88());
}

std::optional<unsigned> FunctionDecl::odr_hash(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal95()) {
    return std::nullopt;
  } else {
    return static_cast<unsigned>(self.getVal148());
  }
}

OverloadedOperatorKind FunctionDecl::overloaded_operator(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<OverloadedOperatorKind>(self.getVal89());
}

TokenRange FunctionDecl::parameters_source_range(void) const {
  auto self = fragment->NthDecl(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal131(), self.getVal133());
}

Token FunctionDecl::point_of_instantiation(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal134())) {
    return tok.value();
  } else {
    return Token();
  }
}

Type FunctionDecl::return_type(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal136());
  return fragment->TypeFor(fragment, id, false).value();
}

TokenRange FunctionDecl::return_type_source_range(void) const {
  auto self = fragment->NthDecl(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal137(), self.getVal149());
}

StorageClass FunctionDecl::storage_class(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<StorageClass>(self.getVal90());
}

std::optional<FunctionDecl> FunctionDecl::template_instantiation_pattern(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal96()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal150());
    return FunctionDecl::from(fragment->DeclFor(fragment, id));
  }
}

TemplateSpecializationKind FunctionDecl::template_specialization_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<TemplateSpecializationKind>(self.getVal93());
}

TemplateSpecializationKind FunctionDecl::template_specialization_kind_for_instantiation(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<TemplateSpecializationKind>(self.getVal94());
}

FunctionDeclTemplatedKind FunctionDecl::templated_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<FunctionDeclTemplatedKind>(self.getVal130());
}

bool FunctionDecl::has_implicit_return_zero(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal97();
}

bool FunctionDecl::has_inherited_prototype(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal98();
}

bool FunctionDecl::has_one_parameter_or_default_arguments(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal99();
}

bool FunctionDecl::has_prototype(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal100();
}

bool FunctionDecl::has_skipped_body(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal101();
}

bool FunctionDecl::has_trivial_body(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal102();
}

bool FunctionDecl::has_written_prototype(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal103();
}

bool FunctionDecl::instantiation_is_pending(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal104();
}

bool FunctionDecl::is_cpu_dispatch_multi_version(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal105();
}

bool FunctionDecl::is_cpu_specific_multi_version(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal106();
}

bool FunctionDecl::is_consteval(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal107();
}

bool FunctionDecl::is_constexpr(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal108();
}

bool FunctionDecl::is_constexpr_specified(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal109();
}

bool FunctionDecl::is_defaulted(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal110();
}

bool FunctionDecl::is_deleted(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal111();
}

bool FunctionDecl::is_deleted_as_written(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal112();
}

bool FunctionDecl::is_destroying_operator_delete(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal113();
}

bool FunctionDecl::is_explicitly_defaulted(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal114();
}

bool FunctionDecl::is_extern_c(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal115();
}

bool FunctionDecl::is_function_template_specialization(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal116();
}

bool FunctionDecl::is_global(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal117();
}

bool FunctionDecl::is_implicitly_instantiable(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal118();
}

bool FunctionDecl::is_in_extern_c_context(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal119();
}

bool FunctionDecl::is_in_extern_cxx_context(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal120();
}

bool FunctionDecl::is_inline_builtin_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal121();
}

std::optional<bool> FunctionDecl::is_inline_definition_externally_visible(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal123()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal122());
  }
}

bool FunctionDecl::is_inline_specified(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal124();
}

bool FunctionDecl::is_inlined(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal125();
}

bool FunctionDecl::is_late_template_parsed(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal126();
}

std::optional<bool> FunctionDecl::is_ms_extern_inline(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal128()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal127());
  }
}

bool FunctionDecl::is_msvcrt_entry_point(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal129();
}

bool FunctionDecl::is_main(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal132();
}

bool FunctionDecl::is_multi_version(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal138();
}

bool FunctionDecl::is_no_return(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal139();
}

bool FunctionDecl::is_overloaded_operator(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal140();
}

bool FunctionDecl::is_pure(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal141();
}

bool FunctionDecl::is_replaceable_global_allocation_function(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal142();
}

std::optional<bool> FunctionDecl::is_reserved_global_placement_operator(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal144()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal143());
  }
}

bool FunctionDecl::is_static(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal145();
}

bool FunctionDecl::is_target_clones_multi_version(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal151();
}

bool FunctionDecl::is_target_multi_version(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal152();
}

bool FunctionDecl::is_template_instantiation(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal153();
}

bool FunctionDecl::is_this_declaration_instantiated_from_a_friend_definition(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal154();
}

bool FunctionDecl::is_trivial(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal155();
}

bool FunctionDecl::is_trivial_for_call(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal156();
}

bool FunctionDecl::is_user_provided(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal157();
}

bool FunctionDecl::is_variadic(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal158();
}

bool FunctionDecl::is_virtual_as_written(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal159();
}

std::vector<ParmVarDecl> FunctionDecl::parameters(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<ParmVarDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d50 = fragment->DeclFor(fragment, id)) {
      if (auto e = ParmVarDecl::from(d50.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

bool FunctionDecl::uses_seh_try(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal160();
}

bool FunctionDecl::will_have_body(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal161();
}

std::optional<Stmt> FunctionDecl::body(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal163()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal162());
    return fragment->StmtFor(fragment, id);
  }
}

std::vector<Decl> FunctionDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal51();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

CXXMethodDeclContainingDeclRange CXXMethodDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

CXXMethodDeclContainingDeclRange CXXMethodDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool CXXMethodDecl::contains(const Decl &decl) {
  for(auto &parent : CXXMethodDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXMethodDecl::contains(const Stmt &stmt) {
  for(auto &parent : CXXMethodDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXMethodDecl> CXXMethodDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<CXXMethodDecl> CXXMethodDecl::from(const FunctionDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXMethodDecl> CXXMethodDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXMethodDecl> CXXMethodDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXMethodDecl> CXXMethodDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXMethodDecl> CXXMethodDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CXX_METHOD:
    case mx::DeclKind::CXX_DESTRUCTOR:
    case mx::DeclKind::CXX_CONVERSION:
    case mx::DeclKind::CXX_CONSTRUCTOR:
      return reinterpret_cast<const CXXMethodDecl &>(parent);
    default: return std::nullopt;
  }
}

RefQualifierKind CXXMethodDecl::reference_qualifier(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<RefQualifierKind>(self.getVal135());
}

std::optional<Type> CXXMethodDecl::this_object_type(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal165()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal164());
    return fragment->TypeFor(fragment, id);
  }
}

std::optional<Type> CXXMethodDecl::this_type(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal167()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal166());
    return fragment->TypeFor(fragment, id);
  }
}

bool CXXMethodDecl::has_inline_body(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal168();
}

bool CXXMethodDecl::is_const(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal169();
}

bool CXXMethodDecl::is_copy_assignment_operator(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal170();
}

bool CXXMethodDecl::is_instance(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal171();
}

bool CXXMethodDecl::is_lambda_static_invoker(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal172();
}

bool CXXMethodDecl::is_move_assignment_operator(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal173();
}

bool CXXMethodDecl::is_virtual(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal174();
}

bool CXXMethodDecl::is_volatile(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal175();
}

std::vector<CXXMethodDecl> CXXMethodDecl::overridden_methods(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal62();
  std::vector<CXXMethodDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d62 = fragment->DeclFor(fragment, id)) {
      if (auto e = CXXMethodDecl::from(d62.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<ParmVarDecl> CXXMethodDecl::parameter_declarations(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal176();
  std::vector<ParmVarDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d176 = fragment->DeclFor(fragment, id)) {
      if (auto e = ParmVarDecl::from(d176.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

CXXDestructorDeclContainingDeclRange CXXDestructorDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

CXXDestructorDeclContainingDeclRange CXXDestructorDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool CXXDestructorDecl::contains(const Decl &decl) {
  for(auto &parent : CXXDestructorDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXDestructorDecl::contains(const Stmt &stmt) {
  for(auto &parent : CXXDestructorDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXDestructorDecl> CXXDestructorDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<CXXDestructorDecl> CXXDestructorDecl::from(const CXXMethodDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXDestructorDecl> CXXDestructorDecl::from(const FunctionDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXDestructorDecl> CXXDestructorDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXDestructorDecl> CXXDestructorDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXDestructorDecl> CXXDestructorDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXDestructorDecl> CXXDestructorDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CXX_DESTRUCTOR:
      return reinterpret_cast<const CXXDestructorDecl &>(parent);
    default: return std::nullopt;
  }
}

std::optional<FunctionDecl> CXXDestructorDecl::operator_delete(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal178()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal177());
    return FunctionDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<Expr> CXXDestructorDecl::operator_delete_this_argument(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal180()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal179());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

CXXConversionDeclContainingDeclRange CXXConversionDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

CXXConversionDeclContainingDeclRange CXXConversionDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool CXXConversionDecl::contains(const Decl &decl) {
  for(auto &parent : CXXConversionDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXConversionDecl::contains(const Stmt &stmt) {
  for(auto &parent : CXXConversionDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXConversionDecl> CXXConversionDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<CXXConversionDecl> CXXConversionDecl::from(const CXXMethodDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXConversionDecl> CXXConversionDecl::from(const FunctionDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXConversionDecl> CXXConversionDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXConversionDecl> CXXConversionDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXConversionDecl> CXXConversionDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXConversionDecl> CXXConversionDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CXX_CONVERSION:
      return reinterpret_cast<const CXXConversionDecl &>(parent);
    default: return std::nullopt;
  }
}

Type CXXConversionDecl::conversion_type(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal177());
  return fragment->TypeFor(fragment, id, false).value();
}

bool CXXConversionDecl::is_explicit(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal178();
}

bool CXXConversionDecl::is_lambda_to_block_pointer_conversion(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal180();
}

CXXConstructorDeclContainingDeclRange CXXConstructorDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

CXXConstructorDeclContainingDeclRange CXXConstructorDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool CXXConstructorDecl::contains(const Decl &decl) {
  for(auto &parent : CXXConstructorDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXConstructorDecl::contains(const Stmt &stmt) {
  for(auto &parent : CXXConstructorDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXConstructorDecl> CXXConstructorDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<CXXConstructorDecl> CXXConstructorDecl::from(const CXXMethodDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXConstructorDecl> CXXConstructorDecl::from(const FunctionDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXConstructorDecl> CXXConstructorDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXConstructorDecl> CXXConstructorDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXConstructorDecl> CXXConstructorDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXConstructorDecl> CXXConstructorDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CXX_CONSTRUCTOR:
      return reinterpret_cast<const CXXConstructorDecl &>(parent);
    default: return std::nullopt;
  }
}

std::optional<CXXConstructorDecl> CXXConstructorDecl::target_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal178()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal177());
    return CXXConstructorDecl::from(fragment->DeclFor(fragment, id));
  }
}

bool CXXConstructorDecl::is_default_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal180();
}

bool CXXConstructorDecl::is_delegating_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal181();
}

bool CXXConstructorDecl::is_explicit(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal182();
}

bool CXXConstructorDecl::is_inheriting_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal183();
}

bool CXXConstructorDecl::is_specialization_copying_object(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal184();
}

CXXDeductionGuideDeclContainingDeclRange CXXDeductionGuideDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

CXXDeductionGuideDeclContainingDeclRange CXXDeductionGuideDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool CXXDeductionGuideDecl::contains(const Decl &decl) {
  for(auto &parent : CXXDeductionGuideDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXDeductionGuideDecl::contains(const Stmt &stmt) {
  for(auto &parent : CXXDeductionGuideDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXDeductionGuideDecl> CXXDeductionGuideDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<CXXDeductionGuideDecl> CXXDeductionGuideDecl::from(const FunctionDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXDeductionGuideDecl> CXXDeductionGuideDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXDeductionGuideDecl> CXXDeductionGuideDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXDeductionGuideDecl> CXXDeductionGuideDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXDeductionGuideDecl> CXXDeductionGuideDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CXX_DEDUCTION_GUIDE:
      return reinterpret_cast<const CXXDeductionGuideDecl &>(parent);
    default: return std::nullopt;
  }
}

CXXConstructorDecl CXXDeductionGuideDecl::corresponding_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal164());
  return CXXConstructorDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool CXXDeductionGuideDecl::is_copy_deduction_candidate(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal165();
}

bool CXXDeductionGuideDecl::is_explicit(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal167();
}

std::vector<ParmVarDecl> CXXDeductionGuideDecl::parameter_declarations(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal62();
  std::vector<ParmVarDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d62 = fragment->DeclFor(fragment, id)) {
      if (auto e = ParmVarDecl::from(d62.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

FieldDeclContainingDeclRange FieldDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

FieldDeclContainingDeclRange FieldDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool FieldDecl::contains(const Decl &decl) {
  for(auto &parent : FieldDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool FieldDecl::contains(const Stmt &stmt) {
  for(auto &parent : FieldDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<FieldDecl> FieldDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<FieldDecl> FieldDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<FieldDecl> FieldDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<FieldDecl> FieldDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<FieldDecl> FieldDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::FIELD:
    case mx::DeclKind::OBJ_C_IVAR:
    case mx::DeclKind::OBJ_C_AT_DEFS_FIELD:
      return reinterpret_cast<const FieldDecl &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Expr> FieldDecl::bit_width(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal75()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal76());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

std::optional<VariableArrayType> FieldDecl::captured_vla_type(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal80()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal79());
    return VariableArrayType::from(fragment->TypeFor(fragment, id));
  }
}

InClassInitStyle FieldDecl::in_class_initializer_style(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<InClassInitStyle>(self.getVal77());
}

std::optional<Expr> FieldDecl::in_class_initializer(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal82()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal81());
    return Expr::from(fragment->StmtFor(fragment, id));
  }
}

bool FieldDecl::has_captured_vla_type(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal84();
}

bool FieldDecl::has_in_class_initializer(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal92();
}

bool FieldDecl::is_anonymous_struct_or_union(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal95();
}

bool FieldDecl::is_bit_field(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal96();
}

bool FieldDecl::is_mutable(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal97();
}

bool FieldDecl::is_unnamed_bitfield(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal98();
}

bool FieldDecl::is_zero_length_bit_field(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal99();
}

bool FieldDecl::is_zero_size(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal100();
}

ObjCIvarDeclContainingDeclRange ObjCIvarDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCIvarDeclContainingDeclRange ObjCIvarDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCIvarDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCIvarDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCIvarDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCIvarDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCIvarDecl> ObjCIvarDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCIvarDecl> ObjCIvarDecl::from(const FieldDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCIvarDecl> ObjCIvarDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCIvarDecl> ObjCIvarDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCIvarDecl> ObjCIvarDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCIvarDecl> ObjCIvarDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_IVAR:
      return reinterpret_cast<const ObjCIvarDecl &>(parent);
    default: return std::nullopt;
  }
}

ObjCIvarDeclAccessControl ObjCIvarDecl::access_control(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ObjCIvarDeclAccessControl>(self.getVal85());
}

ObjCIvarDeclAccessControl ObjCIvarDecl::canonical_access_control(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ObjCIvarDeclAccessControl>(self.getVal87());
}

ObjCInterfaceDecl ObjCIvarDecl::containing_interface(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal83());
  return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCIvarDecl ObjCIvarDecl::next_instance_variable(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal86());
  return ObjCIvarDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool ObjCIvarDecl::synthesize(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal101();
}

ObjCAtDefsFieldDeclContainingDeclRange ObjCAtDefsFieldDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCAtDefsFieldDeclContainingDeclRange ObjCAtDefsFieldDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCAtDefsFieldDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCAtDefsFieldDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCAtDefsFieldDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCAtDefsFieldDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCAtDefsFieldDecl> ObjCAtDefsFieldDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCAtDefsFieldDecl> ObjCAtDefsFieldDecl::from(const FieldDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCAtDefsFieldDecl> ObjCAtDefsFieldDecl::from(const DeclaratorDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCAtDefsFieldDecl> ObjCAtDefsFieldDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCAtDefsFieldDecl> ObjCAtDefsFieldDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCAtDefsFieldDecl> ObjCAtDefsFieldDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_AT_DEFS_FIELD:
      return reinterpret_cast<const ObjCAtDefsFieldDecl &>(parent);
    default: return std::nullopt;
  }
}

BindingDeclContainingDeclRange BindingDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

BindingDeclContainingDeclRange BindingDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool BindingDecl::contains(const Decl &decl) {
  for(auto &parent : BindingDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool BindingDecl::contains(const Stmt &stmt) {
  for(auto &parent : BindingDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<BindingDecl> BindingDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<BindingDecl> BindingDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<BindingDecl> BindingDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<BindingDecl> BindingDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::BINDING:
      return reinterpret_cast<const BindingDecl &>(parent);
    default: return std::nullopt;
  }
}

Expr BindingDecl::binding(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal57());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ValueDecl BindingDecl::decomposed_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal58());
  return ValueDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

VarDecl BindingDecl::holding_variable(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal66());
  return VarDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

OMPDeclarativeDirectiveValueDeclContainingDeclRange OMPDeclarativeDirectiveValueDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

OMPDeclarativeDirectiveValueDeclContainingDeclRange OMPDeclarativeDirectiveValueDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool OMPDeclarativeDirectiveValueDecl::contains(const Decl &decl) {
  for(auto &parent : OMPDeclarativeDirectiveValueDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPDeclarativeDirectiveValueDecl::contains(const Stmt &stmt) {
  for(auto &parent : OMPDeclarativeDirectiveValueDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPDeclarativeDirectiveValueDecl> OMPDeclarativeDirectiveValueDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<OMPDeclarativeDirectiveValueDecl> OMPDeclarativeDirectiveValueDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPDeclarativeDirectiveValueDecl> OMPDeclarativeDirectiveValueDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPDeclarativeDirectiveValueDecl> OMPDeclarativeDirectiveValueDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OMP_DECLARE_MAPPER:
      return reinterpret_cast<const OMPDeclarativeDirectiveValueDecl &>(parent);
    default: return std::nullopt;
  }
}

OMPDeclareMapperDeclContainingDeclRange OMPDeclareMapperDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

OMPDeclareMapperDeclContainingDeclRange OMPDeclareMapperDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool OMPDeclareMapperDecl::contains(const Decl &decl) {
  for(auto &parent : OMPDeclareMapperDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool OMPDeclareMapperDecl::contains(const Stmt &stmt) {
  for(auto &parent : OMPDeclareMapperDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<OMPDeclareMapperDecl> OMPDeclareMapperDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<OMPDeclareMapperDecl> OMPDeclareMapperDecl::from(const OMPDeclarativeDirectiveValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPDeclareMapperDecl> OMPDeclareMapperDecl::from(const ValueDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPDeclareMapperDecl> OMPDeclareMapperDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<OMPDeclareMapperDecl> OMPDeclareMapperDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OMP_DECLARE_MAPPER:
      return reinterpret_cast<const OMPDeclareMapperDecl &>(parent);
    default: return std::nullopt;
  }
}

Expr OMPDeclareMapperDecl::mapper_variable_reference(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal57());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

std::vector<Decl> OMPDeclareMapperDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

UsingShadowDeclContainingDeclRange UsingShadowDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

UsingShadowDeclContainingDeclRange UsingShadowDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool UsingShadowDecl::contains(const Decl &decl) {
  for(auto &parent : UsingShadowDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UsingShadowDecl::contains(const Stmt &stmt) {
  for(auto &parent : UsingShadowDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UsingShadowDecl> UsingShadowDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<UsingShadowDecl> UsingShadowDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<UsingShadowDecl> UsingShadowDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::USING_SHADOW:
    case mx::DeclKind::CONSTRUCTOR_USING_SHADOW:
      return reinterpret_cast<const UsingShadowDecl &>(parent);
    default: return std::nullopt;
  }
}

BaseUsingDecl UsingShadowDecl::introducer(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal56());
  return BaseUsingDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::optional<UsingShadowDecl> UsingShadowDecl::next_using_shadow_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal73()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal57());
    return UsingShadowDecl::from(fragment->DeclFor(fragment, id));
  }
}

NamedDecl UsingShadowDecl::target_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal58());
  return NamedDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ConstructorUsingShadowDeclContainingDeclRange ConstructorUsingShadowDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ConstructorUsingShadowDeclContainingDeclRange ConstructorUsingShadowDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ConstructorUsingShadowDecl::contains(const Decl &decl) {
  for(auto &parent : ConstructorUsingShadowDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ConstructorUsingShadowDecl::contains(const Stmt &stmt) {
  for(auto &parent : ConstructorUsingShadowDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ConstructorUsingShadowDecl> ConstructorUsingShadowDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ConstructorUsingShadowDecl> ConstructorUsingShadowDecl::from(const UsingShadowDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ConstructorUsingShadowDecl> ConstructorUsingShadowDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ConstructorUsingShadowDecl> ConstructorUsingShadowDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CONSTRUCTOR_USING_SHADOW:
      return reinterpret_cast<const ConstructorUsingShadowDecl &>(parent);
    default: return std::nullopt;
  }
}

bool ConstructorUsingShadowDecl::constructs_virtual_base(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal74();
}

CXXRecordDecl ConstructorUsingShadowDecl::constructed_base_class(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal66());
  return CXXRecordDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::optional<ConstructorUsingShadowDecl> ConstructorUsingShadowDecl::constructed_base_class_shadow_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal75()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal67());
    return ConstructorUsingShadowDecl::from(fragment->DeclFor(fragment, id));
  }
}

CXXRecordDecl ConstructorUsingShadowDecl::nominated_base_class(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal68());
  return CXXRecordDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::optional<ConstructorUsingShadowDecl> ConstructorUsingShadowDecl::nominated_base_class_shadow_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal80()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal76());
    return ConstructorUsingShadowDecl::from(fragment->DeclFor(fragment, id));
  }
}

UsingPackDeclContainingDeclRange UsingPackDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

UsingPackDeclContainingDeclRange UsingPackDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool UsingPackDecl::contains(const Decl &decl) {
  for(auto &parent : UsingPackDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UsingPackDecl::contains(const Stmt &stmt) {
  for(auto &parent : UsingPackDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UsingPackDecl> UsingPackDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<UsingPackDecl> UsingPackDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<UsingPackDecl> UsingPackDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::USING_PACK:
      return reinterpret_cast<const UsingPackDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<NamedDecl> UsingPackDecl::expansions(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<NamedDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d50 = fragment->DeclFor(fragment, id)) {
      if (auto e = NamedDecl::from(d50.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

NamedDecl UsingPackDecl::instantiated_from_using_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal56());
  return NamedDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

UsingDirectiveDeclContainingDeclRange UsingDirectiveDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

UsingDirectiveDeclContainingDeclRange UsingDirectiveDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool UsingDirectiveDecl::contains(const Decl &decl) {
  for(auto &parent : UsingDirectiveDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UsingDirectiveDecl::contains(const Stmt &stmt) {
  for(auto &parent : UsingDirectiveDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UsingDirectiveDecl> UsingDirectiveDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<UsingDirectiveDecl> UsingDirectiveDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<UsingDirectiveDecl> UsingDirectiveDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::USING_DIRECTIVE:
      return reinterpret_cast<const UsingDirectiveDecl &>(parent);
    default: return std::nullopt;
  }
}

Token UsingDirectiveDecl::identifier_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal56())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token UsingDirectiveDecl::namespace_key_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal57())) {
    return tok.value();
  } else {
    return Token();
  }
}

NamedDecl UsingDirectiveDecl::nominated_namespace_as_written(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal58());
  return NamedDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token UsingDirectiveDecl::using_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal66())) {
    return tok.value();
  } else {
    return Token();
  }
}

UnresolvedUsingIfExistsDeclContainingDeclRange UnresolvedUsingIfExistsDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

UnresolvedUsingIfExistsDeclContainingDeclRange UnresolvedUsingIfExistsDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool UnresolvedUsingIfExistsDecl::contains(const Decl &decl) {
  for(auto &parent : UnresolvedUsingIfExistsDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UnresolvedUsingIfExistsDecl::contains(const Stmt &stmt) {
  for(auto &parent : UnresolvedUsingIfExistsDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UnresolvedUsingIfExistsDecl> UnresolvedUsingIfExistsDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<UnresolvedUsingIfExistsDecl> UnresolvedUsingIfExistsDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<UnresolvedUsingIfExistsDecl> UnresolvedUsingIfExistsDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::UNRESOLVED_USING_IF_EXISTS:
      return reinterpret_cast<const UnresolvedUsingIfExistsDecl &>(parent);
    default: return std::nullopt;
  }
}

TypeDeclContainingDeclRange TypeDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

TypeDeclContainingDeclRange TypeDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool TypeDecl::contains(const Decl &decl) {
  for(auto &parent : TypeDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TypeDecl::contains(const Stmt &stmt) {
  for(auto &parent : TypeDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TypeDecl> TypeDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<TypeDecl> TypeDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TypeDecl> TypeDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::TYPE:
    case mx::DeclKind::TEMPLATE_TYPE_PARM:
    case mx::DeclKind::TAG:
    case mx::DeclKind::RECORD:
    case mx::DeclKind::CXX_RECORD:
    case mx::DeclKind::CLASS_TEMPLATE_SPECIALIZATION:
    case mx::DeclKind::CLASS_TEMPLATE_PARTIAL_SPECIALIZATION:
    case mx::DeclKind::ENUM:
    case mx::DeclKind::UNRESOLVED_USING_TYPENAME:
    case mx::DeclKind::TYPEDEF_NAME:
    case mx::DeclKind::TYPEDEF:
    case mx::DeclKind::TYPE_ALIAS:
    case mx::DeclKind::OBJ_C_TYPE_PARAM:
      return reinterpret_cast<const TypeDecl &>(parent);
    default: return std::nullopt;
  }
}

std::optional<Type> TypeDecl::type_for_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal73()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal56());
    return fragment->TypeFor(fragment, id);
  }
}

TemplateTypeParmDeclContainingDeclRange TemplateTypeParmDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

TemplateTypeParmDeclContainingDeclRange TemplateTypeParmDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool TemplateTypeParmDecl::contains(const Decl &decl) {
  for(auto &parent : TemplateTypeParmDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TemplateTypeParmDecl::contains(const Stmt &stmt) {
  for(auto &parent : TemplateTypeParmDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TemplateTypeParmDecl> TemplateTypeParmDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<TemplateTypeParmDecl> TemplateTypeParmDecl::from(const TypeDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TemplateTypeParmDecl> TemplateTypeParmDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TemplateTypeParmDecl> TemplateTypeParmDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::TEMPLATE_TYPE_PARM:
      return reinterpret_cast<const TemplateTypeParmDecl &>(parent);
    default: return std::nullopt;
  }
}

bool TemplateTypeParmDecl::default_argument_was_inherited(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal74();
}

std::optional<Type> TemplateTypeParmDecl::default_argument(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal75()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal57());
    return fragment->TypeFor(fragment, id);
  }
}

std::optional<Type> TemplateTypeParmDecl::default_argument_info(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal80()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal58());
    return fragment->TypeFor(fragment, id);
  }
}

Token TemplateTypeParmDecl::default_argument_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal66())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool TemplateTypeParmDecl::has_default_argument(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal82();
}

bool TemplateTypeParmDecl::has_type_constraint(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal84();
}

bool TemplateTypeParmDecl::is_expanded_parameter_pack(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal92();
}

bool TemplateTypeParmDecl::is_pack_expansion(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal95();
}

bool TemplateTypeParmDecl::was_declared_with_typename(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal96();
}

TagDeclContainingDeclRange TagDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

TagDeclContainingDeclRange TagDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool TagDecl::contains(const Decl &decl) {
  for(auto &parent : TagDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TagDecl::contains(const Stmt &stmt) {
  for(auto &parent : TagDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TagDecl> TagDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<TagDecl> TagDecl::from(const TypeDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TagDecl> TagDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TagDecl> TagDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::TAG:
    case mx::DeclKind::RECORD:
    case mx::DeclKind::CXX_RECORD:
    case mx::DeclKind::CLASS_TEMPLATE_SPECIALIZATION:
    case mx::DeclKind::CLASS_TEMPLATE_PARTIAL_SPECIALIZATION:
    case mx::DeclKind::ENUM:
      return reinterpret_cast<const TagDecl &>(parent);
    default: return std::nullopt;
  }
}

TokenRange TagDecl::brace_range(void) const {
  auto self = fragment->NthDecl(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal57(), self.getVal58());
}

Token TagDecl::first_inner_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal66())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token TagDecl::first_outer_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal67())) {
    return tok.value();
  } else {
    return Token();
  }
}

TagTypeKind TagDecl::tag_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<TagTypeKind>(self.getVal77());
}

std::optional<TypedefNameDecl> TagDecl::typedef_name_for_anonymous_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal74()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal68());
    return TypedefNameDecl::from(fragment->DeclFor(fragment, id));
  }
}

bool TagDecl::has_name_for_linkage(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal75();
}

bool TagDecl::is_being_defined(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal80();
}

bool TagDecl::is_class(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal82();
}

bool TagDecl::is_complete_definition(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal84();
}

bool TagDecl::is_complete_definition_required(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal92();
}

bool TagDecl::is_dependent_type(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal95();
}

bool TagDecl::is_embedded_in_declarator(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal96();
}

bool TagDecl::is_enum(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal97();
}

bool TagDecl::is_free_standing(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal98();
}

bool TagDecl::is_interface(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal99();
}

bool TagDecl::is_struct(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal100();
}

bool TagDecl::is_union(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal101();
}

bool TagDecl::may_have_out_of_date_definition(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal102();
}

std::vector<TemplateParameterList> TagDecl::template_parameter_lists(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal78();
  std::vector<TemplateParameterList> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

std::vector<Decl> TagDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

RecordDeclContainingDeclRange RecordDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

RecordDeclContainingDeclRange RecordDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool RecordDecl::contains(const Decl &decl) {
  for(auto &parent : RecordDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool RecordDecl::contains(const Stmt &stmt) {
  for(auto &parent : RecordDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<RecordDecl> RecordDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<RecordDecl> RecordDecl::from(const TagDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<RecordDecl> RecordDecl::from(const TypeDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<RecordDecl> RecordDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<RecordDecl> RecordDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::RECORD:
    case mx::DeclKind::CXX_RECORD:
    case mx::DeclKind::CLASS_TEMPLATE_SPECIALIZATION:
    case mx::DeclKind::CLASS_TEMPLATE_PARTIAL_SPECIALIZATION:
      return reinterpret_cast<const RecordDecl &>(parent);
    default: return std::nullopt;
  }
}

bool RecordDecl::can_pass_in_registers(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal103();
}

std::vector<FieldDecl> RecordDecl::fields(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal51();
  std::vector<FieldDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d51 = fragment->DeclFor(fragment, id)) {
      if (auto e = FieldDecl::from(d51.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

RecordDeclArgPassingKind RecordDecl::argument_passing_restrictions(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<RecordDeclArgPassingKind>(self.getVal85());
}

bool RecordDecl::has_flexible_array_member(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal104();
}

bool RecordDecl::has_loaded_fields_from_external_storage(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal105();
}

bool RecordDecl::has_non_trivial_to_primitive_copy_c_union(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal106();
}

bool RecordDecl::has_non_trivial_to_primitive_default_initialize_c_union(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal107();
}

bool RecordDecl::has_non_trivial_to_primitive_destruct_c_union(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal108();
}

bool RecordDecl::has_object_member(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal109();
}

bool RecordDecl::has_volatile_member(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal110();
}

bool RecordDecl::is_anonymous_struct_or_union(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal111();
}

bool RecordDecl::is_captured_record(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal112();
}

bool RecordDecl::is_injected_class_name(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal113();
}

bool RecordDecl::is_lambda(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal114();
}

bool RecordDecl::is_ms_struct(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal115();
}

bool RecordDecl::is_non_trivial_to_primitive_copy(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal116();
}

bool RecordDecl::is_non_trivial_to_primitive_default_initialize(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal117();
}

bool RecordDecl::is_non_trivial_to_primitive_destroy(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal118();
}

bool RecordDecl::is_or_contains_union(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal119();
}

bool RecordDecl::is_parameter_destroyed_in_callee(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal120();
}

bool RecordDecl::may_insert_extra_padding(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal121();
}

CXXRecordDeclContainingDeclRange CXXRecordDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

CXXRecordDeclContainingDeclRange CXXRecordDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool CXXRecordDecl::contains(const Decl &decl) {
  for(auto &parent : CXXRecordDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool CXXRecordDecl::contains(const Stmt &stmt) {
  for(auto &parent : CXXRecordDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<CXXRecordDecl> CXXRecordDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<CXXRecordDecl> CXXRecordDecl::from(const RecordDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXRecordDecl> CXXRecordDecl::from(const TagDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXRecordDecl> CXXRecordDecl::from(const TypeDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXRecordDecl> CXXRecordDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<CXXRecordDecl> CXXRecordDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CXX_RECORD:
    case mx::DeclKind::CLASS_TEMPLATE_SPECIALIZATION:
    case mx::DeclKind::CLASS_TEMPLATE_PARTIAL_SPECIALIZATION:
      return reinterpret_cast<const CXXRecordDecl &>(parent);
    default: return std::nullopt;
  }
}

std::optional<bool> CXXRecordDecl::allow_const_default_initializer(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal123()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal122());
  }
}

std::optional<std::vector<CXXBaseSpecifier>> CXXRecordDecl::bases(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal124()) {
    return std::nullopt;
  }
  auto list = self.getVal146();
  std::vector<CXXBaseSpecifier> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

std::optional<MSInheritanceModel> CXXRecordDecl::calculate_inheritance_model(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal125()) {
    return std::nullopt;
  } else {
    return static_cast<MSInheritanceModel>(self.getVal87());
  }
}

std::vector<CXXConstructorDecl> CXXRecordDecl::constructors(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal62();
  std::vector<CXXConstructorDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d62 = fragment->DeclFor(fragment, id)) {
      if (auto e = CXXConstructorDecl::from(d62.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::optional<std::vector<FriendDecl>> CXXRecordDecl::friends(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal126()) {
    return std::nullopt;
  }
  auto list = self.getVal176();
  std::vector<FriendDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d176 = fragment->DeclFor(fragment, id)) {
      if (auto e = FriendDecl::from(d176.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::optional<CXXDestructorDecl> CXXRecordDecl::destructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal127()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal76());
    return CXXDestructorDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<TemplateParameterList> CXXRecordDecl::generic_lambda_template_parameter_list(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal128()) {
    return std::nullopt;
  } else {
    return TemplateParameterList(fragment, self.getVal148());
  }
}

std::optional<CXXRecordDecl> CXXRecordDecl::instantiated_from_member_class(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal129()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal79());
    return CXXRecordDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<CXXMethodDecl> CXXRecordDecl::lambda_call_operator(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal132()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal81());
    return CXXMethodDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<LambdaCaptureDefault> CXXRecordDecl::lambda_capture_default(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal138()) {
    return std::nullopt;
  } else {
    return static_cast<LambdaCaptureDefault>(self.getVal88());
  }
}

std::optional<Decl> CXXRecordDecl::lambda_context_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal139()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal83());
    return fragment->DeclFor(fragment, id);
  }
}

std::optional<std::vector<NamedDecl>> CXXRecordDecl::lambda_explicit_template_parameters(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal140()) {
    return std::nullopt;
  }
  auto list = self.getVal185();
  std::vector<NamedDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d185 = fragment->DeclFor(fragment, id)) {
      if (auto e = NamedDecl::from(d185.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::optional<unsigned> CXXRecordDecl::lambda_mangling_number(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal141()) {
    return std::nullopt;
  } else {
    return static_cast<unsigned>(self.getVal186());
  }
}

std::optional<Type> CXXRecordDecl::lambda_type(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal142()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal86());
    return fragment->TypeFor(fragment, id);
  }
}

std::optional<MSInheritanceModel> CXXRecordDecl::ms_inheritance_model(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal143()) {
    return std::nullopt;
  } else {
    return static_cast<MSInheritanceModel>(self.getVal89());
  }
}

MSVtorDispMode CXXRecordDecl::ms_vtor_disp_mode(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<MSVtorDispMode>(self.getVal90());
}

std::optional<unsigned> CXXRecordDecl::num_bases(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal144()) {
    return std::nullopt;
  } else {
    return static_cast<unsigned>(self.getVal187());
  }
}

std::optional<unsigned> CXXRecordDecl::num_virtual_bases(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal145()) {
    return std::nullopt;
  } else {
    return static_cast<unsigned>(self.getVal188());
  }
}

std::optional<unsigned> CXXRecordDecl::odr_hash(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal151()) {
    return std::nullopt;
  } else {
    return static_cast<unsigned>(self.getVal189());
  }
}

std::optional<CXXRecordDecl> CXXRecordDecl::template_instantiation_pattern(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal152()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal91());
    return CXXRecordDecl::from(fragment->DeclFor(fragment, id));
  }
}

TemplateSpecializationKind CXXRecordDecl::template_specialization_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<TemplateSpecializationKind>(self.getVal93());
}

std::optional<bool> CXXRecordDecl::has_any_dependent_bases(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal154()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal153());
  }
}

std::optional<bool> CXXRecordDecl::has_constexpr_default_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal156()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal155());
  }
}

std::optional<bool> CXXRecordDecl::has_constexpr_destructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal158()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal157());
  }
}

std::optional<bool> CXXRecordDecl::has_constexpr_non_copy_move_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal160()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal159());
  }
}

std::optional<bool> CXXRecordDecl::has_copy_assignment_with_const_parameter(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal163()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal161());
  }
}

std::optional<bool> CXXRecordDecl::has_copy_constructor_with_const_parameter(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal167()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal165());
  }
}

std::optional<bool> CXXRecordDecl::has_default_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal169()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal168());
  }
}

std::optional<bool> CXXRecordDecl::has_definition(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal171()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal170());
  }
}

std::optional<bool> CXXRecordDecl::has_direct_fields(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal173()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal172());
  }
}

std::optional<bool> CXXRecordDecl::has_friends(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal175()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal174());
  }
}

std::optional<bool> CXXRecordDecl::has_in_class_initializer(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal180()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal178());
  }
}

std::optional<bool> CXXRecordDecl::has_inherited_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal182()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal181());
  }
}

std::optional<bool> CXXRecordDecl::has_inherited_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal184()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal183());
  }
}

std::optional<bool> CXXRecordDecl::has_initializer_method(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal191()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal190());
  }
}

std::optional<bool> CXXRecordDecl::has_irrelevant_destructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal193()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal192());
  }
}

std::optional<bool> CXXRecordDecl::has_known_lambda_internal_linkage(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal195()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal194());
  }
}

std::optional<bool> CXXRecordDecl::has_move_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal197()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal196());
  }
}

std::optional<bool> CXXRecordDecl::has_move_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal199()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal198());
  }
}

std::optional<bool> CXXRecordDecl::has_mutable_fields(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal201()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal200());
  }
}

std::optional<bool> CXXRecordDecl::has_non_literal_type_fields_or_bases(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal203()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal202());
  }
}

std::optional<bool> CXXRecordDecl::has_non_trivial_copy_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal205()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal204());
  }
}

std::optional<bool> CXXRecordDecl::has_non_trivial_copy_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal207()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal206());
  }
}

std::optional<bool> CXXRecordDecl::has_non_trivial_copy_constructor_for_call(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal209()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal208());
  }
}

std::optional<bool> CXXRecordDecl::has_non_trivial_default_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal211()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal210());
  }
}

std::optional<bool> CXXRecordDecl::has_non_trivial_destructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal213()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal212());
  }
}

std::optional<bool> CXXRecordDecl::has_non_trivial_destructor_for_call(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal215()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal214());
  }
}

std::optional<bool> CXXRecordDecl::has_non_trivial_move_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal217()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal216());
  }
}

std::optional<bool> CXXRecordDecl::has_non_trivial_move_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal219()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal218());
  }
}

std::optional<bool> CXXRecordDecl::has_non_trivial_move_constructor_for_call(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal221()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal220());
  }
}

std::optional<bool> CXXRecordDecl::has_private_fields(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal223()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal222());
  }
}

std::optional<bool> CXXRecordDecl::has_protected_fields(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal225()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal224());
  }
}

std::optional<bool> CXXRecordDecl::has_simple_copy_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal227()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal226());
  }
}

std::optional<bool> CXXRecordDecl::has_simple_copy_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal229()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal228());
  }
}

std::optional<bool> CXXRecordDecl::has_simple_destructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal231()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal230());
  }
}

std::optional<bool> CXXRecordDecl::has_simple_move_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal233()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal232());
  }
}

std::optional<bool> CXXRecordDecl::has_simple_move_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal235()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal234());
  }
}

std::optional<bool> CXXRecordDecl::has_trivial_copy_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal237()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal236());
  }
}

std::optional<bool> CXXRecordDecl::has_trivial_copy_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal239()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal238());
  }
}

std::optional<bool> CXXRecordDecl::has_trivial_copy_constructor_for_call(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal241()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal240());
  }
}

std::optional<bool> CXXRecordDecl::has_trivial_default_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal243()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal242());
  }
}

std::optional<bool> CXXRecordDecl::has_trivial_destructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal245()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal244());
  }
}

std::optional<bool> CXXRecordDecl::has_trivial_destructor_for_call(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal247()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal246());
  }
}

std::optional<bool> CXXRecordDecl::has_trivial_move_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal249()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal248());
  }
}

std::optional<bool> CXXRecordDecl::has_trivial_move_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal251()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal250());
  }
}

std::optional<bool> CXXRecordDecl::has_trivial_move_constructor_for_call(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal253()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal252());
  }
}

std::optional<bool> CXXRecordDecl::has_uninitialized_reference_member(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal255()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal254());
  }
}

std::optional<bool> CXXRecordDecl::has_user_declared_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal257()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal256());
  }
}

std::optional<bool> CXXRecordDecl::has_user_declared_copy_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal259()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal258());
  }
}

std::optional<bool> CXXRecordDecl::has_user_declared_copy_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal261()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal260());
  }
}

std::optional<bool> CXXRecordDecl::has_user_declared_destructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal263()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal262());
  }
}

std::optional<bool> CXXRecordDecl::has_user_declared_move_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal265()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal264());
  }
}

std::optional<bool> CXXRecordDecl::has_user_declared_move_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal267()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal266());
  }
}

std::optional<bool> CXXRecordDecl::has_user_declared_move_operation(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal269()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal268());
  }
}

std::optional<bool> CXXRecordDecl::has_user_provided_default_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal271()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal270());
  }
}

std::optional<bool> CXXRecordDecl::has_variant_members(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal273()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal272());
  }
}

std::optional<bool> CXXRecordDecl::implicit_copy_assignment_has_const_parameter(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal275()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal274());
  }
}

std::optional<bool> CXXRecordDecl::implicit_copy_constructor_has_const_parameter(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal277()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal276());
  }
}

std::optional<bool> CXXRecordDecl::is_abstract(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal279()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal278());
  }
}

std::optional<bool> CXXRecordDecl::is_aggregate(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal281()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal280());
  }
}

std::optional<bool> CXXRecordDecl::is_any_destructor_no_return(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal283()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal282());
  }
}

std::optional<bool> CXXRecordDecl::is_c_like(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal285()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal284());
  }
}

std::optional<bool> CXXRecordDecl::is_cxx11_standard_layout(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal287()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal286());
  }
}

bool CXXRecordDecl::is_dependent_lambda(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal288();
}

std::optional<bool> CXXRecordDecl::is_dynamic_class(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal290()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal289());
  }
}

std::optional<bool> CXXRecordDecl::is_effectively_final(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal292()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal291());
  }
}

std::optional<bool> CXXRecordDecl::is_empty(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal294()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal293());
  }
}

bool CXXRecordDecl::is_generic_lambda(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal295();
}

std::optional<bool> CXXRecordDecl::is_interface_like(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal297()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal296());
  }
}

std::optional<bool> CXXRecordDecl::is_literal(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal299()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal298());
  }
}

std::optional<FunctionDecl> CXXRecordDecl::is_local_class(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal300()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal131());
    return FunctionDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<bool> CXXRecordDecl::is_pod(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal302()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal301());
  }
}

std::optional<bool> CXXRecordDecl::is_polymorphic(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal304()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal303());
  }
}

std::optional<bool> CXXRecordDecl::is_standard_layout(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal306()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal305());
  }
}

std::optional<bool> CXXRecordDecl::is_structural(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal308()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal307());
  }
}

std::optional<bool> CXXRecordDecl::is_trivial(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal310()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal309());
  }
}

std::optional<bool> CXXRecordDecl::is_trivially_copyable(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal312()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal311());
  }
}

std::optional<bool> CXXRecordDecl::lambda_is_default_constructible_and_assignable(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal314()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal313());
  }
}

std::optional<bool> CXXRecordDecl::may_be_abstract(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal316()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal315());
  }
}

std::optional<bool> CXXRecordDecl::may_be_dynamic_class(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal318()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal317());
  }
}

std::optional<bool> CXXRecordDecl::may_be_non_dynamic_class(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal320()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal319());
  }
}

std::optional<std::vector<CXXMethodDecl>> CXXRecordDecl::methods(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal322()) {
    return std::nullopt;
  }
  auto list = self.getVal321();
  std::vector<CXXMethodDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d321 = fragment->DeclFor(fragment, id)) {
      if (auto e = CXXMethodDecl::from(d321.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::optional<bool> CXXRecordDecl::needs_implicit_copy_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal324()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal323());
  }
}

std::optional<bool> CXXRecordDecl::needs_implicit_copy_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal326()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal325());
  }
}

std::optional<bool> CXXRecordDecl::needs_implicit_default_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal328()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal327());
  }
}

std::optional<bool> CXXRecordDecl::needs_implicit_destructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal330()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal329());
  }
}

std::optional<bool> CXXRecordDecl::needs_implicit_move_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal332()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal331());
  }
}

std::optional<bool> CXXRecordDecl::needs_implicit_move_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal334()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal333());
  }
}

std::optional<bool> CXXRecordDecl::needs_overload_resolution_for_copy_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal336()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal335());
  }
}

std::optional<bool> CXXRecordDecl::needs_overload_resolution_for_copy_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal338()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal337());
  }
}

std::optional<bool> CXXRecordDecl::needs_overload_resolution_for_destructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal340()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal339());
  }
}

std::optional<bool> CXXRecordDecl::needs_overload_resolution_for_move_assignment(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal342()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal341());
  }
}

std::optional<bool> CXXRecordDecl::needs_overload_resolution_for_move_constructor(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal344()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal343());
  }
}

std::optional<bool> CXXRecordDecl::null_field_offset_is_zero(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal346()) {
    return std::nullopt;
  } else {
    return static_cast<bool>(self.getVal345());
  }
}

std::optional<std::vector<CXXBaseSpecifier>> CXXRecordDecl::virtual_bases(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal347()) {
    return std::nullopt;
  }
  auto list = self.getVal147();
  std::vector<CXXBaseSpecifier> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

ClassTemplateSpecializationDeclContainingDeclRange ClassTemplateSpecializationDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ClassTemplateSpecializationDeclContainingDeclRange ClassTemplateSpecializationDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ClassTemplateSpecializationDecl::contains(const Decl &decl) {
  for(auto &parent : ClassTemplateSpecializationDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ClassTemplateSpecializationDecl::contains(const Stmt &stmt) {
  for(auto &parent : ClassTemplateSpecializationDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ClassTemplateSpecializationDecl> ClassTemplateSpecializationDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ClassTemplateSpecializationDecl> ClassTemplateSpecializationDecl::from(const CXXRecordDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplateSpecializationDecl> ClassTemplateSpecializationDecl::from(const RecordDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplateSpecializationDecl> ClassTemplateSpecializationDecl::from(const TagDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplateSpecializationDecl> ClassTemplateSpecializationDecl::from(const TypeDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplateSpecializationDecl> ClassTemplateSpecializationDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplateSpecializationDecl> ClassTemplateSpecializationDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CLASS_TEMPLATE_SPECIALIZATION:
    case mx::DeclKind::CLASS_TEMPLATE_PARTIAL_SPECIALIZATION:
      return reinterpret_cast<const ClassTemplateSpecializationDecl &>(parent);
    default: return std::nullopt;
  }
}

Token ClassTemplateSpecializationDecl::extern_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal133())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ClassTemplateSpecializationDecl::point_of_instantiation(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal134())) {
    return tok.value();
  } else {
    return Token();
  }
}

TemplateSpecializationKind ClassTemplateSpecializationDecl::specialization_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<TemplateSpecializationKind>(self.getVal94());
}

std::vector<TemplateArgument> ClassTemplateSpecializationDecl::template_arguments(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal348();
  std::vector<TemplateArgument> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

std::vector<TemplateArgument> ClassTemplateSpecializationDecl::template_instantiation_arguments(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal349();
  std::vector<TemplateArgument> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

Token ClassTemplateSpecializationDecl::template_keyword_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal136())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<Type> ClassTemplateSpecializationDecl::type_as_written(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal350()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal137());
    return fragment->TypeFor(fragment, id);
  }
}

bool ClassTemplateSpecializationDecl::is_class_scope_explicit_specialization(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal351();
}

bool ClassTemplateSpecializationDecl::is_explicit_instantiation_or_specialization(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal352();
}

bool ClassTemplateSpecializationDecl::is_explicit_specialization(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal353();
}

ClassTemplatePartialSpecializationDeclContainingDeclRange ClassTemplatePartialSpecializationDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ClassTemplatePartialSpecializationDeclContainingDeclRange ClassTemplatePartialSpecializationDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ClassTemplatePartialSpecializationDecl::contains(const Decl &decl) {
  for(auto &parent : ClassTemplatePartialSpecializationDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ClassTemplatePartialSpecializationDecl::contains(const Stmt &stmt) {
  for(auto &parent : ClassTemplatePartialSpecializationDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ClassTemplatePartialSpecializationDecl> ClassTemplatePartialSpecializationDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ClassTemplatePartialSpecializationDecl> ClassTemplatePartialSpecializationDecl::from(const ClassTemplateSpecializationDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplatePartialSpecializationDecl> ClassTemplatePartialSpecializationDecl::from(const CXXRecordDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplatePartialSpecializationDecl> ClassTemplatePartialSpecializationDecl::from(const RecordDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplatePartialSpecializationDecl> ClassTemplatePartialSpecializationDecl::from(const TagDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplatePartialSpecializationDecl> ClassTemplatePartialSpecializationDecl::from(const TypeDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplatePartialSpecializationDecl> ClassTemplatePartialSpecializationDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplatePartialSpecializationDecl> ClassTemplatePartialSpecializationDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CLASS_TEMPLATE_PARTIAL_SPECIALIZATION:
      return reinterpret_cast<const ClassTemplatePartialSpecializationDecl &>(parent);
    default: return std::nullopt;
  }
}

EnumDeclContainingDeclRange EnumDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

EnumDeclContainingDeclRange EnumDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool EnumDecl::contains(const Decl &decl) {
  for(auto &parent : EnumDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool EnumDecl::contains(const Stmt &stmt) {
  for(auto &parent : EnumDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<EnumDecl> EnumDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<EnumDecl> EnumDecl::from(const TagDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<EnumDecl> EnumDecl::from(const TypeDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<EnumDecl> EnumDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<EnumDecl> EnumDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::ENUM:
      return reinterpret_cast<const EnumDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<EnumConstantDecl> EnumDecl::enumerators(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal51();
  std::vector<EnumConstantDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d51 = fragment->DeclFor(fragment, id)) {
      if (auto e = EnumConstantDecl::from(d51.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::optional<EnumDecl> EnumDecl::instantiated_from_member_enum(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal103()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal76());
    return EnumDecl::from(fragment->DeclFor(fragment, id));
  }
}

std::optional<Type> EnumDecl::integer_type(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal104()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal79());
    return fragment->TypeFor(fragment, id);
  }
}

TokenRange EnumDecl::integer_type_range(void) const {
  auto self = fragment->NthDecl(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal81(), self.getVal83());
}

std::optional<unsigned> EnumDecl::odr_hash(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal105()) {
    return std::nullopt;
  } else {
    return static_cast<unsigned>(self.getVal148());
  }
}

std::optional<Type> EnumDecl::promotion_type(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal106()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal86());
    return fragment->TypeFor(fragment, id);
  }
}

std::optional<EnumDecl> EnumDecl::template_instantiation_pattern(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal107()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal91());
    return EnumDecl::from(fragment->DeclFor(fragment, id));
  }
}

TemplateSpecializationKind EnumDecl::template_specialization_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<TemplateSpecializationKind>(self.getVal85());
}

bool EnumDecl::is_closed(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal108();
}

bool EnumDecl::is_closed_flag(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal109();
}

bool EnumDecl::is_closed_non_flag(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal110();
}

bool EnumDecl::is_complete(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal111();
}

bool EnumDecl::is_fixed(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal112();
}

bool EnumDecl::is_scoped(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal113();
}

bool EnumDecl::is_scoped_using_class_tag(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal114();
}

UnresolvedUsingTypenameDeclContainingDeclRange UnresolvedUsingTypenameDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

UnresolvedUsingTypenameDeclContainingDeclRange UnresolvedUsingTypenameDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool UnresolvedUsingTypenameDecl::contains(const Decl &decl) {
  for(auto &parent : UnresolvedUsingTypenameDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool UnresolvedUsingTypenameDecl::contains(const Stmt &stmt) {
  for(auto &parent : UnresolvedUsingTypenameDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<UnresolvedUsingTypenameDecl> UnresolvedUsingTypenameDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<UnresolvedUsingTypenameDecl> UnresolvedUsingTypenameDecl::from(const TypeDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<UnresolvedUsingTypenameDecl> UnresolvedUsingTypenameDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<UnresolvedUsingTypenameDecl> UnresolvedUsingTypenameDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::UNRESOLVED_USING_TYPENAME:
      return reinterpret_cast<const UnresolvedUsingTypenameDecl &>(parent);
    default: return std::nullopt;
  }
}

Token UnresolvedUsingTypenameDecl::ellipsis_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal57())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token UnresolvedUsingTypenameDecl::typename_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal58())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token UnresolvedUsingTypenameDecl::using_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal66())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool UnresolvedUsingTypenameDecl::is_pack_expansion(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal74();
}

TypedefNameDeclContainingDeclRange TypedefNameDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

TypedefNameDeclContainingDeclRange TypedefNameDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool TypedefNameDecl::contains(const Decl &decl) {
  for(auto &parent : TypedefNameDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TypedefNameDecl::contains(const Stmt &stmt) {
  for(auto &parent : TypedefNameDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TypedefNameDecl> TypedefNameDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<TypedefNameDecl> TypedefNameDecl::from(const TypeDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TypedefNameDecl> TypedefNameDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TypedefNameDecl> TypedefNameDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::TYPEDEF_NAME:
    case mx::DeclKind::TYPEDEF:
    case mx::DeclKind::TYPE_ALIAS:
    case mx::DeclKind::OBJ_C_TYPE_PARAM:
      return reinterpret_cast<const TypedefNameDecl &>(parent);
    default: return std::nullopt;
  }
}

std::optional<TagDecl> TypedefNameDecl::anonymous_declaration_with_typedef_name(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal74()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal57());
    return TagDecl::from(fragment->DeclFor(fragment, id));
  }
}

Type TypedefNameDecl::underlying_type(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal58());
  return fragment->TypeFor(fragment, id, false).value();
}

bool TypedefNameDecl::is_moded(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal75();
}

bool TypedefNameDecl::is_transparent_tag(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal80();
}

TypedefDeclContainingDeclRange TypedefDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

TypedefDeclContainingDeclRange TypedefDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool TypedefDecl::contains(const Decl &decl) {
  for(auto &parent : TypedefDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TypedefDecl::contains(const Stmt &stmt) {
  for(auto &parent : TypedefDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TypedefDecl> TypedefDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<TypedefDecl> TypedefDecl::from(const TypedefNameDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TypedefDecl> TypedefDecl::from(const TypeDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TypedefDecl> TypedefDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TypedefDecl> TypedefDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::TYPEDEF:
      return reinterpret_cast<const TypedefDecl &>(parent);
    default: return std::nullopt;
  }
}

TypeAliasDeclContainingDeclRange TypeAliasDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

TypeAliasDeclContainingDeclRange TypeAliasDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool TypeAliasDecl::contains(const Decl &decl) {
  for(auto &parent : TypeAliasDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TypeAliasDecl::contains(const Stmt &stmt) {
  for(auto &parent : TypeAliasDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TypeAliasDecl> TypeAliasDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<TypeAliasDecl> TypeAliasDecl::from(const TypedefNameDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TypeAliasDecl> TypeAliasDecl::from(const TypeDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TypeAliasDecl> TypeAliasDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TypeAliasDecl> TypeAliasDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::TYPE_ALIAS:
      return reinterpret_cast<const TypeAliasDecl &>(parent);
    default: return std::nullopt;
  }
}

std::optional<TypeAliasTemplateDecl> TypeAliasDecl::described_alias_template(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal82()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal66());
    return TypeAliasTemplateDecl::from(fragment->DeclFor(fragment, id));
  }
}

ObjCTypeParamDeclContainingDeclRange ObjCTypeParamDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCTypeParamDeclContainingDeclRange ObjCTypeParamDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCTypeParamDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCTypeParamDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCTypeParamDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCTypeParamDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCTypeParamDecl> ObjCTypeParamDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCTypeParamDecl> ObjCTypeParamDecl::from(const TypedefNameDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCTypeParamDecl> ObjCTypeParamDecl::from(const TypeDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCTypeParamDecl> ObjCTypeParamDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCTypeParamDecl> ObjCTypeParamDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_TYPE_PARAM:
      return reinterpret_cast<const ObjCTypeParamDecl &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCTypeParamDecl::colon_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal66())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCTypeParamVariance ObjCTypeParamDecl::variance(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ObjCTypeParamVariance>(self.getVal77());
}

Token ObjCTypeParamDecl::variance_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal67())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool ObjCTypeParamDecl::has_explicit_bound(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal82();
}

TemplateDeclContainingDeclRange TemplateDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

TemplateDeclContainingDeclRange TemplateDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool TemplateDecl::contains(const Decl &decl) {
  for(auto &parent : TemplateDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TemplateDecl::contains(const Stmt &stmt) {
  for(auto &parent : TemplateDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TemplateDecl> TemplateDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<TemplateDecl> TemplateDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TemplateDecl> TemplateDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::TEMPLATE:
    case mx::DeclKind::REDECLARABLE_TEMPLATE:
    case mx::DeclKind::FUNCTION_TEMPLATE:
    case mx::DeclKind::CLASS_TEMPLATE:
    case mx::DeclKind::VAR_TEMPLATE:
    case mx::DeclKind::TYPE_ALIAS_TEMPLATE:
    case mx::DeclKind::CONCEPT:
    case mx::DeclKind::BUILTIN_TEMPLATE:
    case mx::DeclKind::TEMPLATE_TEMPLATE_PARM:
      return reinterpret_cast<const TemplateDecl &>(parent);
    default: return std::nullopt;
  }
}

RedeclarableTemplateDeclContainingDeclRange RedeclarableTemplateDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

RedeclarableTemplateDeclContainingDeclRange RedeclarableTemplateDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool RedeclarableTemplateDecl::contains(const Decl &decl) {
  for(auto &parent : RedeclarableTemplateDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool RedeclarableTemplateDecl::contains(const Stmt &stmt) {
  for(auto &parent : RedeclarableTemplateDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<RedeclarableTemplateDecl> RedeclarableTemplateDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<RedeclarableTemplateDecl> RedeclarableTemplateDecl::from(const TemplateDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<RedeclarableTemplateDecl> RedeclarableTemplateDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<RedeclarableTemplateDecl> RedeclarableTemplateDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::REDECLARABLE_TEMPLATE:
    case mx::DeclKind::FUNCTION_TEMPLATE:
    case mx::DeclKind::CLASS_TEMPLATE:
    case mx::DeclKind::VAR_TEMPLATE:
    case mx::DeclKind::TYPE_ALIAS_TEMPLATE:
      return reinterpret_cast<const RedeclarableTemplateDecl &>(parent);
    default: return std::nullopt;
  }
}

FunctionTemplateDeclContainingDeclRange FunctionTemplateDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

FunctionTemplateDeclContainingDeclRange FunctionTemplateDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool FunctionTemplateDecl::contains(const Decl &decl) {
  for(auto &parent : FunctionTemplateDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool FunctionTemplateDecl::contains(const Stmt &stmt) {
  for(auto &parent : FunctionTemplateDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<FunctionTemplateDecl> FunctionTemplateDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<FunctionTemplateDecl> FunctionTemplateDecl::from(const RedeclarableTemplateDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<FunctionTemplateDecl> FunctionTemplateDecl::from(const TemplateDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<FunctionTemplateDecl> FunctionTemplateDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<FunctionTemplateDecl> FunctionTemplateDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::FUNCTION_TEMPLATE:
      return reinterpret_cast<const FunctionTemplateDecl &>(parent);
    default: return std::nullopt;
  }
}

ClassTemplateDeclContainingDeclRange ClassTemplateDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ClassTemplateDeclContainingDeclRange ClassTemplateDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ClassTemplateDecl::contains(const Decl &decl) {
  for(auto &parent : ClassTemplateDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ClassTemplateDecl::contains(const Stmt &stmt) {
  for(auto &parent : ClassTemplateDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ClassTemplateDecl> ClassTemplateDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ClassTemplateDecl> ClassTemplateDecl::from(const RedeclarableTemplateDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplateDecl> ClassTemplateDecl::from(const TemplateDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplateDecl> ClassTemplateDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ClassTemplateDecl> ClassTemplateDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CLASS_TEMPLATE:
      return reinterpret_cast<const ClassTemplateDecl &>(parent);
    default: return std::nullopt;
  }
}

VarTemplateDeclContainingDeclRange VarTemplateDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

VarTemplateDeclContainingDeclRange VarTemplateDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool VarTemplateDecl::contains(const Decl &decl) {
  for(auto &parent : VarTemplateDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool VarTemplateDecl::contains(const Stmt &stmt) {
  for(auto &parent : VarTemplateDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<VarTemplateDecl> VarTemplateDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<VarTemplateDecl> VarTemplateDecl::from(const RedeclarableTemplateDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarTemplateDecl> VarTemplateDecl::from(const TemplateDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarTemplateDecl> VarTemplateDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<VarTemplateDecl> VarTemplateDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::VAR_TEMPLATE:
      return reinterpret_cast<const VarTemplateDecl &>(parent);
    default: return std::nullopt;
  }
}

TypeAliasTemplateDeclContainingDeclRange TypeAliasTemplateDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

TypeAliasTemplateDeclContainingDeclRange TypeAliasTemplateDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool TypeAliasTemplateDecl::contains(const Decl &decl) {
  for(auto &parent : TypeAliasTemplateDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TypeAliasTemplateDecl::contains(const Stmt &stmt) {
  for(auto &parent : TypeAliasTemplateDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TypeAliasTemplateDecl> TypeAliasTemplateDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<TypeAliasTemplateDecl> TypeAliasTemplateDecl::from(const RedeclarableTemplateDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TypeAliasTemplateDecl> TypeAliasTemplateDecl::from(const TemplateDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TypeAliasTemplateDecl> TypeAliasTemplateDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TypeAliasTemplateDecl> TypeAliasTemplateDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::TYPE_ALIAS_TEMPLATE:
      return reinterpret_cast<const TypeAliasTemplateDecl &>(parent);
    default: return std::nullopt;
  }
}

std::optional<TypeAliasTemplateDecl> TypeAliasTemplateDecl::instantiated_from_member_template(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal73()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal56());
    return TypeAliasTemplateDecl::from(fragment->DeclFor(fragment, id));
  }
}

TypeAliasDecl TypeAliasTemplateDecl::templated_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal57());
  return TypeAliasDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ConceptDeclContainingDeclRange ConceptDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ConceptDeclContainingDeclRange ConceptDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ConceptDecl::contains(const Decl &decl) {
  for(auto &parent : ConceptDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ConceptDecl::contains(const Stmt &stmt) {
  for(auto &parent : ConceptDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ConceptDecl> ConceptDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ConceptDecl> ConceptDecl::from(const TemplateDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ConceptDecl> ConceptDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ConceptDecl> ConceptDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::CONCEPT:
      return reinterpret_cast<const ConceptDecl &>(parent);
    default: return std::nullopt;
  }
}

Expr ConceptDecl::constraint_expression(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal56());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

bool ConceptDecl::is_type_concept(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal73();
}

BuiltinTemplateDeclContainingDeclRange BuiltinTemplateDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

BuiltinTemplateDeclContainingDeclRange BuiltinTemplateDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool BuiltinTemplateDecl::contains(const Decl &decl) {
  for(auto &parent : BuiltinTemplateDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool BuiltinTemplateDecl::contains(const Stmt &stmt) {
  for(auto &parent : BuiltinTemplateDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<BuiltinTemplateDecl> BuiltinTemplateDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<BuiltinTemplateDecl> BuiltinTemplateDecl::from(const TemplateDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<BuiltinTemplateDecl> BuiltinTemplateDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<BuiltinTemplateDecl> BuiltinTemplateDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::BUILTIN_TEMPLATE:
      return reinterpret_cast<const BuiltinTemplateDecl &>(parent);
    default: return std::nullopt;
  }
}

TemplateTemplateParmDeclContainingDeclRange TemplateTemplateParmDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

TemplateTemplateParmDeclContainingDeclRange TemplateTemplateParmDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool TemplateTemplateParmDecl::contains(const Decl &decl) {
  for(auto &parent : TemplateTemplateParmDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool TemplateTemplateParmDecl::contains(const Stmt &stmt) {
  for(auto &parent : TemplateTemplateParmDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<TemplateTemplateParmDecl> TemplateTemplateParmDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<TemplateTemplateParmDecl> TemplateTemplateParmDecl::from(const TemplateDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TemplateTemplateParmDecl> TemplateTemplateParmDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<TemplateTemplateParmDecl> TemplateTemplateParmDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::TEMPLATE_TEMPLATE_PARM:
      return reinterpret_cast<const TemplateTemplateParmDecl &>(parent);
    default: return std::nullopt;
  }
}

ObjCPropertyDeclContainingDeclRange ObjCPropertyDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCPropertyDeclContainingDeclRange ObjCPropertyDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCPropertyDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCPropertyDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCPropertyDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCPropertyDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCPropertyDecl> ObjCPropertyDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCPropertyDecl> ObjCPropertyDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCPropertyDecl> ObjCPropertyDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_PROPERTY:
      return reinterpret_cast<const ObjCPropertyDecl &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCPropertyDecl::at_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal56())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCMethodDecl ObjCPropertyDecl::getter_method_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal57());
  return ObjCMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token ObjCPropertyDecl::getter_name_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal58())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ObjCPropertyDecl::l_paren_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal66())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCPropertyDeclPropertyControl ObjCPropertyDecl::property_implementation(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ObjCPropertyDeclPropertyControl>(self.getVal77());
}

ObjCIvarDecl ObjCPropertyDecl::property_instance_variable_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal67());
  return ObjCIvarDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCPropertyQueryKind ObjCPropertyDecl::query_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ObjCPropertyQueryKind>(self.getVal85());
}

ObjCPropertyDeclSetterKind ObjCPropertyDecl::setter_kind(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ObjCPropertyDeclSetterKind>(self.getVal87());
}

ObjCMethodDecl ObjCPropertyDecl::setter_method_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal68());
  return ObjCMethodDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token ObjCPropertyDecl::setter_name_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal76())) {
    return tok.value();
  } else {
    return Token();
  }
}

Type ObjCPropertyDecl::type(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal79());
  return fragment->TypeFor(fragment, id, false).value();
}

bool ObjCPropertyDecl::is_atomic(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal73();
}

bool ObjCPropertyDecl::is_class_property(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal74();
}

bool ObjCPropertyDecl::is_direct_property(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal75();
}

bool ObjCPropertyDecl::is_instance_property(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal80();
}

bool ObjCPropertyDecl::is_optional(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal82();
}

bool ObjCPropertyDecl::is_read_only(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal84();
}

bool ObjCPropertyDecl::is_retaining(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal92();
}

ObjCMethodDeclContainingDeclRange ObjCMethodDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCMethodDeclContainingDeclRange ObjCMethodDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCMethodDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCMethodDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCMethodDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCMethodDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCMethodDecl> ObjCMethodDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCMethodDecl> ObjCMethodDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCMethodDecl> ObjCMethodDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_METHOD:
      return reinterpret_cast<const ObjCMethodDecl &>(parent);
    default: return std::nullopt;
  }
}

bool ObjCMethodDecl::defined_in_ns_object(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal73();
}

ObjCPropertyDecl ObjCMethodDecl::find_property_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal56());
  return ObjCPropertyDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCInterfaceDecl ObjCMethodDecl::class_interface(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal57());
  return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ImplicitParamDecl ObjCMethodDecl::command_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal58());
  return ImplicitParamDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token ObjCMethodDecl::declarator_end_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal66())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCMethodDeclImplementationControl ObjCMethodDecl::implementation_control(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ObjCMethodDeclImplementationControl>(self.getVal77());
}

ObjCMethodFamily ObjCMethodDecl::method_family(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<ObjCMethodFamily>(self.getVal85());
}

DeclObjCDeclQualifier ObjCMethodDecl::obj_c_decl_qualifier(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<DeclObjCDeclQualifier>(self.getVal87());
}

Type ObjCMethodDecl::return_type(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal67());
  return fragment->TypeFor(fragment, id, false).value();
}

TokenRange ObjCMethodDecl::return_type_source_range(void) const {
  auto self = fragment->NthDecl(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal68(), self.getVal76());
}

Token ObjCMethodDecl::selector_start_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal79())) {
    return tok.value();
  } else {
    return Token();
  }
}

ImplicitParamDecl ObjCMethodDecl::self_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal81());
  return ImplicitParamDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

bool ObjCMethodDecl::has_parameter_destroyed_in_callee(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal74();
}

bool ObjCMethodDecl::has_redeclaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal75();
}

bool ObjCMethodDecl::has_related_result_type(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal80();
}

bool ObjCMethodDecl::has_skipped_body(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal82();
}

bool ObjCMethodDecl::is_class_method(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal84();
}

bool ObjCMethodDecl::is_defined(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal92();
}

bool ObjCMethodDecl::is_designated_initializer_for_the_interface(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal95();
}

bool ObjCMethodDecl::is_direct_method(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal96();
}

bool ObjCMethodDecl::is_instance_method(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal97();
}

bool ObjCMethodDecl::is_optional(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal98();
}

bool ObjCMethodDecl::is_overriding(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal99();
}

bool ObjCMethodDecl::is_property_accessor(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal100();
}

bool ObjCMethodDecl::is_redeclaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal101();
}

bool ObjCMethodDecl::is_synthesized_accessor_stub(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal102();
}

bool ObjCMethodDecl::is_this_declaration_a_designated_initializer(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal103();
}

bool ObjCMethodDecl::is_variadic(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal104();
}

std::vector<ParmVarDecl> ObjCMethodDecl::parameters(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<ParmVarDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d50 = fragment->DeclFor(fragment, id)) {
      if (auto e = ParmVarDecl::from(d50.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Token> ObjCMethodDecl::selector_tokens(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal51();
  std::vector<Token> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t51 = fragment->TokenFor(fragment, id)) {
      vec.emplace_back(std::move(t51.value()));
    }
  }
  return vec;
}

std::vector<Decl> ObjCMethodDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal62();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

ObjCContainerDeclContainingDeclRange ObjCContainerDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCContainerDeclContainingDeclRange ObjCContainerDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCContainerDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCContainerDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCContainerDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCContainerDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCContainerDecl> ObjCContainerDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCContainerDecl> ObjCContainerDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCContainerDecl> ObjCContainerDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_CONTAINER:
    case mx::DeclKind::OBJ_C_CATEGORY:
    case mx::DeclKind::OBJ_C_PROTOCOL:
    case mx::DeclKind::OBJ_C_INTERFACE:
    case mx::DeclKind::OBJ_C_IMPL:
    case mx::DeclKind::OBJ_C_CATEGORY_IMPL:
    case mx::DeclKind::OBJ_C_IMPLEMENTATION:
      return reinterpret_cast<const ObjCContainerDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<ObjCMethodDecl> ObjCContainerDecl::class_methods(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<ObjCMethodDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d50 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCMethodDecl::from(d50.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<ObjCPropertyDecl> ObjCContainerDecl::class_properties(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal51();
  std::vector<ObjCPropertyDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d51 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCPropertyDecl::from(d51.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

TokenRange ObjCContainerDecl::at_end_range(void) const {
  auto self = fragment->NthDecl(offset_);
  return fragment->TokenRangeFor(fragment, self.getVal56(), self.getVal57());
}

Token ObjCContainerDecl::at_start_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal58())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::vector<ObjCMethodDecl> ObjCContainerDecl::instance_methods(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal62();
  std::vector<ObjCMethodDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d62 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCMethodDecl::from(d62.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<ObjCPropertyDecl> ObjCContainerDecl::instance_properties(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal176();
  std::vector<ObjCPropertyDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d176 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCPropertyDecl::from(d176.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<ObjCMethodDecl> ObjCContainerDecl::methods(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal185();
  std::vector<ObjCMethodDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d185 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCMethodDecl::from(d185.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<ObjCPropertyDecl> ObjCContainerDecl::properties(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal321();
  std::vector<ObjCPropertyDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d321 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCPropertyDecl::from(d321.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Decl> ObjCContainerDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal354();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

ObjCCategoryDeclContainingDeclRange ObjCCategoryDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCCategoryDeclContainingDeclRange ObjCCategoryDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCCategoryDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCCategoryDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCCategoryDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCCategoryDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCCategoryDecl> ObjCCategoryDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCCategoryDecl> ObjCCategoryDecl::from(const ObjCContainerDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCCategoryDecl> ObjCCategoryDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCCategoryDecl> ObjCCategoryDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_CATEGORY:
      return reinterpret_cast<const ObjCCategoryDecl &>(parent);
    default: return std::nullopt;
  }
}

bool ObjCCategoryDecl::is_class_extension(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal73();
}

Token ObjCCategoryDecl::category_name_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal66())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCInterfaceDecl ObjCCategoryDecl::class_interface(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal67());
  return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

ObjCCategoryImplDecl ObjCCategoryDecl::implementation(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal68());
  return ObjCCategoryImplDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token ObjCCategoryDecl::instance_variable_l_brace_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal76())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ObjCCategoryDecl::instance_variable_r_brace_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal79())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCCategoryDecl ObjCCategoryDecl::next_class_category(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal81());
  return ObjCCategoryDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::vector<ObjCIvarDecl> ObjCCategoryDecl::instance_variables(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal355();
  std::vector<ObjCIvarDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d355 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCIvarDecl::from(d355.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Token> ObjCCategoryDecl::protocol_tokens(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal356();
  std::vector<Token> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t356 = fragment->TokenFor(fragment, id)) {
      vec.emplace_back(std::move(t356.value()));
    }
  }
  return vec;
}

std::vector<ObjCProtocolDecl> ObjCCategoryDecl::protocols(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal357();
  std::vector<ObjCProtocolDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d357 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCProtocolDecl::from(d357.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

ObjCProtocolDeclContainingDeclRange ObjCProtocolDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCProtocolDeclContainingDeclRange ObjCProtocolDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCProtocolDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCProtocolDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCProtocolDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCProtocolDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCProtocolDecl> ObjCProtocolDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCProtocolDecl> ObjCProtocolDecl::from(const ObjCContainerDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCProtocolDecl> ObjCProtocolDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCProtocolDecl> ObjCProtocolDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_PROTOCOL:
      return reinterpret_cast<const ObjCProtocolDecl &>(parent);
    default: return std::nullopt;
  }
}

std::string_view ObjCProtocolDecl::obj_c_runtime_name_as_string(void) const {
  auto self = fragment->NthDecl(offset_);
  capnp::Text::Reader data = self.getVal72();
  return std::string_view(data.cStr(), data.size());
}

bool ObjCProtocolDecl::has_definition(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal73();
}

bool ObjCProtocolDecl::is_non_runtime_protocol(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal74();
}

std::vector<Token> ObjCProtocolDecl::protocol_tokens(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal355();
  std::vector<Token> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t355 = fragment->TokenFor(fragment, id)) {
      vec.emplace_back(std::move(t355.value()));
    }
  }
  return vec;
}

std::vector<ObjCProtocolDecl> ObjCProtocolDecl::protocols(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal356();
  std::vector<ObjCProtocolDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d356 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCProtocolDecl::from(d356.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

ObjCInterfaceDeclContainingDeclRange ObjCInterfaceDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCInterfaceDeclContainingDeclRange ObjCInterfaceDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCInterfaceDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCInterfaceDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCInterfaceDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCInterfaceDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCInterfaceDecl> ObjCInterfaceDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCInterfaceDecl> ObjCInterfaceDecl::from(const ObjCContainerDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCInterfaceDecl> ObjCInterfaceDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCInterfaceDecl> ObjCInterfaceDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_INTERFACE:
      return reinterpret_cast<const ObjCInterfaceDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<ObjCProtocolDecl> ObjCInterfaceDecl::all_referenced_protocols(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal355();
  std::vector<ObjCProtocolDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d355 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCProtocolDecl::from(d355.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

bool ObjCInterfaceDecl::declares_or_inherits_designated_initializers(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal73();
}

Token ObjCInterfaceDecl::end_of_definition_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal66())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCImplementationDecl ObjCInterfaceDecl::implementation(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal67());
  return ObjCImplementationDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::string_view ObjCInterfaceDecl::obj_c_runtime_name_as_string(void) const {
  auto self = fragment->NthDecl(offset_);
  capnp::Text::Reader data = self.getVal72();
  return std::string_view(data.cStr(), data.size());
}

std::optional<ObjCInterfaceDecl> ObjCInterfaceDecl::super_class(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal74()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal68());
    return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id));
  }
}

Token ObjCInterfaceDecl::super_class_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal76())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<Type> ObjCInterfaceDecl::super_class_type(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal75()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal79());
    return fragment->TypeFor(fragment, id);
  }
}

Type ObjCInterfaceDecl::type_for_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal81());
  return fragment->TypeFor(fragment, id, false).value();
}

bool ObjCInterfaceDecl::has_definition(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal80();
}

bool ObjCInterfaceDecl::has_designated_initializers(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal82();
}

bool ObjCInterfaceDecl::is_arc_weakref_unavailable(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal84();
}

bool ObjCInterfaceDecl::is_implicit_interface_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal92();
}

ObjCInterfaceDecl ObjCInterfaceDecl::is_obj_c_requires_property_definitions(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal83());
  return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::vector<ObjCIvarDecl> ObjCInterfaceDecl::instance_variables(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal356();
  std::vector<ObjCIvarDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d356 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCIvarDecl::from(d356.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<ObjCCategoryDecl> ObjCInterfaceDecl::known_categories(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal357();
  std::vector<ObjCCategoryDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d357 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCCategoryDecl::from(d357.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<ObjCCategoryDecl> ObjCInterfaceDecl::known_extensions(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal358();
  std::vector<ObjCCategoryDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d358 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCCategoryDecl::from(d358.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<Token> ObjCInterfaceDecl::protocol_tokens(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal359();
  std::vector<Token> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t359 = fragment->TokenFor(fragment, id)) {
      vec.emplace_back(std::move(t359.value()));
    }
  }
  return vec;
}

std::vector<ObjCProtocolDecl> ObjCInterfaceDecl::protocols(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal360();
  std::vector<ObjCProtocolDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d360 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCProtocolDecl::from(d360.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<ObjCCategoryDecl> ObjCInterfaceDecl::visible_categories(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal361();
  std::vector<ObjCCategoryDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d361 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCCategoryDecl::from(d361.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

std::vector<ObjCCategoryDecl> ObjCInterfaceDecl::visible_extensions(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal362();
  std::vector<ObjCCategoryDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d362 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCCategoryDecl::from(d362.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

ObjCImplDeclContainingDeclRange ObjCImplDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCImplDeclContainingDeclRange ObjCImplDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCImplDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCImplDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCImplDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCImplDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCImplDecl> ObjCImplDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCImplDecl> ObjCImplDecl::from(const ObjCContainerDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCImplDecl> ObjCImplDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCImplDecl> ObjCImplDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_IMPL:
    case mx::DeclKind::OBJ_C_CATEGORY_IMPL:
    case mx::DeclKind::OBJ_C_IMPLEMENTATION:
      return reinterpret_cast<const ObjCImplDecl &>(parent);
    default: return std::nullopt;
  }
}

ObjCInterfaceDecl ObjCImplDecl::class_interface(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal66());
  return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

std::vector<ObjCPropertyImplDecl> ObjCImplDecl::property_implementations(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal355();
  std::vector<ObjCPropertyImplDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d355 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCPropertyImplDecl::from(d355.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

ObjCCategoryImplDeclContainingDeclRange ObjCCategoryImplDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCCategoryImplDeclContainingDeclRange ObjCCategoryImplDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCCategoryImplDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCCategoryImplDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCCategoryImplDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCCategoryImplDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCCategoryImplDecl> ObjCCategoryImplDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCCategoryImplDecl> ObjCCategoryImplDecl::from(const ObjCImplDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCCategoryImplDecl> ObjCCategoryImplDecl::from(const ObjCContainerDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCCategoryImplDecl> ObjCCategoryImplDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCCategoryImplDecl> ObjCCategoryImplDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_CATEGORY_IMPL:
      return reinterpret_cast<const ObjCCategoryImplDecl &>(parent);
    default: return std::nullopt;
  }
}

ObjCCategoryDecl ObjCCategoryImplDecl::category_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal67());
  return ObjCCategoryDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token ObjCCategoryImplDecl::category_name_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal68())) {
    return tok.value();
  } else {
    return Token();
  }
}

ObjCImplementationDeclContainingDeclRange ObjCImplementationDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCImplementationDeclContainingDeclRange ObjCImplementationDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCImplementationDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCImplementationDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCImplementationDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCImplementationDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCImplementationDecl> ObjCImplementationDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCImplementationDecl> ObjCImplementationDecl::from(const ObjCImplDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCImplementationDecl> ObjCImplementationDecl::from(const ObjCContainerDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCImplementationDecl> ObjCImplementationDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCImplementationDecl> ObjCImplementationDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_IMPLEMENTATION:
      return reinterpret_cast<const ObjCImplementationDecl &>(parent);
    default: return std::nullopt;
  }
}

Token ObjCImplementationDecl::instance_variable_l_brace_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal67())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ObjCImplementationDecl::instance_variable_r_brace_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal68())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::string_view ObjCImplementationDecl::obj_c_runtime_name_as_string(void) const {
  auto self = fragment->NthDecl(offset_);
  capnp::Text::Reader data = self.getVal72();
  return std::string_view(data.cStr(), data.size());
}

ObjCInterfaceDecl ObjCImplementationDecl::super_class(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal76());
  return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token ObjCImplementationDecl::super_class_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal79())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool ObjCImplementationDecl::has_destructors(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal73();
}

bool ObjCImplementationDecl::has_non_zero_constructors(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal74();
}

std::vector<ObjCIvarDecl> ObjCImplementationDecl::instance_variables(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal356();
  std::vector<ObjCIvarDecl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto d356 = fragment->DeclFor(fragment, id)) {
      if (auto e = ObjCIvarDecl::from(d356.value())) {
        vec.emplace_back(std::move(*e));
      }
    }
  }
  return vec;
}

ObjCCompatibleAliasDeclContainingDeclRange ObjCCompatibleAliasDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ObjCCompatibleAliasDeclContainingDeclRange ObjCCompatibleAliasDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ObjCCompatibleAliasDecl::contains(const Decl &decl) {
  for(auto &parent : ObjCCompatibleAliasDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ObjCCompatibleAliasDecl::contains(const Stmt &stmt) {
  for(auto &parent : ObjCCompatibleAliasDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ObjCCompatibleAliasDecl> ObjCCompatibleAliasDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ObjCCompatibleAliasDecl> ObjCCompatibleAliasDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<ObjCCompatibleAliasDecl> ObjCCompatibleAliasDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::OBJ_C_COMPATIBLE_ALIAS:
      return reinterpret_cast<const ObjCCompatibleAliasDecl &>(parent);
    default: return std::nullopt;
  }
}

ObjCInterfaceDecl ObjCCompatibleAliasDecl::class_interface(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal56());
  return ObjCInterfaceDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

NamespaceDeclContainingDeclRange NamespaceDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

NamespaceDeclContainingDeclRange NamespaceDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool NamespaceDecl::contains(const Decl &decl) {
  for(auto &parent : NamespaceDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool NamespaceDecl::contains(const Stmt &stmt) {
  for(auto &parent : NamespaceDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<NamespaceDecl> NamespaceDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<NamespaceDecl> NamespaceDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<NamespaceDecl> NamespaceDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::NAMESPACE:
      return reinterpret_cast<const NamespaceDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Decl> NamespaceDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

NamespaceAliasDeclContainingDeclRange NamespaceAliasDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

NamespaceAliasDeclContainingDeclRange NamespaceAliasDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool NamespaceAliasDecl::contains(const Decl &decl) {
  for(auto &parent : NamespaceAliasDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool NamespaceAliasDecl::contains(const Stmt &stmt) {
  for(auto &parent : NamespaceAliasDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<NamespaceAliasDecl> NamespaceAliasDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<NamespaceAliasDecl> NamespaceAliasDecl::from(const NamedDecl &parent) {
  return from(reinterpret_cast<const Decl &>(parent));
}

std::optional<NamespaceAliasDecl> NamespaceAliasDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::NAMESPACE_ALIAS:
      return reinterpret_cast<const NamespaceAliasDecl &>(parent);
    default: return std::nullopt;
  }
}

Token NamespaceAliasDecl::alias_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal56())) {
    return tok.value();
  } else {
    return Token();
  }
}

NamedDecl NamespaceAliasDecl::aliased_namespace(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal57());
  return NamedDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

Token NamespaceAliasDecl::namespace_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal58())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token NamespaceAliasDecl::target_name_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal66())) {
    return tok.value();
  } else {
    return Token();
  }
}

LinkageSpecDeclContainingDeclRange LinkageSpecDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

LinkageSpecDeclContainingDeclRange LinkageSpecDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool LinkageSpecDecl::contains(const Decl &decl) {
  for(auto &parent : LinkageSpecDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool LinkageSpecDecl::contains(const Stmt &stmt) {
  for(auto &parent : LinkageSpecDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<LinkageSpecDecl> LinkageSpecDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<LinkageSpecDecl> LinkageSpecDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::LINKAGE_SPEC:
      return reinterpret_cast<const LinkageSpecDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Decl> LinkageSpecDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

LifetimeExtendedTemporaryDeclContainingDeclRange LifetimeExtendedTemporaryDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

LifetimeExtendedTemporaryDeclContainingDeclRange LifetimeExtendedTemporaryDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool LifetimeExtendedTemporaryDecl::contains(const Decl &decl) {
  for(auto &parent : LifetimeExtendedTemporaryDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool LifetimeExtendedTemporaryDecl::contains(const Stmt &stmt) {
  for(auto &parent : LifetimeExtendedTemporaryDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<LifetimeExtendedTemporaryDecl> LifetimeExtendedTemporaryDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<LifetimeExtendedTemporaryDecl> LifetimeExtendedTemporaryDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::LIFETIME_EXTENDED_TEMPORARY:
      return reinterpret_cast<const LifetimeExtendedTemporaryDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Stmt> LifetimeExtendedTemporaryDecl::children_expression(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Stmt> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto s50 = fragment->StmtFor(fragment, id)) {
      vec.emplace_back(std::move(s50.value()));
    }
  }
  return vec;
}

ValueDecl LifetimeExtendedTemporaryDecl::extending_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal48());
  return ValueDecl::from(fragment->DeclFor(fragment, id, false).value()).value();
}

StorageDuration LifetimeExtendedTemporaryDecl::storage_duration(void) const {
  auto self = fragment->NthDecl(offset_);
  return static_cast<StorageDuration>(self.getVal65());
}

Expr LifetimeExtendedTemporaryDecl::temporary_expression(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal56());
  return Expr::from(fragment->StmtFor(fragment, id, false).value()).value();
}

ImportDeclContainingDeclRange ImportDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ImportDeclContainingDeclRange ImportDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ImportDecl::contains(const Decl &decl) {
  for(auto &parent : ImportDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ImportDecl::contains(const Stmt &stmt) {
  for(auto &parent : ImportDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ImportDecl> ImportDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ImportDecl> ImportDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::IMPORT:
      return reinterpret_cast<const ImportDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Token> ImportDecl::identifier_tokens(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Token> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId id(v);
    if (auto t50 = fragment->TokenFor(fragment, id)) {
      vec.emplace_back(std::move(t50.value()));
    }
  }
  return vec;
}

FriendTemplateDeclContainingDeclRange FriendTemplateDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

FriendTemplateDeclContainingDeclRange FriendTemplateDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool FriendTemplateDecl::contains(const Decl &decl) {
  for(auto &parent : FriendTemplateDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool FriendTemplateDecl::contains(const Stmt &stmt) {
  for(auto &parent : FriendTemplateDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<FriendTemplateDecl> FriendTemplateDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<FriendTemplateDecl> FriendTemplateDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::FRIEND_TEMPLATE:
      return reinterpret_cast<const FriendTemplateDecl &>(parent);
    default: return std::nullopt;
  }
}

FriendDeclContainingDeclRange FriendDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

FriendDeclContainingDeclRange FriendDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool FriendDecl::contains(const Decl &decl) {
  for(auto &parent : FriendDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool FriendDecl::contains(const Stmt &stmt) {
  for(auto &parent : FriendDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<FriendDecl> FriendDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<FriendDecl> FriendDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::FRIEND:
      return reinterpret_cast<const FriendDecl &>(parent);
    default: return std::nullopt;
  }
}

std::optional<NamedDecl> FriendDecl::friend_declaration(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal49()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal48());
    return NamedDecl::from(fragment->DeclFor(fragment, id));
  }
}

Token FriendDecl::friend_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal56())) {
    return tok.value();
  } else {
    return Token();
  }
}

std::optional<Type> FriendDecl::friend_type(void) const {
  auto self = fragment->NthDecl(offset_);
  if (!self.getVal52()) {
    return std::nullopt;
  } else {
    EntityId id(self.getVal57());
    return fragment->TypeFor(fragment, id);
  }
}

bool FriendDecl::is_unsupported_friend(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal53();
}

std::vector<TemplateParameterList> FriendDecl::friend_type_template_parameter_lists(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal78();
  std::vector<TemplateParameterList> vec;
  vec.reserve(list.size());
  for (auto v : list) {
vec.emplace_back(fragment, v);
  }
  return vec;
}

FileScopeAsmDeclContainingDeclRange FileScopeAsmDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

FileScopeAsmDeclContainingDeclRange FileScopeAsmDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool FileScopeAsmDecl::contains(const Decl &decl) {
  for(auto &parent : FileScopeAsmDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool FileScopeAsmDecl::contains(const Stmt &stmt) {
  for(auto &parent : FileScopeAsmDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<FileScopeAsmDecl> FileScopeAsmDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<FileScopeAsmDecl> FileScopeAsmDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::FILE_SCOPE_ASM:
      return reinterpret_cast<const FileScopeAsmDecl &>(parent);
    default: return std::nullopt;
  }
}

Token FileScopeAsmDecl::assembly_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal48())) {
    return tok.value();
  } else {
    return Token();
  }
}

StringLiteral FileScopeAsmDecl::assembly_string(void) const {
  auto self = fragment->NthDecl(offset_);
  EntityId id(self.getVal56());
  return StringLiteral::from(fragment->StmtFor(fragment, id, false).value()).value();
}

Token FileScopeAsmDecl::r_paren_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal57())) {
    return tok.value();
  } else {
    return Token();
  }
}

ExternCContextDeclContainingDeclRange ExternCContextDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ExternCContextDeclContainingDeclRange ExternCContextDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ExternCContextDecl::contains(const Decl &decl) {
  for(auto &parent : ExternCContextDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ExternCContextDecl::contains(const Stmt &stmt) {
  for(auto &parent : ExternCContextDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ExternCContextDecl> ExternCContextDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ExternCContextDecl> ExternCContextDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::EXTERN_C_CONTEXT:
      return reinterpret_cast<const ExternCContextDecl &>(parent);
    default: return std::nullopt;
  }
}

std::vector<Decl> ExternCContextDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

ExportDeclContainingDeclRange ExportDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

ExportDeclContainingDeclRange ExportDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool ExportDecl::contains(const Decl &decl) {
  for(auto &parent : ExportDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool ExportDecl::contains(const Stmt &stmt) {
  for(auto &parent : ExportDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<ExportDecl> ExportDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<ExportDecl> ExportDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::EXPORT:
      return reinterpret_cast<const ExportDecl &>(parent);
    default: return std::nullopt;
  }
}

Token ExportDecl::export_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal48())) {
    return tok.value();
  } else {
    return Token();
  }
}

Token ExportDecl::r_brace_token(void) const {
  auto self = fragment->NthDecl(offset_);
  if (auto tok = fragment->TokenFor(fragment, self.getVal56())) {
    return tok.value();
  } else {
    return Token();
  }
}

bool ExportDecl::has_braces(void) const {
  auto self = fragment->NthDecl(offset_);
  return self.getVal49();
}

std::vector<Decl> ExportDecl::declarations_in_context(void) const {
  auto self = fragment->NthDecl(offset_);
  auto list = self.getVal50();
  std::vector<Decl> vec;
  vec.reserve(list.size());
  for (auto v : list) {
    EntityId eid(v);
    if (auto decl = fragment->DeclFor(fragment, eid)) {
      vec.emplace_back(std::move(decl.value()));
    }
  }
  return vec;
}

EmptyDeclContainingDeclRange EmptyDecl::containing(const Decl &decl) {
  return ParentDeclIteratorImpl<Decl>(decl.parent_declaration());
}

EmptyDeclContainingDeclRange EmptyDecl::containing(const Stmt &stmt) {
  return ParentDeclIteratorImpl<Decl>(stmt.parent_declaration());
}

bool EmptyDecl::contains(const Decl &decl) {
  for(auto &parent : EmptyDecl::containing(decl)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

bool EmptyDecl::contains(const Stmt &stmt) {
  for(auto &parent : EmptyDecl::containing(stmt)) {
    if(parent.id() == id()) { return true; }
  }
  return false;
}

std::optional<EmptyDecl> EmptyDecl::from(const TokenContext &c) {
  return from(c.as_declaration());
}

std::optional<EmptyDecl> EmptyDecl::from(const Decl &parent) {
  switch (parent.kind()) {
    case mx::DeclKind::EMPTY:
      return reinterpret_cast<const EmptyDecl &>(parent);
    default: return std::nullopt;
  }
}

const char *EnumeratorName(DeclUseSelector sel) {
  switch (sel) {
    case DeclUseSelector::ACTING_DEFINITION: return "ACTING_DEFINITION";
    case DeclUseSelector::ALIASED_NAMESPACE: return "ALIASED_NAMESPACE";
    case DeclUseSelector::ANONYMOUS_DECLARATION_WITH_TYPEDEF_NAME: return "ANONYMOUS_DECLARATION_WITH_TYPEDEF_NAME";
    case DeclUseSelector::ANONYMOUS_FIELD: return "ANONYMOUS_FIELD";
    case DeclUseSelector::ARRAY_WITH_OBJECTS_METHOD: return "ARRAY_WITH_OBJECTS_METHOD";
    case DeclUseSelector::AS_CXX_RECORD_DECLARATION: return "AS_CXX_RECORD_DECLARATION";
    case DeclUseSelector::AS_DECLARATION: return "AS_DECLARATION";
    case DeclUseSelector::AS_RECORD_DECLARATION: return "AS_RECORD_DECLARATION";
    case DeclUseSelector::AS_TAG_DECLARATION: return "AS_TAG_DECLARATION";
    case DeclUseSelector::AT_INDEX_METHOD_DECLARATION: return "AT_INDEX_METHOD_DECLARATION";
    case DeclUseSelector::BLOCK_DECLARATION: return "BLOCK_DECLARATION";
    case DeclUseSelector::BLOCK_MANGLING_CONTEXT_DECLARATION: return "BLOCK_MANGLING_CONTEXT_DECLARATION";
    case DeclUseSelector::BODY: return "BODY";
    case DeclUseSelector::BOXING_METHOD: return "BOXING_METHOD";
    case DeclUseSelector::CALL_OPERATOR: return "CALL_OPERATOR";
    case DeclUseSelector::CALLEE_DECLARATION: return "CALLEE_DECLARATION";
    case DeclUseSelector::CAPTURED_DECLARATION: return "CAPTURED_DECLARATION";
    case DeclUseSelector::CAPTURED_RECORD_DECLARATION: return "CAPTURED_RECORD_DECLARATION";
    case DeclUseSelector::CATCH_PARAMETER_DECLARATION: return "CATCH_PARAMETER_DECLARATION";
    case DeclUseSelector::CATEGORY_DECLARATION: return "CATEGORY_DECLARATION";
    case DeclUseSelector::CLASS_INTERFACE: return "CLASS_INTERFACE";
    case DeclUseSelector::CLASS_RECEIVER: return "CLASS_RECEIVER";
    case DeclUseSelector::COMMAND_DECLARATION: return "COMMAND_DECLARATION";
    case DeclUseSelector::CONDITION_VARIABLE: return "CONDITION_VARIABLE";
    case DeclUseSelector::CONSTANT_TARGET: return "CONSTANT_TARGET";
    case DeclUseSelector::CONSTRUCTED_BASE_CLASS: return "CONSTRUCTED_BASE_CLASS";
    case DeclUseSelector::CONSTRUCTED_BASE_CLASS_SHADOW_DECLARATION: return "CONSTRUCTED_BASE_CLASS_SHADOW_DECLARATION";
    case DeclUseSelector::CONSTRUCTOR: return "CONSTRUCTOR";
    case DeclUseSelector::CONTAINING_INTERFACE: return "CONTAINING_INTERFACE";
    case DeclUseSelector::CONTEXT_PARAMETER: return "CONTEXT_PARAMETER";
    case DeclUseSelector::CONVERSION_FUNCTION: return "CONVERSION_FUNCTION";
    case DeclUseSelector::CORRESPONDING_CONSTRUCTOR: return "CORRESPONDING_CONSTRUCTOR";
    case DeclUseSelector::DECLARATION: return "DECLARATION";
    case DeclUseSelector::DECOMPOSED_DECLARATION: return "DECOMPOSED_DECLARATION";
    case DeclUseSelector::DESCRIBED_ALIAS_TEMPLATE: return "DESCRIBED_ALIAS_TEMPLATE";
    case DeclUseSelector::DESTRUCTOR: return "DESTRUCTOR";
    case DeclUseSelector::DICTIONARY_WITH_OBJECTS_METHOD: return "DICTIONARY_WITH_OBJECTS_METHOD";
    case DeclUseSelector::DIRECT_CALLEE: return "DIRECT_CALLEE";
    case DeclUseSelector::ENUM_DECLARATION: return "ENUM_DECLARATION";
    case DeclUseSelector::ERROR_DOMAIN: return "ERROR_DOMAIN";
    case DeclUseSelector::EXCEPTION_DECLARATION: return "EXCEPTION_DECLARATION";
    case DeclUseSelector::EXCEPTION_SPEC_DECLARATION: return "EXCEPTION_SPEC_DECLARATION";
    case DeclUseSelector::EXCEPTION_SPEC_TEMPLATE: return "EXCEPTION_SPEC_TEMPLATE";
    case DeclUseSelector::EXPLICIT_PROPERTY: return "EXPLICIT_PROPERTY";
    case DeclUseSelector::EXTENDING_DECLARATION: return "EXTENDING_DECLARATION";
    case DeclUseSelector::FIELD: return "FIELD";
    case DeclUseSelector::FIND_PROPERTY_DECLARATION: return "FIND_PROPERTY_DECLARATION";
    case DeclUseSelector::FIRST_QUALIFIER_FOUND_IN_SCOPE: return "FIRST_QUALIFIER_FOUND_IN_SCOPE";
    case DeclUseSelector::FOUND_DECLARATION: return "FOUND_DECLARATION";
    case DeclUseSelector::FRIEND_DECLARATION: return "FRIEND_DECLARATION";
    case DeclUseSelector::FUNCTION: return "FUNCTION";
    case DeclUseSelector::FUNCTION_DECLARATION: return "FUNCTION_DECLARATION";
    case DeclUseSelector::GETTER_METHOD_DECLARATION: return "GETTER_METHOD_DECLARATION";
    case DeclUseSelector::GUID_DECLARATION: return "GUID_DECLARATION";
    case DeclUseSelector::HOLDING_VARIABLE: return "HOLDING_VARIABLE";
    case DeclUseSelector::IMPLEMENTATION: return "IMPLEMENTATION";
    case DeclUseSelector::IMPLICIT_PROPERTY_GETTER: return "IMPLICIT_PROPERTY_GETTER";
    case DeclUseSelector::IMPLICIT_PROPERTY_SETTER: return "IMPLICIT_PROPERTY_SETTER";
    case DeclUseSelector::INITIALIZED_FIELD_IN_UNION: return "INITIALIZED_FIELD_IN_UNION";
    case DeclUseSelector::INITIALIZING_DECLARATION: return "INITIALIZING_DECLARATION";
    case DeclUseSelector::INSTANTIATED_FROM_MEMBER_CLASS: return "INSTANTIATED_FROM_MEMBER_CLASS";
    case DeclUseSelector::INSTANTIATED_FROM_MEMBER_ENUM: return "INSTANTIATED_FROM_MEMBER_ENUM";
    case DeclUseSelector::INSTANTIATED_FROM_MEMBER_FUNCTION: return "INSTANTIATED_FROM_MEMBER_FUNCTION";
    case DeclUseSelector::INSTANTIATED_FROM_MEMBER_TEMPLATE: return "INSTANTIATED_FROM_MEMBER_TEMPLATE";
    case DeclUseSelector::INSTANTIATED_FROM_STATIC_DATA_MEMBER: return "INSTANTIATED_FROM_STATIC_DATA_MEMBER";
    case DeclUseSelector::INSTANTIATED_FROM_USING_DECLARATION: return "INSTANTIATED_FROM_USING_DECLARATION";
    case DeclUseSelector::INTERFACE: return "INTERFACE";
    case DeclUseSelector::INTERFACE_DECLARATION: return "INTERFACE_DECLARATION";
    case DeclUseSelector::INTRODUCER: return "INTRODUCER";
    case DeclUseSelector::IS_LOCAL_CLASS: return "IS_LOCAL_CLASS";
    case DeclUseSelector::IS_OBJ_C_REQUIRES_PROPERTY_DEFINITIONS: return "IS_OBJ_C_REQUIRES_PROPERTY_DEFINITIONS";
    case DeclUseSelector::LABEL: return "LABEL";
    case DeclUseSelector::LAMBDA_CALL_OPERATOR: return "LAMBDA_CALL_OPERATOR";
    case DeclUseSelector::LAMBDA_CLASS: return "LAMBDA_CLASS";
    case DeclUseSelector::LAMBDA_CONTEXT_DECLARATION: return "LAMBDA_CONTEXT_DECLARATION";
    case DeclUseSelector::LIFETIME_EXTENDED_TEMPORARY_DECLARATION: return "LIFETIME_EXTENDED_TEMPORARY_DECLARATION";
    case DeclUseSelector::LOOP_VARIABLE: return "LOOP_VARIABLE";
    case DeclUseSelector::MEMBER_DECLARATION: return "MEMBER_DECLARATION";
    case DeclUseSelector::METHOD_DECLARATION: return "METHOD_DECLARATION";
    case DeclUseSelector::MOST_RECENT_CXX_RECORD_DECLARATION: return "MOST_RECENT_CXX_RECORD_DECLARATION";
    case DeclUseSelector::NAMING_CLASS: return "NAMING_CLASS";
    case DeclUseSelector::NEXT_CLASS_CATEGORY: return "NEXT_CLASS_CATEGORY";
    case DeclUseSelector::NEXT_INSTANCE_VARIABLE: return "NEXT_INSTANCE_VARIABLE";
    case DeclUseSelector::NEXT_USING_SHADOW_DECLARATION: return "NEXT_USING_SHADOW_DECLARATION";
    case DeclUseSelector::NOMINATED_BASE_CLASS: return "NOMINATED_BASE_CLASS";
    case DeclUseSelector::NOMINATED_BASE_CLASS_SHADOW_DECLARATION: return "NOMINATED_BASE_CLASS_SHADOW_DECLARATION";
    case DeclUseSelector::NOMINATED_NAMESPACE_AS_WRITTEN: return "NOMINATED_NAMESPACE_AS_WRITTEN";
    case DeclUseSelector::NON_CLOSURE_CONTEXT: return "NON_CLOSURE_CONTEXT";
    case DeclUseSelector::NRVO_CANDIDATE: return "NRVO_CANDIDATE";
    case DeclUseSelector::OPERATOR_DELETE: return "OPERATOR_DELETE";
    case DeclUseSelector::OPERATOR_NEW: return "OPERATOR_NEW";
    case DeclUseSelector::OWNED_TAG_DECLARATION: return "OWNED_TAG_DECLARATION";
    case DeclUseSelector::PACK: return "PACK";
    case DeclUseSelector::PARAMETER: return "PARAMETER";
    case DeclUseSelector::PARAMETER_PACK: return "PARAMETER_PACK";
    case DeclUseSelector::PARENT: return "PARENT";
    case DeclUseSelector::POINTEE_CXX_RECORD_DECLARATION: return "POINTEE_CXX_RECORD_DECLARATION";
    case DeclUseSelector::PROMISE_DECLARATION: return "PROMISE_DECLARATION";
    case DeclUseSelector::PROPERTY_DECLARATION: return "PROPERTY_DECLARATION";
    case DeclUseSelector::PROPERTY_INSTANCE_VARIABLE_DECLARATION: return "PROPERTY_INSTANCE_VARIABLE_DECLARATION";
    case DeclUseSelector::PROTOCOL: return "PROTOCOL";
    case DeclUseSelector::RECEIVER_INTERFACE: return "RECEIVER_INTERFACE";
    case DeclUseSelector::RECORD_DECLARATION: return "RECORD_DECLARATION";
    case DeclUseSelector::REFERENCED_DECLARATION: return "REFERENCED_DECLARATION";
    case DeclUseSelector::REFERENCED_DECLARATION_OF_CALLEE: return "REFERENCED_DECLARATION_OF_CALLEE";
    case DeclUseSelector::SELF_DECLARATION: return "SELF_DECLARATION";
    case DeclUseSelector::SETTER_METHOD_DECLARATION: return "SETTER_METHOD_DECLARATION";
    case DeclUseSelector::SINGLE_DECLARATION: return "SINGLE_DECLARATION";
    case DeclUseSelector::SOURCE_BIT_FIELD: return "SOURCE_BIT_FIELD";
    case DeclUseSelector::SPECIALIZATION: return "SPECIALIZATION";
    case DeclUseSelector::SUPER_CLASS: return "SUPER_CLASS";
    case DeclUseSelector::TARGET_CONSTRUCTOR: return "TARGET_CONSTRUCTOR";
    case DeclUseSelector::TARGET_DECLARATION: return "TARGET_DECLARATION";
    case DeclUseSelector::TARGET_UNION_FIELD: return "TARGET_UNION_FIELD";
    case DeclUseSelector::TEMPLATE_INSTANTIATION_PATTERN: return "TEMPLATE_INSTANTIATION_PATTERN";
    case DeclUseSelector::TEMPLATED_DECLARATION: return "TEMPLATED_DECLARATION";
    case DeclUseSelector::TYPE_CONSTRAINT_CONCEPT: return "TYPE_CONSTRAINT_CONCEPT";
    case DeclUseSelector::TYPEDEF_NAME_FOR_ANONYMOUS_DECLARATION: return "TYPEDEF_NAME_FOR_ANONYMOUS_DECLARATION";
    case DeclUseSelector::UNDERLYING_DECLARATION: return "UNDERLYING_DECLARATION";
    case DeclUseSelector::VARIABLE_DECLARATION: return "VARIABLE_DECLARATION";
  }
}

const char *EnumeratorName(StmtUseSelector sel) {
  switch (sel) {
    case StmtUseSelector::ADDRESS_SPACE_EXPRESSION: return "ADDRESS_SPACE_EXPRESSION";
    case StmtUseSelector::ALIGNMENT: return "ALIGNMENT";
    case StmtUseSelector::ALIGNMENT_EXPRESSION: return "ALIGNMENT_EXPRESSION";
    case StmtUseSelector::ALLOCATE: return "ALLOCATE";
    case StmtUseSelector::ALLOCATOR: return "ALLOCATOR";
    case StmtUseSelector::ARGUMENT: return "ARGUMENT";
    case StmtUseSelector::ARGUMENT_EXPRESSION: return "ARGUMENT_EXPRESSION";
    case StmtUseSelector::ARRAY_FILLER: return "ARRAY_FILLER";
    case StmtUseSelector::ARRAY_SIZE: return "ARRAY_SIZE";
    case StmtUseSelector::ASSEMBLY_STRING: return "ASSEMBLY_STRING";
    case StmtUseSelector::ASSERT_EXPRESSION: return "ASSERT_EXPRESSION";
    case StmtUseSelector::ASSOCIATED_STATEMENT: return "ASSOCIATED_STATEMENT";
    case StmtUseSelector::BASE: return "BASE";
    case StmtUseSelector::BASE_EXPRESSION: return "BASE_EXPRESSION";
    case StmtUseSelector::BEGIN_STATEMENT: return "BEGIN_STATEMENT";
    case StmtUseSelector::BEST_DYNAMIC_CLASS_TYPE_EXPRESSION: return "BEST_DYNAMIC_CLASS_TYPE_EXPRESSION";
    case StmtUseSelector::BINDING: return "BINDING";
    case StmtUseSelector::BIT_WIDTH: return "BIT_WIDTH";
    case StmtUseSelector::BLOCK: return "BLOCK";
    case StmtUseSelector::BODY: return "BODY";
    case StmtUseSelector::CALCULATE_LAST_ITERATION: return "CALCULATE_LAST_ITERATION";
    case StmtUseSelector::CALLEE: return "CALLEE";
    case StmtUseSelector::CAPTURED_STATEMENT: return "CAPTURED_STATEMENT";
    case StmtUseSelector::CATCH_BODY: return "CATCH_BODY";
    case StmtUseSelector::CHOSEN_SUB_EXPRESSION: return "CHOSEN_SUB_EXPRESSION";
    case StmtUseSelector::COLLECTION: return "COLLECTION";
    case StmtUseSelector::COLUMN_EXPRESSION: return "COLUMN_EXPRESSION";
    case StmtUseSelector::COLUMN_INDEX: return "COLUMN_INDEX";
    case StmtUseSelector::COMBINED_CONDITION: return "COMBINED_CONDITION";
    case StmtUseSelector::COMBINED_DISTANCE_CONDITION: return "COMBINED_DISTANCE_CONDITION";
    case StmtUseSelector::COMBINED_ENSURE_UPPER_BOUND: return "COMBINED_ENSURE_UPPER_BOUND";
    case StmtUseSelector::COMBINED_INITIALIZER: return "COMBINED_INITIALIZER";
    case StmtUseSelector::COMBINED_LOWER_BOUND_VARIABLE: return "COMBINED_LOWER_BOUND_VARIABLE";
    case StmtUseSelector::COMBINED_NEXT_LOWER_BOUND: return "COMBINED_NEXT_LOWER_BOUND";
    case StmtUseSelector::COMBINED_NEXT_UPPER_BOUND: return "COMBINED_NEXT_UPPER_BOUND";
    case StmtUseSelector::COMBINED_PARALLEL_FOR_IN_DISTANCE_CONDITION: return "COMBINED_PARALLEL_FOR_IN_DISTANCE_CONDITION";
    case StmtUseSelector::COMBINED_UPPER_BOUND_VARIABLE: return "COMBINED_UPPER_BOUND_VARIABLE";
    case StmtUseSelector::COMBINER: return "COMBINER";
    case StmtUseSelector::COMBINER_IN: return "COMBINER_IN";
    case StmtUseSelector::COMBINER_OUT: return "COMBINER_OUT";
    case StmtUseSelector::COMMON: return "COMMON";
    case StmtUseSelector::COMMON_EXPRESSION: return "COMMON_EXPRESSION";
    case StmtUseSelector::COMPOUND_BODY: return "COMPOUND_BODY";
    case StmtUseSelector::COMPOUND_STATEMENT_BODY: return "COMPOUND_STATEMENT_BODY";
    case StmtUseSelector::CONDITION: return "CONDITION";
    case StmtUseSelector::CONDITION_VARIABLE_DECLARATION_STATEMENT: return "CONDITION_VARIABLE_DECLARATION_STATEMENT";
    case StmtUseSelector::CONFIG: return "CONFIG";
    case StmtUseSelector::CONSTRAINT_EXPRESSION: return "CONSTRAINT_EXPRESSION";
    case StmtUseSelector::CONSTRUCT_EXPRESSION: return "CONSTRUCT_EXPRESSION";
    case StmtUseSelector::CONTROLLING_EXPRESSION: return "CONTROLLING_EXPRESSION";
    case StmtUseSelector::COOKED_LITERAL: return "COOKED_LITERAL";
    case StmtUseSelector::DEALLOCATE: return "DEALLOCATE";
    case StmtUseSelector::DEFAULT_ARGUMENT: return "DEFAULT_ARGUMENT";
    case StmtUseSelector::DIMENSION_EXPRESSION: return "DIMENSION_EXPRESSION";
    case StmtUseSelector::DISTANCE_FUNC: return "DISTANCE_FUNC";
    case StmtUseSelector::DISTANCE_INCREMENT: return "DISTANCE_INCREMENT";
    case StmtUseSelector::ELEMENT: return "ELEMENT";
    case StmtUseSelector::ELSE_: return "ELSE_";
    case StmtUseSelector::END_STATEMENT: return "END_STATEMENT";
    case StmtUseSelector::ENSURE_UPPER_BOUND: return "ENSURE_UPPER_BOUND";
    case StmtUseSelector::EXCEPT_HANDLER: return "EXCEPT_HANDLER";
    case StmtUseSelector::EXCEPTION_HANDLER: return "EXCEPTION_HANDLER";
    case StmtUseSelector::EXPRESSION: return "EXPRESSION";
    case StmtUseSelector::EXPRESSION_OPERAND: return "EXPRESSION_OPERAND";
    case StmtUseSelector::EXPRESSION_STATEMENT: return "EXPRESSION_STATEMENT";
    case StmtUseSelector::FALLTHROUGH_HANDLER: return "FALLTHROUGH_HANDLER";
    case StmtUseSelector::FALSE_EXPRESSION: return "FALSE_EXPRESSION";
    case StmtUseSelector::FILTER_EXPRESSION: return "FILTER_EXPRESSION";
    case StmtUseSelector::FINAL_SUSPEND_STATEMENT: return "FINAL_SUSPEND_STATEMENT";
    case StmtUseSelector::FINALLY_BODY: return "FINALLY_BODY";
    case StmtUseSelector::FINALLY_HANDLER: return "FINALLY_HANDLER";
    case StmtUseSelector::FINALLY_STATEMENT: return "FINALLY_STATEMENT";
    case StmtUseSelector::FIRST_SWITCH_CASE: return "FIRST_SWITCH_CASE";
    case StmtUseSelector::FUNCTION_NAME: return "FUNCTION_NAME";
    case StmtUseSelector::GETTER_CXX_CONSTRUCTOR: return "GETTER_CXX_CONSTRUCTOR";
    case StmtUseSelector::HANDLER: return "HANDLER";
    case StmtUseSelector::HANDLER_BLOCK: return "HANDLER_BLOCK";
    case StmtUseSelector::IF_STATEMENT: return "IF_STATEMENT";
    case StmtUseSelector::IGNORE_CASTS: return "IGNORE_CASTS";
    case StmtUseSelector::IGNORE_CONTAINERS: return "IGNORE_CONTAINERS";
    case StmtUseSelector::IGNORE_CONVERSION_OPERATOR_SINGLE_STEP: return "IGNORE_CONVERSION_OPERATOR_SINGLE_STEP";
    case StmtUseSelector::IGNORE_IMP_CASTS: return "IGNORE_IMP_CASTS";
    case StmtUseSelector::IGNORE_IMPLICIT: return "IGNORE_IMPLICIT";
    case StmtUseSelector::IGNORE_IMPLICIT_AS_WRITTEN: return "IGNORE_IMPLICIT_AS_WRITTEN";
    case StmtUseSelector::IGNORE_PARENTHESES: return "IGNORE_PARENTHESES";
    case StmtUseSelector::IGNORE_PARENTHESIS_BASE_CASTS: return "IGNORE_PARENTHESIS_BASE_CASTS";
    case StmtUseSelector::IGNORE_PARENTHESIS_CASTS: return "IGNORE_PARENTHESIS_CASTS";
    case StmtUseSelector::IGNORE_PARENTHESIS_IMP_CASTS: return "IGNORE_PARENTHESIS_IMP_CASTS";
    case StmtUseSelector::IGNORE_PARENTHESIS_L_VALUE_CASTS: return "IGNORE_PARENTHESIS_L_VALUE_CASTS";
    case StmtUseSelector::IGNORE_PARENTHESIS_NOOP_CASTS: return "IGNORE_PARENTHESIS_NOOP_CASTS";
    case StmtUseSelector::IGNORE_UNLESS_SPELLED_IN_SOURCE: return "IGNORE_UNLESS_SPELLED_IN_SOURCE";
    case StmtUseSelector::IMPLICIT_OBJECT_ARGUMENT: return "IMPLICIT_OBJECT_ARGUMENT";
    case StmtUseSelector::IN_CLASS_INITIALIZER: return "IN_CLASS_INITIALIZER";
    case StmtUseSelector::INCREMENT: return "INCREMENT";
    case StmtUseSelector::INDEX: return "INDEX";
    case StmtUseSelector::INDIRECT_EXPRESSION: return "INDIRECT_EXPRESSION";
    case StmtUseSelector::INITIALIZER: return "INITIALIZER";
    case StmtUseSelector::INITIALIZER_EXPRESSION: return "INITIALIZER_EXPRESSION";
    case StmtUseSelector::INITIALIZER_ORIGINAL: return "INITIALIZER_ORIGINAL";
    case StmtUseSelector::INITIALIZER_PRIVATE: return "INITIALIZER_PRIVATE";
    case StmtUseSelector::INITIALIZER_SUSPEND_STATEMENT: return "INITIALIZER_SUSPEND_STATEMENT";
    case StmtUseSelector::INNERMOST_CAPTURED_STATEMENT: return "INNERMOST_CAPTURED_STATEMENT";
    case StmtUseSelector::INSTANCE_RECEIVER: return "INSTANCE_RECEIVER";
    case StmtUseSelector::IS_LAST_ITERATION_VARIABLE: return "IS_LAST_ITERATION_VARIABLE";
    case StmtUseSelector::ITERATION_VARIABLE: return "ITERATION_VARIABLE";
    case StmtUseSelector::KEY_EXPRESSION: return "KEY_EXPRESSION";
    case StmtUseSelector::LAST_ITERATION: return "LAST_ITERATION";
    case StmtUseSelector::LENGTH: return "LENGTH";
    case StmtUseSelector::LHS: return "LHS";
    case StmtUseSelector::LOOP_STATEMENT: return "LOOP_STATEMENT";
    case StmtUseSelector::LOOP_VARIABLE_FUNC: return "LOOP_VARIABLE_FUNC";
    case StmtUseSelector::LOOP_VARIABLE_REFERENCE: return "LOOP_VARIABLE_REFERENCE";
    case StmtUseSelector::LOOP_VARIABLE_STATEMENT: return "LOOP_VARIABLE_STATEMENT";
    case StmtUseSelector::LOWER_BOUND: return "LOWER_BOUND";
    case StmtUseSelector::LOWER_BOUND_VARIABLE: return "LOWER_BOUND_VARIABLE";
    case StmtUseSelector::MAPPER_VARIABLE_REFERENCE: return "MAPPER_VARIABLE_REFERENCE";
    case StmtUseSelector::MAX: return "MAX";
    case StmtUseSelector::MAX_THREADS: return "MAX_THREADS";
    case StmtUseSelector::MESSAGE: return "MESSAGE";
    case StmtUseSelector::MIN: return "MIN";
    case StmtUseSelector::MIN_BLOCKS: return "MIN_BLOCKS";
    case StmtUseSelector::NEXT_LOWER_BOUND: return "NEXT_LOWER_BOUND";
    case StmtUseSelector::NEXT_SWITCH_CASE: return "NEXT_SWITCH_CASE";
    case StmtUseSelector::NEXT_UPPER_BOUND: return "NEXT_UPPER_BOUND";
    case StmtUseSelector::NOEXCEPT_EXPRESSION: return "NOEXCEPT_EXPRESSION";
    case StmtUseSelector::NUM_BITS_EXPRESSION: return "NUM_BITS_EXPRESSION";
    case StmtUseSelector::NUM_ITERATIONS: return "NUM_ITERATIONS";
    case StmtUseSelector::OBJ_C_PROPERTY: return "OBJ_C_PROPERTY";
    case StmtUseSelector::OFFSET: return "OFFSET";
    case StmtUseSelector::OPAQUE_VALUE: return "OPAQUE_VALUE";
    case StmtUseSelector::OPERAND: return "OPERAND";
    case StmtUseSelector::OPERATOR_COAWAIT_LOOKUP: return "OPERATOR_COAWAIT_LOOKUP";
    case StmtUseSelector::OPERATOR_DELETE_THIS_ARGUMENT: return "OPERATOR_DELETE_THIS_ARGUMENT";
    case StmtUseSelector::ORDER: return "ORDER";
    case StmtUseSelector::ORDER_FAIL: return "ORDER_FAIL";
    case StmtUseSelector::PATTERN: return "PATTERN";
    case StmtUseSelector::PLACEHOLDER_TYPE_CONSTRAINT: return "PLACEHOLDER_TYPE_CONSTRAINT";
    case StmtUseSelector::POINTER: return "POINTER";
    case StmtUseSelector::PRE_CONDITION: return "PRE_CONDITION";
    case StmtUseSelector::PRE_INITIALIZERS: return "PRE_INITIALIZERS";
    case StmtUseSelector::PREV_ENSURE_UPPER_BOUND: return "PREV_ENSURE_UPPER_BOUND";
    case StmtUseSelector::PREV_LOWER_BOUND_VARIABLE: return "PREV_LOWER_BOUND_VARIABLE";
    case StmtUseSelector::PREV_UPPER_BOUND_VARIABLE: return "PREV_UPPER_BOUND_VARIABLE";
    case StmtUseSelector::PROMISE_CALL: return "PROMISE_CALL";
    case StmtUseSelector::PROMISE_DECLARATION_STATEMENT: return "PROMISE_DECLARATION_STATEMENT";
    case StmtUseSelector::QUERIED_EXPRESSION: return "QUERIED_EXPRESSION";
    case StmtUseSelector::RANGE_INITIALIZER: return "RANGE_INITIALIZER";
    case StmtUseSelector::RANGE_STATEMENT: return "RANGE_STATEMENT";
    case StmtUseSelector::RAW_STATEMENT: return "RAW_STATEMENT";
    case StmtUseSelector::READY_EXPRESSION: return "READY_EXPRESSION";
    case StmtUseSelector::REDUCTION_REFERENCE: return "REDUCTION_REFERENCE";
    case StmtUseSelector::REFERENCE: return "REFERENCE";
    case StmtUseSelector::REPLACEMENT: return "REPLACEMENT";
    case StmtUseSelector::REQUIRES_CLAUSE: return "REQUIRES_CLAUSE";
    case StmtUseSelector::RESULT_DECLARATION: return "RESULT_DECLARATION";
    case StmtUseSelector::RESULT_EXPRESSION: return "RESULT_EXPRESSION";
    case StmtUseSelector::RESUME_EXPRESSION: return "RESUME_EXPRESSION";
    case StmtUseSelector::RETURN_STATEMENT: return "RETURN_STATEMENT";
    case StmtUseSelector::RETURN_STATEMENT_ON_ALLOC_FAILURE: return "RETURN_STATEMENT_ON_ALLOC_FAILURE";
    case StmtUseSelector::RETURN_VALUE: return "RETURN_VALUE";
    case StmtUseSelector::RETURN_VALUE_INITIALIZER: return "RETURN_VALUE_INITIALIZER";
    case StmtUseSelector::RHS: return "RHS";
    case StmtUseSelector::ROW_EXPRESSION: return "ROW_EXPRESSION";
    case StmtUseSelector::ROW_INDEX: return "ROW_INDEX";
    case StmtUseSelector::SCOPE: return "SCOPE";
    case StmtUseSelector::SEMANTIC_FORM: return "SEMANTIC_FORM";
    case StmtUseSelector::SETTER_CXX_ASSIGNMENT: return "SETTER_CXX_ASSIGNMENT";
    case StmtUseSelector::SIMDLEN: return "SIMDLEN";
    case StmtUseSelector::SIZE_EXPRESSION: return "SIZE_EXPRESSION";
    case StmtUseSelector::SOURCE_EXPRESSION: return "SOURCE_EXPRESSION";
    case StmtUseSelector::SRC_EXPRESSION: return "SRC_EXPRESSION";
    case StmtUseSelector::STATEMENT: return "STATEMENT";
    case StmtUseSelector::STATEMENT_EXPRESSION_RESULT: return "STATEMENT_EXPRESSION_RESULT";
    case StmtUseSelector::STRIDE: return "STRIDE";
    case StmtUseSelector::STRIDE_VARIABLE: return "STRIDE_VARIABLE";
    case StmtUseSelector::STRING: return "STRING";
    case StmtUseSelector::STRIP_LABEL_LIKE_STATEMENTS: return "STRIP_LABEL_LIKE_STATEMENTS";
    case StmtUseSelector::STRUCTURED_BLOCK: return "STRUCTURED_BLOCK";
    case StmtUseSelector::SUB_EXPRESSION: return "SUB_EXPRESSION";
    case StmtUseSelector::SUB_EXPRESSION_AS_WRITTEN: return "SUB_EXPRESSION_AS_WRITTEN";
    case StmtUseSelector::SUB_STATEMENT: return "SUB_STATEMENT";
    case StmtUseSelector::SUCCESS_VALUE: return "SUCCESS_VALUE";
    case StmtUseSelector::SUSPEND_EXPRESSION: return "SUSPEND_EXPRESSION";
    case StmtUseSelector::SYNCH_BODY: return "SYNCH_BODY";
    case StmtUseSelector::SYNCH_EXPRESSION: return "SYNCH_EXPRESSION";
    case StmtUseSelector::SYNTACTIC_FORM: return "SYNTACTIC_FORM";
    case StmtUseSelector::TARGET: return "TARGET";
    case StmtUseSelector::TASK_REDUCTION_REFERENCE_EXPRESSION: return "TASK_REDUCTION_REFERENCE_EXPRESSION";
    case StmtUseSelector::TEMPORARY_EXPRESSION: return "TEMPORARY_EXPRESSION";
    case StmtUseSelector::THEN: return "THEN";
    case StmtUseSelector::THROW_EXPRESSION: return "THROW_EXPRESSION";
    case StmtUseSelector::TRAILING_REQUIRES_CLAUSE: return "TRAILING_REQUIRES_CLAUSE";
    case StmtUseSelector::TRANSFORMED_STATEMENT: return "TRANSFORMED_STATEMENT";
    case StmtUseSelector::TRUE_EXPRESSION: return "TRUE_EXPRESSION";
    case StmtUseSelector::TRY_BLOCK: return "TRY_BLOCK";
    case StmtUseSelector::TRY_BODY: return "TRY_BODY";
    case StmtUseSelector::UNDERLYING_EXPRESSION: return "UNDERLYING_EXPRESSION";
    case StmtUseSelector::UNINSTANTIATED_DEFAULT_ARGUMENT: return "UNINSTANTIATED_DEFAULT_ARGUMENT";
    case StmtUseSelector::UPDATE_EXPRESSION: return "UPDATE_EXPRESSION";
    case StmtUseSelector::UPDATER: return "UPDATER";
    case StmtUseSelector::UPPER_BOUND_VARIABLE: return "UPPER_BOUND_VARIABLE";
    case StmtUseSelector::V: return "V";
    case StmtUseSelector::VALUE: return "VALUE";
    case StmtUseSelector::VALUE1: return "VALUE1";
    case StmtUseSelector::VALUE2: return "VALUE2";
    case StmtUseSelector::VARIANT_FUNC_REFERENCE: return "VARIANT_FUNC_REFERENCE";
    case StmtUseSelector::WEAK: return "WEAK";
    case StmtUseSelector::X: return "X";
  }
}

const char *EnumeratorName(TypeUseSelector sel) {
  switch (sel) {
    case TypeUseSelector::ALIASED_TYPE: return "ALIASED_TYPE";
    case TypeUseSelector::ALIGNMENT_TYPE: return "ALIGNMENT_TYPE";
    case TypeUseSelector::ALLOCATED_TYPE: return "ALLOCATED_TYPE";
    case TypeUseSelector::ARGUMENT_TYPE: return "ARGUMENT_TYPE";
    case TypeUseSelector::ARRAY_ELEMENT_TYPE_NO_TYPE_QUALIFIED: return "ARRAY_ELEMENT_TYPE_NO_TYPE_QUALIFIED";
    case TypeUseSelector::AS_COMPLEX_INTEGER_TYPE: return "AS_COMPLEX_INTEGER_TYPE";
    case TypeUseSelector::AS_OBJ_C_INTERFACE_POINTER_TYPE: return "AS_OBJ_C_INTERFACE_POINTER_TYPE";
    case TypeUseSelector::AS_OBJ_C_INTERFACE_TYPE: return "AS_OBJ_C_INTERFACE_TYPE";
    case TypeUseSelector::AS_OBJ_C_QUALIFIED_CLASS_TYPE: return "AS_OBJ_C_QUALIFIED_CLASS_TYPE";
    case TypeUseSelector::AS_OBJ_C_QUALIFIED_ID_TYPE: return "AS_OBJ_C_QUALIFIED_ID_TYPE";
    case TypeUseSelector::AS_OBJ_C_QUALIFIED_INTERFACE_TYPE: return "AS_OBJ_C_QUALIFIED_INTERFACE_TYPE";
    case TypeUseSelector::AS_PLACEHOLDER_TYPE: return "AS_PLACEHOLDER_TYPE";
    case TypeUseSelector::AS_STRUCTURE_TYPE: return "AS_STRUCTURE_TYPE";
    case TypeUseSelector::AS_TYPE: return "AS_TYPE";
    case TypeUseSelector::AS_UNION_TYPE: return "AS_UNION_TYPE";
    case TypeUseSelector::ATOMIC_UNQUALIFIED_TYPE: return "ATOMIC_UNQUALIFIED_TYPE";
    case TypeUseSelector::BASE_TYPE: return "BASE_TYPE";
    case TypeUseSelector::CALL_RESULT_TYPE: return "CALL_RESULT_TYPE";
    case TypeUseSelector::CALL_RETURN_TYPE: return "CALL_RETURN_TYPE";
    case TypeUseSelector::CANONICAL_TYPE: return "CANONICAL_TYPE";
    case TypeUseSelector::CAPTURED_VLA_TYPE: return "CAPTURED_VLA_TYPE";
    case TypeUseSelector::CAUGHT_TYPE: return "CAUGHT_TYPE";
    case TypeUseSelector::CLASS_: return "CLASS_";
    case TypeUseSelector::CLASS_RECEIVER: return "CLASS_RECEIVER";
    case TypeUseSelector::CLASS_RECEIVER_TYPE: return "CLASS_RECEIVER_TYPE";
    case TypeUseSelector::COMPUTATION_LHS_TYPE: return "COMPUTATION_LHS_TYPE";
    case TypeUseSelector::COMPUTATION_RESULT_TYPE: return "COMPUTATION_RESULT_TYPE";
    case TypeUseSelector::CONTAINED_AUTO_TYPE: return "CONTAINED_AUTO_TYPE";
    case TypeUseSelector::CONTAINED_DEDUCED_TYPE: return "CONTAINED_DEDUCED_TYPE";
    case TypeUseSelector::CONVERSION_TYPE: return "CONVERSION_TYPE";
    case TypeUseSelector::DECLARED_RETURN_TYPE: return "DECLARED_RETURN_TYPE";
    case TypeUseSelector::DEFAULT_ARGUMENT: return "DEFAULT_ARGUMENT";
    case TypeUseSelector::DEFAULT_ARGUMENT_INFO: return "DEFAULT_ARGUMENT_INFO";
    case TypeUseSelector::DEREF_TYPE: return "DEREF_TYPE";
    case TypeUseSelector::DEREF_TYPE_TOKEN: return "DEREF_TYPE_TOKEN";
    case TypeUseSelector::DESTROYED_TYPE: return "DESTROYED_TYPE";
    case TypeUseSelector::DESUGAR: return "DESUGAR";
    case TypeUseSelector::DESUGARED_TYPE: return "DESUGARED_TYPE";
    case TypeUseSelector::ELEMENT_TYPE: return "ELEMENT_TYPE";
    case TypeUseSelector::ENCODED_TYPE: return "ENCODED_TYPE";
    case TypeUseSelector::EQUIVALENT_TYPE: return "EQUIVALENT_TYPE";
    case TypeUseSelector::FRIEND_TYPE: return "FRIEND_TYPE";
    case TypeUseSelector::FUNCTION_TYPE: return "FUNCTION_TYPE";
    case TypeUseSelector::IGNORE_PARENTHESES: return "IGNORE_PARENTHESES";
    case TypeUseSelector::INJECTED_SPECIALIZATION_TYPE: return "INJECTED_SPECIALIZATION_TYPE";
    case TypeUseSelector::INJECTED_TST: return "INJECTED_TST";
    case TypeUseSelector::INNER_TYPE: return "INNER_TYPE";
    case TypeUseSelector::INTEGER_TYPE: return "INTEGER_TYPE";
    case TypeUseSelector::INTERFACE: return "INTERFACE";
    case TypeUseSelector::INTERFACE_TOKEN: return "INTERFACE_TOKEN";
    case TypeUseSelector::INTERFACE_TYPE: return "INTERFACE_TYPE";
    case TypeUseSelector::LAMBDA_TYPE: return "LAMBDA_TYPE";
    case TypeUseSelector::LOCAL_UNQUALIFIED_TYPE: return "LOCAL_UNQUALIFIED_TYPE";
    case TypeUseSelector::LOCALLY_UNQUALIFIED_SINGLE_STEP_DESUGARED_TYPE: return "LOCALLY_UNQUALIFIED_SINGLE_STEP_DESUGARED_TYPE";
    case TypeUseSelector::MATCHING_C_TYPE: return "MATCHING_C_TYPE";
    case TypeUseSelector::MATCHING_C_TYPE_TOKEN: return "MATCHING_C_TYPE_TOKEN";
    case TypeUseSelector::MODIFIED_TYPE: return "MODIFIED_TYPE";
    case TypeUseSelector::NAMED_TYPE: return "NAMED_TYPE";
    case TypeUseSelector::NON_L_VALUE_EXPRESSION_TYPE: return "NON_L_VALUE_EXPRESSION_TYPE";
    case TypeUseSelector::NON_PACK_EXPANSION_TYPE: return "NON_PACK_EXPANSION_TYPE";
    case TypeUseSelector::NON_REFERENCE_TYPE: return "NON_REFERENCE_TYPE";
    case TypeUseSelector::NULL_POINTER_TYPE: return "NULL_POINTER_TYPE";
    case TypeUseSelector::OBJECT_TYPE: return "OBJECT_TYPE";
    case TypeUseSelector::ORIGINAL_TYPE: return "ORIGINAL_TYPE";
    case TypeUseSelector::PARAMETER_TYPE: return "PARAMETER_TYPE";
    case TypeUseSelector::PARAMETER_TYPE_FOR_DECLARATION: return "PARAMETER_TYPE_FOR_DECLARATION";
    case TypeUseSelector::PATTERN: return "PATTERN";
    case TypeUseSelector::POINTEE_OR_ARRAY_ELEMENT_TYPE: return "POINTEE_OR_ARRAY_ELEMENT_TYPE";
    case TypeUseSelector::POINTEE_TYPE: return "POINTEE_TYPE";
    case TypeUseSelector::POINTEE_TYPE_AS_WRITTEN: return "POINTEE_TYPE_AS_WRITTEN";
    case TypeUseSelector::PROMOTION_TYPE: return "PROMOTION_TYPE";
    case TypeUseSelector::QUERIED_TYPE: return "QUERIED_TYPE";
    case TypeUseSelector::RECEIVER_TYPE: return "RECEIVER_TYPE";
    case TypeUseSelector::REPLACED_PARAMETER: return "REPLACED_PARAMETER";
    case TypeUseSelector::REPLACEMENT_TYPE: return "REPLACEMENT_TYPE";
    case TypeUseSelector::RESOLVED_TYPE: return "RESOLVED_TYPE";
    case TypeUseSelector::RETURN_TYPE: return "RETURN_TYPE";
    case TypeUseSelector::SCOPE_TYPE: return "SCOPE_TYPE";
    case TypeUseSelector::SIGNATURE_AS_WRITTEN: return "SIGNATURE_AS_WRITTEN";
    case TypeUseSelector::SINGLE_STEP_DESUGARED_TYPE: return "SINGLE_STEP_DESUGARED_TYPE";
    case TypeUseSelector::STRIP_OBJ_C_KIND_OF_TYPE: return "STRIP_OBJ_C_KIND_OF_TYPE";
    case TypeUseSelector::STRIP_OBJ_C_KIND_OF_TYPE_AND_QUALIFIERS: return "STRIP_OBJ_C_KIND_OF_TYPE_AND_QUALIFIERS";
    case TypeUseSelector::SUPER_CLASS_TYPE: return "SUPER_CLASS_TYPE";
    case TypeUseSelector::SUPER_RECEIVER_TYPE: return "SUPER_RECEIVER_TYPE";
    case TypeUseSelector::SUPER_TYPE: return "SUPER_TYPE";
    case TypeUseSelector::SVE_ELEMENT_TYPE: return "SVE_ELEMENT_TYPE";
    case TypeUseSelector::THIS_OBJECT_TYPE: return "THIS_OBJECT_TYPE";
    case TypeUseSelector::THIS_TYPE: return "THIS_TYPE";
    case TypeUseSelector::TYPE: return "TYPE";
    case TypeUseSelector::TYPE_AS_WRITTEN: return "TYPE_AS_WRITTEN";
    case TypeUseSelector::TYPE_FOR_DECLARATION: return "TYPE_FOR_DECLARATION";
    case TypeUseSelector::TYPE_HINT: return "TYPE_HINT";
    case TypeUseSelector::TYPE_HINT_TOKEN: return "TYPE_HINT_TOKEN";
    case TypeUseSelector::TYPE_OF_ARGUMENT: return "TYPE_OF_ARGUMENT";
    case TypeUseSelector::TYPE_OPERAND: return "TYPE_OPERAND";
    case TypeUseSelector::TYPE_OPERAND_SOURCE_INFO: return "TYPE_OPERAND_SOURCE_INFO";
    case TypeUseSelector::TYPEDEF_TYPE: return "TYPEDEF_TYPE";
    case TypeUseSelector::TYPEDEF_TYPE_TOKEN: return "TYPEDEF_TYPE_TOKEN";
    case TypeUseSelector::UNDERLYING_TYPE: return "UNDERLYING_TYPE";
    case TypeUseSelector::UNQUALIFIED_DESUGARED_TYPE: return "UNQUALIFIED_DESUGARED_TYPE";
    case TypeUseSelector::UNQUALIFIED_TYPE: return "UNQUALIFIED_TYPE";
    case TypeUseSelector::VALUE_TYPE: return "VALUE_TYPE";
    case TypeUseSelector::WITH_CONST: return "WITH_CONST";
    case TypeUseSelector::WITH_RESTRICT: return "WITH_RESTRICT";
    case TypeUseSelector::WITH_VOLATILE: return "WITH_VOLATILE";
    case TypeUseSelector::WITHOUT_LOCAL_FAST_QUALIFIERS: return "WITHOUT_LOCAL_FAST_QUALIFIERS";
    case TypeUseSelector::WRITTEN_TYPE: return "WRITTEN_TYPE";
  }
}

const char *EnumeratorName(TokenUseSelector sel) {
  switch (sel) {
    case TokenUseSelector::ACCESS_SPECIFIER_TOKEN: return "ACCESS_SPECIFIER_TOKEN";
    case TokenUseSelector::ACCESSOR_TOKEN: return "ACCESSOR_TOKEN";
    case TokenUseSelector::ALIAS_TOKEN: return "ALIAS_TOKEN";
    case TokenUseSelector::AMP_AMP_TOKEN: return "AMP_AMP_TOKEN";
    case TokenUseSelector::ASSEMBLY_TOKEN: return "ASSEMBLY_TOKEN";
    case TokenUseSelector::AT_CATCH_TOKEN: return "AT_CATCH_TOKEN";
    case TokenUseSelector::AT_FINALLY_TOKEN: return "AT_FINALLY_TOKEN";
    case TokenUseSelector::AT_START_TOKEN: return "AT_START_TOKEN";
    case TokenUseSelector::AT_SYNCHRONIZED_TOKEN: return "AT_SYNCHRONIZED_TOKEN";
    case TokenUseSelector::AT_TOKEN: return "AT_TOKEN";
    case TokenUseSelector::AT_TRY_TOKEN: return "AT_TRY_TOKEN";
    case TokenUseSelector::ATTRIBUTE_TOKEN: return "ATTRIBUTE_TOKEN";
    case TokenUseSelector::BASE_TOKEN_END: return "BASE_TOKEN_END";
    case TokenUseSelector::BASE_TYPE_TOKEN: return "BASE_TYPE_TOKEN";
    case TokenUseSelector::BREAK_TOKEN: return "BREAK_TOKEN";
    case TokenUseSelector::BRIDGE_KEYWORD_TOKEN: return "BRIDGE_KEYWORD_TOKEN";
    case TokenUseSelector::BUILTIN_TOKEN: return "BUILTIN_TOKEN";
    case TokenUseSelector::CAPTURE_DEFAULT_TOKEN: return "CAPTURE_DEFAULT_TOKEN";
    case TokenUseSelector::CARET_TOKEN: return "CARET_TOKEN";
    case TokenUseSelector::CASE_TOKEN: return "CASE_TOKEN";
    case TokenUseSelector::CATCH_TOKEN: return "CATCH_TOKEN";
    case TokenUseSelector::CATEGORY_NAME_TOKEN: return "CATEGORY_NAME_TOKEN";
    case TokenUseSelector::COAWAIT_TOKEN: return "COAWAIT_TOKEN";
    case TokenUseSelector::COLON_COLON_TOKEN: return "COLON_COLON_TOKEN";
    case TokenUseSelector::COLON_TOKEN: return "COLON_TOKEN";
    case TokenUseSelector::CONTINUE_TOKEN: return "CONTINUE_TOKEN";
    case TokenUseSelector::DECLARATOR_END_TOKEN: return "DECLARATOR_END_TOKEN";
    case TokenUseSelector::DEFAULT_ARGUMENT_TOKEN: return "DEFAULT_ARGUMENT_TOKEN";
    case TokenUseSelector::DEFAULT_TOKEN: return "DEFAULT_TOKEN";
    case TokenUseSelector::DESTROYED_TYPE_TOKEN: return "DESTROYED_TYPE_TOKEN";
    case TokenUseSelector::DO_TOKEN: return "DO_TOKEN";
    case TokenUseSelector::DOT_TOKEN: return "DOT_TOKEN";
    case TokenUseSelector::ELLIPSIS_TOKEN: return "ELLIPSIS_TOKEN";
    case TokenUseSelector::ELSE_TOKEN: return "ELSE_TOKEN";
    case TokenUseSelector::END_OF_DEFINITION_TOKEN: return "END_OF_DEFINITION_TOKEN";
    case TokenUseSelector::ENUM_TOKEN: return "ENUM_TOKEN";
    case TokenUseSelector::EQUAL_OR_COLON_TOKEN: return "EQUAL_OR_COLON_TOKEN";
    case TokenUseSelector::EXCEPT_TOKEN: return "EXCEPT_TOKEN";
    case TokenUseSelector::EXPORT_TOKEN: return "EXPORT_TOKEN";
    case TokenUseSelector::EXPRESSION_TOKEN: return "EXPRESSION_TOKEN";
    case TokenUseSelector::EXTERN_TOKEN: return "EXTERN_TOKEN";
    case TokenUseSelector::FIELD_TOKEN: return "FIELD_TOKEN";
    case TokenUseSelector::FINALLY_TOKEN: return "FINALLY_TOKEN";
    case TokenUseSelector::FIRST_COLON_TOKEN: return "FIRST_COLON_TOKEN";
    case TokenUseSelector::FIRST_INNER_TOKEN: return "FIRST_INNER_TOKEN";
    case TokenUseSelector::FIRST_OUTER_TOKEN: return "FIRST_OUTER_TOKEN";
    case TokenUseSelector::FOR_TOKEN: return "FOR_TOKEN";
    case TokenUseSelector::FRIEND_TOKEN: return "FRIEND_TOKEN";
    case TokenUseSelector::GENERIC_TOKEN: return "GENERIC_TOKEN";
    case TokenUseSelector::GETTER_NAME_TOKEN: return "GETTER_NAME_TOKEN";
    case TokenUseSelector::GOTO_TOKEN: return "GOTO_TOKEN";
    case TokenUseSelector::IDENTIFIER_TOKEN: return "IDENTIFIER_TOKEN";
    case TokenUseSelector::IF_TOKEN: return "IF_TOKEN";
    case TokenUseSelector::INSTANCE_VARIABLE_L_BRACE_TOKEN: return "INSTANCE_VARIABLE_L_BRACE_TOKEN";
    case TokenUseSelector::INSTANCE_VARIABLE_R_BRACE_TOKEN: return "INSTANCE_VARIABLE_R_BRACE_TOKEN";
    case TokenUseSelector::ISA_MEMBER_TOKEN: return "ISA_MEMBER_TOKEN";
    case TokenUseSelector::ITERATOR_KW_TOKEN: return "ITERATOR_KW_TOKEN";
    case TokenUseSelector::KEYWORD_TOKEN: return "KEYWORD_TOKEN";
    case TokenUseSelector::L_ANGLE_TOKEN: return "L_ANGLE_TOKEN";
    case TokenUseSelector::L_BRACE_TOKEN: return "L_BRACE_TOKEN";
    case TokenUseSelector::L_BRACKET_TOKEN: return "L_BRACKET_TOKEN";
    case TokenUseSelector::L_PAREN_TOKEN: return "L_PAREN_TOKEN";
    case TokenUseSelector::LABEL_TOKEN: return "LABEL_TOKEN";
    case TokenUseSelector::LEAVE_TOKEN: return "LEAVE_TOKEN";
    case TokenUseSelector::LEFT_ANGLE_TOKEN: return "LEFT_ANGLE_TOKEN";
    case TokenUseSelector::LEFT_BRACE_TOKEN: return "LEFT_BRACE_TOKEN";
    case TokenUseSelector::LEFT_BRACKET_TOKEN: return "LEFT_BRACKET_TOKEN";
    case TokenUseSelector::LEFT_TOKEN: return "LEFT_TOKEN";
    case TokenUseSelector::MEMBER_TOKEN: return "MEMBER_TOKEN";
    case TokenUseSelector::NAME_TOKEN: return "NAME_TOKEN";
    case TokenUseSelector::NAMESPACE_KEY_TOKEN: return "NAMESPACE_KEY_TOKEN";
    case TokenUseSelector::NAMESPACE_TOKEN: return "NAMESPACE_TOKEN";
    case TokenUseSelector::OPERATION_TOKEN: return "OPERATION_TOKEN";
    case TokenUseSelector::OPERATOR_TOKEN: return "OPERATOR_TOKEN";
    case TokenUseSelector::PACK_TOKEN: return "PACK_TOKEN";
    case TokenUseSelector::PARAMETER_PACK_TOKEN: return "PARAMETER_PACK_TOKEN";
    case TokenUseSelector::POINT_OF_INSTANTIATION: return "POINT_OF_INSTANTIATION";
    case TokenUseSelector::PROPERTY_INSTANCE_VARIABLE_DECLARATION_TOKEN: return "PROPERTY_INSTANCE_VARIABLE_DECLARATION_TOKEN";
    case TokenUseSelector::PROTOCOL_ID_TOKEN: return "PROTOCOL_ID_TOKEN";
    case TokenUseSelector::QUESTION_TOKEN: return "QUESTION_TOKEN";
    case TokenUseSelector::R_ANGLE_TOKEN: return "R_ANGLE_TOKEN";
    case TokenUseSelector::R_BRACE_TOKEN: return "R_BRACE_TOKEN";
    case TokenUseSelector::R_BRACKET_TOKEN: return "R_BRACKET_TOKEN";
    case TokenUseSelector::R_PAREN_TOKEN: return "R_PAREN_TOKEN";
    case TokenUseSelector::RECEIVER_TOKEN: return "RECEIVER_TOKEN";
    case TokenUseSelector::REQUIRES_KEYWORD_TOKEN: return "REQUIRES_KEYWORD_TOKEN";
    case TokenUseSelector::RETURN_TOKEN: return "RETURN_TOKEN";
    case TokenUseSelector::RIGHT_ANGLE_TOKEN: return "RIGHT_ANGLE_TOKEN";
    case TokenUseSelector::RIGHT_BRACE_TOKEN: return "RIGHT_BRACE_TOKEN";
    case TokenUseSelector::RIGHT_BRACKET_TOKEN: return "RIGHT_BRACKET_TOKEN";
    case TokenUseSelector::RIGHT_TOKEN: return "RIGHT_TOKEN";
    case TokenUseSelector::SECOND_COLON_TOKEN: return "SECOND_COLON_TOKEN";
    case TokenUseSelector::SELECTOR_START_TOKEN: return "SELECTOR_START_TOKEN";
    case TokenUseSelector::SEMI_TOKEN: return "SEMI_TOKEN";
    case TokenUseSelector::SETTER_NAME_TOKEN: return "SETTER_NAME_TOKEN";
    case TokenUseSelector::STAR_TOKEN: return "STAR_TOKEN";
    case TokenUseSelector::SUPER_CLASS_TOKEN: return "SUPER_CLASS_TOKEN";
    case TokenUseSelector::SUPER_TOKEN: return "SUPER_TOKEN";
    case TokenUseSelector::SWITCH_TOKEN: return "SWITCH_TOKEN";
    case TokenUseSelector::TARGET_CALL_TOKEN: return "TARGET_CALL_TOKEN";
    case TokenUseSelector::TARGET_NAME_TOKEN: return "TARGET_NAME_TOKEN";
    case TokenUseSelector::TEMPLATE_KEYWORD_TOKEN: return "TEMPLATE_KEYWORD_TOKEN";
    case TokenUseSelector::THROW_TOKEN: return "THROW_TOKEN";
    case TokenUseSelector::TILDE_TOKEN: return "TILDE_TOKEN";
    case TokenUseSelector::TOKEN: return "TOKEN";
    case TokenUseSelector::TOKEN_TOKEN: return "TOKEN_TOKEN";
    case TokenUseSelector::TRY_TOKEN: return "TRY_TOKEN";
    case TokenUseSelector::TYPE_SPEC_END_TOKEN: return "TYPE_SPEC_END_TOKEN";
    case TokenUseSelector::TYPE_SPEC_START_TOKEN: return "TYPE_SPEC_START_TOKEN";
    case TokenUseSelector::TYPENAME_TOKEN: return "TYPENAME_TOKEN";
    case TokenUseSelector::UD_SUFFIX_TOKEN: return "UD_SUFFIX_TOKEN";
    case TokenUseSelector::USED_TOKEN: return "USED_TOKEN";
    case TokenUseSelector::USING_TOKEN: return "USING_TOKEN";
    case TokenUseSelector::VARIANCE_TOKEN: return "VARIANCE_TOKEN";
    case TokenUseSelector::WHILE_TOKEN: return "WHILE_TOKEN";
  }
}

const char *EnumeratorName(AttrUseSelector sel) {
  switch (sel) {
    case AttrUseSelector::DEFINING_ATTRIBUTE: return "DEFINING_ATTRIBUTE";
    case AttrUseSelector::EXTERNAL_SOURCE_SYMBOL_ATTRIBUTE: return "EXTERNAL_SOURCE_SYMBOL_ATTRIBUTE";
    case AttrUseSelector::UNUSED_RESULT_ATTRIBUTE: return "UNUSED_RESULT_ATTRIBUTE";
  }
}

#endif
}  // namespace mx
