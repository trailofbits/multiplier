#
# Copyright (c) 2022-present, Trail of Bits, Inc.
# All rights reserved.
#
# This source code is licensed in accordance with the terms specified in
# the LICENSE file found in the root directory of this source tree.
#

string(TOLOWER "${PROJECT_NAME}" lower_project_name)

set(datalog_source_dir "${CMAKE_CURRENT_SOURCE_DIR}")
set(datalog_bin_dir "${CMAKE_CURRENT_BINARY_DIR}")

set(original_headers
  "${CMAKE_CURRENT_BINARY_DIR}/mx.client.h"
  "${CMAKE_CURRENT_BINARY_DIR}/mx_generated.h"
)

set(copied_headers
  "${binary_include_dir}/mx.client.h"
  "${binary_include_dir}/mx_generated.h"
)

add_executable("generate_tokens"
  "GenerateTokens.cpp"
)

target_link_libraries("generate_tokens"
  PRIVATE
    pasta::pasta
)


#add_executable("generate_decls"
#  "GenerateDecls.cpp"
#)

#target_link_libraries("generate_decls"
#  PRIVATE
#    pasta::pasta
#)


set(generated_tokens_dr "${datalog_bin_dir}/Server/tokens.dr")
#set(generated_decls_dr "${datalog_bin_dir}/Server/decls.dr")

add_custom_command(TARGET "generate_tokens"
  PRE_BUILD
  COMMAND "${CMAKE_COMMAND}" -E make_directory "${datalog_bin_dir}/Server"
)
add_custom_command(TARGET "generate_tokens"
  POST_BUILD
  COMMAND "generate_tokens" "${generated_tokens_dr}"
  COMMENT "Generating ${generated_tokens_dr}"
  BYPRODUCTS "${generated_tokens_dr}"
)

#add_custom_command(TARGET "generate_decls"
#  PRE_BUILD
#  COMMAND "${CMAKE_COMMAND}" -E make_directory "${datalog_bin_dir}/Server"
#)
#add_custom_command(TARGET "generate_decls"
#  POST_BUILD
#  COMMAND
#    "generate_decls"
#    "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}"
#    "${VCPKG_ROOT_INSTALL_DIR}/${VCPKG_TARGET_TRIPLET}/${CMAKE_INSTALL_INCLUDEDIR}"
#    "${generated_decls_dr}"
#  COMMENT "Generating ${generated_decls_dr}"
#  BYPRODUCTS "${generated_decls_dr}"
#)

add_library("server_storage" STATIC
  "Storage.h"
  "Storage.cpp"
)

target_link_libraries("server_storage"
  PUBLIC
    $<BUILD_INTERFACE:util>
    $<BUILD_INTERFACE:concurrentqueue>
)

add_dependencies("server_storage"
  "generate_tokens"
)

# Compile the server Datalog code. The Datalog code itself executes in
# mx-server. It has a client interface, which all code uses via
# `mx::DatalogClient`.
compile_datalog(
  DATABASE_NAME
    "mx"
  LIBRARY_NAME
    "datalog_server_client"
  SERVICE_NAME
    "mx-server"
  CXX_OUTPUT_DIR
    "${datalog_bin_dir}"
  DOT_OUTPUT_FILE
    "${datalog_bin_dir}/server.dot"
  IR_OUTPUT_FILE
    "${datalog_bin_dir}/server.ir"
  FB_OUTPUT_FILE
    "${datalog_bin_dir}/mx.fbs"
  SOURCES
    "${datalog_source_dir}/Server/files.dr"
    "${datalog_source_dir}/Server/foreign_types.dr"
    "${datalog_source_dir}/Server/functors.dr"
    "${datalog_source_dir}/Server/commands.dr"
    "${datalog_source_dir}/Server/paths.dr"
    "${datalog_source_dir}/Server/types.dr"
    "${generated_tokens_dr}"
  WORKING_DIRECTORY
    "${datalog_source_dir}"
  INCLUDE_DIRECTORIES
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    "${datalog_source_dir}"
  DEPENDS
    "${datalog_source_dir}/Functors.h"
  LIBRARIES
    $<BUILD_INTERFACE:server_storage>
)

# Client interface to the server Datalog code.
add_custom_command(
  OUTPUT ${copied_headers}
  COMMAND "${CMAKE_COMMAND}" -E make_directory "${binary_include_dir}"
  COMMAND "${CMAKE_COMMAND}" -E copy "mx.client.h"
                                     "${binary_include_dir}/mx.client.h"
  COMMAND "${CMAKE_COMMAND}" -E copy "mx_generated.h"
                                     "${binary_include_dir}/mx_generated.h"
  DEPENDS
    ${original_headers}

  BYPRODUCTS
    ${copied_headers}
  
  WORKING_DIRECTORY
    "${datalog_bin_dir}"

  COMMENT
    "Exporting Datalog server headers"

  VERBATIM
)

add_custom_target("copy_datalog_server_headers"
  DEPENDS
    ${copied_headers}
)

# This is a bit annoying but things that depend on the compiled Datalog also
# depend on the headers being in the right spot. The headers are generated by
# running Dr. Lojekyll, i.e. before the actual libraries themselves are
# built. So, we can inject the copying dependency on those libraries, then
# anything depending on the libraries can be assured that things will be
# in the right spot.
add_dependencies("datalog_server_client"
  "copy_datalog_server_headers"
)
add_dependencies("mx-server"
  "copy_datalog_server_headers"
)

if(MX_ENABLE_INSTALL)
  install(
    TARGETS
      "mx-server"
    EXPORT
      "${PROJECT_NAME}Targets"
    RUNTIME
      DESTINATION
        "${CMAKE_INSTALL_BINDIR}"
  )
endif(MX_ENABLE_INSTALL)
