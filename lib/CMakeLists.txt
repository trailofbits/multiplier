#
# Copyright (c) 2021-present, Trail of Bits, Inc.
# All rights reserved.
#
# This source code is licensed in accordance with the terms specified in
# the LICENSE file found in the root directory of this source tree.
#

string(TOLOWER "${PROJECT_NAME}" lower_project_name)

set(source_include_dir "${PROJECT_SOURCE_DIR}/include/${lower_project_name}")
set(binary_include_dir "${PROJECT_BINARY_DIR}/include/${lower_project_name}")

# These files get auto-generated by `mx-bootstrap`.
add_custom_target("bootstrapped_files"
  DEPENDS
    "${MX_BOOTSTRAP_LIB_AST_CAPNP}"
    "${MX_BOOTSTRAP_LIB_AST_H}"
    "${MX_BOOTSTRAP_LIB_API_AST_CPP}"
    "${MX_BOOTSTRAP_INCLUDE_AST_H}"
)

# Auto-generate C++ headers and sources from our Cap'n Proto schemas.
capnp_generate_cpp(MX_RPC_SOURCES MX_RPC_HEADERS RPC.capnp)
capnp_generate_cpp(MX_AST_SOURCES MX_AST_HEADERS AST.capnp)  # Bootstrapped file.

# Generate the commands to copy the headers into the binary include directory.
set(copied_headers "")
set(copy_headers_commands "")
foreach(capnp_header_path ${MX_RPC_HEADERS} ${MX_AST_HEADERS})
  get_filename_component(header_name "${capnp_header_path}" NAME)
  set(output_header_path "${binary_include_dir}/${header_name}")
  list(APPEND copied_headers $<BUILD_INTERFACE:${output_header_path}>)
  list(APPEND copy_headers_commands
    COMMAND
    "${CMAKE_COMMAND}"
    -E
    copy
    "${capnp_header_path}"
    "${output_header_path}"
  )
endforeach()

# Copy the auto-generated headers into the binary include directory.
add_custom_command(
  OUTPUT
    ${copied_headers}

  COMMAND "${CMAKE_COMMAND}" -E make_directory "${binary_include_dir}"
  ${copy_headers_commands}

  DEPENDS
    ${MX_RPC_HEADERS}
    ${MX_AST_HEADERS}

  COMMENT
    "Exporting Cap'n Proto-generated headers"

  VERBATIM
)

add_custom_target("copy_headers"
  DEPENDS
    ${copied_headers}
)

set(api_headers
  "${source_include_dir}/AST.h"
  "${source_include_dir}/File.h"
  "${source_include_dir}/Fragment.h"
  "${source_include_dir}/Index.h"
  "${source_include_dir}/Iterator.h"
  "${source_include_dir}/Compress.h"
  "${source_include_dir}/Query.h"
  "${source_include_dir}/Reference.h"
  "${source_include_dir}/Result.h"
  "${source_include_dir}/Token.h"
  "${source_include_dir}/Types.h"
  "${source_include_dir}/Use.h"
  "${source_include_dir}/Re2.h"
  "${source_include_dir}/Weggli.h"
  "${MX_BOOTSTRAP_INCLUDE_VISITOR_INC_H}"
)

add_library("mx-api"
  STATIC
    ${api_headers}
    ${copied_headers}

    "${MX_BOOTSTRAP_LIB_API_AST_CPP}"  # Auto-generated

    "API/API.cpp"
    "API/API.h"
    "API/CachingEntityProvider.cpp"
    "API/CachingEntityProvider.h"
    "API/FileList.cpp"
    "API/File.cpp"
    "API/File.h"
    "API/Fragment.cpp"
    "API/FragmentImpl.cpp"
    "API/Fragment.h"
    "API/Index.cpp"
    "API/InvalidEntityProvider.cpp"
    "API/InvalidEntityProvider.h"
    "API/PackedFileImpl.cpp"
    "API/PackedFragmentImpl.cpp"
    "API/Re2.cpp"
    "API/Re2.h"
    "API/RemoteEntityProvider.cpp"
    "API/RemoteEntityProvider.h"
    "API/TokenContext.cpp"
    "API/TokenSubstitution.cpp"
    "API/Token.cpp"
    "API/Token.h"
    "API/Use.cpp"
    "API/Use.h"
    "API/Weggli.cpp"
    "API/Weggli.h"

    "Compress.cpp"
    "Types.cpp"
    "Weggli.cpp"
    "Re2.cpp"
    "Re2.h"

    ${MX_RPC_SOURCES}
    ${MX_AST_SOURCES}
)

add_dependencies("mx-api"
  "copy_headers"
)

target_include_directories("mx-api"
  PUBLIC
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
    $<INSTALL_INTERFACE:include>
  PRIVATE
    "${CMAKE_CURRENT_SOURCE_DIR}"
    "${CMAKE_CURRENT_BINARY_DIR}"
)

target_link_libraries("mx-api"
  PRIVATE
    CapnProto::capnp-rpc
    ZLIB::ZLIB
    re2::re2
)

# Add in Weggli.
if(MX_ENABLE_WEGGLI)
  target_link_libraries("mx-api"
    PUBLIC
      weggli_native::static
  )
else()
  target_compile_definitions("mx-api"
    PRIVATE
      "MX_DISABLE_WEGGLI")
endif()

set_target_properties("mx-api"
  PROPERTIES
    LINKER_LANGUAGE
      CXX
    PUBLIC_HEADER
      "${api_headers}"
    VISIBILITY_INLINES_HIDDEN
      YES
    CXX_VISIBILITY_PRESET
      hidden
    POSITION_INDEPENDENT_CODE
      YES
)

target_compile_features("mx-api"
  PUBLIC
    cxx_std_20
)

target_compile_definitions("mx-api"
  PRIVATE
    "MX_ENABLE_API")

add_library("${PROJECT_NAME}::api" ALIAS "mx-api")
set_target_properties("mx-api" PROPERTIES LINKER_LANGUAGE CXX)

set_target_properties("mx-api"
  PROPERTIES
    PUBLIC_HEADER "${api_headers}")

target_include_directories("mx-api"
  PUBLIC
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/lib>
    $<INSTALL_INTERFACE:include>
  PRIVATE
    "${CMAKE_CURRENT_SOURCE_DIR}"
)

set(util_headers
  "${source_include_dir}/Action.h"
  "${source_include_dir}/AST.h"
  "${source_include_dir}/BloomFilter.h"
  "${source_include_dir}/Compiler.h"
  "${source_include_dir}/Compress.h"
  "${source_include_dir}/Endian.h"
  "${source_include_dir}/Executor.h"
  "${source_include_dir}/Int.h"
  "${source_include_dir}/Iterator.h"
  "${source_include_dir}/PersistentMap.h"
  "${source_include_dir}/ProgressBar.h"
  "${source_include_dir}/Result.h"
  "${source_include_dir}/Signal.h"
  "${source_include_dir}/Serialize.h"
  "${source_include_dir}/SQLiteStore.h"
  "${source_include_dir}/Subprocess.h"
  "${source_include_dir}/Types.h"
  "${source_include_dir}/WorkerPool.h"
  ${copied_headers}
)

add_library("mx-util"
  STATIC
    ${util_headers}

    "Action.cpp"
    "${MX_BOOTSTRAP_LIB_API_AST_CPP}"  # Auto-generated
    "API/API.h"
    "BloomFilter.cpp"
    "Compress.cpp"
    "Executor.cpp"
    "PersistentMap.cpp"
    "ProgressBar.cpp"
    "Signal.cpp"
    "Subprocess.cpp"
    "Types.cpp"
    "WorkerPool.cpp"
    "Weggli.cpp"
    "Re2.cpp"
    "SQLiteStore.cpp"

    ${MX_RPC_SOURCES}
    ${MX_AST_SOURCES}
)

target_compile_definitions("mx-util"
  PRIVATE
    "MX_DISABLE_API")

add_dependencies("mx-util"
  "copy_headers"
)

target_include_directories("mx-util"
  PUBLIC
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
    $<INSTALL_INTERFACE:include>
  PRIVATE
    "${CMAKE_CURRENT_SOURCE_DIR}"
    "${CMAKE_CURRENT_BINARY_DIR}"
)

target_link_libraries("mx-util"
  PRIVATE
    $<BUILD_INTERFACE:concurrentqueue>
    $<BUILD_INTERFACE:reproc++>
    RocksDB::rocksdb
    ZLIB::ZLIB
    glog::glog
    gflags::gflags
    CapnProto::capnp-rpc
    SQLite::SQLite3
    re2::re2
)

if(MX_ENABLE_WEGGLI)
  target_link_libraries("mx-util"
    PRIVATE
      weggli_native::static
  )
else()
  target_compile_definitions("mx-util"
    PRIVATE
      "MX_DISABLE_WEGGLI")
endif()

set_target_properties("mx-util"
  PROPERTIES
    LINKER_LANGUAGE
      CXX
    PUBLIC_HEADER
      "${util_headers}"
    VISIBILITY_INLINES_HIDDEN
      YES
    CXX_VISIBILITY_PRESET
      hidden
    POSITION_INDEPENDENT_CODE
      YES
)

target_compile_features("mx-util"
  PUBLIC
    cxx_std_20
)

set_target_properties("mx-util" PROPERTIES LINKER_LANGUAGE CXX)

set_target_properties("mx-util"
  PROPERTIES
    PUBLIC_HEADER "${public_headers}")

target_include_directories("mx-util"
  PUBLIC
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/lib>
    $<INSTALL_INTERFACE:include>
  PRIVATE
    "${CMAKE_CURRENT_SOURCE_DIR}"
)

if(MX_ENABLE_INSTALL)

  # NOTE(pag): `mx-util` is *not* installed, just `mx-api`.
  install(
    TARGETS
      "mx-api"
    EXPORT "${PROJECT_NAME}Targets"
    RUNTIME
      DESTINATION
        "${CMAKE_INSTALL_BINDIR}"
    LIBRARY
      DESTINATION
        "${CMAKE_INSTALL_LIBDIR}"
    ARCHIVE
      DESTINATION
        "${CMAKE_INSTALL_LIBDIR}"
    PUBLIC_HEADER
      DESTINATION
        "${CMAKE_INSTALL_INCLUDEDIR}/${lower_project_name}"
  )
endif(MX_ENABLE_INSTALL)
