// Copyright (c) 2023-present, Trail of Bits, Inc.
// All rights reserved.
//
// This source code is licensed in accordance with the terms specified in
// the LICENSE file found in the root directory of this source tree.

// Auto-generated file; do not modify!

#pragma once

namespace mx {
namespace ir {

enum class OperationKind : unsigned {
  UNKNOWN,
  BUILTIN_MODULE,
  BUILTIN_UNREALIZED_CONVERSION_CAST,
  LLVM_ASHR,
  LLVM_ACCESS_GROUP,
  LLVM_ADD,
  LLVM_ADDRSPACECAST,
  LLVM_MLIR_ADDRESSOF,
  LLVM_ALIAS_SCOPE_DOMAIN,
  LLVM_ALIAS_SCOPE,
  LLVM_ALLOCA,
  LLVM_AND,
  LLVM_CMPXCHG,
  LLVM_ATOMICRMW,
  LLVM_BITCAST,
  LLVM_BR,
  LLVM_CALL,
  LLVM_COND_BR,
  LLVM_MLIR_CONSTANT,
  LLVM_EXTRACTELEMENT,
  LLVM_EXTRACTVALUE,
  LLVM_FADD,
  LLVM_FCMP,
  LLVM_FDIV,
  LLVM_FMUL,
  LLVM_FNEG,
  LLVM_FPEXT,
  LLVM_FPTOSI,
  LLVM_FPTOUI,
  LLVM_FPTRUNC,
  LLVM_FREM,
  LLVM_FSUB,
  LLVM_FENCE,
  LLVM_FREEZE,
  LLVM_GETELEMENTPTR,
  LLVM_MLIR_GLOBAL_CTORS,
  LLVM_MLIR_GLOBAL_DTORS,
  LLVM_MLIR_GLOBAL,
  LLVM_ICMP,
  LLVM_INLINE_ASM,
  LLVM_INSERTELEMENT,
  LLVM_INSERTVALUE,
  LLVM_INTTOPTR,
  LLVM_INVOKE,
  LLVM_FUNC,
  LLVM_LSHR,
  LLVM_LANDINGPAD,
  LLVM_LOAD,
  LLVM_METADATA,
  LLVM_MUL,
  LLVM_MLIR_NULL,
  LLVM_OR,
  LLVM_PTRTOINT,
  LLVM_RESUME,
  LLVM_RETURN,
  LLVM_SDIV,
  LLVM_SEXT,
  LLVM_SITOFP,
  LLVM_SREM,
  LLVM_SELECT,
  LLVM_SHL,
  LLVM_SHUFFLEVECTOR,
  LLVM_STORE,
  LLVM_SUB,
  LLVM_SWITCH,
  LLVM_TBAA_ROOT,
  LLVM_TBAA_TAG,
  LLVM_TBAA_TYPE_DESC,
  LLVM_TRUNC,
  LLVM_UDIV,
  LLVM_UITOFP,
  LLVM_UREM,
  LLVM_MLIR_UNDEF,
  LLVM_UNREACHABLE,
  LLVM_XOR,
  LLVM_ZEXT,
  LLVM_INTR_ABS,
  LLVM_INTR_ASSUME,
  LLVM_INTR_BITREVERSE,
  LLVM_CALL_INTRINSIC,
  LLVM_INTR_COPYSIGN,
  LLVM_INTR_CORO_ALIGN,
  LLVM_INTR_CORO_BEGIN,
  LLVM_INTR_CORO_END,
  LLVM_INTR_CORO_FREE,
  LLVM_INTR_CORO_ID,
  LLVM_INTR_CORO_RESUME,
  LLVM_INTR_CORO_SAVE,
  LLVM_INTR_CORO_SIZE,
  LLVM_INTR_CORO_SUSPEND,
  LLVM_INTR_COS,
  LLVM_INTR_CTLZ,
  LLVM_INTR_CTTZ,
  LLVM_INTR_CTPOP,
  LLVM_INTR_DBG_ADDR,
  LLVM_INTR_DBG_DECLARE,
  LLVM_INTR_DBG_VALUE,
  LLVM_INTR_EH_TYPEID_FOR,
  LLVM_INTR_EXP2,
  LLVM_INTR_EXP,
  LLVM_INTR_FABS,
  LLVM_INTR_CEIL,
  LLVM_INTR_FLOOR,
  LLVM_INTR_FMA,
  LLVM_INTR_FMULADD,
  LLVM_INTR_TRUNC,
  LLVM_INTR_GET_ACTIVE_LANE_MASK,
  LLVM_INTR_IS_FPCLASS,
  LLVM_INTR_LIFETIME_END,
  LLVM_INTR_LIFETIME_START,
  LLVM_INTR_LOG10,
  LLVM_INTR_LOG2,
  LLVM_INTR_LOG,
  LLVM_INTR_MASKED_LOAD,
  LLVM_INTR_MASKED_STORE,
  LLVM_INTR_MATRIX_COLUMN_MAJOR_LOAD,
  LLVM_INTR_MATRIX_COLUMN_MAJOR_STORE,
  LLVM_INTR_MATRIX_MULTIPLY,
  LLVM_INTR_MATRIX_TRANSPOSE,
  LLVM_INTR_MAXNUM,
  LLVM_INTR_MAXIMUM,
  LLVM_INTR_MEMCPY_INLINE,
  LLVM_INTR_MEMCPY,
  LLVM_INTR_MEMMOVE,
  LLVM_INTR_MEMSET,
  LLVM_INTR_MINNUM,
  LLVM_INTR_MINIMUM,
  LLVM_INTR_POWI,
  LLVM_INTR_POW,
  LLVM_INTR_PREFETCH,
  LLVM_INTR_ROUNDEVEN,
  LLVM_INTR_ROUND,
  LLVM_INTR_SADD_WITH_OVERFLOW,
  LLVM_INTR_SMAX,
  LLVM_INTR_SMIN,
  LLVM_INTR_SMUL_WITH_OVERFLOW,
  LLVM_INTR_SSUB_WITH_OVERFLOW,
  LLVM_INTR_SIN,
  LLVM_INTR_SQRT,
  LLVM_INTR_STACKRESTORE,
  LLVM_INTR_STACKSAVE,
  LLVM_INTR_EXPERIMENTAL_STEPVECTOR,
  LLVM_INTR_UADD_WITH_OVERFLOW,
  LLVM_INTR_UMAX,
  LLVM_INTR_UMIN,
  LLVM_INTR_UMUL_WITH_OVERFLOW,
  LLVM_INTR_USUB_WITH_OVERFLOW,
  LLVM_INTR_VP_ASHR,
  LLVM_INTR_VP_ADD,
  LLVM_INTR_VP_AND,
  LLVM_INTR_VP_FADD,
  LLVM_INTR_VP_FDIV,
  LLVM_INTR_VP_FMUL,
  LLVM_INTR_VP_FNEG,
  LLVM_INTR_VP_FPEXT,
  LLVM_INTR_VP_FPTOSI,
  LLVM_INTR_VP_FPTOUI,
  LLVM_INTR_VP_FPTRUNC,
  LLVM_INTR_VP_FREM,
  LLVM_INTR_VP_FSUB,
  LLVM_INTR_VP_FMA,
  LLVM_INTR_VP_INTTOPTR,
  LLVM_INTR_VP_LSHR,
  LLVM_INTR_VP_LOAD,
  LLVM_INTR_VP_MERGE,
  LLVM_INTR_VP_MUL,
  LLVM_INTR_VP_OR,
  LLVM_INTR_VP_PTRTOINT,
  LLVM_INTR_VP_REDUCE_ADD,
  LLVM_INTR_VP_REDUCE_AND,
  LLVM_INTR_VP_REDUCE_FADD,
  LLVM_INTR_VP_REDUCE_FMAX,
  LLVM_INTR_VP_REDUCE_FMIN,
  LLVM_INTR_VP_REDUCE_FMUL,
  LLVM_INTR_VP_REDUCE_MUL,
  LLVM_INTR_VP_REDUCE_OR,
  LLVM_INTR_VP_REDUCE_SMAX,
  LLVM_INTR_VP_REDUCE_SMIN,
  LLVM_INTR_VP_REDUCE_UMAX,
  LLVM_INTR_VP_REDUCE_UMIN,
  LLVM_INTR_VP_REDUCE_XOR,
  LLVM_INTR_VP_SDIV,
  LLVM_INTR_VP_SEXT,
  LLVM_INTR_VP_SITOFP,
  LLVM_INTR_VP_SREM,
  LLVM_INTR_VP_SELECT,
  LLVM_INTR_VP_SHL,
  LLVM_INTR_VP_STORE,
  LLVM_INTR_EXPERIMENTAL_VP_STRIDED_LOAD,
  LLVM_INTR_EXPERIMENTAL_VP_STRIDED_STORE,
  LLVM_INTR_VP_SUB,
  LLVM_INTR_VP_TRUNC,
  LLVM_INTR_VP_UDIV,
  LLVM_INTR_VP_UITOFP,
  LLVM_INTR_VP_UREM,
  LLVM_INTR_VP_XOR,
  LLVM_INTR_VP_ZEXT,
  LLVM_INTR_VACOPY,
  LLVM_INTR_VAEND,
  LLVM_INTR_VASTART,
  LLVM_INTR_MASKED_COMPRESSSTORE,
  LLVM_INTR_MASKED_EXPANDLOAD,
  LLVM_INTR_MASKED_GATHER,
  LLVM_INTR_MASKED_SCATTER,
  LLVM_INTR_VECTOR_EXTRACT,
  LLVM_INTR_VECTOR_INSERT,
  LLVM_INTR_VECTOR_REDUCE_ADD,
  LLVM_INTR_VECTOR_REDUCE_AND,
  LLVM_INTR_VECTOR_REDUCE_FADD,
  LLVM_INTR_VECTOR_REDUCE_FMAX,
  LLVM_INTR_VECTOR_REDUCE_FMIN,
  LLVM_INTR_VECTOR_REDUCE_FMUL,
  LLVM_INTR_VECTOR_REDUCE_MUL,
  LLVM_INTR_VECTOR_REDUCE_OR,
  LLVM_INTR_VECTOR_REDUCE_SMAX,
  LLVM_INTR_VECTOR_REDUCE_SMIN,
  LLVM_INTR_VECTOR_REDUCE_UMAX,
  LLVM_INTR_VECTOR_REDUCE_UMIN,
  LLVM_INTR_VECTOR_REDUCE_XOR,
  LLVM_INTR_VSCALE,
  SCF_CONDITION,
  SCF_EXECUTE_REGION,
  SCF_FOR,
  SCF_FOREACH_THREAD,
  SCF_IF,
  SCF_INDEX_SWITCH,
  SCF_PARALLEL,
  SCF_FOREACH_THREAD_PERFORM_CONCURRENTLY,
  SCF_REDUCE,
  SCF_REDUCE_RETURN,
  SCF_WHILE,
  SCF_YIELD,
  MEMREF_ASSUME_ALIGNMENT,
  MEMREF_ATOMIC_RMW,
  MEMREF_ATOMIC_YIELD,
  MEMREF_COPY,
  MEMREF_GENERIC_ATOMIC_RMW,
  MEMREF_LOAD,
  MEMREF_ALLOC,
  MEMREF_ALLOCA,
  MEMREF_ALLOCA_SCOPE,
  MEMREF_ALLOCA_SCOPE_RETURN,
  MEMREF_CAST,
  MEMREF_COLLAPSE_SHAPE,
  MEMREF_DEALLOC,
  MEMREF_DIM,
  MEMREF_DMA_START,
  MEMREF_DMA_WAIT,
  MEMREF_EXPAND_SHAPE,
  MEMREF_EXTRACT_ALIGNED_POINTER_AS_INDEX,
  MEMREF_EXTRACT_STRIDED_METADATA,
  MEMREF_GET_GLOBAL,
  MEMREF_GLOBAL,
  MEMREF_PREFETCH,
  MEMREF_RANK,
  MEMREF_REALLOC,
  MEMREF_REINTERPRET_CAST,
  MEMREF_RESHAPE,
  MEMREF_STORE,
  MEMREF_TRANSPOSE,
  MEMREF_VIEW,
  MEMREF_SUBVIEW,
  MEMREF_TENSOR_STORE,
  LL_BR,
  LL_CONCAT,
  LL_COND_BR,
  LL_COND_SCOPE_RET,
  LL_EXTRACT,
  LL_INITIALIZE,
  LL_INLINE_SCOPE,
  LL_GEP,
  LL_RETURN,
  LL_SCOPE,
  LL_SCOPE_RECURSE,
  LL_SCOPE_RET,
  LL_UNINITIALIZED_VAR,
  HL_ACCESS,
  HL_ASSIGN_FADD,
  HL_FADD,
  HL_ASSIGN_ADD,
  HL_ADD,
  HL_LABELADDR,
  HL_ADDRESSOF,
  HL_ALIGNOF_EXPR,
  HL_ALIGNOF_TYPE,
  HL_ASSIGN,
  HL_ASSIGN_BIN_AND,
  HL_BIN_AND,
  HL_BIN_COMMA,
  HL_BIN_LAND,
  HL_BIN_LOR,
  HL_ASSIGN_BIN_OR,
  HL_BIN_OR,
  HL_ASSIGN_BIN_SHL,
  HL_BIN_SHL,
  HL_ASSIGN_BIN_SHR,
  HL_BIN_SHR,
  HL_ASSIGN_BIN_XOR,
  HL_BIN_XOR,
  HL_BUILTIN_BITCAST,
  HL_CSTYLE_CAST,
  HL_CALL,
  HL_CLASS,
  HL_CMP,
  HL_CONST,
  HL_BASE,
  HL_CXXSTRUCT,
  HL_REF,
  HL_DEREF,
  HL_ASSIGN_FDIV,
  HL_FDIV,
  HL_ASSIGN_SDIV,
  HL_SDIV,
  HL_ASSIGN_UDIV,
  HL_UDIV,
  HL_ENUM_CONST,
  HL_ENUM,
  HL_ENUMREF,
  HL_EXPR,
  HL_GNU_EXTENSION,
  HL_FCMP,
  HL_FIELD,
  HL_FUNC,
  HL_FUNCREF,
  HL_GLOBREF,
  HL_BREAK,
  HL_CASE,
  HL_COND,
  HL_COND_YIELD,
  HL_CONTINUE,
  HL_DEFAULT,
  HL_DO,
  HL_EMPTY_DECL,
  HL_FOR,
  HL_GOTO,
  HL_IF,
  HL_LABEL_DECL,
  HL_LABEL,
  HL_SKIP,
  HL_SWITCH,
  HL_TYPE_YIELD,
  HL_VALUE_YIELD,
  HL_VAR,
  HL_WHILE,
  HL_IMPLICIT_CAST,
  HL_INDIRECT_CALL,
  HL_INITLIST,
  HL_LNOT,
  HL_MINUS,
  HL_ASSIGN_FMUL,
  HL_FMUL,
  HL_ASSIGN_MUL,
  HL_MUL,
  HL_NOT,
  HL_PLUS,
  HL_POST_DEC,
  HL_POST_INC,
  HL_PRE_DEC,
  HL_PRE_INC,
  HL_PREDEFINED_EXPR,
  HL_MEMBER,
  HL_ASSIGN_FREM,
  HL_FREM,
  HL_ASSIGN_SREM,
  HL_SREM,
  HL_ASSIGN_UREM,
  HL_UREM,
  HL_RETURN,
  HL_SCOPE,
  HL_SIZEOF_EXPR,
  HL_SIZEOF_TYPE,
  HL_STMT_EXPR,
  HL_STRUCT,
  HL_ASSIGN_FSUB,
  HL_FSUB,
  HL_ASSIGN_SUB,
  HL_SUB,
  HL_SUBSCRIPT,
  HL_THIS,
  HL_TRANSLATION_UNIT,
  HL_TYPE,
  HL_TYPEDEF,
  HL_TYPEOF_EXPR,
  HL_TYPEOF_TYPE,
  HL_UNION,
  HL_UNREACHABLE,
  CORE_BIN_LAND,
  CORE_BIN_LOR,
  CORE_LAZY_OP,
  CORE_SELECT,
  UNSUP_DECL,
  UNSUP_STMT,
};

}  // namespace ir

inline static const char *EnumerationName(ir::OperationKind) {
  return "OperationKind";
}

inline static constexpr unsigned NumEnumerators(ir::OperationKind) {
  return 391;
}

const char *EnumeratorName(ir::OperationKind);

}  // namespace mx
