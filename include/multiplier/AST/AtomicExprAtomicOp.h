// Copyright (c) 2022-present, Trail of Bits, Inc.
// All rights reserved.
//
// This source code is licensed in accordance with the terms specified in
// the LICENSE file found in the root directory of this source tree.

// Auto-generated file; do not modify!

#pragma once

#include "../Compiler.h"

#include <cstdint>

namespace mx {
enum class AtomicExprAtomicOp : unsigned char {
  C11_ATOMIC_INITIALIZER,
  C11_ATOMIC_LOAD,
  C11_ATOMIC_STORE,
  C11_ATOMIC_EXCHANGE,
  C11_ATOMIC_COMPARE_EXCHANGE_STRONG,
  C11_ATOMIC_COMPARE_EXCHANGE_WEAK,
  C11_ATOMIC_FETCH_ADD,
  C11_ATOMIC_FETCH_SUB,
  C11_ATOMIC_FETCH_AND,
  C11_ATOMIC_FETCH_OR,
  C11_ATOMIC_FETCH_XOR,
  C11_ATOMIC_FETCH_NAND,
  C11_ATOMIC_FETCH_MAX,
  C11_ATOMIC_FETCH_MIN,
  ATOMIC_LOAD,
  ATOMIC_LOAD_N,
  ATOMIC_STORE,
  ATOMIC_STORE_N,
  ATOMIC_EXCHANGE,
  ATOMIC_EXCHANGE_N,
  ATOMIC_COMPARE_EXCHANGE,
  ATOMIC_COMPARE_EXCHANGE_N,
  ATOMIC_FETCH_ADD,
  ATOMIC_FETCH_SUB,
  ATOMIC_FETCH_AND,
  ATOMIC_FETCH_OR,
  ATOMIC_FETCH_XOR,
  ATOMIC_FETCH_NAND,
  ATOMIC_ADD_FETCH,
  ATOMIC_SUB_FETCH,
  ATOMIC_AND_FETCH,
  ATOMIC_OR_FETCH,
  ATOMIC_XOR_FETCH,
  ATOMIC_MAX_FETCH,
  ATOMIC_MIN_FETCH,
  ATOMIC_NAND_FETCH,
  SCOPED_ATOMIC_LOAD,
  SCOPED_ATOMIC_LOAD_N,
  SCOPED_ATOMIC_STORE,
  SCOPED_ATOMIC_STORE_N,
  SCOPED_ATOMIC_EXCHANGE,
  SCOPED_ATOMIC_EXCHANGE_N,
  SCOPED_ATOMIC_COMPARE_EXCHANGE,
  SCOPED_ATOMIC_COMPARE_EXCHANGE_N,
  SCOPED_ATOMIC_FETCH_ADD,
  SCOPED_ATOMIC_FETCH_SUB,
  SCOPED_ATOMIC_FETCH_AND,
  SCOPED_ATOMIC_FETCH_OR,
  SCOPED_ATOMIC_FETCH_XOR,
  SCOPED_ATOMIC_FETCH_NAND,
  SCOPED_ATOMIC_ADD_FETCH,
  SCOPED_ATOMIC_SUB_FETCH,
  SCOPED_ATOMIC_AND_FETCH,
  SCOPED_ATOMIC_OR_FETCH,
  SCOPED_ATOMIC_XOR_FETCH,
  SCOPED_ATOMIC_MAX_FETCH,
  SCOPED_ATOMIC_MIN_FETCH,
  SCOPED_ATOMIC_NAND_FETCH,
  SCOPED_ATOMIC_FETCH_MIN,
  SCOPED_ATOMIC_FETCH_MAX,
  OPENCL_ATOMIC_INITIALIZER,
  OPENCL_ATOMIC_LOAD,
  OPENCL_ATOMIC_STORE,
  OPENCL_ATOMIC_EXCHANGE,
  OPENCL_ATOMIC_COMPARE_EXCHANGE_STRONG,
  OPENCL_ATOMIC_COMPARE_EXCHANGE_WEAK,
  OPENCL_ATOMIC_FETCH_ADD,
  OPENCL_ATOMIC_FETCH_SUB,
  OPENCL_ATOMIC_FETCH_AND,
  OPENCL_ATOMIC_FETCH_OR,
  OPENCL_ATOMIC_FETCH_XOR,
  OPENCL_ATOMIC_FETCH_MIN,
  OPENCL_ATOMIC_FETCH_MAX,
  ATOMIC_FETCH_MIN,
  ATOMIC_FETCH_MAX,
  HIP_ATOMIC_LOAD,
  HIP_ATOMIC_STORE,
  HIP_ATOMIC_COMPARE_EXCHANGE_WEAK,
  HIP_ATOMIC_COMPARE_EXCHANGE_STRONG,
  HIP_ATOMIC_EXCHANGE,
  HIP_ATOMIC_FETCH_ADD,
  HIP_ATOMIC_FETCH_SUB,
  HIP_ATOMIC_FETCH_AND,
  HIP_ATOMIC_FETCH_OR,
  HIP_ATOMIC_FETCH_XOR,
  HIP_ATOMIC_FETCH_MIN,
  HIP_ATOMIC_FETCH_MAX,
};

inline static const char *EnumerationName(AtomicExprAtomicOp) {
  return "AtomicExprAtomicOp";
}

inline static constexpr unsigned NumEnumerators(AtomicExprAtomicOp) {
  return 87;
}

MX_EXPORT const char *EnumeratorName(AtomicExprAtomicOp);

} // namespace mx
